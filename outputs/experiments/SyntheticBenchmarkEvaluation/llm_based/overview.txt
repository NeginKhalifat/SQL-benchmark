easy: 1.70
medium: 4.90
hard: 5.00
extra: 10.55
table_1: 9.20
table_2: 9.50
table_3: 3.05
table_4: 0.35
table_5: 0.05
table_6: 0.00
table_7: 0.00
nested: 6.55
all: 22.15
Total Statistics: {'easy': 34, 'medium': 98, 'hard': 100, 'extra': 211, 'table_1': 184, 'table_2': 190, 'table_3': 61, 'table_4': 7, 'table_5': 1, 'table_6': 0, 'table_7': 0, 'nested': 131, 'all': 443}
Error in Parsing: {'employee_hire_evaluation': ["SELECT T1.Name, T3.Name, T2.Number_products FROM employee AS T1 INNER JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID INNER JOIN shop AS T3 ON T3.Shop_ID = T2.Shop_ID WHERE T2.Start_from >= '2000-01-01'", "SELECT T1.Employee_ID, T2.Shop_ID, T3.Start_from FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID JOIN shop AS T3 ON T2.Shop_ID = T3.Shop_ID WHERE T1.Age = 25 AND T2.Is_full_time = 'Yes' ORDER BY T1.Employee_ID DESC LIMIT 100", 'SELECT T1.Name, T2.Number_products FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID JOIN shop AS T3 ON T2.Shop_ID = T3.Shop_ID WHERE T1.Age >= 30 LIMIT 10', 'SELECT T1.Name, T2.Number_products FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID JOIN shop AS T3 ON T2.Shop_ID = T3.Shop_ID WHERE T2.Number_products <= 100 LIMIT 10'], 'real_estate_properties': ["SELECT T1.feature_name FROM Other_Available_Features AS T1 WHERE EXISTS (SELECT T2.feature_id FROM Properties AS T2 WHERE T2.property_type_code = 'Residential')", 'SELECT T3.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code JOIN Other_Property_Features AS T3 ON T1.feature_id = T3.feature_id WHERE T3.feature_id > 100 GROUP BY T3.feature_type_name HAVING COUNT(T3.feature_type_name) > 1 LIMIT 10'], 'dog_kennels': ['SELECT T1.breed_name FROM (SELECT T2.breed_name, T1.dog_id FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code) AS T1 WHERE T1.dog_id NOT IN (SELECT T2.dog_id FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id)', "SELECT T1.breed_name, T2.cost_of_treatment FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T1.breed_code = 'ABC' AND T3.cost_of_treatment > (SELECT AVG(cost_of_treatment) FROM Treatments) AND T3.date_of_treatment > (SELECT date_of_treatment FROM Treatments WHERE treatment_id = 1)", "SELECT T1.breed_name, SUM(T2.cost_of_treatment), SUM(T3.charge_amount) FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code INNER JOIN Charges AS T3 ON T2.dog_id = T3.charge_id WHERE T2.age BETWEEN 2 AND 5 AND T2.gender NOT IN (SELECT gender FROM Dogs WHERE abandoned_yn = 'Y') AND T3.charge_amount > 50 ORDER BY T1.breed_name DESC", "SELECT COUNT(DISTINCT T1.professional_id), T2.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.date_of_treatment <= '2020-01-01'", 'SELECT T1.breed_code, T1.breed_name FROM Breeds AS T1 WHERE T1.breed_code > T2.size_code ORDER BY T1.breed_name DESC'], 'tvshow': ["SELECT MIN(T1.`Share`) FROM (SELECT T1.`Share` FROM `TV_series` AS T1 INNER JOIN `TV_Channel` AS T2 ON T1.`Channel` = T2.`id` WHERE T1.`Air_Date` = 'S2022' AND T1.`Rating` = 'TV-Y7' AND T2.`Country` NOT IN ( SELECT T3.`Country` FROM `TV_Channel` AS T3 WHERE T3.`Language` = 'French' )) AS T ORDER BY T1.`Share` ASC", "SELECT COUNT(T1.id), T2.Title FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel INNER JOIN Cartoon AS T3 ON T2.Channel = T3.Channel WHERE T1.series_name = 'Cartoon'"], 'network_1': ['SELECT T1.name FROM Highschooler AS T1 JOIN Highschooler AS T2 ON T1.ID = T2.ID WHERE T1.grade < T2.grade GROUP BY T1.name HAVING MAX(T2.grade)'], 'course_teach': ['SELECT T1.Course_ID, T2.Name, T3.Grade FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID WHERE EXISTS (SELECT 1 FROM course_arrange WHERE Grade > 80)', 'SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID', 'SELECT T1.Name, SUM(T3.Grade) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T3.Course_ID = T2.Course_ID WHERE T1.Age < 40 LIMIT 10', "SELECT T1.Name, COUNT(T2.Course) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Hometown = 'New York' OR T1.Age > 30 GROUP BY T1.Name ORDER BY COUNT(T2.Course) DESC"], 'orchestra': ['SELECT T1.Name, COUNT(DISTINCT T1.Conductor_ID), COUNT(DISTINCT T2.Conductor_ID) FROM conductor AS T1 JOIN conductor AS T2 ON T1.Age < T2.Age GROUP BY T1.Name HAVING MIN(T1.Age) ORDER BY T1.Age DESC', "SELECT T1.Orchestra, SUM(T3.Official_ratings_(millions)) FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T1.Orchestra_ID = T3.Orchestra_ID WHERE T3.Date > '2020' GROUP BY T1.Orchestra ORDER BY SUM(T3.Official_ratings_(millions)) ASC", 'SELECT T1.Name, COUNT(T2.Performance_ID) FROM conductor AS T1 JOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID WHERE T1.Age BETWEEN 30 AND 50 AND T2.Official_ratings_(millions) > 10', 'SELECT T1.Name, T2.Name FROM orchestra AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Orchestra_ID = 1 LIMIT 10', 'SELECT T1.Name, T2.Official_ratings_(millions) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID WHERE T3.Official_ratings_(millions) IN (SELECT AVG(Official_ratings_(millions)) FROM performance)', 'SELECT DISTINCT T1.Name, COUNT(DISTINCT T3.Show_ID) FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID JOIN performance AS T3 ON T3.Orchestra_ID = T2.Orchestra_ID WHERE T1.Age > 50 AND (T2.Year_of_Founded BETWEEN 1950 AND 1960) AND EXISTS (SELECT * FROM show AS T4 WHERE T4.Performance_ID = T3.Performance_ID AND T4.Attendance > 10000) OR T3.Official_ratings_(millions) > 10'], 'student_transcripts_tracking': ['SELECT T1.first_name, T2.course_name FROM Students AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_id = T2.student_enrolment_id WHERE EXISTS (SELECT T3.student_course_id FROM Transcripts AS T3 WHERE T3.transcript_id = T2.transcript_id) GROUP BY T1.first_name HAVING AVG(T2.course_id) = 1 ORDER BY T1.first_name DESC', "SELECT T1.first_name, T2.transcript_date FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id WHERE T1.cell_mobile_number = '1234567890' OR T2.transcript_date IS NULL OR NOT EXISTS (SELECT 1 FROM Student_Enrolment_Courses AS T3 WHERE T3.student_course_id = T1.student_id)", 'SELECT T2.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.department_id <= 5 ORDER BY T2.degree_summary_name ASC'], 'wta_1': ["SELECT first_name FROM players WHERE (loser_age BETWEEN 30 AND 35 AND player_id = 10) OR (ranking_date = '2001-01-01' OR player_id = 5) ORDER BY first_name DESC", 'SELECT T1.first_name, COUNT(DISTINCT T2.lloser_id) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T1.player_id NOT IN ( SELECT player_id FROM rankings ) ORDER BY T1.first_name ASC', "SELECT T3.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id JOIN rankings AS T3 ON T2.winner_id = T3.player_id WHERE T3.ranking_date < '2020-01-01' ORDER BY T3.ranking_points DESC LIMIT 10"], 'museum_visit': ["SELECT T1.Name, SUM(T3.Num_of_Ticket) FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID JOIN visitor AS T3 ON T2.visitor_ID = T3.ID WHERE T1.Open_Year BETWEEN '2000' AND '2010' OR T3.Age > (SELECT AVG(Age) FROM visitor)", 'SELECT T1.Name, T2.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID JOIN visitor AS T3 ON T2.visitor_ID = T3.ID WHERE T1.Num_of_Staff > 50 AND T3.Age > 18', 'SELECT COUNT(DISTINCT T3.Museum_ID), T2.Num_of_Staff FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID JOIN visitor AS T3 ON T2.visitor_ID = T3.ID WHERE T1.Num_of_Staff != 5 GROUP BY T2.Num_of_Staff', "SELECT COUNT(DISTINCT T2(visitor_ID)), COUNT(T2(visitor_ID)), COUNT(T2(visitor_ID)) FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Open_Year = '1990' AND T2.Num_of_Ticket > 2 AND T2.Total_spent BETWEEN 100 AND 200"], 'concert_singer': ['SELECT T1.Name, T2.Name, T1.Capacity FROM stadium AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Capacity >= 50000 GROUP BY T1.Name HAVING MAX(T1.Capacity) ORDER BY T1.Capacity DESC', "SELECT T3.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T3.concert_ID = T2.concert_ID WHERE EXISTS (SELECT 1 FROM stadium AS T4 JOIN concert AS T5 ON T4.Stadium_ID = T5.Stadium_ID WHERE T5.concert_ID = T3.concert_ID AND T4.Location = 'New York')", "SELECT T1.concert_Name, SUM(T1.Year) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T1.concert_Name != 'Theme' GROUP BY T1.concert_Name HAVING SUM(T1.Year)", "SELECT T1.Name, COUNT(DISTINCT T2.concert_ID), COUNT(DISTINCT T1.concert_ID) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T1.concert_Name = 'Music' AND T2.Singer_ID BETWEEN (SELECT MIN(Singer_ID) FROM singer) AND (SELECT MAX(Singer_ID) FROM singer) ORDER BY T1.concert_Name DESC"], 'poker_player': ['SELECT T1.Name, T2.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height = 180 OR T1.People_ID BETWEEN 1 AND 100 OR T2.Money_Rank = 10 ORDER BY T1.Name ASC', 'SELECT COUNT(DISTINCT T1.Name) AS people_Name, COUNT(T1.Poker_Player_ID) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Best_Finish BETWEEN 1 AND 5 AND T2.Money_Rank > 100 AND T2.Final_Table_Made IS NOT NULL', "SELECT Poker_Player_ID FROM poker_player WHERE Nationality = 'American' ORDER BY Poker_Player_ID ASC LIMIT 5"], 'car_1': ['SELECT T1.CountryName, SUM(T2.Horsepower) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN cars_data AS T3 ON T2.Id = T3.Id WHERE T3.Horsepower > 100 GROUP BY T1.CountryName ORDER BY T1.CountryName ASC', 'SELECT T4.Country, MAX(T5.Horsepower) FROM car_makers AS T4 JOIN model_list AS T5 ON T4.Id = T5.Maker JOIN car_names AS T6 ON T5.Model = T6.Model JOIN cars_data AS T7 ON T6.MakeId = T7.Id WHERE T7.Year >= 2000 GROUP BY T4.Country'], 'singer': ['SELECT T1.Name, MAX(COUNT(DISTINCT T2.Title)), COUNT(DISTINCT T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING MAX(COUNT(DISTINCT T2.Title))', 'SELECT AVG(T1.Net_Worth_Millions), AVG(T2.Sales), AVG(T3.Highest_Position) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN singer AS T3 ON T3.Singer_ID = T2.Singer_ID WHERE T1.Birth_Year BETWEEN 1950 AND 1990'], 'pets_1': ['SELECT T2.PetType FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age > 20 GROUP BY T2.PetType HAVING COUNT(T2.PetID) > 1', 'SELECT T1.Major, COUNT(DISTINCT T2.PetType), COUNT(T1.Age) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.StuID NOT IN ( SELECT StuID FROM Pets ) LIMIT 5', 'SELECT T1.LName, MIN(T2.pet_age) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T3.PetID = T2.PetID GROUP BY T1.LName ORDER BY T1.LName ASC LIMIT 10', 'SELECT S.Student, AVG(P.pet_age) FROM (SELECT T1.StuID AS Student, T2.pet_age FROM Student AS T1 JOIN Has_Pet AS T3 ON T1.StuID = T3.StuID JOIN Pets AS T2 ON T2.PetID = T3.PetID WHERE T1.Age < 20) S GROUP BY S.Student ORDER BY AVG(P.pet_age) DESC', "SELECT T1.LName, T2.PetType FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Fname = 'John' OR T3.PetType = 'Dog' OR T3.PetType IN (SELECT PetType FROM Pets WHERE pet_age > 5)"], 'flight_2': ["SELECT COUNT(DISTINCT Airline), COUNT(DISTINCT Abbreviation) FROM airlines WHERE Country = 'USA' OR Country NOT IN (SELECT Country FROM airports) GROUP BY Airline HAVING MIN(uid)", "SELECT T1.Airline, T2.AirportName, T3.FlightNo FROM airlines AS T1 JOIN airports AS T2 ON T1.uid = T2.uid JOIN flights AS T3 ON T1.Airline = T3.Airline WHERE T2.AirportName <= 'AirportName'", "SELECT T1.Airline, T2.City FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline JOIN airports AS T3 ON T2.SourceAirport = T3.AirportCode WHERE T2.DestAirport = 'JFK' AND T3.City = 'New York' LIMIT 10"], 'voter_1': ['SELECT COUNT(DISTINCT T1.state) , COUNT(DISTINCT T1.contestant_name) , T1.state FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.phone_number <= 9999999999 ORDER BY T1.state DESC LIMIT 10', 'SELECT T1.area_code FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number JOIN AREA_CODE_STATE AS T3 ON T3.state = T1.state WHERE T1.phone_number BETWEEN 100000 AND 999999 OR T1.contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(DISTINCT phone_number) > 10) ORDER BY T1.phone_number ASC', 'SELECT COUNT(DISTINCT T1.area_code), COUNT(DISTINCT T2.contestant_number), COUNT(DISTINCT T3.phone_number) FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number', 'SELECT COUNT(DISTINCT T2.phone_number), T1.state, T2.state FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state GROUP BY T2.state HAVING COUNT(DISTINCT T2.phone_number) <= 5'], 'world_1': ['SELECT T1.Name, T2.Population, T3.SurfaceArea FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode ORDER BY T2.Population DESC LIMIT 10', 'SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE NOT EXISTS (SELECT T4.CountryCode FROM country AS T4 JOIN countrylanguage AS T5 ON T4.Code = T5.CountryCode WHERE T5.Percentage < 50 AND T4.Code = T2.Code) ORDER BY T1.Population DESC']}
