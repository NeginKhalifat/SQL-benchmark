[
    {
        "query": "SELECT COUNT(DISTINCT account_name), COUNT(DISTINCT customer_id), COUNT(*) FROM Accounts WHERE customer_id > 500",
        "question": "For accounts with a customer ID greater than 500, how many unique account names, unique customer IDs, and total accounts are there?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT transaction_amount FROM Financial_Transactions WHERE transaction_amount <= 50 LIMIT 10",
        "question": "What are the transaction amounts of the 11th to 20th smallest transactions of 50 or less in the financial transactions?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT COUNT(T1.transaction_id), T1.account_id FROM Financial_Transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T1.transaction_amount > 1000 AND T1.transaction_type = 'Debit'",
        "question": "What are the account IDs of accounts with debit transaction amounts greater than 1000, and how many such transactions are there for each account?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT customer_first_name, customer_last_name FROM Customers AS T1 INNER JOIN Customers_Cards AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_id >= 10 ORDER BY T1.customer_last_name DESC LIMIT 5",
        "question": "What are the first and last names of the customers with customer id greater than or equal to 10, sorted by last name in descending order, from the 6th to the 10th customer?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT DISTINCT T1.customer_first_name FROM Customers AS T1 WHERE T1.customer_phone = '123456789' OR T1.customer_email = 'abc@example.com' OR NOT EXISTS (SELECT 1 FROM Financial_Transactions AS T2 WHERE T2.account_id = T1.customer_id)",
        "question": "What are the first names of the customers who have either a phone number of '123456789', an email of 'abc@example.com', or no financial transactions recorded?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT T1.customer_id FROM Customers AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE EXISTS (SELECT T3.card_id FROM Customers_Cards AS T3 WHERE T3.customer_id = T1.customer_id) GROUP BY T1.customer_id HAVING COUNT(T1.customer_id) > 1 LIMIT 10",
        "question": "Which customer IDs appear more than once in the customer database and have at least one card, listing the next 10 results?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT COUNT(transaction_id), COUNT(DISTINCT account_id), COUNT(DISTINCT card_id) FROM Financial_Transactions WHERE transaction_amount >= 100",
        "question": "What are the total number of transactions, unique accounts, and unique cards for transactions with an amount of at least 100?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT T1.customer_first_name, COUNT(T1.customer_id) FROM Customers AS T1 WHERE T1.customer_last_name != 'Smith' ORDER BY T1.customer_first_name ASC",
        "question": "What are the first names of customers with the last name not being 'Smith', along with the number of customers for each first name, listed in alphabetical order by first name?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT COUNT(T2.account_name), T1.account_name FROM Accounts AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 5 AND T2.account_id = 3 AND EXISTS (SELECT 1 FROM Accounts AS T3 WHERE T3.account_id = T1.account_id)",
        "question": "How many account names are associated with account id 3 that also have account id 5 in the accounts table?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT account_id FROM Accounts WHERE account_id != 1234",
        "question": "What are the account ids other than 1234?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT T1.customer_first_name FROM Customers AS T1 JOIN Customers_Cards AS T2 ON T1.customer_id = T2.customer_id WHERE T2.card_type_code = 'Visa'",
        "question": "What are the first names of the customers who have a Visa card?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT T1.customer_first_name, COUNT(T2.transaction_id) FROM Customers AS T1 JOIN Financial_Transactions AS T2 ON T1.customer_id = T2.account_id WHERE T1.customer_id = 123 GROUP BY T1.customer_first_name ORDER BY COUNT(T2.transaction_id) DESC",
        "question": "What is the first name of the customer with id 123 and how many financial transactions has this customer made, listed in descending order of transactions?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT SUM(transaction_amount) FROM Financial_Transactions WHERE transaction_amount > 1000",
        "question": "What is the total amount of all the financial transactions greater than $1000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT account_name FROM Accounts WHERE account_id BETWEEN 1000 AND 2000 ORDER BY account_id DESC",
        "question": "What are the account names for accounts with account IDs between 1000 and 2000, listed in descending order by account ID?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_card_transactions"
    },
    {
        "query": "SELECT T1.first_name, T1.last_name FROM actor AS T1 WHERE T1.first_name = 'John' AND T1.last_name = 'Doe' AND NOT EXISTS (SELECT 1 FROM film_actor AS T2 WHERE T2.actor_id = T1.actor_id AND T2.film_id = 1) ORDER BY T1.first_name DESC",
        "question": "What are the names of actors who are not cast in film with id 1, sorted in descending order by first name?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.title) FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T3.return_date != '2006-01-01'",
        "question": "How many unique film titles are there where the return date is not '2006-01-01'?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.first_name) FROM actor AS T1 WHERE T1.actor_id IN (SELECT T2.actor_id FROM film_actor AS T2 WHERE T2.film_id = 1) AND T1.last_name = 'GUINESS' ORDER BY T1.first_name ASC",
        "question": "How many distinct first names are there for actors with the last name 'GUINESS' who have acted in film 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT T1.first_name FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name != 'John'",
        "question": "What are the first names of all staff members excluding John who have an address in the address table?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.store_id), COUNT(T2.inventory_id) FROM store AS T1 JOIN inventory AS T2 ON T1.store_id = T2.store_id",
        "question": "What are the number of unique store ids and the total number of inventory ids in the stores that have inventory?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT film_id, SUM(length) FROM film WHERE film_id IN ( SELECT film_id FROM inventory WHERE store_id = 1 ) GROUP BY film_id HAVING SUM(length) > 100",
        "question": "What are the film IDs and their total lengths for films available in store 1, where the total length is more than 100?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT T1.first_name, COUNT(T2.film_id) FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T1.first_name",
        "question": "What is the first name of each actor and the number of films they acted in?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT COUNT(film_id), SUM(rental_duration) FROM film WHERE rental_duration < ( SELECT AVG(rental_duration) FROM film )",
        "question": "What is the count of films and the total rental duration of all the films with a rental duration less than the average rental duration of all films?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT T1.first_name, T2.first_name FROM staff AS T1 JOIN staff AS T2 ON T1.staff_id < T2.staff_id LIMIT 5",
        "question": "What are the first names of pairs of staff members where the first staff member's id is less than the second staff member's id, starting from the 6th pair?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT T1.first_name, T1.last_name FROM actor AS T1 WHERE T1.actor_id NOT IN (SELECT T2.actor_id FROM film_actor AS T2 WHERE T2.film_id = 1) LIMIT 5",
        "question": "What are the first and last names of the next 5 actors, starting from the 6th, who did not act in film number 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT COUNT(film_id) FROM film",
        "question": "How many films are in the database?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT T1.title FROM film AS T1 WHERE EXISTS (SELECT T2.film_id FROM inventory AS T2 WHERE T2.film_id = T1.film_id) ORDER BY T1.length DESC",
        "question": "What are the titles of films that have copies in the inventory, listed in order of longest to shortest length?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT * FROM film WHERE film_id = 1 AND release_year BETWEEN 2000 AND 2010 AND EXISTS (SELECT * FROM inventory WHERE film_id = film.film_id)",
        "question": "What are the details of the film with id 1, released between 2000 and 2010, and is available in the inventory?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "sakila_1"
    },
    {
        "query": "SELECT FirstName FROM list WHERE Classroom BETWEEN 5 AND 10 AND LastName NOT IN (SELECT LastName FROM teachers WHERE Classroom = 3) AND FirstName = 'John'",
        "question": "What is the first name of students named John in classrooms between 5 and 10, whose last name is not that of a teacher in classroom 3?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Classroom), T2.FirstName FROM list AS T1 JOIN teachers AS T2 ON T1.Classroom = T2.Classroom WHERE T1.Grade = 5 LIMIT 1",
        "question": "How many distinct classrooms have at least one teacher and what is the first name of the teacher in the classroom with the second highest number of teachers of grade 5 students?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "student_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT Classroom), COUNT(LastName), SUM(Grade) FROM list AS T1",
        "question": "What are the number of distinct classrooms, number of students and total grade in the list?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "student_1"
    },
    {
        "query": "SELECT FirstName FROM list WHERE Classroom = (SELECT Classroom FROM teachers WHERE FirstName = 'John') OR Grade BETWEEN 9 AND 12 ORDER BY FirstName ASC",
        "question": "What are the first names of students in John's classroom or students in grades 9 through 12, listed alphabetically by first name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Classroom) FROM list AS T1 JOIN teachers AS T2 ON T1.Classroom = T2.Classroom JOIN list AS T3 ON T2.Classroom = T3.Classroom WHERE T3.Grade <= 12 ORDER BY T3.Classroom DESC",
        "question": "How many distinct classrooms are there for students in grade 12 or below, sorted by classroom in descending order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_1"
    },
    {
        "query": "SELECT FirstName FROM list WHERE Classroom = 10 OR Grade BETWEEN 9 AND 12 OR FirstName = 'John' ORDER BY Grade DESC",
        "question": "What are the first names of the students in classroom 10 or in grades 9 through 12 or named 'John', listed in descending order by grade?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_1"
    },
    {
        "query": "SELECT FirstName FROM list WHERE Classroom <= 1 AND Grade <= 6",
        "question": "What are the first names of students in grade 6 or lower in classroom 1 or lower?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "student_1"
    },
    {
        "query": "SELECT Classroom, AVG(Grade) FROM list WHERE LastName = 'Smith' AND EXISTS (SELECT 1 FROM teachers WHERE teachers.Classroom = list.Classroom AND teachers.LastName = 'Johnson') GROUP BY Classroom LIMIT 10",
        "question": "What are the average grades for the Smith students who are in the same classrooms as teacher Johnson, listed by classroom?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_1"
    },
    {
        "query": "SELECT T1.Classroom FROM teachers AS T1 JOIN list AS T2 ON T1.Classroom = T2.Classroom WHERE T1.LastName != 'Smith' GROUP BY T1.Classroom ORDER BY COUNT(DISTINCT T2.FirstName) ASC",
        "question": "Which classrooms have teachers who are not named Smith, ordered by the fewest number of unique students' first names?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_1"
    },
    {
        "query": "SELECT T1.FirstName, T2.Classroom FROM list AS T1 JOIN teachers AS T2 ON T1.Classroom = T2.Classroom WHERE T1.Grade <= T2.Classroom ORDER BY T1.FirstName DESC",
        "question": "What are the first names of students and their classrooms when the student's grade is less than or equal to the classroom number, sorted by first name in descending order?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "student_1"
    },
    {
        "query": "SELECT T1.Classroom, COUNT(DISTINCT T1.Grade), COUNT(T1.FirstName) FROM list AS T1 WHERE NOT EXISTS (SELECT T2.Classroom FROM teachers AS T2 WHERE T2.Classroom = T1.Classroom) LIMIT 10",
        "question": "What are the classrooms, number of unique grades, and total number of students in classrooms without teachers, listing 10 results with an offset of 10?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_1"
    },
    {
        "query": "SELECT T1.Classroom, MAX(T1.Grade) FROM list AS T1 WHERE EXISTS (SELECT T2.Classroom FROM teachers AS T2 WHERE T1.Classroom = T2.Classroom) GROUP BY T1.Classroom ORDER BY T1.Classroom DESC",
        "question": "In classrooms where there is at least one teacher, what are the classrooms and the highest grades in each, listed in descending order of classroom?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_1"
    },
    {
        "query": "SELECT Classroom FROM list WHERE Grade = 10 AND Classroom NOT IN (SELECT Classroom FROM teachers WHERE FirstName = 'John')",
        "question": "What are the classrooms of 10th graders that are not taught by John?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_1"
    },
    {
        "query": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code > 'A'",
        "question": "What are the template type descriptions for template type codes greater than 'A'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT Template_ID FROM Templates ORDER BY Version_Number DESC",
        "question": "What are the template IDs ordered by the version number in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT COUNT(T1.Template_ID), COUNT(DISTINCT T1.Template_Type_Code), COUNT(DISTINCT T2.Document_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = 'Type1' OR T1.Version_Number BETWEEN 1 AND 10 OR T2.Document_Name = (SELECT T3.Document_Name FROM Documents AS T3 WHERE T3.Document_Description = 'Desc')",
        "question": "What are the counts of total templates, distinct template types, and distinct documents for templates of type 'Type1', or with a version number between 1 and 10, or linked to documents with the same name as the one with description 'Desc'?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT T1.Template_Type_Code, MIN(T2.Template_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY T1.Template_Type_Code ASC",
        "question": "What is the smallest template ID for each template type?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE EXISTS (SELECT 1 FROM Paragraphs AS T3 JOIN Documents AS T4 ON T3.Document_ID = T4.Document_ID WHERE T4.Template_ID = T2.Template_ID AND T3.Paragraph_Text LIKE '%text%') LIMIT 10",
        "question": "What are template type descriptions for the 11th to 20th templates that include the word 'text' in a paragraph of the generated document?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code < 'A' ORDER BY Template_Type_Code ASC",
        "question": "What are the template type codes less than 'A', listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Template_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID WHERE T3.Paragraph_Text = 'Sample Text' AND T2.Document_Name BETWEEN 'A' AND 'Z' AND T1.Version_Number > (SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CODE')",
        "question": "How many unique template IDs are used in documents with names from A to Z that contain the paragraph 'Sample Text' and have a version number greater than the total number of templates of type 'CODE'?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Version_Number > 1 AND T1.Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Type1') ORDER BY T1.Template_ID ASC LIMIT 5",
        "question": "What are the next 5 template IDs of 'Type1' templates with a version number greater than 1, ordered by template ID?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT Template_Type_Description, COUNT(Template_Type_Code) FROM Ref_Template_Types AS T1 GROUP BY Template_Type_Description HAVING Template_Type_Code != 'XXX' LIMIT 5",
        "question": "What are the 5 most common template type descriptions with codes not equal to 'XXX'?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT Template_ID FROM Templates WHERE Version_Number > 1 AND Template_Type_Code = 'TYPE1' AND EXISTS (SELECT 1 FROM Ref_Template_Types WHERE Template_Type_Code = 'TYPE1') ORDER BY Template_ID DESC LIMIT 10",
        "question": "What are the top 10 template IDs in descending order with version number greater than 1, of template type 'TYPE1', given that 'TYPE1' exists as a template type code?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT T1.Template_Details, T2.Template_Details FROM Templates AS T1 JOIN Templates AS T2 ON T1.Template_ID != T2.Template_ID ORDER BY T1.Template_ID DESC",
        "question": "What are the pairs of template details from the templates table, ordered by template id in descending order, excluding pairs with the same template id?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT Template_Type_Code FROM Templates WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code = 'T001')",
        "question": "What are the template type codes in the Templates table that are not T001?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT Template_ID, Version_Number FROM Templates WHERE Template_ID BETWEEN 10 AND 20 OR Template_ID = 30 OR Template_ID < 40 LIMIT 10",
        "question": "What are the template IDs and version numbers of the templates with IDs between 10 and 20, or equal to 30, or less than 40, listing from the 11th to the 20th such templates?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT Template_Type_Description FROM Ref_Template_Types AS T1 WHERE Template_Type_Code > 'A'",
        "question": "What are the template type descriptions for template type codes greater than 'A'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Template_ID), COUNT(*) FROM Templates AS T1 WHERE T1.Template_Type_Code = 'TypeA' AND T1.Version_Number BETWEEN 1 AND 10 AND EXISTS (SELECT * FROM Documents AS T2 WHERE T2.Template_ID = T1.Template_ID) ORDER BY T1.Template_ID DESC",
        "question": "How many unique Template IDs and total Templates of TypeA with a version between 1 and 10 are associated with a document, listed in descending order of Template ID?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Template_ID) , COUNT(DISTINCT T1.Version_Number) , COUNT(DISTINCT T1.Template_Type_Code) FROM Templates AS T1 WHERE T1.Template_Type_Code = 'type1' AND T1.Version_Number > 1 AND T1.Template_ID IN ( SELECT T2.Template_ID FROM Documents AS T2 WHERE T2.Document_Name = 'name1' ) ORDER BY T1.Template_ID ASC",
        "question": "How many unique template IDs, version numbers, and template type codes are there for type1 templates with version number greater than 1 and are used in the 'name1' document, sorted by template ID in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT Template_Type_Description, COUNT(DISTINCT Template_ID) FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Version_Number > 1 GROUP BY T2.Template_Type_Description ORDER BY COUNT(DISTINCT Template_ID) ASC",
        "question": "What are the template type descriptions and the corresponding number of unique template IDs for templates with a version number greater than 1, listed in ascending order by the count of unique template IDs?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT COUNT(DISTINCT Template_ID) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'A') ORDER BY Document_ID ASC",
        "question": "How many unique template IDs are there in the documents that use a template of type 'A', listed in ascending order of document ID?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT COUNT(DISTINCT Documents.Document_Name) , COUNT(DISTINCT Documents.Document_Description) , COUNT(Templates.Template_ID) FROM Documents AS T1 LEFT JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'type1' OR T1.Document_ID BETWEEN 10 AND 20 OR T2.Version_Number > 5 LIMIT 10",
        "question": "What are the counts of unique document names, unique document descriptions, and template IDs for documents that either have templates of type 'type1', or have document IDs between 10 and 20, or have template versions greater than 5, showing 10 records starting from the 11th record?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code BETWEEN 'A' AND 'Z' ORDER BY Template_Type_Description DESC LIMIT 10",
        "question": "What are the last 10 template type descriptions in descending order, excluding the first 10, for template type codes between 'A' and 'Z'?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT Version_Number FROM Templates WHERE Template_ID = ( SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Sample Text' )",
        "question": "What is the version number of the template used by the document containing the paragraph with the text 'Sample Text'?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_Template_Mgt"
    },
    {
        "query": "SELECT T1.Name, T2.Events_number FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T1.Manager = 'John' AND T2.Events_number BETWEEN 10 AND 20 AND T3.Wins_count > 5 LIMIT 10",
        "question": "What are the names of clubs managed by 'John' and the number of events of their players who have participated in between 10 and 20 events and have more than 5 wins, listing from 11th to 20th?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Name) , COUNT(DISTINCT T1.Name) FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Earnings < 100000 ORDER BY T1.Player_ID ASC",
        "question": "How many distinct club names and distinct player names are there for players earning less than 100000, listed in ascending order by player ID?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT COUNT(DISTINCT Captain) FROM club WHERE Manufacturer = 'Nike' OR Sponsor = 'Adidas' OR NOT EXISTS (SELECT 1 FROM player AS T2 WHERE T2.Club_ID = club.Club_ID)",
        "question": "How many distinct captains are there in clubs that either have Nike as their manufacturer, Adidas as their sponsor, or have no players?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING COUNT(Club_ID) > 1)",
        "question": "How many distinct player names are in clubs that have more than one player?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Earnings) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manager != 'John' GROUP BY T1.Name",
        "question": "What are the names of the clubs managed by someone other than John and what are their total earnings?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Player_ID), MIN(T2.Events_number) FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Name HAVING MIN(T2.Events_number) < (SELECT MIN(Events_number) FROM player)",
        "question": "What are the names of clubs with the total number of unique players and the minimum number of events played, where the minimum number of events played is less than the absolute minimum number of events played by any player?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT Name FROM player WHERE Earnings > 5000 OR Name IN (SELECT Name FROM player WHERE Club_ID = 1) OR Name NOT IN (SELECT Name FROM player WHERE Wins_count > 10)",
        "question": "What are the names of the players who earn more than 5000, play for club 1, or have won 10 or fewer times?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT Earnings FROM player WHERE Earnings >= 100 ORDER BY Earnings DESC",
        "question": "What are the earnings of the top players with earnings of at least 100, listed in descending order of earnings?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Player_ID) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manager != 'John' ORDER BY T1.Name ASC LIMIT 10",
        "question": "What are the names of the next 10 clubs managed by someone other than 'John', along with the number of unique players in each club, listed in ascending order by club name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT Name FROM club WHERE Sponsor BETWEEN 'A' AND 'M' ORDER BY Name DESC LIMIT 5",
        "question": "What are the names of the next 5 clubs in descending order whose sponsors' names start with A to M?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T2.Earnings BETWEEN 10000 AND 20000 AND T3.Wins_count > 5",
        "question": "What are the names of the clubs and players who have teammates with more than 5 wins and their own earnings are between 10000 and 20000?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Earnings BETWEEN 10000 AND 20000 OR T2.Wins_count > 5 OR T1.Manufacturer = 'Nike'",
        "question": "What are the names of the clubs and their players who either earn between 10000 and 20000, or have more than 5 wins, or have Nike as their manufacturer?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_3"
    },
    {
        "query": "SELECT Name FROM employee WHERE Age BETWEEN 20 AND 30 OR City IN (SELECT Location FROM shop WHERE District = 'North') OR Name = 'John'",
        "question": "What are the names of employees who are between 20 and 30 years old, or live in the same city as a shop located in the 'North' district, or are named 'John'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Name) FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID JOIN shop AS T3 ON T2.Shop_ID = T3.Shop_ID WHERE T2.Is_full_time = 'yes'",
        "question": "How many distinct employee names are there for full-time employees hired in shops?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT * FROM employee WHERE EXISTS (SELECT 1 FROM evaluation WHERE evaluation.Employee_ID = employee.Employee_ID AND evaluation.Bonus > (SELECT AVG(Bonus) FROM evaluation)) ORDER BY employee.Employee_ID ASC",
        "question": "What information is available for employees who have received at least one bonus greater than the average bonus, listed in ascending order by employee ID?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT Name FROM employee WHERE Age <= 30 ORDER BY Age DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th oldest employees who are 30 years old or younger?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Employee_ID) FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Start_from < '2020-01-01'",
        "question": "What are the names of employees and the number of times they were hired before 2020?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Shop_ID) FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Shop_ID) > 1 ORDER BY T1.Name ASC",
        "question": "Which employees have worked in more than one shop, and list them in ascending order by name along with the number of distinct shops they have worked in?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT T2.Name, SUM(T1.Age) FROM employee AS T1 JOIN shop AS T2 ON T1.City = T2.Location GROUP BY T2.Name HAVING SUM(T1.Age) > 50 LIMIT 10",
        "question": "What are the names of shops in the same city as employees with a total age of more than 50, listed from the 11th to the 20th shop?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT COUNT(T1.Employee_ID), SUM(T3.Number_products) FROM employee AS T1 INNER JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID INNER JOIN shop AS T3 ON T2.Shop_ID = T3.Shop_ID WHERE T1.Age BETWEEN 20 AND 30",
        "question": "How many employees between 20 and 30 years old are there, and what is the total number of products in the shops they work at?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT COUNT(T1.Age) FROM employee AS T1 WHERE T1.City != 'New York'",
        "question": "How many employees are not from New York?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT Employee_ID, SUM(Bonus) FROM evaluation GROUP BY Employee_ID HAVING SUM(Bonus) > 10000 OR Employee_ID BETWEEN 1 AND 10 OR Employee_ID = 5 ORDER BY Employee_ID ASC",
        "question": "What are the employee IDs and their total bonuses for employees who have a total bonus greater than 10,000 or have an employee ID between 1 and 10 or have an employee ID of 5, sorted by employee ID in ascending order?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT Name FROM employee WHERE Age != 25 ORDER BY Age ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th youngest employees who are not 25 years old?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT Name FROM employee WHERE Age <= 25",
        "question": "What are the names of employees who are 25 years old or younger?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Number_products) FROM employee AS T1 JOIN hiring AS T3 ON T1.Employee_ID = T3.Employee_ID JOIN shop AS T2 ON T3.Shop_ID = T2.Shop_ID WHERE T1.Age < 30 ORDER BY T1.Name ASC",
        "question": "What is the total number of products in the shops where each employee under 30 works, listed in ascending order by employee name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "employee_hire_evaluation"
    },
    {
        "query": "SELECT Days_held FROM wrestler WHERE Wrestler_ID = 1 ORDER BY Days_held DESC",
        "question": "What are the most days wrestler with id 1 has held a title, in order from most to least days?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "wrestler"
    },
    {
        "query": "SELECT Name, Days_held, Location FROM wrestler WHERE Wrestler_ID IN (SELECT Wrestler_ID FROM Elimination WHERE Eliminated_By = 'John' AND Team = 'Team A' AND Time = '10:00') ORDER BY Days_held DESC",
        "question": "What are the names, days held, and locations of the wrestlers eliminated by John from Team A at 10:00, listed in order of days held in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "wrestler"
    },
    {
        "query": "SELECT Name FROM wrestler WHERE Days_held = '1 day' OR Reign = '1' OR Wrestler_ID BETWEEN 1 AND 10 LIMIT 10",
        "question": "What are the names of wrestlers who held the title for one day or had one reign or have a wrestler id between 1 and 10, showing results 11 to 20?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "wrestler"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Elimination_ID) FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T1.Name HAVING COUNT(T2.Elimination_ID) > 1",
        "question": "Which wrestlers have more than one elimination?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "wrestler"
    },
    {
        "query": "SELECT T1.Name FROM wrestler AS T1 WHERE NOT EXISTS (SELECT 1 FROM Elimination AS T2 WHERE T1.Wrestler_ID = T2.Wrestler_ID) GROUP BY T1.Name ORDER BY COUNT(DISTINCT T1.Reign) ASC",
        "question": "What are the names of wrestlers who have never been eliminated, listed in ascending order by the number of distinct reigns?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "wrestler"
    },
    {
        "query": "SELECT Name FROM wrestler WHERE Days_held >= 100 LIMIT 10",
        "question": "What are the names of the 11th to 20th wrestlers who have held the title for at least 100 days?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "wrestler"
    },
    {
        "query": "SELECT MAX(Days_held) FROM wrestler WHERE Reign > '1'",
        "question": "What is the maximum number of days a wrestler has held a title for more than one reign?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "wrestler"
    },
    {
        "query": "SELECT SUM(vendor_requested_price) FROM Properties",
        "question": "What is the total of the vendor requested prices for all properties?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "real_estate_properties"
    },
    {
        "query": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_id = 1 OR T2.feature_name = 'feature' OR NOT EXISTS (SELECT 1 FROM Other_Property_Features AS T3 WHERE T3.feature_id = T2.feature_id)",
        "question": "What are the feature type names for features with id 1 or name 'feature' or that are not included in any property features?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "real_estate_properties"
    },
    {
        "query": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code >= 'type_code'",
        "question": "What are the feature type names for feature type codes greater than or equal to 'type_code'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "real_estate_properties"
    },
    {
        "query": "SELECT feature_id FROM Other_Available_Features WHERE feature_type_code NOT IN (SELECT feature_type_code FROM Ref_Feature_Types) ORDER BY feature_id ASC",
        "question": "What are the IDs of the other available features that have a feature type code not found in the reference feature types, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "real_estate_properties"
    },
    {
        "query": "SELECT SUM(T1.vendor_requested_price) FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id WHERE T1.agreed_selling_price > T1.vendor_requested_price",
        "question": "What is the total vendor requested price of the properties where the agreed selling price is higher than the vendor requested price?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "real_estate_properties"
    },
    {
        "query": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code >= 'P' AND feature_type_name >= 'A'",
        "question": "What are the feature type names for feature types that have codes greater than or equal to 'P' and names starting with 'A' or later in the alphabet?'",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "real_estate_properties"
    },
    {
        "query": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code <= 10 ORDER BY feature_type_name DESC",
        "question": "What are the names of the feature types with a code of 10 or less, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "real_estate_properties"
    },
    {
        "query": "SELECT COUNT(feature_id) FROM Other_Available_Features WHERE feature_type_code NOT IN ( SELECT feature_type_code FROM Ref_Feature_Types ) LIMIT 5",
        "question": "What are the counts of the 6th to 10th feature ids in other available features that do not match any feature type codes in the reference feature types? ",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "real_estate_properties"
    },
    {
        "query": "SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_id < 100",
        "question": "What are the names of feature types for features with IDs less than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "real_estate_properties"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Artist_ID) FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T1.Year < 2000 LIMIT 5",
        "question": "What are the next 5 counts of distinct artists who participated in exhibitions before the year 2000?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT T1.Name, T3.Date FROM artist AS T1 JOIN exhibition AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN exhibition_record AS T3 ON T2.Exhibition_ID = T3.Exhibition_ID WHERE T2.Ticket_Price > 10 AND T1.Country = 'USA'",
        "question": "What are the names of the USA artists and exhibition dates for exhibitions in the USA with a ticket price greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT AVG(T1.Attendance) FROM exhibition_record AS T1 WHERE T1.Exhibition_ID NOT IN ( SELECT T2.Exhibition_ID FROM exhibition AS T2 WHERE T2.Year < 2010 ) LIMIT 10",
        "question": "What is the average attendance of the next 10 exhibitions that took place after 2009?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT AVG(e1.Attendance), SUM(e2.Ticket_Price) FROM exhibition_record e1 JOIN exhibition e2 ON e1.Exhibition_ID = e2.Exhibition_ID JOIN artist a ON e2.Artist_ID = a.Artist_ID WHERE a.Age >= 50",
        "question": "What is the average attendance and total ticket price for exhibitions by artists aged 50 or older?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT Artist_ID FROM artist WHERE Year_Join != 2010 ORDER BY Age DESC",
        "question": "Which artist IDs are of artists who joined in years other than 2010, listed in descending order of their age?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT * FROM exhibition WHERE Artist_ID = 10 AND Ticket_Price = 20 LIMIT 5",
        "question": "What are the details of exhibitions by the artist with ID 10 and ticket price 20, from the 6th to the 10th result?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT T1.Name, COUNT(T1.Artist_ID) FROM artist AS T1 WHERE T1.Age >= 20 GROUP BY T1.Name LIMIT 10",
        "question": "What are the names of artists aged 20 and above, along with the number of their corresponding artist IDs, for the 11th to 20th results?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT Artist_ID FROM exhibition WHERE Artist_ID IN (SELECT Artist_ID FROM artist WHERE Age > (SELECT AVG(Age) FROM artist))",
        "question": "What are the IDs of the artists who are older than the average age of all artists and have participated in an exhibition?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Name) FROM artist AS T1",
        "question": "How many unique artist names are there?",
        "iter": 4,
        "flag": true,
        "hardness": "easy",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT Name FROM artist WHERE Age >= 30",
        "question": "What are the names of the artists who are 30 years old or older?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT MAX(T1.Ticket_Price), T2.Name FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID GROUP BY T2.Name ORDER BY T1.Ticket_Price DESC LIMIT 5",
        "question": "What are the names of the top 6th to 10th artists with the highest maximum ticket prices for their exhibitions?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT T1.Name FROM artist AS T1 JOIN exhibition AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE EXISTS (SELECT T3.Date FROM exhibition_record AS T3 WHERE T3.Exhibition_ID = T2.Exhibition_ID AND T3.Attendance > 1000)",
        "question": "What are the names of the artists who have had at least one exhibition with an attendance of more than 1000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Artist_ID) FROM artist AS T1 JOIN artist AS T2 ON T1.Artist_ID < T2.Artist_ID ORDER BY T1.Name ASC",
        "question": "What is the name of each artist and the number of artists who have a higher artist id, listed in ascending order by artist name?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT Artist_ID FROM artist WHERE Artist_ID NOT IN (SELECT Artist_ID FROM exhibition WHERE Artist_ID = 10) ORDER BY Age DESC",
        "question": "What are the IDs of all artists, excluding those who have participated in an exhibition with artist ID 10, listed in descending order of their age?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "theme_gallery"
    },
    {
        "query": "SELECT Student_Answer_ID FROM Student_Answers WHERE Student_ID BETWEEN 1 AND 10 OR Student_ID IN (SELECT Student_ID FROM Students WHERE Student_ID = 5) LIMIT 10",
        "question": "What are the student answer IDs from the 11th to the 20th student whose IDs are between 1 and 10 or equal to 5?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT T1.First_Name, COUNT(T1.Student_ID) FROM Students AS T1 GROUP BY T1.First_Name",
        "question": "What is the number of students for each first name?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT T1.First_Name FROM Students AS T1 WHERE T1.Middle_Name < 'a' ORDER BY Student_ID DESC",
        "question": "What are the first names of students with middle names that start with a letter that comes before 'a' in the alphabet, listed in descending order by student ID?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT First_Name, Middle_Name FROM Students",
        "question": "What are the first and middle names of students?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT T1.Student_ID, T1.First_Name FROM Students AS T1 WHERE EXISTS (SELECT 1 FROM Student_Answers AS T2 WHERE T1.Student_ID = T2.Student_ID GROUP BY T2.Exam_ID HAVING COUNT(T2.Question_ID) > 1) ORDER BY T1.Student_ID ASC",
        "question": "What are the IDs and first names of students who have answered more than one question in at least one exam, sorted by student ID in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT COUNT(DISTINCT Student_ID) FROM Students AS Students1",
        "question": "How many unique students are there in the students list?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT Student_ID FROM Students WHERE Student_ID != 100 ORDER BY Student_ID ASC",
        "question": "What are all student IDs in ascending order excluding the student with ID 100?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT COUNT(T1.Question_ID), COUNT(T2.Question_ID), COUNT(T3.Question_ID) FROM Questions AS T1 JOIN Questions_in_Exams AS T2 ON T1.Question_ID = T2.Question_ID JOIN Student_Answers AS T3 ON T2.Question_ID = T3.Question_ID WHERE T2.Exam_ID != T3.Exam_ID",
        "question": "How many questions in the questions table, questions in exams table, and student answers table have a matching question id but are from different exams?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT Student_ID FROM Students WHERE Student_ID != 1",
        "question": "What are the student IDs other than 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT COUNT(T2.Question_ID), SUM(T1.Exam_ID) FROM Exams AS T1 JOIN Questions_in_Exams AS T2 ON T1.Exam_ID = T2.Exam_ID WHERE T1.Subject_Code != 'Math'",
        "question": "What is the total number of questions and the sum of exam IDs for non-math exams?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT Student_Answer_Text FROM Student_Answers WHERE Student_Answer_ID NOT IN (SELECT Student_Answer_ID FROM Student_Assessments WHERE Valid_Answer_ID = 1) AND Student_Answer_Text = 'Text'",
        "question": "What student answers are 'Text' but have no matching valid answers with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT Student_Answer_ID FROM Student_Answers WHERE Exam_ID = 1 AND Student_ID = 1 AND NOT EXISTS (SELECT 1 FROM Student_Assessments AS T1 WHERE T1.Student_Answer_ID = Student_Answers.Student_Answer_ID AND T1.Valid_Answer_ID BETWEEN 10 AND 20)",
        "question": "What are the student answer IDs for exam ID 1 and student ID 1 where there is no corresponding valid answer ID between 10 and 20?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT Valid_Answer_ID FROM Valid_Answers WHERE Question_ID = 1 LIMIT 10",
        "question": "What are the valid answer IDs for the question with ID 1, starting from the 11th valid answer?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.First_Name), COUNT(DISTINCT T1.Last_Name) FROM Students AS T1",
        "question": "What are the counts of unique first names and last names of all the students?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "online_exams"
    },
    {
        "query": "SELECT Railway FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train WHERE Name = 'Suburban train' AND From = 'St. Petersburg')",
        "question": "What are the railways that the suburban train from St. Petersburg does not serve?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "railway"
    },
    {
        "query": "SELECT T1.Railway_ID FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Train_ID = 123",
        "question": "What is the railway ID of the railway that operates the train with ID 123?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "railway"
    },
    {
        "query": "SELECT T1.Railway_ID FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID JOIN railway_manage AS T3 ON T3.Railway_ID = T1.Railway_ID WHERE EXISTS ( SELECT 1 FROM manager AS T4 WHERE T4.Manager_ID = T3.Manager_ID )",
        "question": "Which railway IDs are managed by at least one existing manager?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "railway"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Name) FROM railway AS T1 LEFT JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name IS NOT NULL AND T1.Railway_ID NOT IN (SELECT Railway_ID FROM railway_manage)",
        "question": "How many unique train names are there for railways that are not managed and have trains?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "railway"
    },
    {
        "query": "SELECT COUNT(Builder) , COUNT(DISTINCT Built) FROM railway WHERE Builder != 'USA'",
        "question": "How many builders are there and how many unique built values are there for railways that are not built by 'USA'?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "railway"
    },
    {
        "query": "SELECT LEVEL FROM manager LIMIT 5",
        "question": "What are the levels of the managers ranked from 6th to 10th?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "railway"
    },
    {
        "query": "SELECT T1.Railway, T2.Name FROM railway AS T1 JOIN manager AS T2 ON T1.Railway_ID = T2.Manager_ID WHERE T2.Age < 50 ORDER BY T2.Age DESC",
        "question": "What are the names of the railways and their corresponding managers under the age of 50, listed in descending order of the manager's age?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "railway"
    },
    {
        "query": "SELECT Railway FROM railway WHERE Builder = 'Builder1' OR Location = 'Location1' ORDER BY Railway_ID DESC LIMIT 10",
        "question": "What are the names of the next 10 railways with the highest railway id that were either built by 'Builder1' or are located in 'Location1'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "railway"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Railway_ID), COUNT(T1.Train_ID) FROM train AS T1 WHERE T1.Railway_ID IN (SELECT T2.Railway_ID FROM railway AS T2 WHERE T2.Railway = 'Main')",
        "question": "What are the number of unique railways and total number of trains on the main railway?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "railway"
    },
    {
        "query": "SELECT AVG(T1.Age), T2.Railway FROM manager AS T1 JOIN railway_manage AS T2 ON T1.Manager_ID = T2.Manager_ID WHERE T1.Country = 'USA' OR T2.Railway_ID BETWEEN 100 AND 200 OR T1.Level > 3 LIMIT 5",
        "question": "What are the average ages of managers from the USA, or those managing railways with IDs between 100 and 200, or those with a level greater than 3, along with the corresponding railway names, for the 6th to 10th results?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "railway"
    },
    {
        "query": "SELECT T2.Builder, MAX(T1.Arrival) FROM train AS T1 JOIN railway AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T1.Train_Num = '123' OR T1.From = 'New York' OR T1.Arrival BETWEEN (SELECT MIN(Arrival) FROM train) AND (SELECT MAX(Arrival) FROM train) GROUP BY T2.Builder",
        "question": "What is the latest arrival time for each builder of the railway for the train number '123', trains from 'New York', or trains that arrived between the earliest and latest arrival times of all trains?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "railway"
    },
    {
        "query": "SELECT T1.song_name FROM song AS T1 WHERE T1.rating BETWEEN 1 AND 10 OR T1.rating = 5 OR EXISTS (SELECT T2.artist_name FROM artist AS T2 WHERE T2.artist_name = T1.artist_name) LIMIT 10",
        "question": "What are the song names with ratings between 1 and 10, or a rating of exactly 5, or by artists that exist in the artist table, skipping the first 10 results?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_1"
    },
    {
        "query": "SELECT song_name FROM song AS T1 ORDER BY rating DESC LIMIT 1",
        "question": "What is the second highest rated song name?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_1"
    },
    {
        "query": "SELECT * FROM song WHERE rating < 10 LIMIT 5",
        "question": "What are the details of the next 5 songs with a rating less than 10?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_1"
    },
    {
        "query": "SELECT T1.artist_name, T2.f_id FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name JOIN song AS T3 ON T3.f_id = T2.f_id WHERE T1.country = 'USA' OR T3.rating BETWEEN 4 AND 5 OR T1.gender = 'Male'",
        "question": "What are the artist names and song ids of artists from the USA, or artists with a song rated between 4 and 5, or male artists?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_1"
    },
    {
        "query": "SELECT artist_name FROM artist ORDER BY artist_name ASC",
        "question": "List all artist names in alphabetical order.",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "music_1"
    },
    {
        "query": "SELECT T1.g_name FROM genre AS T1 WHERE T1.rating = 'PG' AND T1.most_popular_in = 'USA' AND T1.g_name NOT IN (SELECT T2.preferred_genre FROM artist AS T2) ORDER BY T1.rating DESC",
        "question": "What are the names of genres in the USA with a PG rating that are not preferred by any artist, listed in descending order of rating?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.artist_name), T1.g_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is JOIN artist AS T3 ON T2.artist_name = T3.artist_name WHERE T1.rating > 'Poor' ORDER BY COUNT(DISTINCT T2.artist_name) ASC",
        "question": "What is the number of unique artists in each genre with a rating higher than 'Poor', listed in ascending order by the number of unique artists?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_1"
    },
    {
        "query": "SELECT T1.g_name, COUNT(T2.song_name) FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.rating <= 5 GROUP BY T1.g_name",
        "question": "What are the genres with a rating of 5 or less and how many songs are in each of these genres?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "music_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.artist_name) AS count FROM song AS T1 JOIN artist AS T2 ON T1.artist_name = T2.artist_name WHERE T1.rating > 4 AND T1.releasedate BETWEEN '2020-01-01' AND '2020-12-31' AND T2.country = 'USA'",
        "question": "How many unique artists from the USA released songs with a rating higher than 4 in the year 2020?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.g_name), COUNT(DISTINCT T1.rating) FROM genre AS T1 WHERE T1.g_name NOT IN (SELECT T2.preferred_genre FROM artist AS T2)",
        "question": "How many distinct genres and ratings are there for genres that are not preferred by any artist?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT artist_name), SUM(file_size) FROM files WHERE duration > 10",
        "question": "What is the number of distinct artists and the total file size of songs with a duration greater than 10 seconds?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_1"
    },
    {
        "query": "SELECT T1.Book_Title, AVG(T2.Budget_million) FROM book_club AS T1 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id JOIN movie AS T2 ON T3.movie_id = T2.movie_id GROUP BY T1.Book_Title HAVING T1.book_club_id NOT IN (SELECT book_club_id FROM book_club WHERE Result = 'Passed') LIMIT 1",
        "question": "What book title, excluding those with a 'Passed' result, has the second highest average movie budget?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT T2.Company_name FROM book_club AS T1 JOIN culture_company AS T2 ON T1.book_club_id = T2.book_club_id WHERE T1.Year BETWEEN 2015 AND 2020 AND T1.Author_or_Editor = 'John Doe'",
        "question": "What are the culture company names associated with book clubs that had John Doe as the author or editor between 2015 and 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT T1.Company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.Author_or_Editor = 'Author1' AND T2.Book_Title = 'Book1' AND T2.Publisher BETWEEN 'Publisher1' AND 'Publisher2'",
        "question": "What are the names of culture companies associated with the book club having Author1 as the author or editor of Book1 with the publisher name between Publisher1 and Publisher2?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT MAX(T2.Budget_million) FROM culture_company AS T1 JOIN movie AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Director = 'Steven Spielberg' AND T1.Group_Equity_Shareholding BETWEEN 50 AND 100 AND T2.Gross_worldwide > 500 ORDER BY T2.Budget_million DESC",
        "question": "What is the highest budget of movies directed by Steven Spielberg, produced by a culture company with a group equity shareholding between 50 and 100, and with worldwide gross revenue over 500 million?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT T1.Company_name, T3.Title FROM culture_company AS T1 JOIN movie AS T3 ON T1.movie_id = T3.movie_id JOIN book_club AS T2 ON T2.book_club_id = T1.book_club_id WHERE T2.Year = 2000 AND T2.Author_or_Editor = 'Author1' AND T3.movie_id IN (SELECT movie_id FROM movie WHERE Year > 2000)",
        "question": "What are the names of the companies and their corresponding movie titles for the books written by Author1 in the year 2000, and movies released after 2000?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT T1.Title AS new_name FROM movie AS T1 WHERE T1.Budget_million > 200 AND T1.Gross_worldwide BETWEEN 400 AND 600 OR T1.Director = 'James'",
        "question": "What are the movie titles where the budget is over 200 million and the worldwide gross is between 400 and 600 million, or the director is James?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT T1.Company_name, COUNT(T2.movie_id) FROM culture_company AS T1 JOIN movie AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Budget_million != 0 GROUP BY T1.Company_name HAVING COUNT(T2.movie_id) > 1",
        "question": "What are the names of companies with more than one movie and their corresponding number of movies, excluding movies with zero budget?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT MAX(COUNT(DISTINCT Book_Title)) FROM book_club WHERE Year <= 2000",
        "question": "What is the maximum number of distinct book titles in a year on or before 2000?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT T1.Book_Title, T2.Title FROM book_club AS T1 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id JOIN movie AS T2 ON T3.movie_id = T2.movie_id WHERE T1.Year <= 2000 AND T2.Budget_million <= 100",
        "question": "What are the book titles from book clubs formed before or in 2000 and their corresponding movie titles with budgets less than or equal to 100 million?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT MIN(T1.Budget_million) FROM movie AS T1 WHERE T1.movie_id = 10 OR EXISTS (SELECT T2.movie_id FROM culture_company AS T2 WHERE T2.movie_id = T1.movie_id) GROUP BY T1.movie_id ORDER BY T1.movie_id DESC",
        "question": "What is the lowest budget for the movie with id 10 or movies that have cultural company, ordered by movie id in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT T1.Author_or_Editor, T1.Book_Title FROM book_club AS T1 WHERE T1.Year >= 1980 AND T1.Category = 'Fiction'",
        "question": "What are the authors or editors and book titles of fiction books published in 1980 or later in the book club?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT COUNT(DISTINCT movie_id) FROM culture_company WHERE movie_id <= 10",
        "question": "How many distinct movies with a movie id less than or equal to 10 are associated with a culture company?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT Company_name AS New_Table_Name FROM culture_company WHERE Company_name >= 'A' ORDER BY Company_name ASC",
        "question": "What are all the culture companies whose name starts with the letter 'A' or later, listed in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT T1.Company_name, T2.Budget_million, T3.Book_Title FROM culture_company AS T1 JOIN movie AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T1.book_club_id = T3.book_club_id WHERE T2.Budget_million < 100 LIMIT 10",
        "question": "What are the company names, budgets, and book titles for the 11th to 20th movies with budgets under 100 million?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT book_club_id FROM book_club WHERE Book_Title = 'book_title' OR Year BETWEEN 1900 AND 2000 OR EXISTS (SELECT 1 FROM culture_company WHERE book_club_id = book_club.book_club_id AND Type = 'type') LIMIT 10",
        "question": "What are the next 10 book club ids that either have a book title of 'book_title', were published between 1900 and 2000, or are associated with a culture company of type 'type'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT Title FROM movie WHERE movie_id NOT IN (SELECT movie_id FROM culture_company WHERE book_club_id = 'book_club1') AND Budget_million BETWEEN 50 AND 100 AND movie_id IN (SELECT movie_id FROM culture_company WHERE Type = 'type1')",
        "question": "What are the titles of movies with a budget between 50 million and 100 million that have a type1 company but are not associated with book club1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "culture_company"
    },
    {
        "query": "SELECT SUM(Population) FROM county WHERE County_name != 'New York' ORDER BY County_Id DESC",
        "question": "What is the total population of all counties excluding 'New York', listed in descending order of county id?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "election"
    },
    {
        "query": "SELECT COUNT(DISTINCT County_name), COUNT(DISTINCT Population) FROM county WHERE County_name = 'CountyA' OR County_Id BETWEEN 1 AND 100 OR Population > 500000 LIMIT 5",
        "question": "What are the counts of distinct county names and distinct populations for counties that have a name of 'CountyA' or have an id between 1 and 100 or have a population greater than 500000, limited to 5 results after the first 5 results?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "election"
    },
    {
        "query": "SELECT MIN(Population) FROM county WHERE County_Id >= 1000",
        "question": "What is the minimum population of counties with a county id greater than or equal to 1000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "election"
    },
    {
        "query": "SELECT COUNT(DISTINCT County_Id), COUNT(DISTINCT County_name), COUNT(Population) FROM county AS e",
        "question": "How many unique county ids and county names are there, and what is the total count of population values?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "election"
    },
    {
        "query": "SELECT COUNT(County_Id) FROM county WHERE Population >= 1000",
        "question": "How many counties have a population of at least 1000?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "election"
    },
    {
        "query": "SELECT COUNT(Population) AS population_count, AVG(Population) AS population_avg FROM county AS election WHERE County_name != 'Albany'",
        "question": "What is the count and average of the population in all counties except Albany?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "election"
    },
    {
        "query": "SELECT County_name FROM county AS T1 WHERE County_name = 'CountyA' ORDER BY County_name ASC",
        "question": "What is the county name for 'CountyA' ordered alphabetically?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "election"
    },
    {
        "query": "SELECT County_name FROM county WHERE Population > 100000 LIMIT 1",
        "question": "What is the name of the second most populous county?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "election"
    },
    {
        "query": "SELECT MAX(Population) FROM county AS T1 WHERE County_Id <= 10 LIMIT 1",
        "question": "What is the second highest population among the first 10 counties?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "election"
    },
    {
        "query": "SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'AMC' AND T1.Rating >= 4 ORDER BY T1.Title ASC",
        "question": "What are the titles of movies rated 4 or higher that are shown at AMC theaters, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT T1.Title, T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Code != T2.Code",
        "question": "What are the titles of movies and names of movie theaters where the movie code does not match the theater's movie code?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT Movie, COUNT(Movie) FROM MovieTheaters WHERE Movie >= 1 GROUP BY Movie",
        "question": "How many theaters are showing each movie?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT M1.Title, M2.Name, M3.Rating FROM Movies AS M1 JOIN MovieTheaters AS M2 ON M1.Code = M2.Movie JOIN Movies AS M3 ON M2.Movie = M3.Code WHERE M2.Code = 1 LIMIT 10",
        "question": "What are the titles and corresponding theater names and ratings of movies shown at theater code 1, listing from the 11th to the 20th results?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT T1.Title, T1.Rating FROM Movies AS T1 WHERE T1.Code <= 10",
        "question": "What are the titles and ratings of the movies with a code less than or equal to 10?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT Name FROM MovieTheaters WHERE Movie = ( SELECT Code FROM Movies WHERE Title = 'Inception' ) OR Name = 'AMC Empire 25'",
        "question": "What are the names of the movie theaters showing 'Inception' or 'AMC Empire 25'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT T1.Title, MIN(T1.Rating) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie GROUP BY T1.Title HAVING T2.Code > 2",
        "question": "What is the title and the lowest rating for each movie shown in theaters with a code greater than 2?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT M.Title FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie WHERE EXISTS (SELECT 1 FROM MovieTheaters AS MT2 WHERE MT2.Name = 'Theater1' AND MT2.Code = MT.Code)",
        "question": "What are the movie titles shown at theater 'Theater1'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT Title FROM Movies WHERE Code = 100 LIMIT 10",
        "question": "What are the titles of the movies with the code 100, starting from the 11th?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT T1.Title, COUNT(DISTINCT T2.Code) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating < 'PG'",
        "question": "What are the titles of movies rated less than 'PG' and the number of distinct movie codes for each?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT Title, Rating FROM Movies WHERE Rating > 5 ORDER BY Rating DESC",
        "question": "What are the titles and ratings of movies rated higher than 5, listed in descending order of rating?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT T1.Title, COUNT(T2.Code) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G' OR T1.Code NOT IN (SELECT Movie FROM MovieTheaters) LIMIT 10",
        "question": "What are the titles of G-rated movies or movies not shown in any theater, along with the number of theaters showing them, listed 11th to 20th?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT SUM(T1.Code), COUNT(T1.Code), MIN(T1.Code) FROM MovieTheaters AS T1 WHERE T1.Code BETWEEN 10 AND 15",
        "question": "What is the total, count, and minimum code of movie theaters with codes between 10 and 15?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT T1.Title FROM Movies AS T1 JOIN Movies AS T2 ON T1.Code = T2.Code WHERE T1.Code IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL) ORDER BY T1.Title ASC",
        "question": "What are the titles of movies shown in theaters, listed in ascending order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT T1.Title FROM Movies AS T1 WHERE T1.Rating > 'PG13' ORDER BY T1.Code ASC LIMIT 10",
        "question": "What are the titles of the next 10 movies with a rating higher than PG13, listed in ascending order by movie code?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT T1.Title, COUNT(T2.Name) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie JOIN MovieTheaters AS T3 ON T2.Code = T3.Code WHERE T1.Rating != 'G'",
        "question": "What are the titles of non-G rated movies and how many theaters show each of them?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "movie_2"
    },
    {
        "query": "SELECT SUM(Gross_in_dollar), AVG(Gross_in_dollar) FROM film WHERE Studio != 'MGM'",
        "question": "What is the total and average gross in dollars of all films not produced by MGM?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "film_rank"
    },
    {
        "query": "SELECT T1.Title, T2.Year FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Low_Estimate < 1000000",
        "question": "What are the titles of films with market estimation low estimates less than 1,000,000 and their respective estimation years?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "film_rank"
    },
    {
        "query": "SELECT T1.Title, COUNT(DISTINCT T3.Country) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID JOIN market AS T3 ON T2.Market_ID = T3.Market_ID WHERE T2.Type = 'Action' ORDER BY T1.Title ASC",
        "question": "What are the titles of action films along with the number of distinct countries they were released in, listed in ascending order by title?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "film_rank"
    },
    {
        "query": "SELECT Title, MIN(Gross_in_dollar) FROM film AS T1 GROUP BY Title ORDER BY Title DESC",
        "question": "What are the titles of all films, along with their minimum gross in dollars, listed in descending order by title?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "film_rank"
    },
    {
        "query": "SELECT T1.Title, T1.Studio FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Low_Estimate <= 100000000 AND T1.Gross_in_dollar <= 500000000 ORDER BY T1.Gross_in_dollar ASC",
        "question": "What are the titles and studios of the films with a low estimate of 100 million or less and a gross of 500 million or less, sorted by gross in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "film_rank"
    },
    {
        "query": "SELECT T1.Title, COUNT(T2.Country), MAX(T3.Low_Estimate) FROM film AS T1 JOIN film_market_estimation AS T3 ON T1.Film_ID = T3.Film_ID JOIN market AS T2 ON T3.Market_ID = T2.Market_ID WHERE T1.Studio = 'Warner Bros' GROUP BY T1.Title ORDER BY MAX(T3.Low_Estimate) DESC",
        "question": "What are the titles of films from Warner Bros, along with the number of countries and the highest low estimate of each film, listed in order of highest low estimate first?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "film_rank"
    },
    {
        "query": "SELECT Title FROM film WHERE Gross_in_dollar > 50",
        "question": "What are the titles of the films with a gross of more than $50?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "film_rank"
    },
    {
        "query": "SELECT T1.Country, SUM(T2.Low_Estimate) FROM market AS T1 JOIN film_market_estimation AS T2 ON T1.Market_ID = T2.Market_ID GROUP BY T1.Country HAVING SUM(T2.Low_Estimate) >= 5000000",
        "question": "Which countries have a total low estimate of at least 5,000,000 in film market estimation?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "film_rank"
    },
    {
        "query": "SELECT T1.Title, T2.Country FROM film AS T1 JOIN film_market_estimation AS T3 ON T1.Film_ID = T3.Film_ID JOIN market AS T2 ON T3.Market_ID = T2.Market_ID WHERE T3.Low_Estimate > (SELECT AVG(Low_Estimate) FROM film_market_estimation)",
        "question": "What are the titles of the films and their estimated market countries where the low estimate is higher than the average low estimate?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "film_rank"
    },
    {
        "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation WHERE High_Estimate BETWEEN 10 AND 100) AND Gross_in_dollar > 10 LIMIT 10",
        "question": "What are the titles of the next 10 films with a gross of more than 10 dollars that do not have a high market estimation between 10 and 100 dollars?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "film_rank"
    },
    {
        "query": "SELECT T1.Company, COUNT(DISTINCT T2.Station_ID) AS Station_Count FROM company AS T1 JOIN station_company AS T2 ON T1.Company_ID = T2.Company_ID WHERE T1.Market_Value >= 100 ORDER BY Station_Count ASC",
        "question": "What are the companies with a market value of at least 100, listed in ascending order of the number of distinct gas stations they have?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "gas_company"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Company_ID), T1.Company, T1.Headquarters FROM company AS T1 WHERE T1.Company_ID = 1 OR T1.Company = 'ABC Inc' OR T1.Headquarters IN (SELECT T2.Headquarters FROM company AS T2 WHERE T2.Company_ID = 1) ORDER BY T1.Company_ID DESC",
        "question": "What is the count of distinct companies with company ID 1 or company name 'ABC Inc' or headquarters of company ID 1, along with their respective company names and headquarters, ordered by company ID in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "gas_company"
    },
    {
        "query": "SELECT COUNT(DISTINCT Headquarters) , COUNT(DISTINCT Main_Industry) , COUNT(DISTINCT Company) FROM company WHERE Rank != 1",
        "question": "How many companies, headquarters, and main industries are there among companies that are not ranked first?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "gas_company"
    },
    {
        "query": "SELECT Company, Headquarters, Main_Industry FROM company WHERE Sales_billion > 10 ORDER BY Rank DESC LIMIT 5",
        "question": "What are the companies, their headquarters, and main industries of the next 5 largest companies with sales over 10 billion, ordered by rank in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "gas_company"
    },
    {
        "query": "SELECT T2.Company FROM station_company AS T1 JOIN company AS T2 ON T1.Company_ID = T2.Company_ID WHERE T1.Rank_of_the_Year <= 10",
        "question": "What are the names of the companies that have a rank of the year 10 or less in the gas stations?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "gas_company"
    },
    {
        "query": "SELECT T2.Company, T3.Manager_Name FROM company AS T1 JOIN station_company AS T2 ON T1.Company_ID = T2.Company_ID JOIN gas_station AS T3 ON T2.Station_ID = T3.Station_ID WHERE T2.Rank_of_the_Year > 10 AND T3.Open_Year > 2000 ORDER BY T3.Open_Year DESC",
        "question": "What are the companies and their corresponding manager names for the gas stations that opened after 2000, ordered by the opening year in descending order, for companies with a rank of the year greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "gas_company"
    },
    {
        "query": "SELECT Company_ID FROM company WHERE Sales_billion > 10 AND Profits_billion IN (SELECT Profits_billion FROM company WHERE Assets_billion > 100) ORDER BY Company_ID ASC",
        "question": "What are the IDs of the companies with sales over 10 billion and profits that are also achieved by companies with assets over 100 billion, listed in ascending order of company ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "gas_company"
    },
    {
        "query": "SELECT COUNT(DISTINCT Company), COUNT(DISTINCT Headquarters), COUNT(DISTINCT Main_Industry) FROM company WHERE Sales_billion <= 100",
        "question": "For companies with sales less than or equal to 100 billion, how many distinct companies, headquarters, and main industries are there?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "gas_company"
    },
    {
        "query": "SELECT T1.Company, T2.Manager_Name FROM company AS T1 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID JOIN gas_station AS T2 ON T3.Station_ID = T2.Station_ID WHERE T1.Market_Value > 10000",
        "question": "What are the names of companies and their corresponding managers for companies with a market value greater than 10,000?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "gas_company"
    },
    {
        "query": "SELECT Company, Headquarters FROM company AS T1 WHERE Main_Industry = 'Retail' OR Company IN (SELECT Company FROM company AS T2 WHERE Rank = 1)",
        "question": "What are the names and headquarters of retail companies or companies ranked as number one?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "gas_company"
    },
    {
        "query": "SELECT MAX(T1.weight) FROM bike AS T1 WHERE T1.price > (SELECT MAX(T2.price) FROM bike AS T2) LIMIT 1",
        "question": "What is the maximum weight of the most expensive bike?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT product_name FROM bike WHERE material = 'Steel' ORDER BY product_name ASC",
        "question": "What are the names of all steel bikes listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT T1.nation, T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id JOIN bike AS T3 ON T2.bike_id = T3.id ORDER BY T1.result DESC LIMIT 10",
        "question": "What are the nationalities of the next 10 cyclists with the worst results, along with the names of the bikes they own?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.cyclist_id = 1 GROUP BY T1.product_name",
        "question": "What are the product names of the bikes owned by cyclist with id 1?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT T1.name, SUM(T2.price) FROM cyclist AS T1 JOIN cyclists_own_bikes AS T3 ON T1.id = T3.cyclist_id JOIN bike AS T2 ON T3.bike_id = T2.id WHERE T1.nation != 'USA' LIMIT 10",
        "question": "What are the names of the top 10 non-USA cyclists along with their total bike prices?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT T1.product_name, T2.name FROM bike AS T1 JOIN cyclists_own_bikes AS T3 ON T1.id = T3.bike_id JOIN cyclist AS T2 ON T2.id = T3.cyclist_id WHERE T2.heat = 1 AND T1.price BETWEEN 500 AND 1000 AND T2.nation = 'USA'",
        "question": "What are the names of USA cyclists in heat 1 along with the names of the bikes they own that cost between $500 and $1000?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT T1.product_name, T2.product_name FROM bike AS T1 JOIN bike AS T2 ON T1.price >= T2.price ORDER BY T1.price ASC",
        "question": "What are all the pairs of bikes where the first bike is at least as expensive as the second bike, listed in order from least expensive to most expensive?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT MIN(T1.price) FROM bike AS T1 ORDER BY T1.price ASC LIMIT 5",
        "question": "What is the fifth lowest price of a bike?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT T2.product_name FROM cyclists_own_bikes AS T1 JOIN bike AS T2 ON T1.bike_id = T2.id WHERE T1.purchase_year = (SELECT MAX(purchase_year) FROM cyclists_own_bikes) AND T2.price = (SELECT MIN(price) FROM bike) LIMIT 1",
        "question": "What is the product name of the cheapest bike purchased in the latest year by any cyclist?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT T1.product_name FROM bike AS T1 WHERE T1.weight >= 10",
        "question": "What are the product names of the bikes that have a weight of 10 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.product_name), T2.material AS Material FROM bike AS T1 JOIN cyclists_own_bikes AS T3 ON T1.id = T3.bike_id JOIN bike AS T2 ON T2.id = T3.bike_id",
        "question": "What is the count of distinct bike product names for each material?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT c.name, COUNT(DISTINCT cob.bike_id) FROM cyclists_own_bikes AS cob JOIN cyclist AS c ON c.id = cob.cyclist_id JOIN bike AS b ON b.id = cob.bike_id WHERE c.result BETWEEN 1 AND 5 OR b.price < 500 OR b.weight > 20 GROUP BY c.name HAVING COUNT(DISTINCT cob.bike_id) > 2 ORDER BY c.name ASC LIMIT 10",
        "question": "What are the names of the top 10 cyclists who own more than 2 bikes, either finished in the top 5, own a bike priced under 500, or own a bike weighing over 20, listed alphabetically?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT name FROM cyclist WHERE heat = 3 ORDER BY id DESC",
        "question": "What are the names of cyclists in heat 3, listed in descending order of their IDs?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT T1.product_name, COUNT(DISTINCT T2.name) FROM bike AS T1 JOIN cyclists_own_bikes AS T3 ON T1.id = T3.bike_id JOIN cyclist AS T2 ON T3.cyclist_id = T2.id WHERE T1.material != 'Aluminum' ORDER BY T1.product_name ASC",
        "question": "How many unique cyclists own each non-aluminum bike model, listed in ascending order by bike model?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT T1.product_name, COUNT(T2.cyclist_id) FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.purchase_year = 2010 ORDER BY T1.product_name ASC",
        "question": "What are the product names of bikes bought in 2010, listed in ascending order by product name, along with the number of cyclists who own each bike?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT T1.product_name FROM bike AS T1 WHERE T1.price < T1.weight",
        "question": "What are the names of the bikes that are less expensive than their weight?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "bike_racing"
    },
    {
        "query": "SELECT name FROM club WHERE Region != 'Europe' ORDER BY name ASC",
        "question": "What are the names of the clubs from regions other than Europe, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT name AS ClubName, Region FROM club",
        "question": "What are the names and regions of the clubs?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT name FROM club WHERE Region = 'Europe'",
        "question": "What are the names of the clubs in the Europe region?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Start_year = '2000' AND T2.Position = 'Forward' AND T2.Apps > ( SELECT AVG(Apps) FROM player WHERE Position = 'Forward' )",
        "question": "How many distinct club names started in the year 2000 and have a forward player with more appearances than the average for a forward player?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT COUNT(DISTINCT name) FROM club WHERE Region = 'North' OR Start_year BETWEEN 1900 AND 1950 AND Club_ID > 10",
        "question": "How many unique club names are in the North region or started between 1900 and 1950 with an ID greater than 10?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT T3.name FROM competition AS T1 INNER JOIN competition_result AS T2 ON T1.Competition_ID = T2.Competition_ID INNER JOIN club AS T3 ON T2.Club_ID_1 = T3.Club_ID WHERE T3.Region != 'South'",
        "question": "What are the names of the clubs from regions other than 'South' that participated in a competition?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT name FROM club WHERE Start_year < '2010' ORDER BY Club_ID DESC",
        "question": "What are the names of the clubs that started before 2010, listed in descending order of their club IDs?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT T1.name FROM club AS T1 WHERE T1.Region = 'Auckland' OR T1.name NOT IN (SELECT T2.name FROM club AS T2 WHERE T2.Start_year < '2000')",
        "question": "What are the names of the clubs located in 'Auckland' region or started in the year 2000 or later?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT T1.name, SUM(T2.Tries) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T1.name ASC LIMIT 5",
        "question": "What are the names of the next 5 clubs in ascending order, along with the total tries by their players?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT T1.name, MAX(T2.Total) FROM club AS T1 JOIN club_rank AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Rank = 1 AND T2.Gold > 10 AND NOT EXISTS (SELECT * FROM club_rank AS T3 WHERE T3.Club_ID = T1.Club_ID AND T3.Rank > 2) LIMIT 5",
        "question": "What are the names of the top five clubs with the highest total points in first place rankings with more than ten gold medals, where the clubs have never been ranked third place or lower?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Club_ID), SUM(T2.Total) FROM club AS T1 JOIN club_rank AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Region != 'Europe'",
        "question": "What is the number of distinct clubs and the total points of clubs outside of the Europe region?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "sports_competition"
    },
    {
        "query": "SELECT AVG(Level), SUM(Total_pounds) FROM member AS T1 INNER JOIN purchase AS T2 ON T1.Member_ID = T2.Member_ID AND T2.Year = '2015' WHERE T1.Level = 1 ORDER BY T2.Total_pounds ASC LIMIT 5",
        "question": "What is the average level and total pounds of the 6th to 10th purchases in 2015 made by level 1 members when ordered from least to greatest by total pounds?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "shop_membership"
    },
    {
        "query": "SELECT * FROM member AS T1 WHERE T1.Level BETWEEN 1 AND 10",
        "question": "What are the details of all members with a level between 1 and 10?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "shop_membership"
    },
    {
        "query": "SELECT COUNT(DISTINCT Member_ID), COUNT(DISTINCT Card_Number), AVG(Level) FROM member WHERE Level >= 3 LIMIT 10",
        "question": "What are the number of distinct member IDs, distinct card numbers, and the average level of members with a level of 3 or higher, for rows 11 to 20?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "shop_membership"
    },
    {
        "query": "SELECT T1.Member_ID, T2.Branch_ID FROM member AS T1 JOIN membership_register_branch AS T2 ON T1.Member_ID = T2.Member_ID WHERE EXISTS (SELECT 1 FROM purchase AS T3 WHERE T3.Member_ID = T1.Member_ID AND T3.Branch_ID = T2.Branch_ID)",
        "question": "What are the member and branch ID combinations where a purchase has been made by a member at the branch they are registered to?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "shop_membership"
    },
    {
        "query": "SELECT T1.Name, T1.Level FROM member AS T1 WHERE T1.Level BETWEEN 1 AND 2",
        "question": "What are the names and levels of members with levels between 1 and 2?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "shop_membership"
    },
    {
        "query": "SELECT AVG(T1.Level) FROM member AS T1 JOIN membership_register_branch AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Level > 1 AND T2.Register_Year BETWEEN '2010' AND '2015'",
        "question": "What is the average level of members who registered to a branch between 2010 and 2015 and have a level greater than 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "shop_membership"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Member_ID) FROM member AS T1 JOIN membership_register_branch AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Register_Year BETWEEN 2000 AND 2010 AND T1.Level > 1 GROUP BY T1.Name",
        "question": "What is the total number of memberships per member name for members with a level higher than 1, who registered between 2000 and 2010?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "shop_membership"
    },
    {
        "query": "SELECT T1.Name, T1.Level FROM member AS T1 WHERE T1.Level >= 3 ORDER BY T1.Level ASC",
        "question": "What are the names and levels of members with level 3 or higher, listed in ascending order of level?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "shop_membership"
    },
    {
        "query": "SELECT T1.state_name, MAX(T1.population) FROM state AS T1 WHERE T1.state_name = 'Alabama' OR T1.population > 10000 OR T1.state_name NOT IN (SELECT T2.state_name FROM state AS T2 WHERE T2.population < 10000)",
        "question": "What is the state name and the maximum population of the state which is Alabama or has a population of more than 10,000 or is not in the list of states with a population of less than 10,000?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "geo"
    },
    {
        "query": "SELECT T1.state_name FROM state AS T1 JOIN highlow AS T2 ON T1.state_name = T2.state_name JOIN city AS T3 ON T3.state_name = T1.state_name WHERE T3.city_name IN (SELECT city_name FROM city WHERE population > 500000)",
        "question": "What are the state names where there is a city with a population of more than 500,000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "geo"
    },
    {
        "query": "SELECT state_name FROM state WHERE NOT EXISTS (SELECT 1 FROM city WHERE city.population = state.population) GROUP BY state_name HAVING COUNT(state.population) = 1",
        "question": "Which state names appear only once and for which there is no city with the same population as the state?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "geo"
    },
    {
        "query": "SELECT state_name, MIN(population) FROM state GROUP BY state_name ORDER BY MIN(population) DESC",
        "question": "What are the states with their minimum population, listed in descending order by population?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "geo"
    },
    {
        "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.population >= 1000 ORDER BY T1.population DESC LIMIT 10",
        "question": "What are the next 10 states with a population of 1000 or more in descending order of population?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "geo"
    },
    {
        "query": "SELECT T1.state_name FROM state AS T1 WHERE NOT EXISTS ( SELECT T2.state_name FROM highlow AS T2 WHERE T1.state_name = T2.state_name )",
        "question": "What are the state names that do not have any high or low elevation data?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "geo"
    },
    {
        "query": "SELECT state_name FROM state WHERE area BETWEEN 1000 AND 5000 LIMIT 10",
        "question": "What are the state names of the next 10 states with an area between 1,000 and 5,000 square units, starting from the 11th state?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "geo"
    },
    {
        "query": "SELECT T1.state_name FROM state AS T1 WHERE T1.population > 1000000 OR T1.area BETWEEN 1000 AND 10000 OR T1.density < 10",
        "question": "What are the names of the states with a population over 1 million, or an area between 1000 and 10000, or a density less than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "geo"
    },
    {
        "query": "SELECT state_name FROM state WHERE population >= 1000",
        "question": "What are the state names with a population of 1000 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "geo"
    },
    {
        "query": "SELECT MIN(highest_elevation) FROM highlow ORDER BY highest_elevation ASC",
        "question": "What is the lowest highest elevation of all states?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "geo"
    },
    {
        "query": "SELECT T1.state_name, COUNT(T2.lake_name) FROM state AS T1 JOIN lake AS T2 ON T1.state_name = T2.state_name WHERE T1.population BETWEEN 10000 AND 50000 AND EXISTS (SELECT T3.city_name FROM city AS T3 WHERE T3.state_name = T1.state_name) GROUP BY T1.state_name HAVING COUNT(T2.lake_name) > 1 ORDER BY T1.state_name ASC LIMIT 5",
        "question": "What are the names of the next 5 states with a population between 10,000 and 50,000 and having at least one city and more than one lake, listed in ascending order by state name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "geo"
    },
    {
        "query": "SELECT T1.state_name, T2.lake_name FROM state AS T1 INNER JOIN lake AS T2 ON T1.state_name = T2.state_name WHERE T1.population BETWEEN 1000000 AND 5000000 AND T1.area IN (SELECT area FROM lake AS T3 WHERE T3.area > 50000)",
        "question": "What are the names of the states with a population between 1,000,000 and 5,000,000, and an area greater than 50,000, along with the names of the lakes in those states?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "geo"
    },
    {
        "query": "SELECT population FROM state AS T WHERE T.state_name = 'Alabama' ORDER BY T.population DESC LIMIT 10",
        "question": "What is the 11th highest population of Alabama state?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "geo"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.state_name) , MIN(T1.population) , MAX(T1.population) FROM state AS T1 WHERE T1.population BETWEEN 1000000 AND 2000000 LIMIT 10",
        "question": "What are the count of distinct state names, the minimum population, and the maximum population of the states with a population between 1,000,000 and 2,000,000, for the next 10 states after the first 10?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "geo"
    },
    {
        "query": "SELECT state_name, MIN(density) FROM state WHERE country_name = 'USA' ORDER BY state_name ASC LIMIT 10",
        "question": "What are the names and lowest population densities of states in the USA, starting from the 11th state in alphabetical order?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "geo"
    },
    {
        "query": "SELECT Participant_ID FROM Participants WHERE Participant_Type_Code != 'Student' ORDER BY Participant_ID ASC LIMIT 10",
        "question": "What are the participant IDs (excluding students) of the 11th to 20th participants in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT T1.Service_Type_Code FROM Services AS T1 INNER JOIN Events AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Participants_in_Events AS T3 ON T2.Event_ID = T3.Event_ID INNER JOIN Participants AS T4 ON T3.Participant_ID = T4.Participant_ID WHERE T4.Participant_Type_Code BETWEEN 'A' AND 'Z' ORDER BY T1.Service_Type_Code ASC",
        "question": "What are the service type codes, in ascending order, for services associated with participants with a type code from A to Z?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT E.Service_ID, COUNT(DISTINCT P.Participant_ID) FROM Events E JOIN Participants_in_Events P ON E.Event_ID = P.Event_ID GROUP BY E.Service_ID HAVING COUNT(E.Event_ID) >= 1 ORDER BY COUNT(E.Event_ID) DESC LIMIT 10",
        "question": "What are the top services with the most unique participants in events, starting from the 11th service?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT COUNT(Service_ID) FROM Events WHERE Service_ID BETWEEN 1 AND 10 ORDER BY Event_ID DESC LIMIT 5",
        "question": "What is the count of service ids in the last 5 events, excluding the first 5, where the service id is between 1 and 10?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT T1.Event_ID FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID WHERE T2.Participant_ID NOT IN (SELECT Participant_ID FROM Participants WHERE Participant_Type_Code = 'Type1') OR T1.Service_ID = 100 ORDER BY T1.Event_ID ASC",
        "question": "What are the event IDs of events that either have service ID 100, or do not have any participants of type 'Type1', listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Participant_ID), COUNT(T2.Event_ID) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.Participant_Type_Code != 'type1'",
        "question": "How many unique participants of types other than 'type1' are there, and how many events do they participate in?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT T1.Participant_Type_Code FROM Participants AS T1 JOIN Participants AS T2 ON T1.Participant_Type_Code = T2.Participant_Type_Code WHERE T1.Participant_Type_Code >= 'A' ORDER BY T1.Participant_Type_Code DESC LIMIT 10",
        "question": "What are the participant type codes from 'A' onwards, in descending order, excluding the first 10 codes?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT T1.Service_Type_Code, COUNT(DISTINCT T3.Participant_ID) FROM Services AS T1 JOIN Events AS T2 ON T1.Service_ID = T2.Service_ID JOIN Participants_in_Events AS T3 ON T2.Event_ID = T3.Event_ID JOIN Participants AS T4 ON T3.Participant_ID = T4.Participant_ID WHERE T1.Service_Type_Code = 'Type1' AND T4.Participant_Type_Code = 'Type2' AND T4.Participant_ID BETWEEN 1 AND 10 GROUP BY T1.Service_Type_Code HAVING AVG(T2.Service_ID) > 1",
        "question": "What are the service type codes and the number of unique participants for each code, where the participant type code is 'Type2', participant id is between 1 and 10, and the average service id is more than 1, specifically for service type code 'Type1'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT T1.Event_ID, COUNT(T2.Participant_ID) FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID WHERE T1.Service_ID <= 5 GROUP BY T1.Event_ID ORDER BY COUNT(T2.Participant_ID) DESC",
        "question": "For services with a service ID of 5 or less, what are the event IDs along with the number of participants in each event, listed in order from most participants to least?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT T1.Service_ID FROM (SELECT T2.Service_ID FROM Services AS T2 WHERE T2.Service_Type_Code = 'Type1' OR T2.Service_ID IN (SELECT T3.Service_ID FROM Services AS T3 WHERE T3.Service_ID > 100)) AS T1 ORDER BY T1.Service_ID DESC",
        "question": "What are the service IDs of Type1 services or services with IDs greater than 100, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT COUNT(T2.Event_ID) FROM Services AS T1 JOIN Events AS T2 ON T1.Service_ID = T2.Service_ID WHERE T1.Service_Type_Code IN (SELECT T3.Participant_Type_Code FROM Participants AS T3)",
        "question": "How many events are associated with services that have a service type code matching a participant type code in the participants list?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT T1.Participant_ID FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN Events AS T3 ON T3.Event_ID = T2.Event_ID WHERE T3.Service_ID NOT IN (SELECT T4.Service_ID FROM Services AS T4 JOIN Events AS T5 ON T4.Service_ID = T5.Service_ID WHERE T4.Service_Type_Code = 'code1')",
        "question": "Which participant IDs are associated with events that do not belong to the service type code 'code1'?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT Participant_Type_Code, AVG(Participant_ID) FROM Participants GROUP BY Participant_Type_Code HAVING AVG(Participant_ID) < 100 ORDER BY Participant_Type_Code DESC",
        "question": "What is the average participant ID for each participant type code, where the average is less than 100, listed in descending order by participant type code?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "local_govt_in_alabama"
    },
    {
        "query": "SELECT player_api_id FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes GROUP BY player_api_id HAVING COUNT(player_api_id) > 1 ) ORDER BY player_api_id DESC",
        "question": "What are the player_api_ids of players with multiple entries in the Player_Attributes table, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT player_name FROM Player WHERE player_api_id = (SELECT MAX(player_api_id) FROM Player_Attributes)",
        "question": "What is the name of the player with the highest player_api_id?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.date BETWEEN '2015-01-01' AND '2015-12-31' AND EXISTS (SELECT T3.date FROM Player_Attributes AS T3 WHERE T3.player_api_id = T1.player_api_id AND T3.date BETWEEN '2014-01-01' AND '2014-12-31') ORDER BY T1.player_name DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th players in descending order who played in 2014 and also played in 2015?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT player_name FROM Player WHERE player_api_id >= 100 ORDER BY player_name DESC",
        "question": "List the names of the players with an api id greater than or equal to 100 in descending alphabetical order.",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE NOT EXISTS (SELECT 1 FROM Player_Attributes AS T3 WHERE T3.overall_rating > 80 AND T3.player_api_id = T2.player_api_id) LIMIT 10",
        "question": "What are the names of the next 10 players who never had an overall rating higher than 80?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 80 OR (EXISTS (SELECT 1 FROM Player_Attributes AS T1 WHERE T1.player_api_id = Player_Attributes.player_api_id AND T1.potential > 80))) ORDER BY player_name DESC",
        "question": "What are the names of players with an overall rating greater than 80 or potential greater than 80, listed in descending order by name?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT T1.player_name FROM Player AS T1 WHERE EXISTS (SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.player_api_id = T1.player_api_id AND T2.overall_rating > 80)",
        "question": "What are the names of the players who have an overall rating of more than 80?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT COUNT(T1.player_fifa_api_id) FROM Player_Attributes AS T1 WHERE T1.overall_rating < 60 AND T1.potential < 60 AND T1.shot_power < 60 LIMIT 5",
        "question": "What is the 6th-10th number of players with an overall rating, potential, and shot power all below 60?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT player_api_id), MAX(overall_rating) FROM Player_Attributes WHERE overall_rating < 80",
        "question": "What is the count of unique players with an overall rating less than 80 and what is the highest overall rating among these players?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT T1.player_name, T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id",
        "question": "What are the names and overall ratings of the players in the player attributes table?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT player_name FROM Player WHERE id > 300 ORDER BY player_name DESC",
        "question": "What are the names of players with an id greater than 300 in descending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT T1.player_name, MIN(T2.overall_rating) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential <= 90 GROUP BY T1.player_name ORDER BY T1.player_name ASC",
        "question": "What are the names of players and their lowest overall ratings if their potentials are less than or equal to 90, sorted by player name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 LIMIT 1",
        "question": "What is the highest overall rating of players?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes GROUP BY player_api_id HAVING AVG(overall_rating) > 80) LIMIT 5",
        "question": "What are the names of the 6th to 10th players with the highest overall average rating?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT MAX(T1.strength) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.aggression > 60 LIMIT 1",
        "question": "What is the maximum strength of the second player with aggression greater than 60?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "soccer_1"
    },
    {
        "query": "SELECT service_type_code FROM Services WHERE service_name != 'Emergency'",
        "question": "What are the service type codes for services that are not 'Emergency'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.individual_first_name FROM Individuals AS T1 WHERE T1.individual_id IN (SELECT T2.individual_id FROM Organization_Contact_Individuals AS T2 WHERE T2.organization_id = 5) AND T1.individual_last_name = 'Smith'",
        "question": "What are the first names of individuals with the last name 'Smith' who are associated with the organization having id 5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.service_name FROM Services AS T1 JOIN Party_Services AS T2 ON T1.service_id = T2.service_id WHERE NOT EXISTS (SELECT T3.party_id FROM Parties AS T3 JOIN Party_Services AS T4 ON T3.party_id = T4.customer_id WHERE T4.service_id = T1.service_id AND T3.party_phone = '1234567890')",
        "question": "What are the names of services not booked by the party with phone number '1234567890'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.service_name, MAX(T2.form_number) FROM Services AS T1 JOIN Forms AS T2 ON T1.service_id = T2.service_id WHERE T1.service_id NOT IN (SELECT T3.service_id FROM Services AS T3 JOIN Party_Services AS T4 ON T3.service_id = T4.service_id) GROUP BY T1.service_id LIMIT 10",
        "question": "What are the names of the next 10 services that do not have any bookings, along with the highest form numbers associated with each service?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_government"
    },
    {
        "query": "SELECT AVG(T1.service_id) FROM Services AS T1 WHERE T1.service_id != 1",
        "question": "What is the average service ID excluding service ID 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.service_name FROM Services AS T1 WHERE T1.service_descriptio BETWEEN 'a' AND 'b' OR T1.service_descriptio NOT IN (SELECT T2.service_descriptio FROM Services AS T2) OR T1.service_id IN (SELECT T3.service_id FROM Party_Services AS T3) ORDER BY T1.service_id ASC LIMIT 10",
        "question": "What are the next 10 service names ordered by service id, that have a service description between 'a' and 'b', or are not in the list of existing service descriptions, or are associated with a party service?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.organization_name FROM Organizations AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.organization_id = T2.organization_id WHERE T2.date_contact_from > '2020-01-01' ORDER BY T1.organization_name DESC LIMIT 10",
        "question": "What are the 11th to 20th organization names of organizations that were contacted after '2020-01-01' in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_government"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.form_id) FROM Party_Forms AS T1",
        "question": "How many unique forms are being used?",
        "iter": 4,
        "flag": true,
        "hardness": "easy",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.individual_first_name, T2.service_name FROM Individuals AS T1 JOIN Party_Services AS T3 ON T1.individual_id = T3.customer_id JOIN Services AS T2 ON T3.service_id = T2.service_id ORDER BY T2.service_name DESC",
        "question": "What are the first names of individuals and the corresponding service names they use, listed in descending order of service name?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.service_name FROM Services AS T1 JOIN Party_Services AS T2 ON T1.service_id = T2.service_id WHERE T1.service_type_code = 'health'",
        "question": "What are the names of the health services?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.party_phone FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id WHERE NOT EXISTS (SELECT 1 FROM Forms AS T3 WHERE T3.form_id = T2.form_id AND T3.service_id = 1 AND T3.form_type_code = 'service_type_code')",
        "question": "What are the phone numbers of the parties that have not submitted a form of type 'service_type_code' for service id 1?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.service_name FROM Services AS T1 JOIN Party_Services AS T2 ON T1.service_id = T2.service_id WHERE T1.service_name BETWEEN 'Service_A' AND 'Service_Z' AND T1.service_id > 100 ORDER BY T1.service_name DESC",
        "question": "What are the service names that are between 'Service_A' and 'Service_Z' and have a service id greater than 100, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "e_government"
    },
    {
        "query": "SELECT * FROM Services WHERE service_type_code LIKE 'abc%' OR service_id BETWEEN 10 AND 20 OR service_id IN (SELECT service_id FROM Forms)",
        "question": "What are the details of services with a type code starting with 'abc', or a service id between 10 and 20, or services that have a form associated with them?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_government"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.party_id) FROM Parties AS T1 JOIN Party_Addresses AS T2 ON T1.party_id = T2.party_id WHERE T2.address_type_code = 'HOME'",
        "question": "How many distinct parties have a home address listed?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.address_id FROM Addresses AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.address_id < 10",
        "question": "What are the address ids less than 10 in the addresses table?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "e_government"
    },
    {
        "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Publisher = 'ABC' AND T2.Publication_Date > '2000' AND T1.Issues BETWEEN 1 AND 10 ORDER BY T1.Title ASC LIMIT 10",
        "question": "What are the next 10 book titles, in alphabetical order, with between 1 and 10 issues, published by 'ABC' after the year 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_2"
    },
    {
        "query": "SELECT COUNT (DISTINCT Title) FROM book WHERE Issues BETWEEN 1 AND 10 OR Writer = 'Author1'",
        "question": "How many distinct book titles have issues between 1 and 10 or are written by 'Author1'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "book_2"
    },
    {
        "query": "SELECT T1.Title, COUNT(DISTINCT T2.Publisher) FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price < 50 GROUP BY T1.Title ORDER BY T1.Title DESC LIMIT 10",
        "question": "What are the titles of the 11-20 most expensive books with the number of distinct publishers for each, where price is less than 50, ordered by book title in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_2"
    },
    {
        "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 20 ORDER BY T1.Writer ASC LIMIT 10",
        "question": "What are the titles of the books written by the first 10 writers in alphabetical order, given that the books cost more than 20 dollars?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_2"
    },
    {
        "query": "SELECT Title, COUNT(Publication_ID) FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID GROUP BY T1.Title",
        "question": "What are the titles of the books and how many publications does each title have?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "book_2"
    },
    {
        "query": "SELECT Publisher, Title FROM publication AS T1 INNER JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE Publication_Date > '1990' ORDER BY Publication_ID DESC LIMIT 10",
        "question": "What are the publishers and titles of the publications published after 1990, listed in descending order of publication id, from the 11th to the 20th?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_2"
    },
    {
        "query": "SELECT T1.Publisher FROM publication AS T1 JOIN publication AS T2 ON T1.Publication_ID = T2.Publication_ID WHERE T1.Price NOT IN (SELECT Price FROM publication WHERE Publication_Date = '2000') ORDER BY T1.Price DESC",
        "question": "What are the publishers of publications with prices different from those published in 2000, sorted by price in descending order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_2"
    },
    {
        "query": "SELECT Publisher FROM publication WHERE Publication_Date <= '1999-01-01' AND Price <= 30.00",
        "question": "Who are the publishers of all publications that were published on or before January 1st, 1999, and cost $30 or less?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "book_2"
    },
    {
        "query": "SELECT T1.Title, SUM(T2.Price) FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID JOIN publication AS T3 ON T2.Book_ID = T3.Book_ID WHERE T2.Publication_Date <= '2000' GROUP BY T1.Title LIMIT 10",
        "question": "What are the titles of books along with their total publication price for publications before or in the year 2000, listed from 11th to 20th?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Publisher) FROM publication AS T1 WHERE T1.Price > (SELECT COUNT(DISTINCT T2.Writer) FROM book AS T2) LIMIT 5",
        "question": "What is the count of distinct publishers whose books' prices are higher than the count of distinct writers, returning rows 6 to 10?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_2"
    },
    {
        "query": "SELECT Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 100 LIMIT 5",
        "question": "What are the titles of the 6th to 10th books with a price greater than 100 dollars?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_2"
    },
    {
        "query": "SELECT T1.Title, COUNT(T2.Publication_ID) FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Issues > 20 OR T2.Publication_Date BETWEEN '2010' AND '2015' OR T1.Book_ID IN (SELECT Book_ID FROM publication WHERE Price = 100)",
        "question": "What are the titles of the books which have more than 20 issues, were published between 2010 and 2015, or have a price of 100, and how many publications do they have?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT Title), SUM(Price) FROM publication AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE Publisher != 'ABC' GROUP BY Title",
        "question": "What is the number of distinct titles and the total price of the publications by each title for publications not published by 'ABC'?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_2"
    },
    {
        "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Publisher = 'ABC' AND T2.Publication_Date < '2020-01-01' AND T1.Writer NOT IN (SELECT T3.Writer FROM book AS T3 WHERE T3.Issues > 10) LIMIT 10",
        "question": "What are the titles of the books published by 'ABC' before '2020-01-01', skipping the first ten results, and excluding books written by authors who have written books with more than 10 issues?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_2"
    },
    {
        "query": "SELECT * FROM Manufacturers WHERE Revenue BETWEEN 100 AND 1000 AND Code > 10",
        "question": "What are the details of manufacturers with revenue between 100 and 1000 and code greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT COUNT(Code) FROM Manufacturers WHERE Revenue != 0 ORDER BY Code DESC",
        "question": "How many manufacturers have a non-zero revenue, listed in descending order by code?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT Code FROM Manufacturers WHERE EXISTS (SELECT 1 FROM Products WHERE Manufacturer = Manufacturers.Code AND Price BETWEEN 50 AND 100) AND Revenue > 10000 AND Name = 'ABC'",
        "question": "What is the code of manufacturer named 'ABC' with revenue over 10000 that has at least one product priced between 50 and 100?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT T1.Name, T2.Price FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer JOIN Manufacturers AS T3 ON T2.Manufacturer = T3.Code WHERE T1.Headquarter = 'USA' ORDER BY T1.Name ASC",
        "question": "What are the names of the manufacturers based in the USA and their product prices listed in ascending order by manufacturer name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT AVG(Revenue) FROM Manufacturers WHERE Revenue > 1000 AND Revenue BETWEEN 10000 AND 100000",
        "question": "What is the average revenue of manufacturers with revenues between 10,000 and 100,000 and also greater than 1,000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT MAX(Revenue) FROM Manufacturers WHERE Founder = 'Elon Musk' ORDER BY Revenue DESC",
        "question": "What is the highest revenue of the manufacturers founded by Elon Musk?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT T1.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Price > 100 AND T1.Revenue BETWEEN 1000 AND 10000 AND T1.Headquarter = 'USA' ORDER BY T1.Name DESC",
        "question": "What are the names of manufacturers based in the USA with revenue between 1000 and 10000, who produce products costing more than 100, listed in descending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT MAX(Revenue), MIN(Revenue), AVG(Revenue) FROM Manufacturers WHERE Revenue BETWEEN 10000 AND 50000",
        "question": "What are the maximum, minimum, and average revenues of manufacturers with revenues between 10,000 and 50,000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue BETWEEN 1000 AND 10000",
        "question": "What are the names of manufacturers with revenues between 1000 and 10000 and the names of their corresponding products?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT T1.Revenue, COUNT(T2.Code) FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T1.Revenue ORDER BY T1.Revenue DESC LIMIT 5",
        "question": "What are the revenues of the 6th to 10th highest-revenue manufacturers along with the number of products they manufacture?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT T1.Code, COUNT(T1.Code) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 ) AND T1.Revenue BETWEEN 10000 AND 50000",
        "question": "What are the codes of manufacturers who do not produce any products and have revenue between 10000 and 50000, and how many manufacturers are in this category?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT T1.Name, T1.Revenue FROM Manufacturers AS T1 JOIN Manufacturers AS T2 ON T1.Code = T2.Code WHERE T1.Revenue BETWEEN 1000 AND 100000 OR T2.Headquarter = 'USA' GROUP BY T1.Name HAVING COUNT(T1.Code) > 1",
        "question": "What are the names and revenues of manufacturers with duplicate codes and either revenue between 1000 and 100000 or headquarter in the USA?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT Code, Name FROM Manufacturers WHERE Revenue BETWEEN 1000 AND 100000 OR Code NOT IN (SELECT Manufacturer FROM Products WHERE Price > 500)",
        "question": "What are the codes and names of manufacturers with revenue between 1000 and 100000, or those that do not produce any products with a price greater than 500?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "manufactory_1"
    },
    {
        "query": "SELECT MIN(T1.RAM_MiB), MAX(T1.ROM_MiB), AVG(T1.Launch_year) FROM chip_model AS T1 ORDER BY T1.Launch_year ASC LIMIT 10",
        "question": "What are the minimum RAM, maximum ROM, and average launch year of the 11th to 20th earliest released chip models?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT Launch_year) FROM chip_model WHERE Launch_year >= 2000 ORDER BY Launch_year DESC LIMIT 10",
        "question": "What are the counts of distinct launch years from 2000 onwards for the chip models, listed in descending order of launch year, excluding the first 10 results?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "phone_1"
    },
    {
        "query": "SELECT T1.Model_name, T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode ORDER BY T1.Model_name ASC LIMIT 10",
        "question": "What are the names of the next 10 chip models along with their company names, listed in ascending order of the chip model name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_1"
    },
    {
        "query": "SELECT T1.Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T3.Graphics_mode = T2.screen_mode WHERE T2.Company_name = 'Apple' AND T1.Launch_year BETWEEN 2010 AND 2015 AND T3.Hardware_colours > 100 LIMIT 5",
        "question": "What are the next 5 Apple chip models with hardware colours greater than 100 and launched between 2010 and 2015, excluding the first 5 results?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_1"
    },
    {
        "query": "SELECT AVG(T1.RAM_MiB) AS avg_ram, AVG(T1.ROM_MiB) AS avg_rom FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model",
        "question": "What are the average RAM and average ROM of the chip models used in the phones?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "phone_1"
    },
    {
        "query": "SELECT T1.Accreditation_type FROM phone AS T1 WHERE NOT EXISTS (SELECT 1 FROM chip_model AS T2 WHERE T2.Model_name = T1.chip_model AND COUNT(DISTINCT T2.Launch_year) = 1) ORDER BY T1.Accreditation_type ASC",
        "question": "What are the accreditation types of phones that use chip models launched in more than one year, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Graphics_mode), COUNT(DISTINCT T2.Company_name), COUNT(DISTINCT T2.Accreditation_type), T1.Char_cells FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb > 100 AND T2.Company_name = 'Apple' AND T2.Accreditation_level NOT IN (SELECT Accreditation_level FROM phone)",
        "question": "What are the counts of distinct graphics modes, company names, and accreditation types, and the char cells of the screen mode for Apple phones that have used more than 100 KB and do not have an accreditation level found in the phone table, when the graphics mode of the screen mode matches the screen mode of the phone?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT Launch_year) FROM chip_model WHERE ROM_MiB < 256 ORDER BY Launch_year ASC",
        "question": "How many distinct years are there for chip models with less than 256 ROM MiB, listed in ascending order of launch year?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "phone_1"
    },
    {
        "query": "SELECT T1.Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE EXISTS (SELECT 1 FROM screen_mode AS T3 WHERE T3.Graphics_mode = T2.screen_mode AND T3.Hardware_colours > (SELECT AVG(Hardware_colours) FROM screen_mode))",
        "question": "What are the names of the chip models used in phones with a screen mode that has more hardware colors than the average?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_1"
    },
    {
        "query": "SELECT T1.Company_name, T2.Model_name, T3.Graphics_mode FROM phone AS T1 JOIN chip_model AS T2 ON T1.chip_model = T2.Model_name JOIN screen_mode AS T3 ON T1.screen_mode = T3.Graphics_mode WHERE (T2.RAM_MiB > 1000 OR T3.Graphics_mode = 1 OR EXISTS (SELECT 1 FROM phone AS T4 WHERE T4.Company_name = 'Apple')) ORDER BY T2.Launch_year DESC LIMIT 10",
        "question": "What are the company names, model names, and graphics modes of the phones with a ram greater than 1000, or graphics mode 1, or made by Apple, ordered by launch year in descending order, starting from the 10th entry?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_1"
    },
    {
        "query": "SELECT T1.city_name, T3.LName, T3.Fname FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code JOIN Student AS T3 ON T3.city_code = T2.city2_code WHERE T3.Age BETWEEN 20 AND 30 AND T3.Sex = 'M' AND T2.distance > 1000 ORDER BY T2.distance DESC",
        "question": "What are the names of cities, last names, and first names of male students aged between 20 and 30 living in cities more than 1000 units apart, listed in descending order of distance?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "address_1"
    },
    {
        "query": "SELECT T2.city_name FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code JOIN Direct_distance AS T3 ON T2.city_code = T3.city1_code WHERE T1.Age BETWEEN 18 AND 25 AND T1.Sex = 'M' AND T3.distance NOT IN (SELECT distance FROM Direct_distance WHERE city1_code = 'NYC')",
        "question": "What cities do male students aged 18-25 live in, excluding those cities that have a direct distance from NYC?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "address_1"
    },
    {
        "query": "SELECT T1.city_code, COUNT(DISTINCT T2.city_code) FROM City AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code",
        "question": "For each city, how many distinct cities have the same city code?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "address_1"
    },
    {
        "query": "SELECT T2.city_name FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Age > 20 ORDER BY T2.latitude DESC",
        "question": "What are the city names where students older than 20 live, ordered from highest to lowest latitude?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "address_1"
    },
    {
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code JOIN Student AS T3 ON T3.city_code = T2.city2_code WHERE T3.Age <= 20",
        "question": "What are the city names where students aged 20 or younger are from, connected to another city through direct distance?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "address_1"
    },
    {
        "query": "SELECT city_code, COUNT(DISTINCT city_name) FROM City WHERE city_code NOT IN ( SELECT T2.city1_code FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code ) GROUP BY city_code HAVING COUNT(city_name) > 1 LIMIT 5",
        "question": "What are the next 5 city codes with more than one city name that are not connected to any other city by a direct distance, along with the count of distinct city names for each code?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "address_1"
    },
    {
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.city2_code != 'ABC' ORDER BY T2.distance DESC",
        "question": "What are the city names, excluding the city with code 'ABC', listed in descending order of distance?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "address_1"
    },
    {
        "query": "SELECT T1.Fname, T2.city_name FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code JOIN Direct_distance AS T3 ON T2.city_code = T3.city1_code WHERE T1.Age BETWEEN 20 AND 30 AND T1.Sex = 'M' AND NOT EXISTS (SELECT * FROM City AS T4 WHERE T4.city_code = T3.city2_code AND T4.country = 'USA')",
        "question": "What are the first names of male students aged 20 to 30, along with their city of residence, such that their city does not have a direct distance to any US city?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "address_1"
    },
    {
        "query": "SELECT T1.city_name, COUNT(T2.StuID) FROM City AS T1 JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.Age BETWEEN 18 AND 22 AND T1.country = 'USA' GROUP BY T1.city_name",
        "question": "In the USA, what are the city names and their respective number of students aged between 18 and 22?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "address_1"
    },
    {
        "query": "SELECT T1.Fname, T2.city_name, T3.distance FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code JOIN Direct_distance AS T3 ON T2.city_code = T3.city1_code WHERE T1.Age BETWEEN 20 AND 30 OR T1.Major = (SELECT Major FROM Student WHERE Advisor = 1) OR T1.Sex = 'M'",
        "question": "What are the first names of male students or students aged 20 to 30 or students with the same major as the students advised by advisor 1, along with the city names and direct distances of their respective cities?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "address_1"
    },
    {
        "query": "SELECT T1.LName FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code JOIN Direct_distance AS T3 ON T2.city_code = T3.city1_code WHERE T3.distance < 100 AND (SELECT COUNT(*) FROM City WHERE city_code = T1.city_code) > 1 ORDER BY T1.LName ASC LIMIT 10",
        "question": "What are the last names of the 11th to 20th students from cities with at least two students and within a 100-mile radius of another city, listed alphabetically?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "address_1"
    },
    {
        "query": "SELECT T1.Service_ID, AVG(T1.Customer_ID) FROM Customers_and_Services AS T1 JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_ID BETWEEN 100 AND 200 GROUP BY T1.Service_ID ORDER BY T1.Service_ID ASC LIMIT 10",
        "question": "What are the average customer IDs for each service ID, for customers with IDs between 100 and 200, listed in ascending order of service ID, from the 11th to the 20th result?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT T1.Service_ID FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T1.Service_ID = 1 AND T2.Customer_ID = 1",
        "question": "What is the service id of service number 1 provided to customer number 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT Service_ID FROM Services WHERE NOT EXISTS (SELECT 1 FROM Customer_Interactions WHERE Customer_Interactions.Service_ID = Services.Service_ID AND Status_Code = 'active')",
        "question": "Which services do not have any active customer interactions?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT T1.Service_Details FROM Services AS T1 WHERE T1.Service_ID = 12345 OR T1.Service_ID NOT IN (SELECT T2.Service_ID FROM Customers_and_Services AS T2 WHERE T2.Service_ID = 67890)",
        "question": "What are the service details for service id 12345 or for services not associated with customers and services id 67890?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT Service_ID FROM Services WHERE Service_ID != 1 ORDER BY Service_ID ASC",
        "question": "List all service ids in ascending order, excluding the id 1.",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT COUNT(Customer_ID) FROM Customers_and_Services WHERE Customer_ID BETWEEN 100 AND 200 AND Customers_and_Services_ID IN ( SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Pattern_Recognition = 'positive' ) LIMIT 10",
        "question": "What is the number of customers with IDs between 100 and 200 who have positive pattern recognition in the analytical layer, showing results from the 11th to the 20th?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT * FROM Customer_Interactions WHERE Customer_ID IN (SELECT Customer_ID FROM Customers) ORDER BY Customer_ID DESC LIMIT 1",
        "question": "What are the details of the customer interaction with the second highest customer ID that is associated with a customer in the customers list?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT T1.Service_ID, T1.Service_Details FROM Services AS T1 WHERE T1.Service_ID BETWEEN 10 AND 100 AND T1.Service_ID NOT IN (SELECT T2.Service_ID FROM Services AS T2 WHERE T2.Service_ID = 50) AND T1.Service_Details = 'details' ORDER BY T1.Service_ID DESC",
        "question": "What are the service details with IDs between 10 and 100 excluding 50, sorted by service ID in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT COUNT(Service_ID) FROM Services AS T1",
        "question": "How many services are there in total?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT T1.Service_ID FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_ID > 10 ORDER BY T1.Service_ID DESC LIMIT 100",
        "question": "What are the 100 most recent service ids from the services table where the service id is greater than 10, in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT T1.Service_Details, T2.Customer_Details FROM Services AS T1 JOIN Customers_and_Services AS T3 ON T1.Service_ID = T3.Service_ID JOIN Customers AS T2 ON T3.Customer_ID = T2.Customer_ID WHERE T1.Service_ID BETWEEN 10 AND 100 AND T2.Customer_ID = 100",
        "question": "What are the service details for services with IDs between 10 and 100 that are used by the customer with ID 100, along with the details of customer 100?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code >= 5 LIMIT 10",
        "question": "What are the customer IDs of the next 10 customers with a status code of 5 or more after the first 10 results?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT Service_ID FROM Services WHERE NOT EXISTS (SELECT Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Service_ID = Services.Service_ID) LIMIT 10",
        "question": "What are the IDs of the 10 services that have no associated customers and services?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT T1.Customer_ID, T2.Service_Details FROM Customers AS T1 JOIN Customers_and_Services AS T3 ON T1.Customer_ID = T3.Customer_ID JOIN Services AS T2 ON T2.Service_ID = T3.Service_ID WHERE T1.Customer_ID <= 10",
        "question": "What are the customer IDs and corresponding service details for customers with IDs less than or equal to 10?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "government_shift"
    },
    {
        "query": "SELECT Fname FROM Student ORDER BY Fname ASC",
        "question": "What are the first names of the students listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT LName, Fname FROM Student WHERE Age > 20",
        "question": "What are the last names and first names of students who are older than 20?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT T1.LName, COUNT(DISTINCT T2.Allergy) FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy ORDER BY T1.LName DESC LIMIT 10",
        "question": "What are the last names of the 11th to 20th students in descending order of last name, along with the number of distinct allergies for each of them?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Allergy) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age <= 20 ORDER BY T1.Allergy ASC",
        "question": "How many distinct allergies are present among students under the age of 21?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT LName FROM Student WHERE Age >= 20 LIMIT 10",
        "question": "What are the last names of the 11th to 20th student who are 20 years old or older?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT T1.LName, COUNT(DISTINCT T1.StuID) FROM Student AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.StuID NOT IN (SELECT StuID FROM Has_Allergy) GROUP BY T1.LName ORDER BY T1.LName ASC",
        "question": "What is the number of students with distinct IDs for each last name, excluding those who have allergies, sorted in ascending order by last name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT T1.LName, T1.Fname FROM Student AS T1 JOIN Student AS T2 ON T1.Major = T2.Major WHERE T1.Age > T2.Age ORDER BY T1.LName ASC",
        "question": "What are the names of students with the same major, ordered by last name, where one is older than the other?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T3.Allergy), T1.LName FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T1.Age BETWEEN 18 AND 25 OR T1.Sex = 'M' OR EXISTS (SELECT 1 FROM Has_Allergy WHERE StuID = T1.StuID)",
        "question": "For each last name, how many distinct allergies are held by students between the ages of 18 and 25, students who are male, or students who have at least one allergy?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT T1.LName, T1.Fname, COUNT(T2.Allergy) FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID GROUP BY T1.LName, T1.Fname HAVING COUNT(T2.Allergy) > 1 ORDER BY T1.Age DESC",
        "question": "What are the names of students who have more than one allergy, listed in descending order of age?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT T1.Allergy, COUNT(T2.StuID) AS StudentCount FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy WHERE T1.AllergyType > 'A' GROUP BY T1.Allergy ORDER BY T1.Allergy ASC",
        "question": "For each allergy name with an allergy type greater than 'A', what is the total number of students with that allergy, listed in ascending order by allergy name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT T1.LName, T3.AllergyType FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T1.Sex = 'M' ORDER BY T1.LName ASC",
        "question": "What are the last names of male students from the Student table, along with their corresponding allergy types, listed in ascending order by last name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT Fname FROM Student WHERE Age > (SELECT AVG(Age) FROM Student) ORDER BY Fname ASC LIMIT 1",
        "question": "What is the alphabetically first first name of students older than the average student age, excluding the very first one? ",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "allergy_1"
    },
    {
        "query": "SELECT T1.name, COUNT(DISTINCT T2.name) FROM mountain AS T1 JOIN mountain AS T2 ON T1.Height > T2.Height",
        "question": "What is the name of each mountain and how many mountains are shorter than it?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT MIN(T1.Height) FROM mountain AS T1 WHERE T1.Country = 'USA' LIMIT 10",
        "question": "What are the next ten lowest heights of mountains in the USA?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T3.id = T2.camera_lens_id WHERE T1.Height > 2000 AND T2.color = 'red' AND NOT EXISTS (SELECT 1 FROM photos AS T4 WHERE T4.mountain_id = T1.id AND T4.color = 'black')",
        "question": "What are the names of the mountains with a height over 2000, that have a red photo taken with a camera lens and do not have any black photos?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT name FROM mountain WHERE Height < 3500 OR Height BETWEEN 4000 AND 5000 OR Range = 'Alps' ORDER BY Height ASC",
        "question": "What are the names of the mountains with a height of either less than 3500, between 4000 and 5000, or in the 'Alps' range, listed in ascending order of height?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT T1.name, T2.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.Height < ( SELECT AVG(Height) FROM mountain )",
        "question": "What are the names of the mountains and their corresponding photos where the height of the mountain is less than the average height of all mountains?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT Height FROM mountain WHERE Height BETWEEN (SELECT MIN(Height) FROM mountain) AND (SELECT MAX(Height) FROM mountain)",
        "question": "What are the heights of mountains with heights that fall within the full range of mountain heights?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT name FROM mountain WHERE id NOT IN (SELECT mountain_id FROM photos WHERE name = 'landscape' AND color = 'black and white') ORDER BY Height DESC",
        "question": "What are the names of the mountains that do not have a black and white landscape photo, listed in descending order of height?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT T1.Range FROM mountain AS T1 WHERE T1.Country = 'USA' AND T1.Height < 5000 AND T1.name = 'Mount Everest'",
        "question": "What mountain range is Mount Everest located in, given that it is in the USA and less than 5000 meters tall?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT T1.Range FROM mountain AS T1 WHERE T1.Height < 2000",
        "question": "What mountain ranges have peaks with a height of less than 2000 meters?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT COUNT(DISTINCT name), MAX(Height) FROM mountain ORDER BY Height ASC",
        "question": "What is the number of distinct mountain names and the maximum height of mountains listed in order from shortest to tallest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT COUNT(*) FROM (SELECT T1.name, T1.Height FROM mountain AS T1 WHERE T1.Range = 'Alps' AND T1.Height BETWEEN 1000 AND 3000 AND T1.Prominence > 500) ORDER BY Height DESC LIMIT 5",
        "question": "How many mountain names in the Alps range, with height between 1000 and 3000 and prominence more than 500 exist, excluding the top 5 highest peaks?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "mountain_photos"
    },
    {
        "query": "SELECT MAX(Units_sold_Millions) FROM game AS T1 ORDER BY Units_sold_Millions DESC LIMIT 10",
        "question": "What is the 11th highest number of units sold in millions among all games?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "video_game"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Title), COUNT(DISTINCT T2.Developers), T1.Platform_name FROM platform AS T1 JOIN game AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Game_ID IN (SELECT Game_ID FROM game_player) LIMIT 10",
        "question": "What are the names of the platforms, along with the number of distinct game titles and developers, for the platforms that have games played by players, listed from the 11th to the 20th result?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "video_game"
    },
    {
        "query": "SELECT Title FROM game WHERE Platform_ID = 1 LIMIT 10",
        "question": "What are the titles of the games for platform with id 1, starting from the 11th game?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "video_game"
    },
    {
        "query": "SELECT T1.Title, T2.Title FROM game AS T1 JOIN game AS T2 ON T1.Developers != T2.Developers ORDER BY T1.Title ASC",
        "question": "What are the pairs of game titles developed by different developers, listed in ascending order by the first game's title?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "video_game"
    },
    {
        "query": "SELECT COUNT(Platform_ID) FROM platform ORDER BY Platform_ID ASC",
        "question": "What is the total number of platforms, listed in ascending order of platform ID?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "video_game"
    },
    {
        "query": "SELECT Download_rank FROM platform ORDER BY Download_rank ASC",
        "question": "What are the download ranks of the platforms in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "video_game"
    },
    {
        "query": "SELECT COUNT(Platform_ID) FROM platform WHERE Platform_name != 'Xbox'",
        "question": "How many platforms are not Xbox?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "video_game"
    },
    {
        "query": "SELECT Platform_ID, MIN(Download_rank) FROM platform WHERE Download_rank BETWEEN 1 AND 10 GROUP BY Platform_ID ORDER BY Platform_ID ASC",
        "question": "What is the minimum download rank for each platform where the download rank is between 1 and 10, listed in ascending order by platform ID?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "video_game"
    },
    {
        "query": "SELECT AVG(p.Download_rank) FROM game AS g JOIN platform AS p ON g.Platform_ID = p.Platform_ID WHERE g.Units_sold_Millions <= 10",
        "question": "What is the average download rank of the platforms for games that sold 10 million units or less?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "video_game"
    },
    {
        "query": "SELECT T1.Title FROM game AS T1 JOIN game AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T1.Platform_ID = 1 OR T2.Title BETWEEN 'A' AND 'Z' OR EXISTS (SELECT 1 FROM game WHERE Game_ID = 1)",
        "question": "What are the titles of games available on the platform with id 1 or any games with titles between 'A' and 'Z', or if there exists a game with id 1?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "video_game"
    },
    {
        "query": "SELECT T1.Title, COUNT(T2.Player_ID) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T1.Units_sold_Millions > 10 AND T1.Release_Date BETWEEN '2010' AND '2020' AND T1.Developers = 'EA' GROUP BY T1.Title ORDER BY COUNT(T2.Player_ID) DESC",
        "question": "What are the titles of games developed by EA, released between 2010 and 2020, and sold more than 10 million units, ranked by the number of players in descending order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "video_game"
    },
    {
        "query": "SELECT T1.Player_name, SUM(T1.Rank_of_the_year) FROM player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID WHERE T1.Rank_of_the_year > 100 GROUP BY T1.Player_name ORDER BY T1.Player_name ASC",
        "question": "What is the total rank of the year for each player with a rank higher than 100, listed in ascending order by player name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "video_game"
    },
    {
        "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.country != 'USA'",
        "question": "What are the names of the destination airports located outside the USA?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_4"
    },
    {
        "query": "SELECT * FROM airports WHERE elevation >= 1000 AND x >= 1000 AND y >= 1000",
        "question": "What are the details of all airports with an elevation of at least 1000 and coordinates x and y of at least 1000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_4"
    },
    {
        "query": "SELECT T1.name FROM airports AS T1 WHERE NOT EXISTS ( SELECT 1 FROM routes AS T2 WHERE T2.dst_apid = T1.apid AND T2.dst_ap = T1.name ) GROUP BY T1.name",
        "question": "What are the names of airports where no flights arrive?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_4"
    },
    {
        "query": "SELECT Name FROM airports AS T1 WHERE ICAO != 'KLAX'",
        "question": "What are the names of the airports whose ICAO code is not KLAX?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "flight_4"
    },
    {
        "query": "SELECT T1.name FROM airports AS T1 WHERE T1.apid = (SELECT T2.dst_apid FROM routes AS T2 WHERE T2.dst_ap = 'Paris') AND T1.name = (SELECT T3.name FROM airports AS T3 WHERE T3.icao = 'LFPG')",
        "question": "What is the name of the airport in Paris that has the ICAO code LFPG?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_4"
    },
    {
        "query": "SELECT T1.name, COUNT(T2.rid) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.x <= 0",
        "question": "What are the names of airports with a longitude of 0 or less and how many routes do they have as a destination?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_4"
    },
    {
        "query": "SELECT MAX(apid) FROM airports WHERE elevation > 1000",
        "question": "What is the airport id of the airport with the highest elevation above 1000 feet?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "flight_4"
    },
    {
        "query": "SELECT dst_ap FROM routes WHERE dst_ap < 'A' ORDER BY dst_ap ASC",
        "question": "List the destination airport names that start with a letter before 'A' in alphabetical order.",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_4"
    },
    {
        "query": "SELECT Artist, COUNT(DISTINCT Famous_Title) FROM artist WHERE Artist_ID IN (SELECT Artist_ID FROM volume WHERE Weeks_on_Top > 10) ORDER BY Artist ASC LIMIT 1",
        "question": "Who is the first artist (in alphabetical order) among those whose songs stayed on top for more than 10 weeks, and how many distinct famous titles does this artist have?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_4"
    },
    {
        "query": "SELECT Artist FROM artist",
        "question": "What are the names of the artists?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "music_4"
    },
    {
        "query": "SELECT Artist FROM artist WHERE Artist_ID IN (SELECT Artist_ID FROM volume WHERE Volume_Issue = 'issue1') ORDER BY Artist DESC",
        "question": "Who are the artists in issue1, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_4"
    },
    {
        "query": "SELECT T1.Artist, T2.Weeks_on_Top FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age BETWEEN 20 AND 30 AND T2.Weeks_on_Top > 5 AND NOT EXISTS (SELECT 1 FROM music_festival AS T3 WHERE T3.Volume = T2.Volume_ID)",
        "question": "What are the names of artists aged 20-30 with more than 5 weeks on top without a music festival volume, along with their weeks on top?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_4"
    },
    {
        "query": "SELECT T1.Artist, T2.Artist FROM artist AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID ORDER BY T1.Artist ASC",
        "question": "What are the pairs of artists with matching IDs, listed in ascending order by artist name?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_4"
    },
    {
        "query": "SELECT Artist_ID FROM artist WHERE Age < 30",
        "question": "What are the IDs of the artists who are less than 30 years old?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "music_4"
    },
    {
        "query": "SELECT T1.Artist FROM artist AS T1 WHERE EXISTS ( SELECT T2.Volume_Issue FROM volume AS T2 WHERE T2.Artist_ID = T1.Artist_ID AND T2.Weeks_on_Top > 10 ) ORDER BY T1.Artist DESC",
        "question": "Which artists have songs that stayed on top for more than 10 weeks, listed in descending order by artist name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_4"
    },
    {
        "query": "SELECT COUNT(Volume_Issue) FROM volume WHERE Weeks_on_Top BETWEEN 10 AND 20 ORDER BY Weeks_on_Top DESC LIMIT 5",
        "question": "What are the counts of volume issues with weeks on top between 10 and 20, ordered in descending order, excluding the first 5 results?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "music_4"
    },
    {
        "query": "SELECT AVG(T1.Age), SUM(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Song = 'song_name'",
        "question": "What is the average age of the artists with the song 'song_name' and the total number of weeks their songs spent on top?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_4"
    },
    {
        "query": "SELECT T1.Artist FROM artist AS T1 WHERE T1.Age BETWEEN 20 AND 40 AND T1.Famous_Release_date = '2020' GROUP BY T1.Artist ORDER BY T1.Artist ASC LIMIT 10",
        "question": "What are the next 10 artists, in ascending order, who were between 20 and 40 years old and had a famous release in 2020?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_4"
    },
    {
        "query": "SELECT COUNT(Artist_ID), MAX(Age) FROM artist WHERE Artist_ID <= 10",
        "question": "What is the count of artists with an Artist_ID of 10 or less, and what is their maximum age?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_4"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Artist_ID) FROM artist AS T1 WHERE T1.Age > ( SELECT AVG(Age) FROM artist ) OR T1.Artist_ID IN ( SELECT T2.Artist_ID FROM volume AS T2 WHERE T2.Weeks_on_Top > 5 ) ORDER BY T1.Artist_ID ASC",
        "question": "How many unique artists are either older than the average age of all artists or have had a song stay on top for more than 5 weeks, listed in ascending order by artist ID?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_4"
    },
    {
        "query": "SELECT COUNT(DISTINCT v.Artist_ID) FROM volume v JOIN music_festival m ON v.Volume_ID = m.Volume WHERE v.Artist_ID = 1 AND EXISTS (SELECT 1 FROM artist a WHERE a.Artist_ID = v.Artist_ID)",
        "question": "How many distinct artists with Artist_ID of 1 have participated in a music festival?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_4"
    },
    {
        "query": "SELECT T1.Name FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id WHERE T1.Age > (SELECT AVG(Age) FROM technician) AND T2.Machine_ID = (SELECT Machine_ID FROM machine ORDER BY value_points ASC LIMIT 1) ORDER BY T1.Name ASC",
        "question": "What are the names of the technicians older than the average age, assigned to the machine with the lowest value points, listed in ascending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "machine_repair"
    },
    {
        "query": "SELECT T1.Machine_ID FROM machine AS T1 WHERE T1.Making_Year BETWEEN 2010 AND 2015 AND T1.Class = 'ClassA' AND EXISTS (SELECT 1 FROM repair_assignment AS T2 WHERE T2.Machine_ID = T1.Machine_ID)",
        "question": "What are the IDs of ClassA machines made between 2010 and 2015 that have at least one record of repair assignment?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "machine_repair"
    },
    {
        "query": "SELECT MAX(Machine_ID) FROM machine WHERE Making_Year < 2020",
        "question": "What is the highest machine ID of the machines made before 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "machine_repair"
    },
    {
        "query": "SELECT DISTINCT T1.Machine_ID FROM machine AS T1 WHERE T1.Making_Year BETWEEN 2010 AND 2015 OR T1.value_points > 100 AND T1.Machine_ID NOT IN (SELECT Machine_ID FROM machine WHERE Class = 'A')",
        "question": "What are the IDs of the machines made between 2010 and 2015 or with more than 100 value points, excluding class A machines?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "machine_repair"
    },
    {
        "query": "SELECT T1.Machine_ID, T2.repair_ID FROM machine AS T1 JOIN repair_assignment AS T2 ON T1.Machine_ID = T2.Machine_ID ORDER BY T1.Machine_ID DESC",
        "question": "What are the machine IDs and their corresponding repair IDs in descending order of machine IDs?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "machine_repair"
    },
    {
        "query": "SELECT T2.repair_ID FROM machine AS T1 JOIN repair_assignment AS T2 ON T1.Machine_ID = T2.Machine_ID WHERE T1.Machine_ID != 100",
        "question": "What are the repair IDs of the repairs assigned to machines other than the one with ID 100?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "machine_repair"
    },
    {
        "query": "SELECT T1.Name FROM technician AS T1 JOIN technician AS T2 ON T1.Team = T2.Team WHERE T1.technician_id = T2.technician_id AND T1.Name = 'John' AND EXISTS (SELECT T3.Name FROM technician AS T3 JOIN technician AS T4 ON T3.Team = T4.Team WHERE T3.Name = 'John')",
        "question": "What is the name of the technician who is on the same team as at least one other technician with the name 'John' and also is named 'John'?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "machine_repair"
    },
    {
        "query": "SELECT T3.Name, COUNT(T1.repair_ID) FROM repair AS T1 JOIN repair_assignment AS T2 ON T1.repair_ID = T2.repair_ID JOIN technician AS T3 ON T3.technician_id = T2.technician_id WHERE T3.Age < 30",
        "question": "What are the names of technicians under 30 and the number of repairs they were assigned to?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "machine_repair"
    },
    {
        "query": "SELECT T1.Machine_ID, T1.Making_Year FROM machine AS T1 WHERE T1.value_points > 10 AND T1.Making_Year BETWEEN 2000 AND 2010 AND T1.quality_rank < 5 LIMIT 10",
        "question": "What are the machine ID and making year of the next 10 machines with a value of more than 10 points, quality ranking less than 5, and made between 2000 and 2010?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "machine_repair"
    },
    {
        "query": "SELECT Name FROM mountain WHERE Country != 'USA' ORDER BY Height DESC",
        "question": "What are the names of the mountains outside the USA, listed in order of height from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "climbing"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Points) AS Total_Points FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Height BETWEEN 1000 AND 2000 OR T2.Country = 'USA' ORDER BY Total_Points DESC",
        "question": "What are the names of mountains with their total climber points, for mountains between 1000 and 2000 meters high or climbed by someone from the USA, listed in descending order of total points?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "climbing"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Points) FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Height > 500 AND T1.Height < 1000 AND T2.Time = '2020' GROUP BY T1.Name HAVING SUM(T2.Points) > 100 ORDER BY T1.Name ASC LIMIT 10",
        "question": "What are the names of the next 10 mountains between 500 and 1000 meters high that have total points over 100 earned by climbers in 2020, listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "climbing"
    },
    {
        "query": "SELECT T2.Country, AVG(T1.Height) FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID JOIN mountain AS T3 ON T3.Country = T2.Country WHERE T2.Country = 'USA' OR T1.Height BETWEEN 8000 AND 10000 OR NOT EXISTS (SELECT * FROM climber AS T4 WHERE T4.Mountain_ID = T1.Mountain_ID) GROUP BY T2.Country ORDER BY T2.Country ASC",
        "question": "What is the average height of mountains in each country, where the country is the USA or the mountain is between 8000 and 10000 meters high or has not been climbed, sorted by country in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "climbing"
    },
    {
        "query": "SELECT mountain.Height, mountain.Name FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Height > 2000 OR T1.Range = 'Alps' OR NOT EXISTS (SELECT 1 FROM climber AS T3 WHERE T3.Mountain_ID = T1.Mountain_ID AND T3.Points < 100) ORDER BY T1.Height ASC",
        "question": "What are the names and heights of mountains that are either higher than 2000 meters, part of the Alps range, or have no climbers with less than 100 points, listed in ascending order of height?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "climbing"
    },
    {
        "query": "SELECT T1.Name, MIN(T1.Height) FROM mountain AS T1 WHERE T1.Name != 'Mount Everest' GROUP BY T1.Name ORDER BY T1.Name ASC",
        "question": "What are the names of mountains, excluding Mount Everest, along with their minimum height, listed in alphabetical order?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "climbing"
    },
    {
        "query": "SELECT T1.Country, T2.Name FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Prominence > 500 LIMIT 10",
        "question": "What are the countries and names of climbers of the next 10 mountains with prominence greater than 500?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "climbing"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Climber_ID) FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID GROUP BY T1.Name ORDER BY T1.Name ASC",
        "question": "What are the names of mountains and the number of distinct climbers for each mountain, listed in ascending order by mountain name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "climbing"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Climber_ID) FROM mountain AS T1 LEFT JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE EXISTS (SELECT 1 FROM climber WHERE climber.Mountain_ID = T1.Mountain_ID) GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Climber_ID) > 1 ORDER BY T1.Name ASC",
        "question": "What are the names of the mountains that have been climbed by more than one climber, listed in ascending order by mountain name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "climbing"
    },
    {
        "query": "SELECT Height FROM mountain WHERE Country = 'USA' AND Height > (SELECT MAX(Height) FROM mountain WHERE Country = 'France') ORDER BY Height DESC LIMIT 10",
        "question": "What are the heights of the 11th to 20th highest mountains in the USA that are higher than the highest mountain in France?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "climbing"
    },
    {
        "query": "SELECT T1.Name, T1.Height FROM mountain AS T1 WHERE EXISTS (SELECT 1 FROM climber AS T2 WHERE T2.Mountain_ID = T1.Mountain_ID AND T2.Points > 1000) LIMIT 10",
        "question": "What are the names and heights of the next 10 mountains that have been climbed for more than 1000 points?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "climbing"
    },
    {
        "query": "SELECT S1.Name FROM Scientists AS S1 JOIN AssignedTo AS A1 ON S1.SSN = A1.Project WHERE A1.Project = 1 LIMIT 5",
        "question": "What are the names of the 6th to 10th scientists assigned to project 1?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Name), COUNT(DISTINCT T1.SSN), COUNT(T1.SSN) FROM Scientists AS T1 WHERE T1.SSN = 12345 OR T1.Name BETWEEN 'John' AND 'Mike'",
        "question": "How many unique names, unique ssn and total entries are there for scientists with ssn 12345 or names between 'John' and 'Mike'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT T1.Name FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code WHERE T3.Hours <= 100 AND T1.Name = T3.Name",
        "question": "What are the names of scientists who are assigned to a project with the same name as theirs and that requires 100 hours or less?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT T1.Name, MIN(T3.Hours) FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code GROUP BY T1.Name ORDER BY T1.Name ASC",
        "question": "What are the names of scientists and the minimum hours they have worked on a project?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT Name FROM Scientists WHERE NOT EXISTS (SELECT 1 FROM AssignedTo WHERE Scientist = Scientists.SSN) ORDER BY Name ASC",
        "question": "What are the names of scientists who are not assigned to any project, listed alphabetically by name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT P.Name, COUNT(A.Project) FROM Projects P JOIN AssignedTo A ON P.Code = A.Project WHERE P.Hours > 1000",
        "question": "What are the names of the projects with more than 1000 hours, along with the number of scientists assigned to each project?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT T1.Name FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Project WHERE T2.Project NOT IN (SELECT Project FROM AssignedTo WHERE Scientist = 101) AND T2.Project = 'AeH' ORDER BY T1.Name ASC",
        "question": "What are the names of the scientists assigned to project 'AeH' who are not scientist 101, listed in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT Name FROM Scientists WHERE Name <= 'John' ORDER BY Name ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th scientists when the list of scientists is ordered alphabetically by name and only includes those with a name before or equal to 'John'?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT T2.Name FROM AssignedTo AS T1 JOIN Scientists AS T2 ON T1.Scientist = T2.SSN WHERE T1.Project BETWEEN 'AeH1' AND 'Ast1' AND T1.Project = 'AeH1' ORDER BY T2.Name DESC",
        "question": "What are the names of scientists assigned to 'AeH1' project in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT T1.Name FROM Scientists AS T1 WHERE T1.SSN IN (SELECT T2.Project FROM AssignedTo AS T2 WHERE T2.Project = 'AeH1' AND T1.SSN = T2.Scientist) OR T1.Name = 'John Smith' ORDER BY T1.Name DESC",
        "question": "What are the names of the scientists John Smith and those assigned to project 'AeH1', listed in descending order?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT T1.Name, AVG(T2.Hours) FROM Scientists AS T1 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist JOIN Projects AS T2 ON T3.Project = T2.Code GROUP BY T1.Name HAVING AVG(T2.Hours) < 50 ORDER BY T1.Name ASC LIMIT 10",
        "question": "What are the names of the scientists with an average of less than 50 hours spent on projects, sorted alphabetically from the 11th to the 20th scientist?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT T1.Name, MIN(T2.Hours) FROM Scientists AS T1 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist JOIN Projects AS T2 ON T3.Project = T2.Code WHERE T2.Hours >= 100 GROUP BY T1.Name",
        "question": "What are the names of the scientists working on at least one project that requires at least 100 hours and what are the minimum hours of those projects?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "scientist_1"
    },
    {
        "query": "SELECT T1.Customer_name FROM Customers AS T1 JOIN First_Notification_of_Loss AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Services AS T3 ON T3.Service_ID = T2.Service_ID JOIN Claims AS T4 ON T2.FNOL_ID = T4.FNOL_ID WHERE T4.Claim_ID = 1",
        "question": "What is the name of the customer associated with claim ID 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT COUNT(DISTINCT Customer_ID) FROM First_Notification_of_Loss WHERE Service_ID >= 10",
        "question": "How many unique customers have a service ID of 10 or higher when they first notify of loss?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT Settlement_Amount FROM Settlements WHERE Settlement_Amount > (SELECT AVG(Settlement_Amount) FROM Settlements) LIMIT 10",
        "question": "What are the 11th to 20th highest settlement amounts received?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT COUNT(Claim_ID) FROM Claims WHERE Effective_Date <= '1990-01-01'",
        "question": "How many claims were effective before or on January 1st, 1990?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT * FROM First_Notification_of_Loss WHERE Customer_ID <= 100",
        "question": "What are the details of all first notifications of loss for customers with a customer id of 100 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT T1.Customer_name FROM Customers AS T1 JOIN First_Notification_of_Loss AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Service_ID = 1 AND EXISTS (SELECT 1 FROM Settlements AS T3 WHERE T3.Claim_ID = T2.FNOL_ID) ORDER BY T1.Customer_name ASC",
        "question": "What are the names of customers who have a first notification of loss with service id 1 and a corresponding settlement, listed in ascending order by customer name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT * FROM Available_Policies WHERE policy_type_code = 'type1' OR Customer_Phone LIKE '%123%' OR Policy_ID BETWEEN 100 AND 200 OR NOT EXISTS (SELECT 1 FROM Customers_Policies WHERE Available_Policies.Policy_ID = Customers_Policies.Policy_ID LIMIT 1) LIMIT 5",
        "question": "What are the next five available policies with type 'type1', phone number containing '123', or policy id between 100 and 200, excluding those already purchased by a customer?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT DISTINCT T1.Customer_name AS New_Name FROM Customers AS T1 WHERE T1.Customer_name != 'ABC'",
        "question": "What are the distinct customer names excluding 'ABC'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT Settlement_Amount FROM Settlements WHERE Settlement_Amount < 10000 LIMIT 10",
        "question": "What are the settlement amounts less than 10,000, starting from the 11th, for the next 10 settlements?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 WHERE T1.Customer_ID NOT IN (SELECT T2.Customer_ID FROM Customers AS T2 GROUP BY T2.Customer_ID HAVING COUNT(T2.Customer_ID) = 1)",
        "question": "What are the customer IDs of customers who appear more than once in the list of customers?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT T1.Customer_ID FROM Customers_Policies AS T1 JOIN Customers_Policies AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Policy_ID BETWEEN 100 AND 200 LIMIT 10",
        "question": "Which customer IDs have a policy ID between 100 and 200, listed from the 11th to 20th matches?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "insurance_fnol"
    },
    {
        "query": "SELECT COUNT(DISTINCT c.Club_name), AVG(c.Start_year) FROM club c JOIN coach co ON c.Club_ID = co.Club_ID JOIN player_coach pc ON co.Coach_ID = pc.Coach_ID WHERE c.Region = 'North' AND pc.Starting_year > 2000 AND c.Club_ID NOT IN (SELECT Club_ID FROM match_result WHERE Gold > 10) ORDER BY c.Start_year DESC",
        "question": "What is the number of unique clubs and the average start year of clubs in the North region, that started a coach-player collaboration after 2000 and have never won more than 10 gold medals, listed in descending order of their start years?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT Sponsor_name FROM player WHERE Votes <= 50",
        "question": "What are the names of sponsors of players who received 50 votes or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT T1.Player_name, T2.Player_name FROM player AS T1 JOIN player AS T2 ON T1.Player_ID = T2.Player_ID WHERE T1.Gender = 'Male'",
        "question": "What are the names of male players paired with themselves?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT T1.Rank FROM coach AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Rank >= 10 AND T2.Start_year >= 2000 LIMIT 10",
        "question": "What are the ranks of the top 10 coaches with ranks 10 and above from clubs established in 2000 or later, starting from the 11th coach?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT Player_name FROM player WHERE Sponsor_name != 'Nike' LIMIT 10",
        "question": "What are the names of the next 10 players who are not sponsored by Nike?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT T1.Player_name FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID = T2.Player_ID JOIN coach AS T3 ON T2.Coach_ID = T3.Coach_ID WHERE T1.Gender != T3.Gender ORDER BY T1.Player_name ASC LIMIT 10",
        "question": "Who are the next 10 players with a coach of the opposite gender, listed in ascending order by player name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT MAX(Rank) FROM player WHERE Votes > 100",
        "question": "What is the highest rank of players who received more than 100 votes?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT Player_name FROM player WHERE Votes BETWEEN 100 AND 200 AND Sponsor_name = 'Nike' ORDER BY Rank ASC",
        "question": "What are the names of players sponsored by Nike with votes between 100 and 200, listed in ascending order of rank?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT T1.Player_name FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID = T2.Player_ID JOIN coach AS T3 ON T2.Coach_ID = T3.Coach_ID WHERE T1.Player_ID = 100 AND T3.Coach_ID = 50 AND T1.Player_ID NOT IN (SELECT T4.Player_ID FROM player AS T4 JOIN player_coach AS T5 ON T4.Player_ID = T5.Player_ID WHERE T5.Starting_year < 2015) ORDER BY T1.Player_name ASC",
        "question": "What is the name of the player with ID 100 and coach ID 50, who started coaching after 2015, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT T1.Player_name, T2.Coach_name FROM player AS T1 JOIN player_coach AS T3 ON T1.Player_ID = T3.Player_ID JOIN coach AS T2 ON T3.Coach_ID = T2.Coach_ID WHERE NOT EXISTS (SELECT 1 FROM match_result AS T4 WHERE T4.Club_ID = T2.Club_ID) ORDER BY T1.Rank ASC LIMIT 10",
        "question": "What are the names of the top 10 ranked players and their coaches, excluding those whose clubs have participated in a match, starting from the 11th row?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT COUNT(Player_ID), SUM(Votes) FROM player WHERE Rank != '1'",
        "question": "What is the count of players and the total votes received by players who are not ranked first?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT T1.Club_name, COUNT(DISTINCT T3.Player_ID) FROM club AS T1 JOIN coach AS T2 ON T1.Club_ID = T2.Club_ID JOIN player_coach AS T3 ON T2.Coach_ID = T3.Coach_ID WHERE T2.Rank <= 10 GROUP BY T1.Club_name ORDER BY COUNT(DISTINCT T3.Player_ID) DESC",
        "question": "What are the club names with their corresponding number of distinct players, ranked by the number of distinct players in descending order, for clubs whose coaches are ranked 10 or better, grouped by club name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT COUNT(DISTINCT Player_name), Sponsor_name FROM player WHERE Player_ID = (SELECT Player_ID FROM player_coach WHERE Coach_ID = (SELECT Coach_ID FROM coach WHERE Rank = 1)) AND Gender = 'Male' ORDER BY Player_name ASC",
        "question": "What is the count of distinct male players coached by the highest-ranked coach, listed in ascending order by player name, along with their corresponding sponsor names?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT MAX(Votes) FROM player WHERE Rank <= 5",
        "question": "What is the maximum number of votes for the top 5 ranked players?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Player_name) AS Player_name FROM player AS T1 WHERE T1.Votes > 1000 ORDER BY Player_name DESC LIMIT 5",
        "question": "What are the names of the 6th to 10th players with the most votes, with more than 1000 votes, listed in descending order by player name?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT Club_ID FROM club WHERE Start_year BETWEEN 1990 AND 2000 AND Club_name = 'Club1'",
        "question": "What are the club IDs of 'Club1' that started between 1990 and 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "riding_club"
    },
    {
        "query": "SELECT T1.Fname FROM Student AS T1 JOIN Plays_Games AS T2 ON T1.StuID = T2.StuID JOIN Video_Games AS T3 ON T2.GameID = T3.GameID WHERE T1.Age BETWEEN 18 AND 20 OR T3.GType = 'Strategy' ORDER BY T1.Fname ASC",
        "question": "What are the names of students who are between 18 and 20 years old or play strategy games, listed in ascending order by first name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_1"
    },
    {
        "query": "SELECT AVG(Age) FROM Student WHERE Sex = 'M'",
        "question": "What is the average age of male students?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "game_1"
    },
    {
        "query": "SELECT SUM(T1.Hours_Played) FROM Plays_Games AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Major != 10",
        "question": "What is the total number of hours played by students who are not majoring in the major with code 10?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "game_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Sex), T2.SportName FROM Student AS T1 JOIN SportsInfo AS T2 ON T1.StuID = T2.StuID WHERE T1.Age > 20 AND EXISTS (SELECT 1 FROM Student AS T3 JOIN Plays_Games AS T4 ON T3.StuID = T4.StuID WHERE T3.Age > 20)",
        "question": "What is the count of distinct sexes of students above 20 years old and the names of sports they play, given that there exists at least one student above 20 years old who plays games?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_1"
    },
    {
        "query": "SELECT T1.LName, T2.GName FROM Student AS T1 JOIN Plays_Games AS T3 ON T1.StuID = T3.StuID JOIN Video_Games AS T2 ON T3.GameID = T2.GameID WHERE T1.Age < 20",
        "question": "What are the last names of students under 20 and the names of the video games they play?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "game_1"
    },
    {
        "query": "SELECT T1.LName, T2.LName FROM Student AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.Age <= T2.Age",
        "question": "What are the last name pairs of students of the same age or different ages where the first student is younger than or the same age as the second student?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "game_1"
    },
    {
        "query": "SELECT AVG(Age) FROM Student WHERE Age < 20",
        "question": "What is the average age of students under 20 years old?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "game_1"
    },
    {
        "query": "SELECT T1.LName, T2.SportName, MIN(T1.Age) FROM Student AS T1 JOIN SportsInfo AS T2 ON T1.StuID = T2.StuID WHERE T1.Age > 18 GROUP BY T1.LName, T2.SportName",
        "question": "What is the youngest age of students above 18, grouped by their last name and the sport they play?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "game_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.SportName), AVG(T1.HoursPerWeek) FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age BETWEEN 18 AND 25",
        "question": "What is the number of different sports played and the average hours per week spent playing sports by students between the ages of 18 and 25?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_1"
    },
    {
        "query": "SELECT LName, Fname FROM Student WHERE Age > 18",
        "question": "What are the last names and first names of students older than 18?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "game_1"
    },
    {
        "query": "SELECT AVG(T1.Hours_Played), T2.GName FROM Plays_Games AS T1 JOIN Video_Games AS T2 ON T1.GameID = T2.GameID WHERE T1.Hours_Played <= 100",
        "question": "What is the average hours played and the corresponding game name for video games that have been played for 100 hours or less?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "game_1"
    },
    {
        "query": "SELECT T1.GName FROM Video_Games AS T1 JOIN Plays_Games AS T2 ON T1.GameID = T2.GameID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Age BETWEEN 20 AND 25 AND T1.GameID IN (SELECT T4.GameID FROM Video_Games AS T4 JOIN Plays_Games AS T5 ON T4.GameID = T5.GameID WHERE T5.Hours_Played > 10)",
        "question": "What are the names of the games played by students aged 20-25 who play games that are also played by students who play for more than 10 hours?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_1"
    },
    {
        "query": "SELECT T1.breed_name FROM Breeds AS T1 WHERE T1.breed_code NOT IN ( SELECT T2.breed_code FROM Dogs AS T2 GROUP BY T2.breed_code HAVING SUM(T2.age) > 10)",
        "question": "What are the breed names of breeds whose total age of dogs is less than or equal to 10 years old?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "dog_kennels"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.treatment_type_code) FROM Treatments AS T1 WHERE T1.date_of_treatment > '2020-01-01'",
        "question": "How many different types of treatments were given after January 1, 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "dog_kennels"
    },
    {
        "query": "SELECT T1.dog_id FROM Dogs AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id WHERE NOT EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = T1.dog_id)",
        "question": "What are the dog IDs of the dogs that have not received any treatments?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "dog_kennels"
    },
    {
        "query": "SELECT breed_name, breed_code FROM Breeds ORDER BY breed_code DESC",
        "question": "What are the breed names and breed codes of all breeds in descending order by breed code?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "dog_kennels"
    },
    {
        "query": "SELECT T1.dog_id FROM Dogs AS T1 WHERE T1.breed_code IN (SELECT T2.breed_code FROM Breeds AS T2 WHERE T2.breed_name = 'Labrador')",
        "question": "What are the IDs of the dogs that are Labradors?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "dog_kennels"
    },
    {
        "query": "SELECT * FROM Owners WHERE last_name = 'Smith' OR first_name = 'John' OR email_address BETWEEN 'a' AND 'z'",
        "question": "What are the details of all owners with the last name 'Smith', or the first name 'John', or email addresses starting with letters between 'a' and 'z'?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "dog_kennels"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.treatment_type_code) FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code WHERE T2.treatment_type_description <= 'some description' ORDER BY T1.treatment_type_code ASC LIMIT 10",
        "question": "What are the next 10 treatment types with distinct treatment type codes in ascending order, after the first 10, that have treatment type descriptions less than or equal to 'some description'?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "dog_kennels"
    },
    {
        "query": "SELECT breed_name FROM Breeds WHERE breed_name != 'Mixed'",
        "question": "What are the breeds of dogs other than 'Mixed'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "dog_kennels"
    },
    {
        "query": "SELECT COUNT(T1.dog_id), T2.breed_name FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code WHERE EXISTS (SELECT T3.treatment_id FROM Treatments AS T3 WHERE T3.dog_id = T1.dog_id)",
        "question": "What is the count of dogs that received a treatment, grouped by breed name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "dog_kennels"
    },
    {
        "query": "SELECT Employee_Name FROM Employees ORDER BY Employee_Name ASC LIMIT 10",
        "question": "What are the employee names from the eleventh to the twentieth when sorted alphabetically?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT Document_Type_Name FROM Ref_Document_Types AS T1 WHERE T1.Document_Type_Name != 'Confidential'",
        "question": "What are the document type names that are not 'Confidential'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Document_Name), T2.Document_Type_Name FROM All_Documents AS T1 JOIN Ref_Document_Types AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T1.Document_ID IN (SELECT T3.Document_ID FROM Document_Locations AS T3 WHERE T3.Date_in_Location_From > '2020-01-01') ORDER BY COUNT(DISTINCT T1.Document_Name) DESC LIMIT 10",
        "question": "What are the top document types (excluding the first 10) with the most distinct document names that were moved to a location after '2020-01-01'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT T1.Document_Name, T2.Document_Name FROM All_Documents AS T1 JOIN All_Documents AS T2 ON T1.Document_ID != T2.Document_ID ORDER BY T1.Document_Name DESC",
        "question": "What are the pairs of document names from all documents, excluding the pairs with the same document ID, listed in descending order of the first document name?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT AVG(Document_ID), COUNT(Document_ID) FROM All_Documents WHERE Document_ID > 100",
        "question": "What is the average and total number of document IDs greater than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT Document_Type_Name FROM Ref_Document_Types WHERE Document_Type_Code >='X'",
        "question": "What are the names of the document types with a code of 'X' or higher?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT Document_Name, Location_Name FROM All_Documents JOIN Document_Locations ON All_Documents.Document_ID = Document_Locations.Document_ID JOIN Ref_Locations ON Document_Locations.Location_Code = Ref_Locations.Location_Code WHERE Document_Locations.Date_in_Location_From > '2020-01-01' ORDER BY Document_Name ASC",
        "question": "What are the document names and their corresponding location names for documents that were moved to their current location after January 1, 2020, listed in alphabetical order by document name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT T3.Document_Name, COUNT(T3.Document_Type_Code) FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID JOIN All_Documents AS T3 ON T2.Document_ID = T3.Document_ID WHERE T3.Document_ID NOT IN (SELECT T1.Document_ID FROM Document_Locations AS T1 WHERE T1.Date_in_Location_From < '2020-01-01') ORDER BY T3.Document_Name ASC",
        "question": "What are the counts of document types for each document name, ordered by document name, for documents that have never been stored in a location prior to '2020-01-01'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT T1.Document_Type_Name, COUNT(T2.Document_ID) FROM Ref_Document_Types AS T1 JOIN All_Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code JOIN Document_Locations AS T3 ON T2.Document_ID = T3.Document_ID JOIN Ref_Locations AS T4 ON T3.Location_Code = T4.Location_Code WHERE T2.Document_Name != 'Sample' GROUP BY T1.Document_Type_Name ORDER BY T1.Document_Type_Name ASC LIMIT 10",
        "question": "What are the document type names along with their respective document counts, excluding documents named 'Sample', grouped by document type name, ordered alphabetically, and limited to the 10 results after the initial 10?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT Document_Name FROM All_Documents WHERE Date_Stored < '2020-01-01' ORDER BY Document_Name DESC",
        "question": "What are the names of all documents stored before 2020, listed in descending order by document name?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT T1.Document_Name FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Location_Code IN (SELECT T3.Location_Code FROM Ref_Locations AS T3 WHERE T3.Location_Name = 'Location1')",
        "question": "What are the document names stored in Location1?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT AVG(T1.Document_ID) FROM All_Documents AS T1 WHERE T1.Date_Stored BETWEEN '2020-01-01' AND '2020-12-31' OR T1.Document_Type_Code = 'type1'",
        "question": "What is the average document ID of documents stored in the year 2020 or of type 'type1'?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT Document_Type_Name, Document_Type_Description FROM Ref_Document_Types WHERE Document_Type_Code = 'SEC' AND Document_Type_Name IN ('Confidential', 'Secret')",
        "question": "What are the names and descriptions of the document types with code 'SEC' and names 'Confidential' or 'Secret'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT AVG(Document_Type_Code) FROM Ref_Document_Types AS T1 WHERE Document_Type_Name = 'Type 1' AND Document_Type_Description BETWEEN 'Description 1' AND 'Description 2' AND Document_Type_Code > 1",
        "question": "What is the average document type code for document type 'Type 1' with a description between 'Description 1' and 'Description 2' and a code greater than 1?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Tracking_DB"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name) FROM people WHERE Age < 20 LIMIT 10",
        "question": "What are the counts of distinct names of the people who are under 20 years old, starting from the 11th record?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "wedding"
    },
    {
        "query": "SELECT T1.Church_ID FROM church AS T1 JOIN wedding AS T2 ON T1.Church_ID = T2.Church_ID WHERE T1.Church_ID IN (SELECT T3.Church_ID FROM wedding AS T3 GROUP BY T3.Church_ID HAVING COUNT(DISTINCT T3.Male_ID) > 1) ORDER BY T1.Church_ID ASC",
        "question": "Which churches have had more than one groom and list them in ascending order by church ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "wedding"
    },
    {
        "query": "SELECT p.Name FROM people AS p WHERE NOT EXISTS ( SELECT 1 FROM wedding AS w WHERE w.Male_ID = p.People_ID )",
        "question": "What are the names of the males who have never been married in any church?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "wedding"
    },
    {
        "query": "SELECT COUNT(T1.Church_ID), T3.Age FROM church AS T1 JOIN wedding AS T2 ON T1.Church_ID = T2.Church_ID JOIN people AS T3 ON T3.People_ID = T2.Female_ID WHERE T3.Is_Male != 'true' GROUP BY T3.Age LIMIT 10",
        "question": "What is the count of churches and the age of the female getting married for each age, starting from the 11th result?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "wedding"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Female_ID) FROM people AS T1 JOIN wedding AS T2 ON T1.People_ID = T2.Male_ID WHERE T2.Year > 2000 OR T1.Age > 30 OR T1.People_ID IN (SELECT Male_ID FROM wedding WHERE Year > 2000)",
        "question": "What are the names of people and the number of distinct females they married, where either the wedding year is after 2000, the person is older than 30, or the person got married after 2000?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "wedding"
    },
    {
        "query": "SELECT COUNT(Age) FROM people AS t1",
        "question": "How many people have their age recorded?",
        "iter": 4,
        "flag": true,
        "hardness": "easy",
        "db_name": "wedding"
    },
    {
        "query": "SELECT Age FROM people WHERE Age BETWEEN 20 AND 30 LIMIT 10",
        "question": "What are the ages of 10 people who are between 20 and 30 years old?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "wedding"
    },
    {
        "query": "SELECT Name FROM people WHERE Age <= 30",
        "question": "What are the names of people aged 30 or younger?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "wedding"
    },
    {
        "query": "SELECT T1.Country, COUNT(T2.Church_ID) FROM people AS T1 JOIN wedding AS T2 ON T1.People_ID = T2.Male_ID WHERE T1.Age < 30 GROUP BY T1.Country",
        "question": "What is the number of weddings where the groom is under 30 years old, grouped by country?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "wedding"
    },
    {
        "query": "SELECT COUNT(DISTINCT T3.Name), COUNT(T1.Church_ID) FROM church AS T1 JOIN wedding AS T2 ON T1.Church_ID = T2.Church_ID JOIN people AS T3 ON T2.Female_ID = T3.People_ID WHERE T3.Age = 25",
        "question": "How many unique 25-year-old females got married and how many wedding ceremonies were they part of?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "wedding"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name) FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T2.title < 'title'",
        "question": "How many distinct artist names are there for albums with titles less than 'title'?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "store_1"
    },
    {
        "query": "SELECT T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN albums AS T3 ON T2.album_id = T3.id WHERE T2.unit_price BETWEEN 0.99 AND 1.99 ORDER BY T1.name ASC LIMIT 10",
        "question": "What are the names of genres with tracks with a unit price between $0.99 and $1.99, listed in ascending order, starting from the 11th result?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "store_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.album_id), COUNT(DISTINCT T1.media_type_id), T2.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id WHERE T1.milliseconds BETWEEN 10000 AND 20000 AND NOT EXISTS (SELECT 1 FROM invoice_lines WHERE track_id = T1.id) ORDER BY T2.name DESC",
        "question": "What are the counts of distinct album id and distinct media type id for tracks with a duration between 10000 and 20000 milliseconds that are not part of any invoice, listed by genre name in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "store_1"
    },
    {
        "query": "SELECT COUNT(T1.name) FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name != 'AC/DC' GROUP BY T1.name",
        "question": "How many albums do each artist, excluding AC/DC, have?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "store_1"
    },
    {
        "query": "SELECT first_name FROM customers WHERE last_name > 'A' ORDER BY first_name ASC",
        "question": "What are the first names of customers, excluding those whose last name starts with 'A' or earlier, listed in ascending order by first name?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "store_1"
    },
    {
        "query": "SELECT * FROM tracks WHERE milliseconds >= 1000000",
        "question": "What are the tracks with a duration of at least 1000000 milliseconds?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "store_1"
    },
    {
        "query": "SELECT T1.name FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id JOIN tracks AS T3 ON T2.id = T3.album_id WHERE T3.name = (SELECT T4.name FROM tracks AS T4 JOIN genres AS T5 ON T4.genre_id = T5.id WHERE T5.name = 'Rock')",
        "question": "What are the names of artists who have tracks in the genre 'Rock'?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "store_1"
    },
    {
        "query": "SELECT id FROM albums WHERE artist_id = (SELECT id FROM artists WHERE name = 'AC/DC')",
        "question": "What are the ids of the albums by the artist 'AC/DC'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "store_1"
    },
    {
        "query": "SELECT COUNT(id) , COUNT(name) FROM artists",
        "question": "How many artist ids are there and how many artist names are there?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "store_1"
    },
    {
        "query": "SELECT T1.name, SUM(T2.unit_price) FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' ORDER BY SUM(T2.unit_price) DESC",
        "question": "What is the name of the 'Rock' genre and the total unit price of its tracks, listed in descending order by total unit price?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "store_1"
    },
    {
        "query": "SELECT first_name FROM Students WHERE middle_name != 'John'",
        "question": "What are the first names of students who do not have 'John' as their middle name?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "behavior_monitoring"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.first_name) FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.date_first_rental <= T2.zip_postcode",
        "question": "How many unique first names of students are there where the first rental date is earlier than or equal to the zip or postcode of their address?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "behavior_monitoring"
    },
    {
        "query": "SELECT T1.student_id FROM Students AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.cell_mobile_number BETWEEN 100 AND 1000 AND NOT EXISTS (SELECT T3.teacher_id FROM Teachers AS T3 WHERE T3.teacher_id = T1.student_id)",
        "question": "Which student IDs are of students who have a cell phone number between 100 and 1000 and are not teachers?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "behavior_monitoring"
    },
    {
        "query": "SELECT COUNT(student_id), COUNT(DISTINCT detention_id) FROM Students_in_Detention",
        "question": "What are the total number of students and the number of distinct detentions in the Students_in_Detention table?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "behavior_monitoring"
    },
    {
        "query": "SELECT * FROM Ref_Incident_Type WHERE incident_type_code != 'IT001' ORDER BY incident_type_description ASC",
        "question": "What are all the details of incident types excluding 'IT001', listed in ascending order by description?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "behavior_monitoring"
    },
    {
        "query": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.monthly_rental > 1000 ORDER BY T1.student_id ASC",
        "question": "What are the student ids of students who pay more than 1000 in monthly rental, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "behavior_monitoring"
    },
    {
        "query": "SELECT T1.student_id FROM Students AS T1 JOIN Students_in_Detention AS T2 ON T1.student_id = T2.student_id WHERE T2.incident_id < 100 AND T2.detention_id > 50 AND NOT EXISTS (SELECT T3.student_id FROM Students AS T3 JOIN Students_in_Detention AS T4 ON T3.student_id = T4.student_id WHERE T3.student_id = T1.student_id AND T4.detention_id = 25)",
        "question": "What are the student IDs of students who have been in a detention with an incident ID less than 100 and a detention ID greater than 50, but have never been in detention 25?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "behavior_monitoring"
    },
    {
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.zip_postcode < 10000 LIMIT 5",
        "question": "What are the next 5 first names of students whose zip or postcode is less than 10000?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "behavior_monitoring"
    },
    {
        "query": "SELECT T1.School_ID FROM school AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Enrollment BETWEEN 500 AND 1000 AND T1.Founded > 1950 AND NOT EXISTS (SELECT * FROM school_performance AS T3 WHERE T3.School_Id = T1.School_ID AND T3.Class_AA = 'A')",
        "question": "Which schools have an enrollment between 500 and 1000, were founded after 1950, and have no class AA A grades in their school performance records?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_player"
    },
    {
        "query": "SELECT T1.Location, T2.League FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
        "question": "What are the locations and leagues of the schools?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_player"
    },
    {
        "query": "SELECT Enrollment, School FROM school WHERE Enrollment <= 1000 ORDER BY Enrollment ASC LIMIT 10",
        "question": "What are the enrollment numbers and corresponding school names for the 11th to 20th schools with the lowest enrollment?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "school_player"
    },
    {
        "query": "SELECT School, Location FROM school WHERE School_ID IN (SELECT School_ID FROM school_details WHERE Nickname = 'Team A' AND Class = 'AAA') ORDER BY School ASC",
        "question": "What are the names and locations of the schools with nickname 'Team A' and class 'AAA', listed in ascending order by school name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_player"
    },
    {
        "query": "SELECT Enrollment FROM school WHERE Founded != 2000 ORDER BY Enrollment DESC",
        "question": "What are the enrollment numbers of schools that were not founded in 2000, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_player"
    },
    {
        "query": "SELECT School FROM school WHERE School != 'School1' ORDER BY School ASC LIMIT 5",
        "question": "What are the next 5 schools in alphabetical order excluding School1?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "school_player"
    },
    {
        "query": "SELECT School, Founded FROM school",
        "question": "What are the names of the schools and the years they were founded?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_player"
    },
    {
        "query": "SELECT Enrollment FROM school WHERE Enrollment BETWEEN 400 AND 800 OR Enrollment > 1200 OR NOT EXISTS (SELECT School_ID FROM school_details WHERE school.School_ID = school_details.School_ID)",
        "question": "What are the enrollment numbers of schools that either have between 400 and 800 students, or more than 1200 students, or have no record in the school details table?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_player"
    },
    {
        "query": "SELECT COUNT(DISTINCT School) FROM school WHERE Enrollment >= 0",
        "question": "How many distinct schools are there with enrollment greater than or equal to 0?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "school_player"
    },
    {
        "query": "SELECT School FROM school WHERE Enrollment <= 5000 LIMIT 10",
        "question": "What are the names of schools with enrollment of 5000 or less, starting from the 11th school?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_player"
    },
    {
        "query": "SELECT T1.School_ID, T2.School_ID FROM school AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Enrollment > 1000",
        "question": "What are the school IDs of schools with enrollment greater than 1000?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_player"
    },
    {
        "query": "SELECT MAX(Enrollment), MIN(Enrollment), COUNT(School_ID) FROM school WHERE Enrollment <= 1000",
        "question": "What are the maximum and minimum enrollment numbers and how many schools have an enrollment of 1000 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_player"
    },
    {
        "query": "SELECT T1.School_ID FROM school AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID WHERE EXISTS (SELECT 1 FROM school_performance WHERE School_Id = T1.School_ID) GROUP BY T1.School_ID HAVING MIN(T1.Enrollment) = 500",
        "question": "Which school IDs represent schools with the lowest enrollment of 500, only considering schools with available performance records?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_player"
    },
    {
        "query": "SELECT School_ID, MAX(Enrollment) FROM school WHERE Enrollment > 1000 GROUP BY School_ID ORDER BY School_ID ASC",
        "question": "What are the school IDs and their highest enrollment numbers for schools with more than 1000 enrollment, listed in ascending order by school ID?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "school_player"
    },
    {
        "query": "SELECT School_ID, School FROM school AS T1 WHERE Enrollment > 1000 AND EXISTS (SELECT 1 FROM school_details AS T2 WHERE T1.School_ID = T2.School_ID AND T2.League = 'League1') AND Location = 'Location1'",
        "question": "What are the school IDs and names of schools in Location1 with more than 1000 students and participating in League1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_player"
    },
    {
        "query": "SELECT T1.School, T2.Nickname, T3.School_Year FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID JOIN school_performance AS T3 ON T1.School_ID = T3.School_Id WHERE T1.Enrollment BETWEEN 100 AND 500 ORDER BY T1.Enrollment DESC LIMIT 10",
        "question": "What are the names, nicknames, and school years of the 11th to 20th schools with the highest enrollment, which have enrollment between 100 and 500?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_player"
    },
    {
        "query": "SELECT MIN(T1.Product_Price) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.Product_ID = T2.Product_ID",
        "question": "What is the lowest price of products that have been ordered?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Drama_Workshop_Groups"
    },
    {
        "query": "SELECT DISTINCT T1.Store_Name FROM Drama_Workshop_Groups AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Store_Phone != '' LIMIT 10",
        "question": "What are the names of the next 10 stores with non-empty phone numbers that have corresponding drama workshop groups?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Drama_Workshop_Groups"
    },
    {
        "query": "SELECT T1.payment_method_description FROM Ref_Payment_Methods AS T1 JOIN Invoices AS T2 ON T1.payment_method_code = T2.payment_method_code WHERE T2.payment_method_code = 'Cash'",
        "question": "What is the description of the 'Cash' payment method?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Drama_Workshop_Groups"
    },
    {
        "query": "SELECT T1.Store_Name FROM Drama_Workshop_Groups AS T1 WHERE T1.Workshop_Group_ID > (SELECT Workshop_Group_ID FROM Bookings_Services AS T2 WHERE T2.Product_ID = 'BS01') ORDER BY T1.Workshop_Group_ID DESC LIMIT 10",
        "question": "What are the store names of the 11th to 20th drama workshop groups with the highest workshop group IDs that are higher than the workshop group ID of the booking service with product ID 'BS01'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Drama_Workshop_Groups"
    },
    {
        "query": "SELECT T1.Store_Name FROM Drama_Workshop_Groups AS T1 JOIN Addresses AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.Store_Phone = '123456789' OR T1.Store_Phone BETWEEN '123456789' AND '987654321' OR T2.City_Town = 'City'",
        "question": "What are the store names of drama workshop groups with a store phone of '123456789', or a store phone between '123456789' and '987654321', or located in the city 'City'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Drama_Workshop_Groups"
    },
    {
        "query": "SELECT T1.Product_Name, SUM(T2.Order_Quantity) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING SUM(T2.Order_Quantity) > 100 ORDER BY T1.Product_Name DESC",
        "question": "What are the product names and their total order quantities, for products with more than 100 total orders, listed in descending order by product name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Drama_Workshop_Groups"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Service_Type_Code) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T1.Service_Type_Description = 'Type 1' OR T2.Product_Price BETWEEN 10 AND 20 OR T1.Parent_Service_Type_Code = 'Type 2'",
        "question": "How many distinct service types are there for either Type 1 services, services with products priced between 10 and 20, or services with a parent service type of Type 2?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Drama_Workshop_Groups"
    },
    {
        "query": "SELECT T1.name, COUNT(T2.participant_id) FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T1.popularity < 100 GROUP BY T1.name ORDER BY COUNT(T2.participant_id) ASC",
        "question": "What are the names of participants with less than 100 popularity and the number of songs they participated in, listed from the least number of participations to the most?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT T1.name, AVG(T2.stage_presence) FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE NOT EXISTS (SELECT 1 FROM songs AS T3 WHERE T3.name = T1.name AND T2.songs_id = T3.id) GROUP BY T1.name",
        "question": "What is the average stage presence of participants who performed songs that do not match their names, grouped by participant name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT * FROM participants WHERE name = 'ABC' AND popularity BETWEEN 10 AND 20 AND id > 5",
        "question": "What are the details of participants named 'ABC' with a popularity between 10 and 20 and an id greater than 5?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT T1.name FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T1.id NOT IN ( SELECT T2.participant_id FROM performance_score AS T2 WHERE T2.rhythm_tempo < 5) ORDER BY T1.popularity DESC",
        "question": "What are the names of the participants with a rhythm tempo score of 5 or above, listed in order of their popularity in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT T1.name, T3.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T3.id = T2.songs_id WHERE T2.voice_sound_quality = 8 ORDER BY T1.popularity ASC LIMIT 5",
        "question": "What are the names of the next 5 least popular participants and the songs they sang that have a voice sound quality of 8?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE EXISTS (SELECT 1 FROM songs AS T3 WHERE T3.id = T2.songs_id AND T3.name = 'Song Name')",
        "question": "What are the names of the participants who performed 'Song Name'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT T.name FROM participants AS T WHERE T.popularity = 10 ORDER BY T.name ASC",
        "question": "What are the names of participants with a popularity of 10, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT name FROM participants WHERE id = 1 OR name = 'John' OR NOT EXISTS (SELECT 1 FROM performance_score WHERE participant_id = 1)",
        "question": "What is the name of the participant with id 1 or name 'John', or with no performance scores?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT T2.name, AVG(T1.rhythm_tempo) FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id = T2.id WHERE T1.stage_presence >= 7 ORDER BY AVG(T1.rhythm_tempo) DESC",
        "question": "What are the names of the participants with their average rhythm tempo scores in descending order, for those participants who have a stage presence of 7 or higher?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T2.stage_presence = 10",
        "question": "What are the names of the participants who have a stage presence of 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT COUNT(T1.id), AVG(T2.stage_presence) FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T1.popularity BETWEEN 100 AND 500 AND T2.stage_presence > 8",
        "question": "What is the count of participants with popularity between 100 and 500 and the average stage presence of these participants if the stage presence is greater than 8?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "sing_contest"
    },
    {
        "query": "SELECT COUNT(T1.id) AS count_id, T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'ABC' OR T2.Title BETWEEN 'A' AND 'Z' OR T1.Country = 'USA'",
        "question": "How many tv channels with series name 'ABC', country 'USA', or cartoon titles from A to Z are there and what are the corresponding cartoon titles?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT COUNT(T1.id) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Viewers_m BETWEEN 1 AND 1000",
        "question": "How many TV channels have TV series with viewers between 1 million and 1000 million?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT T1.id FROM TV_Channel AS T1 WHERE T1.id > '100'",
        "question": "What are the IDs of TV channels with IDs greater than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT T1.series_name AS series_name, MAX(T1.Country) FROM TV_Channel AS T1 GROUP BY T1.series_name ORDER BY T1.series_name ASC LIMIT 5",
        "question": "What are the series names and their respective maximum country values of the next 5 TV channels when ordered alphabetically by series name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.series_name), COUNT(T2.id), COUNT(T3.id) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel",
        "question": "How many unique TV channel series names are there, and how many TV series and cartoons are there in total?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT Title FROM Cartoon WHERE Channel = 'CN' OR Title = 'The Amazing World of Gumball'",
        "question": "What are the titles of the cartoons that air on channel 'CN' or are titled 'The Amazing World of Gumball'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM TV_series WHERE Episode = '2') ORDER BY id DESC",
        "question": "What are the ids of the TV channels that do not have a TV series with episode 2, listed in descending order by id?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT AVG(T1.Viewers_m) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T2.id = T1.Channel WHERE T1.Channel != 'BBC' GROUP BY T2.series_name",
        "question": "What is the average number of viewers for each series of TV channels, excluding BBC?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT T1.series_name, T1.Language FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Air_Date BETWEEN '2000-01-01' AND '2020-12-31' AND T2.Viewers_m > 1000 ORDER BY T2.Viewers_m ASC LIMIT 10",
        "question": "What are the names and languages of the next 10 TV series in the list, in ascending order of their viewers, that aired between 2000 and 2020 and had more than 1000 viewers?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT T1.id, T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Viewers_m BETWEEN 1 AND 1000000",
        "question": "What are the IDs of TV channels and the episodes of their TV series with viewers between 1 million and 1,000,000?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT series_name, Country, Language FROM TV_Channel WHERE series_name >= 'A' AND Language >= 'A' AND Country >= 'A'",
        "question": "What are the names of the TV series, their countries of origin, and languages, that have names, countries, and languages all starting with 'A' or later in the alphabet?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT T1.Content, AVG(T1.id) FROM TV_Channel AS T1 WHERE T1.id BETWEEN 1 AND 100 AND T1.series_name = 'Series_1'",
        "question": "What is the content and average id of TV channels with series name 'Series_1' and id between 1 and 100?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT T1.series_name, T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Share <= 10",
        "question": "What are the series names and episodes of TV series with a share of 10 or less?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "tvshow"
    },
    {
        "query": "SELECT T1.title, COUNT(DISTINCT T2.u_id) FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5 ORDER BY T1.title ASC",
        "question": "What are the titles of items with less than 5-star reviews, along with the number of unique users who gave those reviews, sorted by item title?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT T2.title FROM review AS T1 JOIN item AS T2 ON T1.i_id = T2.i_id WHERE T1.rating > 3",
        "question": "What are the titles of the items rated more than 3?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT MIN(T1.rating) FROM review AS T1 WHERE T1.rank < 5 ORDER BY T1.rating ASC",
        "question": "What is the lowest rating given by a reviewer with a rank lower than 5?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT i_id, AVG(rating) FROM review WHERE i_id <= 1000 ORDER BY i_id ASC",
        "question": "What is the average rating for each item with an item id less than or equal to 1000, listed in ascending order by item id?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.u_id), COUNT(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id WHERE T2.rating < 5",
        "question": "How many unique users and total reviews have users given a rating less than 5?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT i_id FROM item WHERE NOT EXISTS (SELECT 1 FROM review WHERE rating > 3 AND i_id = item.i_id) AND NOT EXISTS (SELECT 1 FROM review WHERE rating < 3 AND i_id = item.i_id)",
        "question": "What item IDs do not have any reviews with a rating greater than 3 or less than 3?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 4 AND T2.rank BETWEEN 1 AND 100 AND T2.u_id = 10 ORDER BY T1.title ASC",
        "question": "What are the titles of items reviewed by user with id 10, having rating greater than 4 and rank between 1 and 100, listed in ascending order of title?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT T1.title, T2.rank FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating != 5",
        "question": "What are the titles and ranks of items that received ratings other than 5?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT T1.u_id, T1.rank FROM review AS T1 JOIN item AS T2 ON T1.i_id = T2.i_id WHERE T2.i_id < 100 AND T1.rating < 5",
        "question": "What are the user ids and corresponding ranks of reviews for items with ids less than 100 and ratings less than 5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT MAX(T1.rating) FROM review AS T1 WHERE T1.rating BETWEEN 1 AND 5 AND T1.i_id IN (SELECT T2.i_id FROM item AS T2 WHERE T2.title = 'Movie')",
        "question": "What is the highest rating given to the item 'Movie' with a rating between 1 and 5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT COUNT(*) FROM review WHERE rating >= 5 LIMIT 10",
        "question": "What are the counts of the 11th to 20th reviews with a rating of 5 or more?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT u_id) FROM review WHERE rating <= 3",
        "question": "How many unique users have given a rating of 3 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT title FROM item WHERE i_id = 1",
        "question": "What is the title of the item with item id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.u_id), COUNT(DISTINCT T2.u_id) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id WHERE T1.name = 'Alice' OR T2.rating > (SELECT AVG(rating) FROM review WHERE i_id IN (SELECT i_id FROM item WHERE title = 'Toy'))",
        "question": "How many unique users named 'Alice' and unique users who have given higher ratings than average on items titled 'Toy' are there?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT T2.name, COUNT(T1.u_id) FROM review AS T1 JOIN useracct AS T2 ON T1.u_id = T2.u_id WHERE T1.rating = 5 ORDER BY T2.name DESC",
        "question": "What is the name of the user and how many 5-star reviews did they make, sorted by user name in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.u_id = 123 AND T2.rating = 5 AND T1.i_id IN (SELECT T3.i_id FROM review AS T3 WHERE T3.rank > 10)",
        "question": "What are the titles of the items that user 123 rated 5 stars and that also have at least one review with a rank greater than 10?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT COUNT(u_id) FROM review WHERE rating BETWEEN 4 AND 5 GROUP BY u_id HAVING COUNT(u_id) > 5",
        "question": "How many users have given more than 5 reviews with ratings between 4 and 5?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "epinions_1"
    },
    {
        "query": "SELECT T1.NAME FROM RESTAURANT AS T1 JOIN LOCATION AS T2 ON T1.ID = T2.RESTAURANT_ID WHERE T2.CITY_NAME > 'NEW YORK' ORDER BY T2.RESTAURANT_ID DESC LIMIT 5",
        "question": "What are the names of the 5 restaurants located in cities alphabetically after New York, listed in reverse order of their location ids?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurants"
    },
    {
        "query": "SELECT T1.CITY_NAME FROM LOCATION AS T1 WHERE T1.CITY_NAME = 'New York' AND T1.RESTAURANT_ID = 123 AND NOT EXISTS (SELECT 1 FROM RESTAURANT AS T2 WHERE T2.ID = T1.RESTAURANT_ID AND T2.RATING > 4)",
        "question": "What city name is associated with a specific restaurant id 123 that does not have a restaurant rating greater than 4 in New York?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurants"
    },
    {
        "query": "SELECT T2.COUNTY FROM RESTAURANT AS T1 JOIN GEOGRAPHIC AS T2 ON T1.CITY_NAME = T2.CITY_NAME WHERE T1.RATING < 3 ORDER BY T2.COUNTY ASC LIMIT 5",
        "question": "What are the counties of the lowest rated restaurants (less than 3 stars) listed in ascending order, excluding the first 5 results?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurants"
    },
    {
        "query": "SELECT T1.NAME FROM RESTAURANT AS T1 JOIN LOCATION AS T2 ON T1.ID = T2.RESTAURANT_ID WHERE T1.CITY_NAME = 'Springfield' OR T2.STREET_NAME = 'Main St' OR T2.HOUSE_NUMBER > (SELECT MAX(HOUSE_NUMBER) FROM LOCATION WHERE CITY_NAME = 'Springfield') ORDER BY T1.NAME ASC",
        "question": "What are the names of the restaurants in Springfield or on Main St or with house numbers greater than the highest house number in Springfield, listed in ascending order by name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurants"
    },
    {
        "query": "SELECT T1.NAME, T1.RATING, T2.STREET_NAME FROM RESTAURANT AS T1 JOIN LOCATION AS T2 ON T1.ID = T2.RESTAURANT_ID WHERE T1.RATING >= 4 ORDER BY T1.NAME DESC",
        "question": "What are the names, ratings, and street names of restaurants with a rating of 4 or higher, listed in descending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "restaurants"
    },
    {
        "query": "SELECT T1.CITY_NAME FROM LOCATION AS T1 WHERE T1.CITY_NAME IN (SELECT T2.CITY_NAME FROM GEOGRAPHIC AS T2) ORDER BY T1.CITY_NAME ASC",
        "question": "What are the city names of locations that are also geographic locations, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurants"
    },
    {
        "query": "SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE Id = 1)",
        "question": "What are the receipt numbers for customer with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "bakery_1"
    },
    {
        "query": "SELECT Id FROM customers WHERE EXISTS (SELECT 1 FROM receipts WHERE customers.Id = receipts.CustomerId)",
        "question": "What are the ids of customers who have receipts?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "bakery_1"
    },
    {
        "query": "SELECT Price FROM goods WHERE Price < 10 ORDER BY Price ASC",
        "question": "What are the prices of goods less than 10 dollars, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "bakery_1"
    },
    {
        "query": "SELECT T.LastName, T.FirstName FROM customers AS T WHERE T.Id = 1 OR T.Id BETWEEN 10 AND 20 OR T.FirstName = 'John'",
        "question": "What are the last and first names of the customers with id 1, or ids between 10 and 20, or first name John?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "bakery_1"
    },
    {
        "query": "SELECT Price FROM goods WHERE Price > 10 ORDER BY Price DESC",
        "question": "What are the prices of goods that cost more than 10 dollars, listed from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "bakery_1"
    },
    {
        "query": "SELECT T1.FirstName FROM customers AS T1 WHERE T1.FirstName = 'John' AND T1.LastName = 'Doe' AND NOT EXISTS (SELECT 1 FROM receipts AS T2 WHERE T2.Date > '2020-01-01' AND T2.CustomerId = T1.Id) LIMIT 10",
        "question": "What are the first names of the first 10 customers named John Doe who have not made any purchases after January 1, 2020?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "bakery_1"
    },
    {
        "query": "SELECT LastName, FirstName FROM customers WHERE LastName != 'Smith' ORDER BY LastName DESC",
        "question": "What are the last and first names of all customers whose last name is not 'Smith', listed in descending order by last name?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "bakery_1"
    },
    {
        "query": "SELECT COUNT(Price) FROM goods AS T1",
        "question": "How many goods have a price?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "bakery_1"
    },
    {
        "query": "SELECT T1.LastName, T1.FirstName FROM customers AS T1 WHERE T1.Id >= 10 ORDER BY T1.LastName LIMIT 5",
        "question": "What are the last names and first names of the next 5 customers after the first 5 with an id of 10 or higher, listed in order of last name?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "bakery_1"
    },
    {
        "query": "SELECT pID FROM Player WHERE yCard = '2019-2020' AND HS = 12 ORDER BY pID ASC",
        "question": "What are the player IDs of those who received a yes card in the 2019-2020 season and have 12 training hours, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "soccer_2"
    },
    {
        "query": "SELECT T1.cName, COUNT(T2.pID) FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pID IN (SELECT pID FROM Player WHERE HS > 100 AND yCard = 'Senior') GROUP BY T1.cName ORDER BY COUNT(T2.pID) DESC LIMIT 5",
        "question": "Which colleges have the most tryouts from senior players with over 100 training hours, excluding the top 5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT pID) FROM Tryout WHERE decision = 'yes' AND cName = 'Stanford'",
        "question": "How many different players were accepted to try out at Stanford?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "soccer_2"
    },
    {
        "query": "SELECT pName FROM Player WHERE HS != 1",
        "question": "What are the names of players with training hours not equal to 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "soccer_2"
    },
    {
        "query": "SELECT T1.pName, T2.cName, COUNT(T3.cName) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID JOIN College AS T3 ON T2.cName = T3.cName WHERE T1.HS > 25",
        "question": "What is the number of colleges that each player with more than 25 hours of training has tried out for, listed by player name and college name?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "soccer_2"
    },
    {
        "query": "SELECT T1.pName, T2.cName FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID JOIN College AS T3 ON T2.cName = T3.cName WHERE T3.enr <= 10000 ORDER BY T3.enr ASC LIMIT 10",
        "question": "Which players tried out for the 10 smallest colleges with an enrollment of no more than 10,000 students, listed in order from smallest to largest?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_2"
    },
    {
        "query": "SELECT pName FROM Player WHERE HS != 'AL' ORDER BY pID DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th player with the highest player id who had training hours not equal to 'AL'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "soccer_2"
    },
    {
        "query": "SELECT T1.cName FROM College AS T1 WHERE T1.state = 'CA' OR T1.enr BETWEEN 1000 AND 2000 OR EXISTS (SELECT T2.pID FROM Player AS T2 WHERE T2.HS = 3 AND T2.pID = (SELECT T3.pID FROM Tryout AS T3 WHERE T3.cName = T1.cName)) ORDER BY T1.cName ASC LIMIT 10",
        "question": "What are the next 10 college names in alphabetical order, located in 'CA', or having enrollment between 1000 and 2000, or having a tryout player with 3 training hours?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "soccer_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT attribute_name) FROM Attribute_Definitions WHERE attribute_id >= 1",
        "question": "How many unique attribute names are listed in the attribute definitions for attributes with an id of 1 or higher?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "product_catalog"
    },
    {
        "query": "SELECT MAX(T1.capacity) FROM Catalog_Contents AS T1 WHERE T1.length >= '100'",
        "question": "What is the maximum capacity of catalog contents where the length is 100 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "product_catalog"
    },
    {
        "query": "SELECT COUNT(T1.catalog_level_number), SUM(T2.price_in_dollars) FROM Catalog_Structure AS T1 JOIN Catalog_Contents AS T2 ON T1.catalog_level_number = T2.catalog_level_number WHERE T1.catalog_level_number = 1",
        "question": "What is the count of top level catalog entries and the total price of products at the top level of the catalog?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "product_catalog"
    },
    {
        "query": "SELECT T1.catalog_entry_name, T2.attribute_value FROM Catalog_Contents AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.catalog_entry_id = T2.catalog_entry_id JOIN Attribute_Definitions AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.product_stock_number = 'ABC123' AND T3.attribute_name = 'Color'",
        "question": "What is the name and color of the catalog entry with product stock number 'ABC123'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "product_catalog"
    },
    {
        "query": "SELECT COUNT(DISTINCT catalog_id) FROM Catalogs ORDER BY catalog_id ASC",
        "question": "How many unique catalogs are there in the Catalogs table, listed in ascending order by catalog id?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "product_catalog"
    },
    {
        "query": "SELECT T1.catalog_level_name, T2.catalog_entry_name FROM Catalog_Structure AS T1 JOIN Catalog_Contents AS T2 ON T1.catalog_level_number = T2.catalog_level_number JOIN Catalog_Contents_Additional_Attributes AS T3 ON T2.catalog_entry_id = T3.catalog_entry_id WHERE T1.catalog_level_number <= 5 AND T3.attribute_value = 'text' ORDER BY T1.catalog_level_name ASC",
        "question": "What are the catalog level names and corresponding catalog entry names for levels 1 through 5 where the attribute value is 'text', listed in ascending order by catalog level name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "product_catalog"
    },
    {
        "query": "SELECT catalog_name FROM Catalogs WHERE catalog_id IN (SELECT catalog_id FROM Catalog_Structure WHERE catalog_level_name = 'Hardware')",
        "question": "What are the names of the catalogs that have a level called 'Hardware'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "product_catalog"
    },
    {
        "query": "SELECT T1.attribute_name FROM Attribute_Definitions AS T1 WHERE T1.attribute_id = 1 OR T1.attribute_id IN ( SELECT T2.attribute_id FROM Catalog_Contents_Additional_Attributes AS T2 WHERE T2.attribute_value = 'test' ) GROUP BY T1.attribute_name HAVING AVG(T1.attribute_id) > 1 ORDER BY T1.attribute_name ASC",
        "question": "What are the attribute names with average attribute id greater than 1, either with attribute id equal to 1 or attribute value equal to 'test', ordered by attribute name in ascending order?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "product_catalog"
    },
    {
        "query": "SELECT COUNT(*) FROM Catalog_Contents WHERE price_in_dollars BETWEEN 10 AND 100 AND EXISTS (SELECT 1 FROM Catalog_Contents_Additional_Attributes WHERE attribute_id = 1 AND attribute_value = 'abc')",
        "question": "How many catalog entries have a price between 10 and 100 dollars and an additional attribute with id 1 and value 'abc'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "product_catalog"
    },
    {
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id WHERE T2.catalog_level_number >= 3 LIMIT 5",
        "question": "What are the names of the next 5 catalogs with a level number greater than or equal to 3?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "product_catalog"
    },
    {
        "query": "SELECT T1.Name AS News, T1.Event_Attendance AS Attendance FROM event AS T1 ORDER BY T1.Event_Attendance DESC",
        "question": "What are the names of the events and their respective attendance, listed in descending order of attendance?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "news_report"
    },
    {
        "query": "SELECT T1.Event_ID, T1.Name FROM event AS T1 WHERE T1.Event_Attendance > (SELECT AVG(Event_Attendance) FROM event)",
        "question": "What are the names and IDs of events with attendance higher than the average event attendance?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "news_report"
    },
    {
        "query": "SELECT COUNT(DISTINCT Venue) FROM event WHERE Date != '2020-01-01' ORDER BY Event_ID DESC",
        "question": "How many distinct venues, excluding those from 2020-01-01, are there in the events list in descending order of event ID?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "news_report"
    },
    {
        "query": "SELECT COUNT(T1.Date), T1.Name FROM event AS T1 WHERE T1.Venue = 'London' OR T1.Event_Attendance > 5000 OR EXISTS (SELECT * FROM news_report WHERE T1.Event_ID = news_report.Event_ID)",
        "question": "How many events and what are the names of the events that took place in London, or had more than 5000 attendees, or were reported in the news?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "news_report"
    },
    {
        "query": "SELECT T1.Name, T1.Venue FROM event AS T1 WHERE T1.Event_Attendance != 10000 ORDER BY T1.Date ASC",
        "question": "What are the names and venues of events with attendance not equal to 10000, listed in chronological order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "news_report"
    },
    {
        "query": "SELECT Name, Event_Attendance FROM event WHERE Event_Attendance >= 5000 ORDER BY Event_Attendance DESC",
        "question": "What are the names and attendance of events with at least 5000 attendees, listed in order of highest attendance to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "news_report"
    },
    {
        "query": "SELECT SUM(T3.Event_Attendance) , COUNT(T1.journalist_ID) , COUNT(T3.Event_ID) FROM news_report AS T1 JOIN journalist AS T2 ON T1.journalist_ID = T2.journalist_ID JOIN event AS T3 ON T1.Event_ID = T3.Event_ID WHERE T2.Age >='40'",
        "question": "What is the total event attendance, the number of journalists, and the number of events reported by journalists older than or equal to 40 years old?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "news_report"
    },
    {
        "query": "SELECT T1.Name AS EventName, T2.Name AS JournalistName FROM event AS T1 JOIN news_report AS T3 ON T1.Event_ID = T3.Event_ID JOIN journalist AS T2 ON T3.journalist_ID = T2.journalist_ID ORDER BY T1.Name ASC",
        "question": "What are the names of the events and their corresponding journalists, listed in ascending order by event name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "news_report"
    },
    {
        "query": "SELECT T1.forename, T1.surname FROM drivers AS T1 WHERE T1.driverId NOT IN ( SELECT T2.driverId FROM results AS T2 WHERE T2.position = 1 ) AND T1.driverId = 1",
        "question": "What are the names of the drivers who have never finished in the first position and have a driver id of 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "formula_1"
    },
    {
        "query": "SELECT T1.raceId, T1.circuitId FROM races AS T1 WHERE T1.round = 1 OR T1.year BETWEEN 2010 AND 2015 ORDER BY T1.raceId ASC LIMIT 10",
        "question": "What are the next 10 circuitIds with raceIds for the first round or for the years between 2010 and 2015, sorted by raceId in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "formula_1"
    },
    {
        "query": "SELECT COUNT(T1.circuitId), T1.name, T1.location FROM circuits AS T1 WHERE T1.circuitId BETWEEN 1 AND 10 AND T1.lat > 10 AND T1.url LIKE '%url%'",
        "question": "How many circuits are there with a circuit id between 1 and 10, latitude greater than 10, and a url containing the word 'url', along with their names and locations?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "formula_1"
    },
    {
        "query": "SELECT T1.name, T2.fastestLap FROM constructors AS T1 JOIN results AS T2 ON T1.constructorId = T2.constructorId",
        "question": "What are the names of the constructors and their fastest laps?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "formula_1"
    },
    {
        "query": "SELECT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE EXISTS (SELECT 1 FROM results AS T3 WHERE T3.raceId = T2.raceId AND T3.position = 1) ORDER BY T1.name DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th circuits, in descending order, where a driver has achieved the 1st position in a race held at that circuit?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "formula_1"
    },
    {
        "query": "SELECT T1.name FROM circuits AS T1 WHERE T1.circuitId NOT IN (SELECT T2.circuitId FROM races AS T2 WHERE T2.year = 2020) ORDER BY T1.circuitId DESC",
        "question": "What are the names of the circuits that did not host a race in 2020, listed in descending order of circuit ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "formula_1"
    },
    {
        "query": "SELECT T1.name, T2.position FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.points >= 50 ORDER BY T1.name DESC",
        "question": "What are the names of constructors with their corresponding positions in the standings where they scored 50 points or more, sorted by constructor name in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "formula_1"
    },
    {
        "query": "SELECT T1.forename FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T3.raceId = T2.raceId JOIN circuits AS T4 ON T4.circuitId = T3.circuitId",
        "question": "What are the forenames of drivers who have participated in races on circuits?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "formula_1"
    },
    {
        "query": "SELECT MAX(Age) FROM driver WHERE Age >= 30",
        "question": "What is the maximum age of drivers who are 30 years old or older?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "car_road_race"
    },
    {
        "query": "SELECT Driver_Name, Driver_ID FROM Driver WHERE Driver_ID != 1 ORDER BY Driver_ID ASC LIMIT 10",
        "question": "What are the names and IDs of the drivers, excluding driver 1, listed in ascending order of their IDs from the 11th to the 20th driver?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "car_road_race"
    },
    {
        "query": "SELECT Age, COUNT(Driver_ID) FROM driver WHERE Driver_ID != 1 GROUP BY Age HAVING COUNT(Driver_ID) > 1",
        "question": "What is the age and how many drivers are there for each age, excluding the driver with id 1, where the count of drivers is more than 1?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "car_road_race"
    },
    {
        "query": "SELECT T1.Driver_Name, T2.Driver_Name FROM driver AS T1 JOIN driver AS T2 ON T1.Driver_ID != T2.Driver_ID GROUP BY T1.Driver_Name, T2.Driver_Name",
        "question": "What are all pairs of different drivers' names?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_road_race"
    },
    {
        "query": "SELECT MAX(Age) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Winning_driver = 'Yes') AND Constructor = 'Ferrari'",
        "question": "What is the maximum age of Ferrari drivers who have never won a race?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_road_race"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Driver_ID), MAX(T1.Age) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Constructor = 'Ferrari' AND T2.Road BETWEEN 1 AND 10 AND EXISTS (SELECT 1 FROM race AS T3 WHERE T3.Road = 5)",
        "question": "For the Ferrari constructor, what is the maximum age of drivers who have participated in a race with a road number between 1 and 10, and also participated in a race with road number 5, and how many distinct drivers are there?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_road_race"
    },
    {
        "query": "SELECT T1.Driver_Name FROM Driver AS T1 WHERE T1.Age BETWEEN 25 AND 30 OR T1.Constructor = 'Ferrari' OR T1.Driver_ID IN (SELECT Driver_ID FROM Race) ORDER BY T1.Driver_Name DESC",
        "question": "What are the names of the drivers who are between 25 and 30 years old, or drive for Ferrari, or have participated in a race, listed in descending order of their names?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_road_race"
    },
    {
        "query": "SELECT T1.Driver_Name, AVG(T2.Pole_Position) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 40 GROUP BY T1.Driver_Name HAVING AVG(T2.Pole_Position) IS NOT NULL ORDER BY AVG(T2.Pole_Position) ASC",
        "question": "What are the names of the drivers aged 40 or older, along with their average pole position, listed in ascending order by average pole position?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_road_race"
    },
    {
        "query": "SELECT T1.Driver_ID FROM driver AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age > 25 OR T2.Age = 30 OR T1.Engine IN (SELECT Engine FROM driver WHERE Age = 35)",
        "question": "Which driver IDs belong to drivers who are older than 25, or exactly 30 years old, or have an engine used by drivers who are 35 years old?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_road_race"
    },
    {
        "query": "SELECT aid, departure_date FROM flight WHERE departure_date BETWEEN '2020-01-01' AND '2020-12-31' ORDER BY departure_date ASC",
        "question": "What are the airline ids and departure dates of all flights that departed in the year 2020, listed in chronological order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT T1.name FROM aircraft AS T1 JOIN flight AS T2 ON T1.aid = T2.aid WHERE T1.distance > 1000",
        "question": "What are the names of the aircraft that have a maximum flying distance of more than 1000 miles?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT T1.name, SUM(T2.price) FROM aircraft AS T1 JOIN flight AS T2 ON T1.aid = T2.aid GROUP BY T1.name HAVING SUM(T2.price) > 1000 LIMIT 5",
        "question": "What are the names of the next 5 airlines with a total flight price greater than 1000?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT T1.distance FROM aircraft AS T1 JOIN flight AS T2 ON T1.aid = T2.aid WHERE T1.distance < 1000 AND T2.distance < 1000",
        "question": "What are the distances of aircraft with a distance less than 1000 miles that have flown a distance less than 1000 miles in a flight?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT name FROM aircraft WHERE distance >= 1000",
        "question": "What are the names of the aircraft that can travel a distance of 1000 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT MAX(distance) FROM flight WHERE distance > 1000 LIMIT 5",
        "question": "What are the 5 longest flight distances greater than 1000, excluding the first 4 longest distances?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT T1.distance FROM flight AS T1 WHERE T1.distance BETWEEN 1000 AND 2000 AND T1.aid IN (SELECT T2.aid FROM aircraft AS T2 WHERE T2.distance > 1500) AND T1.price NOT IN (SELECT T3.price FROM flight AS T3 WHERE T3.origin = 'New York')",
        "question": "What are the distances of flights with a distance between 1000 and 2000 miles, operated by an aircraft that can cover a distance greater than 1500 miles, and where the price is not offered by any New York-originating flight?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT T1.destination FROM flight AS T1 WHERE T1.aid NOT IN ( SELECT T2.aid FROM aircraft AS T2 WHERE T2.distance > 1000 ) ORDER BY T1.distance DESC",
        "question": "What are the destinations of flights operated by aircraft with a range not greater than 1000 miles, listed in order of decreasing flight distance?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT COUNT(T1.flno), SUM(T2.distance) FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN certificate AS T3 ON T2.aid = T3.aid JOIN employee AS T4 ON T3.eid = T4.eid WHERE T1.price > 10000 LIMIT 10",
        "question": "What are the total flight numbers and total distances of the tenth to nineteenth flights with prices over 10000 dollars?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT T1.name FROM aircraft AS T1 JOIN flight AS T2 ON T1.aid = T2.aid WHERE EXISTS ( SELECT 1 FROM employee AS T3 JOIN certificate AS T4 ON T3.eid = T4.eid WHERE T4.aid = T1.aid ) ORDER BY T1.name DESC",
        "question": "What are the names of the aircraft for which there exists at least one employee who is certified to operate them, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT name FROM Employee WHERE salary > 100000 OR eid = 101 OR name = 'John'",
        "question": "What are the names of the employees who have a salary greater than 100000 or employee id 101 or the name 'John'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.aid), COUNT(*) FROM flight AS T1 WHERE T1.distance > 1000 AND T1.distance < 3000 AND T1.aid IN (SELECT aid FROM aircraft AS T2 WHERE T2.distance > 2000)",
        "question": "How many unique airlines have flights between 1000 and 3000 miles and also have aircraft that can fly over 2000 miles, and what is the total number of such flights?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT T1.eid FROM employee AS T1 WHERE EXISTS ( SELECT 1 FROM certificate AS T2 WHERE T2.eid = T1.eid AND T2.aid IN ( SELECT aid FROM aircraft WHERE distance > 1000 ) ) LIMIT 10",
        "question": "What are the IDs of 10 employees who have a certificate for an aircraft with a range greater than 1000 miles, starting from the 11th employee?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_1"
    },
    {
        "query": "SELECT T1.Name FROM program AS T1 LEFT JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID WHERE T2.Time_of_day = 'Morning' OR T2.Time_of_day = 'Afternoon' OR EXISTS (SELECT 1 FROM broadcast AS T3 WHERE T3.Program_ID = T1.Program_ID AND T3.Time_of_day = 'Night') ORDER BY T1.Name ASC LIMIT 10",
        "question": "What are the names of the next 10 programs that are broadcast in the morning or afternoon, or have at least one night broadcast?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "program_share"
    },
    {
        "query": "SELECT Name FROM program WHERE Launch BETWEEN 2000 AND 2010 AND EXISTS (SELECT 1 FROM broadcast WHERE program.Program_ID = broadcast.Program_ID AND Time_of_day = 'Morning')",
        "question": "What are the names of the programs that launched between 2000 and 2010 and are broadcast in the morning?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "program_share"
    },
    {
        "query": "SELECT Program_ID FROM program WHERE Launch < 2000 LIMIT 5",
        "question": "What are the program ids of the next 5 programs that launched before the year 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "program_share"
    },
    {
        "query": "SELECT T1.Name FROM program AS T1 WHERE T1.Launch BETWEEN 2010 AND 2015 AND EXISTS (SELECT 1 FROM broadcast AS T2 WHERE T2.Program_ID = T1.Program_ID AND T2.Time_of_day = 'Morning') AND T1.Owner = 'ABC'",
        "question": "What are the names of programs launched by 'ABC' between 2010 and 2015 that were broadcast in the 'Morning'?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "program_share"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Program_ID) FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID JOIN broadcast_share AS T3 ON T2.Program_ID = T3.Program_ID WHERE T1.Program_ID = (SELECT T4.Program_ID FROM program AS T4 JOIN broadcast AS T5 ON T4.Program_ID = T5.Program_ID JOIN broadcast_share AS T6 ON T5.Program_ID = T6.Program_ID GROUP BY T4.Program_ID HAVING COUNT(DISTINCT T6.Program_ID) > 1)",
        "question": "What are the names of the programs that have been broadcast on more than one channel, along with the number of distinct channels they have been broadcast on?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "program_share"
    },
    {
        "query": "SELECT Name FROM program WHERE Launch < 2000 ORDER BY Name DESC",
        "question": "What are the names of the programs launched before the year 2000, listed in descending alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "program_share"
    },
    {
        "query": "SELECT SUM(T1.Share_in_percent) FROM channel AS T1 WHERE T1.Owner = 'ABC' AND T1.Share_in_percent BETWEEN 10 AND 20 AND T1.Channel_ID NOT IN (SELECT T2.Channel_ID FROM broadcast AS T2)",
        "question": "What is the total share percentage of 'ABC' owned channels with a share between 10% and 20% that do not have any broadcast?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "program_share"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM program AS T1 JOIN channel AS T2 ON T1.Program_ID = T2.Channel_ID WHERE T1.Name = 'News' AND T2.Name = 'ABC' AND T2.Rating_in_percent > 10 AND T2.Rating_in_percent < 20 ORDER BY T1.Name ASC",
        "question": "What are the names of the program 'News' and the channel 'ABC' with a rating between 10% and 20%, listed in ascending order by program name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "program_share"
    },
    {
        "query": "SELECT Name FROM program WHERE Origin = 'USA' OR Launch > (SELECT MAX(Launch) FROM program WHERE Origin = 'USA')",
        "question": "What are the names of the programs that originated in the USA or were launched after the latest launch of any program from the USA?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "program_share"
    },
    {
        "query": "SELECT T1.Program_ID FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID WHERE T1.Name NOT IN ( SELECT T3.Name FROM program AS T3 JOIN broadcast_share AS T4 ON T3.Program_ID = T4.Program_ID ) ORDER BY T1.Program_ID DESC LIMIT 1",
        "question": "What is the second-highest program ID of programs that do not have a share in the broadcast share table?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "program_share"
    },
    {
        "query": "SELECT Name FROM program WHERE Origin = 'USA' OR Launch BETWEEN 2000 AND 2010 OR Owner = 'ABC' ORDER BY Name ASC LIMIT 10",
        "question": "What are the names of the next 10 programs, in alphabetical order, that originated in the USA, or were launched between 2000 and 2010, or are owned by ABC, skipping the first 10 results?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "program_share"
    },
    {
        "query": "SELECT apt_id FROM Apartments WHERE apt_type_code = 'Studio' OR apt_number BETWEEN 1 AND 10 OR apt_number IN (SELECT apt_number FROM Apartments WHERE bedroom_count = 1)",
        "question": "Which apartment ids belong to either studio apartments, apartments with numbers between 1 and 10, or apartments with one bedroom?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_phone < '1234567890' ORDER BY building_short_name ASC",
        "question": "What are the building short names of apartment buildings with phone numbers less than '1234567890', listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.building_id) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bedroom_count > 3 OR T1.building_phone = '1234567890' OR T2.bathroom_count BETWEEN 2 AND 4",
        "question": "How many distinct apartment buildings have apartments with more than 3 bedrooms or a building phone number of '1234567890' or apartments with between 2 and 4 bathrooms?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_phone != '123456789'",
        "question": "What are the short names of the apartment buildings with a phone number other than '123456789'?",
        "iter": 4,
        "flag": true,
        "hardness": "easy",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT * FROM Apartment_Buildings AS T1 WHERE T1.building_id BETWEEN 1 AND 10 OR T1.building_short_name = 'ABC' OR T1.building_phone = '123-456-7890' LIMIT 5",
        "question": "What are the details of the next 5 apartment buildings with an id between 1 and 10 or a short name of 'ABC' or a phone number of '123-456-7890'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT T1.apt_number FROM Apartments AS T1 WHERE T1.bathroom_count > 2 OR T1.bathroom_count BETWEEN 1 AND 3 OR T1.bedroom_count = 4 ORDER BY T1.apt_number ASC LIMIT 10",
        "question": "What are the apartment numbers of the top 10 apartments with more than 2 bathrooms or exactly 4 bedrooms, ordered by apartment number?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT DISTINCT T1.building_short_name FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name != 'test'",
        "question": "What are the distinct building short names of apartment buildings, excluding the ones with a short name of 'test'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT AVG(T1.bedroom_count) FROM Apartments AS T1 JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id WHERE T1.building_id > 100 AND T1.room_count BETWEEN 2 AND 5 OR T2.facility_code = 'GYM'",
        "question": "What is the average number of bedrooms in apartments with more than 100 building id and 2 to 5 rooms, or apartments that have a gym facility?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT T1.building_full_name, T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count >= 2 ORDER BY T1.building_full_name DESC",
        "question": "What are the building names and apartment numbers of all apartments with at least two bathrooms, listed in descending order by building name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT COUNT(apt_id) FROM Apartments WHERE bedroom_count >= 3",
        "question": "How many apartments have three or more bedrooms?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT T1.building_full_name, COUNT(DISTINCT T2.apt_type_code) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bedroom_count >= 3 ORDER BY T1.building_full_name ASC",
        "question": "What are the apartment buildings with their respective counts of distinct apartment types that have 3 or more bedrooms, listed in ascending order by building full name?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT COUNT(apt_number) FROM Apartments WHERE apt_type_code = 'Studio'",
        "question": "How many studio apartments are there?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.apt_id) FROM Apartments AS T1 JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id WHERE T1.bedroom_count > 2 ORDER BY T1.apt_id DESC",
        "question": "How many distinct apartments with more than two bedrooms are there, listed in descending apartment id order?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_id NOT IN (SELECT building_id FROM Apartments WHERE apt_id IN (SELECT apt_id FROM Apartment_Facilities WHERE facility_code = 'gym'))",
        "question": "What are the short names of apartment buildings that do not have a gym?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT building_short_name FROM Apartment_Buildings AS T1 WHERE T1.building_full_name = 'ABC Building' AND T1.building_short_name BETWEEN 'Apt 1' AND 'Apt 10' AND T1.building_id NOT IN ( SELECT T2.building_id FROM Apartments AS T2 ) ORDER BY T1.building_short_name ASC",
        "question": "What are the names of the apartment buildings with full name 'ABC Building', and short names between 'Apt 1' and 'Apt 10', that do not have any apartments, listed in ascending order by short name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_full_name > 'Apartment'",
        "question": "What are the short names of the apartment buildings with a full name greater than 'Apartment'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT COUNT(apt_id) FROM Apartments WHERE bedroom_count <= 3 ORDER BY apt_id DESC",
        "question": "How many apartments are there with 3 or fewer bedrooms, listed in descending order by apartment ID?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT T1.building_full_name FROM ( SELECT T2.building_full_name, AVG(T1.room_count) AS average_room_count FROM Apartments AS T1 INNER JOIN Apartment_Buildings AS T2 ON T1.building_id = T2.building_id WHERE T2.building_address LIKE 'Park%' GROUP BY T2.building_full_name ) AS T1 WHERE T1.average_room_count > 2",
        "question": "What are the full names of the buildings located on Park and have more than two rooms on average?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT T1.building_address, COUNT(T2.apt_id) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_phone = '123-456-7890' AND EXISTS ( SELECT * FROM Apartment_Facilities AS T3 WHERE T2.apt_id = T3.apt_id AND T3.facility_code = 'Gym' )",
        "question": "What is the address of the apartment building with phone number '123-456-7890' and how many of its apartments have a gym and are there?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT T1.building_short_name FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_phone = '1234567890' AND T2.bedroom_count > 2 AND NOT EXISTS (SELECT 1 FROM Guests AS T3 WHERE T3.gender_code = 'M') LIMIT 10",
        "question": "What are the short names of the next 10 apartment buildings with phone number '1234567890', having more than 2 bedrooms and no male guests?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT MAX building_phone FROM Apartment_Buildings WHERE building_id = 1",
        "question": "What is the maximum phone number for the building with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "apartment_rentals"
    },
    {
        "query": "SELECT * FROM Student WHERE StuID = 100",
        "question": "What are the details of the student with student ID 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "voter_2"
    },
    {
        "query": "SELECT T1.LName, T1.Fname FROM Student AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.Age BETWEEN 18 AND 25 ORDER BY T1.Fname DESC",
        "question": "What are the last names and first names of students between the ages of 18 and 25, listed in descending order by first name?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "voter_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Sex) FROM Student AS T1",
        "question": "How many different sexes are there among the students?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "voter_2"
    },
    {
        "query": "SELECT T1.LName, COUNT(T2.Registration_Date) FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Registration_Date = '2020-01-01' AND T1.Age > 18 AND NOT EXISTS (SELECT 1 FROM Student AS T3 WHERE T3.StuID = T1.StuID AND T3.Major IS NULL) ORDER BY T1.LName ASC LIMIT 10",
        "question": "What are the last names of the students with non-null major who are older than 18 and registered to vote on '2020-01-01', listed in ascending order along with the number of times they registered?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "voter_2"
    },
    {
        "query": "SELECT T1.Major, AVG(T1.Age) FROM Student AS T1 WHERE T1.Sex = 'M' AND T1.Age > 18 AND EXISTS (SELECT 1 FROM Voting_record AS T2 WHERE T1.StuID = T2.StuID) GROUP BY T1.Major",
        "question": "What is the average age of male students in each major who have a voting record and are older than 18?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "voter_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Sex), T1.Registration_Date FROM Voting_record AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.Registration_Date != '1999-04-27' GROUP BY T1.Registration_Date ORDER BY COUNT(DISTINCT T2.Sex) DESC LIMIT 10",
        "question": "What are the top 10 registration dates with the highest number of distinct sexes of students, excluding the date '1999-04-27', along with the count of distinct sexes for each of those dates?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "voter_2"
    },
    {
        "query": "SELECT T1.LName, T2.Registration_Date FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID JOIN Voting_record AS T3 ON T2.StuID = T3.StuID WHERE T1.Age > 20 LIMIT 5",
        "question": "What are the last names and registration dates of students older than 20, for the 6th to 10th students in the list?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "voter_2"
    },
    {
        "query": "SELECT Fname FROM Student WHERE Major = 3 OR LName = 'Smith' OR StuID IN ( SELECT StuID FROM Voting_record ) ORDER BY LName DESC",
        "question": "What are the first names of students who are majoring in a field with id 3 or have the last name Smith or have a record in the voting system, listed in descending order by last name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "voter_2"
    },
    {
        "query": "SELECT MIN(Age) FROM Student WHERE Age <= 20",
        "question": "What is the minimum age of students who are 20 years old or younger?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "voter_2"
    },
    {
        "query": "SELECT DISTINCT LName, Fname FROM Student AS T1 WHERE Age >= 20 LIMIT 10",
        "question": "What are the distinct last and first names of students aged 20 or older, listed 11th to 20th in the result?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "voter_2"
    },
    {
        "query": "SELECT T1.Title FROM program AS T1 JOIN director_admin AS T2 ON T1.Director_ID = T2.Director_ID JOIN channel AS T3 ON T2.Channel_ID = T3.Channel_ID WHERE EXISTS (SELECT 1 FROM director AS T4 WHERE T1.Director_ID = T4.Director_ID LIMIT 1)",
        "question": "What are the titles of programs directed by at least one director?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT COUNT(Channel_ID), Channel_ID FROM channel WHERE Name != 'Channel 1'",
        "question": "How many channels, and what are their IDs, excluding the channel named 'Channel 1'?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT T2.Name, AVG(T1.Start_Year) FROM program AS T1 JOIN director AS T2 ON T1.Director_ID = T2.Director_ID WHERE T2.Age >= 50 GROUP BY T2.Name",
        "question": "What are the names of directors aged 50 and above and their average program start year?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT T1.Title FROM program AS T1 JOIN program AS T2 ON T1.Director_ID = T2.Director_ID WHERE T1.Start_Year BETWEEN 2000 AND 2010 OR T2.Start_Year > 2010 OR EXISTS (SELECT 1 FROM program AS T3 WHERE T3.Director_ID = T1.Director_ID AND T3.Start_Year = 2005)",
        "question": "What are the titles of the programs directed by a director who directed a program between 2000 and 2010, or after 2010, or in 2005?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT Title FROM program AS T1 WHERE T1.Start_Year > 2000 OR EXISTS (SELECT 1 FROM director_admin AS T2 WHERE T2.Director_ID = T1.Director_ID AND T2.Is_first_director = 'Yes') OR T1.Program_ID = 10",
        "question": "What are the titles of the programs that started after the year 2000, have a director who is a first director, or have a program ID of 10?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT Name, Analogue_terrestrial_channel FROM channel WHERE Internet = 'yes' AND Digital_terrestrial_channel = 'no' ORDER BY Name ASC",
        "question": "What are the names and analogue terrestrial channels of channels that are available on the internet but not on digital terrestrial, listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT Title FROM program WHERE Director_ID > 10 OR Channel_ID = 5 ORDER BY Title ASC LIMIT 10",
        "question": "What are the next 10 program titles in ascending order after the first 10, considering either programs led by directors with an ID greater than 10 or programs broadcast on channel 5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Title) FROM channel AS T1 JOIN program AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T1.Channel_ID > 10 GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.Title) ASC",
        "question": "What are the names of the channels with more than 10 channel id and the number of distinct programs they have, listed in ascending order of the number of distinct programs?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT SUM(Start_Year) FROM program WHERE Program_ID < 200",
        "question": "What is the sum of start years of programs with a program id less than 200?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT Name FROM channel WHERE Channel_ID BETWEEN 1 AND 50 ORDER BY Channel_ID ASC",
        "question": "What are the names of the channels with channel IDs between 1 and 50, listed in ascending order of channel ID?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT COUNT(Program_ID), Title FROM program WHERE Channel_ID >= 10 GROUP BY Title ORDER BY COUNT(Program_ID) DESC",
        "question": "What are the titles of programs aired on channels 10 and above, along with the number of programs for each title, listed in descending order of program count?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT COUNT(T1.Program_ID), MAX(T1.Start_Year), MIN(T3.Age) FROM program AS T1 JOIN director_admin AS T2 ON T1.Director_ID = T2.Director_ID JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T1.Start_Year <= 2000 LIMIT 10",
        "question": "What is the number of programs, the maximum start year, and the minimum age of the director for programs starting before or in the year 2000, for the 11th to 20th results?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "bbc_channels"
    },
    {
        "query": "SELECT T1.name, T2.name, T3.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id JOIN mill AS T3 ON T1.id = T3.architect_id WHERE T1.nationality = 'USA' OR T2.length_meters BETWEEN 100 AND 200 OR T3.built_year > 1900 ORDER BY T1.name DESC LIMIT 10",
        "question": "What are the names of the architects, bridges and mills for architects from the USA or bridges with length between 100 and 200 meters or mills built after 1900, listed in descending order of architect name, starting from the 11th result?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "architecture"
    },
    {
        "query": "SELECT COUNT(DISTINCT name) FROM architect WHERE id > 10",
        "question": "How many unique architects have an id greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "architecture"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name), COUNT(T1.id) FROM architect AS T1 WHERE T1.gender = 'Male' OR T1.nationality = 'Italian' OR EXISTS (SELECT 1 FROM bridge AS T2 WHERE T2.architect_id = T1.id)",
        "question": "What is the count of unique names and total count of male architects or Italian architects or architects who have designed at least one bridge?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "architecture"
    },
    {
        "query": "SELECT T1.name FROM architect AS T1 JOIN architect AS T2 ON T1.id = T2.id WHERE T1.name = 'John'",
        "question": "What is the name of the architect with the id of another architect named John?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "architecture"
    },
    {
        "query": "SELECT architect_id, COUNT(location) AS count FROM mill GROUP BY architect_id",
        "question": "How many locations are designed by each architect for their mills?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "architecture"
    },
    {
        "query": "SELECT COUNT(DISTINCT name), COUNT(DISTINCT nationality) FROM architect WHERE gender != 'Male' ORDER BY id DESC",
        "question": "What are the counts of distinct names and nationalities of female architects, listed in descending order by id?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "architecture"
    },
    {
        "query": "SELECT T1.nationality, T2.name, T3.location FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id JOIN mill AS T3 ON T1.id = T3.architect_id",
        "question": "What are the nationality of the architects, the names of the bridges and the locations of the mills they designed?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "architecture"
    },
    {
        "query": "SELECT T1.name, T2.name, COUNT(T2.location) FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T2.length_feet < 1000 ORDER BY T2.name ASC",
        "question": "What are the names of architects and their bridges with less than 1000 feet in length, listed in ascending order of bridge name, along with the count of locations for each bridge name?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "architecture"
    },
    {
        "query": "SELECT T1.name, COUNT(T1.id) FROM architect AS T1 WHERE T1.nationality = 'Japanese' OR T1.name BETWEEN 'A' AND 'K' GROUP BY T1.name HAVING COUNT(T1.id) > 1 LIMIT 10",
        "question": "What are the names of Japanese architects or architects whose name starts from A to K with more than one id, listed from the 11th to the 20th results?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "architecture"
    },
    {
        "query": "SELECT T1.name, T1.nationality FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T1.gender != 'Male'",
        "question": "What are the names and nationalities of the architects who are not male?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "architecture"
    },
    {
        "query": "SELECT name FROM architect WHERE id NOT IN (SELECT architect_id FROM bridge) ORDER BY id DESC",
        "question": "What are the names of the architects who have not designed any bridges, listed in descending order of their id?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "architecture"
    },
    {
        "query": "SELECT T1.name, MIN(T2.length_meters) FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.name",
        "question": "What is the name of each architect and the length of the shortest bridge they designed?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "architecture"
    },
    {
        "query": "SELECT name FROM architect WHERE id IN (SELECT architect_id FROM bridge WHERE length_meters > 100) ORDER BY id DESC",
        "question": "What are the names of the architects who designed bridges longer than 100 meters, listed in descending order by architect ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "architecture"
    },
    {
        "query": "SELECT MAX(T1.product_price) FROM Products AS T1 WHERE T1.product_id BETWEEN 100 AND 200 AND T1.product_price > 50 ORDER BY T1.product_price DESC",
        "question": "What is the maximum product price of products with id between 100 and 200 and price over 50?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "department_store"
    },
    {
        "query": "SELECT T1.staff_name FROM Staff AS T1 WHERE T1.staff_id = 10 AND T1.staff_gender = 'M' AND T1.staff_id BETWEEN 5 AND 15",
        "question": "What is the name of the male staff member with a staff id of 10 and whose staff id is between 5 and 15?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "department_store"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.staff_name) FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T1.staff_gender = 'Male' AND T2.department_id = 10 AND T2.job_title_code = 'Manager'",
        "question": "How many distinct male staff members are assigned as managers in department 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "department_store"
    },
    {
        "query": "SELECT T1.staff_name, COUNT(T2.staff_name), SUM(T2.staff_id) FROM Staff AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.staff_id > 10 GROUP BY T1.staff_name HAVING COUNT(T2.staff_name) > 2 ORDER BY COUNT(T2.staff_name) DESC",
        "question": "What are the names of staff with staff id greater than 10 along with the count and sum of their staff id, grouped by staff name and ordered in descending order of count, when staff is joined with itself on staff id, and only if the count is more than 2?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_store"
    },
    {
        "query": "SELECT T1.product_name, SUM(T2.total_value_purchased) FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name HAVING T1.product_name != 'Product A'",
        "question": "What is the total value of each product purchased, excluding Product A?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "department_store"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.product_name) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T2.order_id IN (SELECT T3.order_id FROM Customer_Orders AS T3 WHERE T3.order_date > '2020-01-01') ORDER BY T1.product_name ASC",
        "question": "What number of distinct product names are there in orders placed after January 1st, 2020?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_store"
    },
    {
        "query": "SELECT customer_name FROM Customers WHERE customer_address = 'New York' OR customer_phone NOT IN (SELECT store_phone FROM Department_Stores WHERE store_address = 'Los Angeles')",
        "question": "What are the names of the customers who live in New York or whose phone numbers are not listed among the phone numbers of department stores in Los Angeles?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_store"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_price BETWEEN 10 AND 20 OR product_name = 'Product A' OR NOT EXISTS (SELECT 1 FROM Product_Suppliers WHERE Product_Suppliers.product_id = Products.product_id) ORDER BY product_price DESC",
        "question": "What are the names of the products that cost between 10 and 20, or are named 'Product A', or are not supplied by any supplier, listed in descending order of their prices?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_store"
    },
    {
        "query": "SELECT T1.staff_id FROM Staff AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE NOT EXISTS (SELECT 1 FROM Staff_Department_Assignments AS T3 WHERE T3.staff_id = T1.staff_id AND T3.job_title_code = 'Manager') ORDER BY T1.staff_id DESC",
        "question": "What are the staff IDs of staff members who have never held the job title of 'Manager', listed in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_store"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.supplier_id) FROM Suppliers AS T1 JOIN Product_Suppliers AS T2 ON T1.supplier_id = T2.supplier_id WHERE T2.date_supplied_from BETWEEN '2020-01-01' AND '2021-01-01' AND T1.supplier_phone = '1234567890'",
        "question": "How many distinct suppliers with the phone number '1234567890' supplied products between '2020-01-01' and '2021-01-01'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "department_store"
    },
    {
        "query": "SELECT T2.Region_name, SUM(T1.Number_Deaths) FROM storm AS T1 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID JOIN region AS T2 ON T3.Region_id = T2.Region_id WHERE T1.Max_speed > 10 OR T3.Region_id NOT IN (SELECT Region_id FROM region WHERE Region_code = 'ASIA') GROUP BY T2.Region_name",
        "question": "What are the total deaths for each region, excluding regions with code 'ASIA', where the storm's maximum speed is more than 10?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT Name AS storm_name FROM storm WHERE Storm_ID = 1",
        "question": "What is the name of the storm with storm id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT T1.Name, T1.Dates_active FROM storm AS T1 WHERE T1.Max_speed > 100 AND T1.Damage_millions_USD BETWEEN 1000 AND 10000 AND T1.Number_Deaths < 10",
        "question": "What are the names and active dates of storms that had a maximum speed of over 100, caused between $1000 million and $10,000 million in damages, and resulted in fewer than 10 deaths?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT COUNT(T1.Storm_ID), T2.Region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.Region_id = T2.Region_id GROUP BY T2.Region_name",
        "question": "How many storms affected each region?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT MAX(T1.Number_Deaths) FROM storm AS T1 WHERE EXISTS (SELECT T2.Storm_ID FROM affected_region AS T2 WHERE T2.Storm_ID = T1.Storm_ID AND T2.Number_city_affected > 1) AND T1.Max_speed BETWEEN 100 AND 150 ORDER BY T1.Storm_ID ASC",
        "question": "What is the maximum number of deaths from the storms with a maximum speed between 100 and 150 that affected more than one city, and list the result in ascending order of storm id?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT T1.Region_name FROM region AS T1 INNER JOIN affected_region AS T2 ON T1.Region_id = T2.Region_id INNER JOIN storm AS T3 ON T2.Storm_ID = T3.Storm_ID WHERE T3.Number_Deaths < 1000",
        "question": "What are the names of the regions affected by storms with less than 1000 reported deaths?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT MAX(Number_Deaths) FROM storm WHERE Max_speed <= 10",
        "question": "What is the maximum number of deaths in storms with a maximum speed of 10 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT T1.Region_code FROM region AS T1 JOIN affected_region AS T2 ON T1.Region_id = T2.Region_id JOIN storm AS T3 ON T2.Storm_ID = T3.Storm_ID WHERE T3.Max_speed = 100 AND T3.Damage_millions_USD = 1000 LIMIT 10",
        "question": "What are the region codes for the regions affected by storms with a maximum speed of 100 and damage of 1000 million USD, showing the 11th to 20th results?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT Name FROM storm WHERE Number_Deaths > (SELECT AVG(Number_Deaths) FROM storm) OR Damage_millions_USD > 50 OR Max_speed > (SELECT MAX(Max_speed) FROM storm) ORDER BY Damage_millions_USD DESC",
        "question": "What are the names of the storms with above average number of deaths, damage exceeding 50 million USD, or maximum speed greater than any other storm, listed in descending order of damage?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT Name FROM storm WHERE Damage_millions_USD > 10 ORDER BY Name ASC LIMIT 5",
        "question": "What are the names of the 5 storms with the 6th to 10th highest damages greater than 10 million USD in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT Name FROM storm WHERE Storm_ID IN (SELECT Storm_ID FROM affected_region WHERE Number_city_affected > 10) ORDER BY Damage_millions_USD DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th most damaging storms that affected more than 10 cities?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID WHERE T2.Number_city_affected > 5 AND T1.Max_speed BETWEEN 50 AND 100 AND T2.Region_id NOT IN (SELECT T3.Region_id FROM region AS T3 WHERE T3.Region_name = 'North') LIMIT 10",
        "question": "What are the names of the next 10 storms, excluding those from the North region, that affected more than 5 cities and had maximum speeds between 50 and 100?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "storm_record"
    },
    {
        "query": "SELECT Policy_ID, Policy_Type_Code FROM Policies WHERE Policy_ID > 100",
        "question": "What are the policy IDs and policy type codes for policies with IDs greater than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "insurance_and_eClaims"
    },
    {
        "query": "SELECT MAX(Amount_Claimed), MIN(Amount_Piad) FROM Claim_Headers WHERE Claim_Status_Code = 'Open' ORDER BY Amount_Claimed DESC LIMIT 1",
        "question": "What is the maximum amount claimed and minimum amount paid for the second largest open claim?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "insurance_and_eClaims"
    },
    {
        "query": "SELECT Policy_Type_Code, Start_Date FROM Policies WHERE Start_Date BETWEEN '2020-01-01' AND '2020-12-31'",
        "question": "What are the policy types and start dates of the policies that started in the year 2020?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "insurance_and_eClaims"
    },
    {
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T2.Start_Date BETWEEN '2020-01-01' AND '2020-12-31' OR T3.Claim_Status_Code = 'Open' OR T3.Amount_Claimed > 10000",
        "question": "What are the customer details of customers who have policies that started in the year 2020, or have open claims, or have made claims of more than 10,000?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "insurance_and_eClaims"
    },
    {
        "query": "SELECT AVG(Amount_Claimed) FROM Claim_Headers WHERE Amount_Piad > 10000",
        "question": "What is the average amount claimed for claims where the amount paid is more than $10,000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "insurance_and_eClaims"
    },
    {
        "query": "SELECT COUNT(DISTINCT Staff_ID), SUM(Claim_Outcome_Code) FROM Claims_Processing WHERE Staff_ID <= 2",
        "question": "What is the count of distinct staff ids and the sum of claim outcome codes for claims processed by staff with ids less than or equal to 2?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "insurance_and_eClaims"
    },
    {
        "query": "SELECT SUM(T1.Amount_Claimed) FROM Claim_Headers AS T1 WHERE T1.Claim_Status_Code = 'Open' OR T1.Amount_Claimed > 10000 OR EXISTS ( SELECT T2.Claim_ID FROM Claims_Documents AS T2 WHERE T2.Claim_ID = T1.Claim_Header_ID ) GROUP BY T1.Amount_Claimed HAVING SUM(T1.Amount_Claimed) > 10000",
        "question": "What is the total amount claimed for claims that are open or have an amount claimed greater than 10000 or have documents, grouped by amount claimed where the total amount claimed is greater than 10000?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "insurance_and_eClaims"
    },
    {
        "query": "SELECT Policy_Type_Code FROM Policies WHERE Policy_ID NOT IN (SELECT Policy_ID FROM Claim_Headers) ORDER BY Policy_Type_Code ASC",
        "question": "What are the policy type codes of policies without any claims, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "insurance_and_eClaims"
    },
    {
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 WHERE T1.Customer_ID BETWEEN 100 AND 200 AND T1.Customer_Details = 'ABC'",
        "question": "What are the customer IDs of customers with customer details 'ABC' and customer IDs between 100 and 200?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "insurance_and_eClaims"
    },
    {
        "query": "SELECT T1.property_type_description, MIN(T3.room_size) FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code JOIN Rooms AS T3 ON T2.property_id = T3.property_id WHERE T1.property_type_code = 'residential' GROUP BY T1.property_type_description",
        "question": "What is the minimum room size for each type of 'residential' property?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT T1.property_name FROM Properties AS T1, Properties AS T2 WHERE T1.property_id = T2.property_id AND T2.price_min IN (SELECT price_min FROM Properties WHERE vendor_requested_price > 100000)",
        "question": "What are the names of the properties that have the same price_min as other properties where the vendor_requested_price is greater than 100000?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT MAX(T1.vendor_requested_price) FROM Properties AS T1 WHERE T1.property_type_code = 'residential'",
        "question": "What is the maximum vendor requested price for a residential property?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT T1.property_name FROM Properties AS T1 JOIN Properties AS T2 ON T1.property_id = T2.property_id WHERE T1.vendor_requested_price > 100000 ORDER BY T1.property_name ASC",
        "question": "What are the names of the properties with a vendor requested price greater than $100,000, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT T1.property_name FROM Properties AS T1 WHERE T1.vendor_requested_price <= 1000 ORDER BY T1.vendor_requested_price DESC",
        "question": "What are the property names of the properties that are priced by the vendor at or below $1000, listed in order of highest price first?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.property_id), COUNT(T1.property_id) FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id WHERE T2.feature_value > 'average'",
        "question": "What are the counts of distinct and total properties that have features with values greater than 'average'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT COUNT(room_number) FROM Rooms WHERE room_size BETWEEN 10 AND 20",
        "question": "How many rooms have a size between 10 and 20 square meters?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT * FROM Users WHERE user_id >= 1000",
        "question": "What are the details of all users with a user ID of 1000 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT T1.room_size FROM Rooms AS T1 WHERE T1.room_type_code = 'Bedroom' AND T1.property_id = (SELECT T2.property_id FROM Properties AS T2 WHERE T2.property_type_code = 'Flat')",
        "question": "What is the room size of the bedrooms in a flat?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT * FROM Users WHERE user_id = 100",
        "question": "What is the information for the user with user id 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT COUNT(property_id) FROM Properties WHERE vendor_requested_price > 100000 AND price_min > 50000 AND price_max > 75000 AND property_id NOT IN (SELECT property_id FROM Property_Features)",
        "question": "How many properties cost more than 100,000, have a minimum price over 50,000 and maximum price over 75,000, and do not have any features listed?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT T1.property_name FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id JOIN Property_Photos AS T3 ON T1.property_id = T3.property_id WHERE T2.feature_value IN (SELECT feature_value FROM Property_Features WHERE feature_id = 1)",
        "question": "What are the names of the properties that have a feature with the same value as the feature with id 1 in the Property_Features table and also have photos?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "real_estate_rentals"
    },
    {
        "query": "SELECT T1.LName FROM Student AS T1 WHERE NOT EXISTS (SELECT 1 FROM Restaurant AS T2 WHERE T2.ResName = 'Johnnies')",
        "question": "What are the last names of the students if there is no restaurant named 'Johnnies'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT StuID, LName FROM Student WHERE Age BETWEEN 18 AND 25 OR Fname = 'John' OR Major > 10",
        "question": "What are the student IDs and last names of students who are between 18 and 25 years old or named John or majoring in a field greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT T1.LName, MIN(T1.Age) FROM Student AS T1 GROUP BY T1.LName",
        "question": "What is the youngest age for each last name in the student table?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT MAX(S.Age), S.LName FROM Student S WHERE S.Major != 1 GROUP BY S.LName HAVING MAX(S.Age) > 20",
        "question": "What are the maximum ages greater than 20 for students with different last names and non-major 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT T1.LName, T2.ResName FROM Student AS T1 JOIN Visits_Restaurant AS T3 ON T1.StuID = T3.StuID JOIN Restaurant AS T2 ON T3.ResID = T2.ResID WHERE T1.Age >= 20 ORDER BY T1.LName DESC LIMIT 5",
        "question": "What are the last names of the 5 oldest students aged 20 and above who visited a restaurant, along with the names of the restaurants, listed in descending order of last name, starting from the 6th student?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT ResName FROM Restaurant WHERE Rating = 5 LIMIT 10",
        "question": "What are the names of the 5-star restaurants from 11th to 20th in the list?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT T1.LName, T2.Fname FROM Student AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.Age BETWEEN 20 AND 25 OR T2.Major = 2 OR T1.Sex IN ('M', 'F') ORDER BY T1.LName ASC",
        "question": "What is the last name and first name of each student whose age is between 20 and 25 or whose major is 2 or whose sex is either 'M' or 'F', listed in ascending order by last name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT Fname FROM Student WHERE Sex = 'M' AND Age BETWEEN 18 AND 20 AND LName = 'Smith' ORDER BY Fname ASC LIMIT 10",
        "question": "What are the first names of the next 10 male students with the last name 'Smith' between 18 and 20 years old, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.LName), COUNT(DISTINCT T1.Fname), T1.city_code FROM Student AS T1 WHERE T1.Age IN (SELECT T2.Age FROM Student AS T2) ORDER BY T1.Age ASC LIMIT 10",
        "question": "What are the number of distinct last names, number of distinct first names, and city codes of the youngest 10 students with an age that exists in the student table?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT LName FROM Student WHERE Age >= 20",
        "question": "What are the last names of students who are 20 years old or older?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT T1.LName, SUM(T2.Spent) FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID WHERE T1.StuID NOT IN (SELECT StuID FROM Visits_Restaurant WHERE Spent > 100) GROUP BY T1.LName HAVING SUM(T2.Spent) > 500 ORDER BY SUM(T2.Spent) DESC",
        "question": "What are the last names of students who have never spent more than 100 at a restaurant, and the total amount they spent, ordered by the total amount in descending order, but only for those who spent more than 500?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT T4.ResTypeName, SUM(T5.Spent) FROM Restaurant_Type AS T4 JOIN Type_Of_Restaurant AS T3 ON T4.ResTypeID = T3.ResTypeID JOIN Restaurant AS T2 ON T3.ResID = T2.ResID JOIN Visits_Restaurant AS T5 ON T2.ResID = T5.ResID JOIN Student AS T1 ON T5.StuID = T1.StuID WHERE T1.Age BETWEEN 20 AND 30 GROUP BY T4.ResTypeName",
        "question": "What are the total amounts spent by students aged 20-30 at each type of restaurant?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurant_1"
    },
    {
        "query": "SELECT T1.Name, T2.Money_Requested FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Money_Requested >= T2.Investor ORDER BY T2.Money_Requested DESC",
        "question": "What are the names of the entrepreneurs and the amount of money they requested, where the amount of money requested is greater than or equal to the investor, listed in descending order of money requested?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT MAX(Money_Requested), MIN(Money_Requested), COUNT(Entrepreneur_ID) FROM entrepreneur ORDER BY Entrepreneur_ID DESC",
        "question": "What is the maximum and minimum amount of money requested by entrepreneurs, and how many entrepreneurs are there, listed in descending order of entrepreneur ID?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT T1.Name, T2.Company FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 170 AND T2.Money_Requested BETWEEN 500 AND 1000 AND T2.Company = 'ABC Inc.' ORDER BY T1.Name ASC",
        "question": "What are the names of people taller than 170cm who are entrepreneurs of 'ABC Inc.' and requested between 500 and 1000 dollars, listed in alphabetical order?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Name), COUNT(DISTINCT T1.Height) FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height BETWEEN 160 AND 180 OR T1.Weight > 60 OR T2.Money_Requested > 500000 ORDER BY T1.Name ASC",
        "question": "How many unique names and heights of people are there among entrepreneurs with a height between 160 and 180, or a weight over 60, or who have requested over 500000 in funding?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT T1.Name, AVG(T2.Money_Requested) FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Name HAVING T1.Height > (SELECT MAX(Height) FROM people WHERE Weight < 70) OR T1.Weight < 60 ORDER BY T1.Name ASC",
        "question": "What are the names of people, along with the average amount of money they requested, for those who are either taller than the tallest person weighing less than 70 or weigh less than 60, listed in ascending order by name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Investor), COUNT(T1.Investor) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height != 170",
        "question": "How many distinct investors and total investors are there among entrepreneurs with a different height than 170?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.People_ID), SUM(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Weight > 70",
        "question": "What is the number of distinct entrepreneurs who weigh more than 70 and the total amount of money they requested?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID JOIN entrepreneur AS T3 ON T2.People_ID = T3.People_ID WHERE T2.Money_Requested BETWEEN 10000 AND 50000 ORDER BY T1.Name ASC",
        "question": "What are the names of the people who applied for money, in order from A to Z, whose requested money is between 10,000 and 50,000 dollars?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT * FROM entrepreneur WHERE Money_Requested > 10 LIMIT 5",
        "question": "What are the details of the 5 entrepreneurs who requested more than 10 units of money after the first 5 results?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Name != 'John' LIMIT 10",
        "question": "What are the names of the next 10 entrepreneurs excluding John?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Money_Requested = 50000 OR T2.Money_Requested BETWEEN 10000 AND 20000 OR T2.Money_Requested > 30000",
        "question": "What are the names of the entrepreneurs who requested either 50000, between 10000 and 20000, or more than 30000 dollars?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Money_Requested) FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Money_Requested < 10000 ORDER BY T1.Name ASC",
        "question": "What is the number of requests made by each person for less than $10,000, listed in ascending order by the person's name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Money_Requested), COUNT(T1.Company) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 170 AND T2.Weight BETWEEN 60 AND 80 AND T1.Money_Requested = 100000",
        "question": "How many unique requests and total companies have entrepreneurs with a height over 170, a weight between 60 and 80, and a money request of $100,000?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT MAX(COUNT(DISTINCT Investor)) FROM entrepreneur",
        "question": "What is the maximum number of different investors for any entrepreneur?",
        "iter": 4,
        "flag": true,
        "hardness": "easy",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Investor), AVG(T1.Money_Requested) FROM entrepreneur AS T1 WHERE T1.Money_Requested BETWEEN 1000 AND 5000 AND T1.Company != 'ABC' ORDER BY T1.Money_Requested DESC",
        "question": "What are the number of distinct investors and average amount of money requested by entrepreneurs who requested between 1000 and 5000 dollars from companies other than 'ABC'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT Entrepreneur_ID FROM entrepreneur WHERE Money_Requested = (SELECT MAX(Money_Requested) FROM entrepreneur)",
        "question": "Which entrepreneur ID(s) requested the maximum amount of money?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur WHERE Company = 'CompanyA')",
        "question": "What are the names of people who are not entrepreneurs at CompanyA?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height >= 170 AND T1.Money_Requested >= 500000",
        "question": "What are the companies of entrepreneurs who are at least 170 cm tall and requested at least $500,000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "entrepreneur"
    },
    {
        "query": "SELECT Fname AS first_name, LName AS last_name FROM Student",
        "question": "What are the first and last names of all students?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_3"
    },
    {
        "query": "SELECT T1.LName, SUM(T1.Age) FROM Student AS T1 WHERE T1.Age > (SELECT AVG(Age) FROM Student) GROUP BY T1.LName ORDER BY SUM(T1.Age) DESC",
        "question": "What are the total ages of students older than the average age, grouped by last name, listed in descending order of total age?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_3"
    },
    {
        "query": "SELECT T1.Fname, T1.LName, T2.Room FROM Student AS T1 JOIN Faculty AS T2 ON T1.Advisor = T2.FacID",
        "question": "What are the first names, last names, and room numbers of students and their advisors?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_3"
    },
    {
        "query": "SELECT T1.DName, AVG(T2.Credits) FROM Department AS T1 JOIN Course AS T2 ON T1.DNO = T2.DNO WHERE T1.DName = 'Math' GROUP BY T1.DName ORDER BY AVG(T2.Credits) DESC LIMIT 10",
        "question": "What is the department name and the average credits of courses offered by it, for the Math department, ordered in descending order of average course credits, starting from the 11th result?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_3"
    },
    {
        "query": "SELECT T1.DName, AVG(T2.Credits) FROM Department AS T1 JOIN Course AS T2 ON T1.DNO = T2.DNO GROUP BY T1.DName ORDER BY AVG(T2.Credits) ASC LIMIT 1",
        "question": "What department has the second lowest average course credits?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_3"
    },
    {
        "query": "SELECT AVG(Age), MAX(Age) FROM Student WHERE Sex = 'M'",
        "question": "What is the average and maximum age of male students?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_3"
    },
    {
        "query": "SELECT T1.LName FROM Student AS T1 WHERE T1.Age > 20 OR T1.Sex = 'M' OR T1.city_code IN (SELECT T2.Building FROM Department AS T2)",
        "question": "What are the last names of students who are older than 20, male, or from a city where a department building is located?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_3"
    },
    {
        "query": "SELECT LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Minor_in)",
        "question": "What are the last names of students who do not have a minor?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "college_3"
    },
    {
        "query": "SELECT LName FROM Student WHERE Age BETWEEN 18 AND 25 AND Sex = 'M' AND StuID NOT IN (SELECT StuID FROM Enrolled_in WHERE Grade = 'A') ORDER BY LName DESC",
        "question": "What are the last names of male students aged 18 to 25 who have not received an A grade, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_3"
    },
    {
        "query": "SELECT LName FROM Student WHERE Age BETWEEN 20 AND 25",
        "question": "What are the last names of students who are between 20 and 25 years old?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "college_3"
    },
    {
        "query": "SELECT COUNT(DISTINCT S.LName), F.Fname FROM Student AS S JOIN Faculty AS F ON S.Advisor = F.FacID WHERE S.Sex != 'M' ORDER BY F.Fname ASC LIMIT 10",
        "question": "What are the names of the next 10 female students' advisors ordered by advisor's first name, along with the count of distinct last names of those students?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_3"
    },
    {
        "query": "SELECT T1.Age, T2.Grade FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID JOIN Gradeconversion AS T3 ON T2.Grade = T3.lettergrade WHERE T1.Age BETWEEN 18 AND 25 AND T3.gradepoint > 3.0 ORDER BY T1.Age ASC",
        "question": "What are the ages of students between 18 and 25 years old, their respective grades, listed in ascending order of age, for students with a grade point of more than 3.0?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_3"
    },
    {
        "query": "SELECT StuID FROM Student WHERE Major != 1 ORDER BY StuID ASC",
        "question": "What are the student IDs, in ascending order, of students who are not majoring in department 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_3"
    },
    {
        "query": "SELECT COUNT(DISTINCT Fname), COUNT(DISTINCT LName), COUNT(DISTINCT StuID) FROM Student WHERE Age > 20",
        "question": "How many distinct first names, last names, and student IDs are there among students older than 20?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_3"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.LName), COUNT(DISTINCT T1.Fname) FROM Student AS T1 WHERE T1.Age > 20 AND T1.Sex = 'M' AND T1.Major IN (SELECT T2.DNO FROM Department AS T2 WHERE T2.Division = 'Science') LIMIT 10",
        "question": "How many distinct last names and first names of male students who are older than 20 years old and major in a science department are there?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_3"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Sex) FROM Student AS T1 JOIN Faculty AS T2 ON T1.Advisor = T2.FacID WHERE T2.Phone < 1000",
        "question": "How many distinct sexes of students are advised by a faculty member whose phone number is less than 1000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_3"
    },
    {
        "query": "SELECT T1.LName, COUNT(T2.CID) FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID WHERE T1.Age < 20 GROUP BY T1.LName ORDER BY T1.LName ASC",
        "question": "For each last name of students under 20 years old, what are the total number of courses they are enrolled in, sorted by last name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_3"
    },
    {
        "query": "SELECT T1.StuID, T1.LName FROM Student AS T1 WHERE NOT EXISTS ( SELECT T2.DNO FROM Department AS T2 WHERE T2.DNO = T1.Major ) LIMIT 10",
        "question": "What are the IDs and last names of the next 10 students whose major does not match any department number?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_3"
    },
    {
        "query": "SELECT T1.Customer_ID FROM Customer_Policies AS T1 JOIN Claims AS T2 ON T1.Policy_ID = T2.Policy_ID WHERE T2.Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Claims) AND T2.Date_Claim_Made > '2020-01-01' ORDER BY T1.Customer_ID ASC LIMIT 10",
        "question": "What are the customer IDs of the next 10 customers who made claims for more than the average claimed amount after January 1st, 2020, ordered by customer ID in ascending order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "insurance_policies"
    },
    {
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Policy_Type_Code > 'A' ORDER BY T1.Customer_ID ASC",
        "question": "What are the customer IDs of customers with a policy type code greater than 'A', listed in ascending order by customer ID?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "insurance_policies"
    },
    {
        "query": "SELECT T1.Customer_ID, MIN(T4.Date_Payment_Made) FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claims AS T3 ON T2.Policy_ID = T3.Policy_ID JOIN Payments AS T4 ON T3.Claim_ID = T4.Settlement_ID WHERE T3.Amount_Claimed > 1000 AND T3.Date_Claim_Settled IS NOT NULL AND T3.Claim_ID NOT IN (SELECT Claim_ID FROM Settlements WHERE Amount_Settled = 0) GROUP BY T1.Customer_ID",
        "question": "For each customer, what is the earliest payment date for claims that were settled with a claimed amount greater than $1000 and a non-zero settlement amount?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "insurance_policies"
    },
    {
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_ID != 100",
        "question": "What are the customer IDs of customers who have policies and are not customer 100?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "insurance_policies"
    },
    {
        "query": "SELECT Policy_Type_Code FROM Customer_Policies LIMIT 1",
        "question": "What is the policy type code of the second customer policy?",
        "iter": 5,
        "flag": true,
        "hardness": "easy",
        "db_name": "insurance_policies"
    },
    {
        "query": "SELECT T1.Customer_ID, COUNT(DISTINCT T2.Policy_ID) FROM Customer_Policies AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Policy_Type_Code < 'P1' GROUP BY T1.Customer_ID",
        "question": "For each customer with a policy type code less than P1, how many distinct policies do they have?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "insurance_policies"
    },
    {
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.Adults > (SELECT AVG(Adults) FROM Reservations) ORDER BY T1.basePrice DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th most expensive rooms with more adults than the average adults per reservation?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT roomName FROM Rooms WHERE beds < 3 LIMIT 1",
        "question": "What is the name of the room with less than 3 beds that is second in the list of rooms with the least number of beds?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room JOIN Rooms AS T3 ON T2.Room = T3.RoomId WHERE T2.Rate != 100 LIMIT 10",
        "question": "What are the names of the next 10 rooms that have reservations with rates other than 100?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.Adults = T1.maxOccupancy OR T2.Kids BETWEEN 1 AND 2 OR NOT EXISTS (SELECT * FROM Reservations AS T3 WHERE T3.Code = T2.Code AND T3.Adults > T1.maxOccupancy)",
        "question": "Which room names are associated with reservations where the number of adults equals the room's maximum occupancy, or there are one or two kids, or there are no reservations with the same code and more adults than the room's maximum occupancy?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.roomName), COUNT(DISTINCT T1.decor), T1.basePrice FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.beds != T2.Adults",
        "question": "How many different room names and decors are there for rooms where the number of beds does not match the number of adults in the reservations, and what is the base price for these rooms?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT T1.roomName, T2.Rate FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.Adults <= 2 LIMIT 1",
        "question": "What is the room name and rate for the second reservation with two or fewer adults?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT T1.roomName, SUM(T2.Adults) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.CheckIn BETWEEN '2020-01-01' AND '2020-12-31' AND T2.Rate > 100 GROUP BY T1.roomName ORDER BY T1.roomName ASC",
        "question": "What are the room names with total number of adults for each room who have reservations with a rate greater than 100 and checked in between 2020-01-01 and 2020-12-31, listed in ascending order by room name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT T1.roomName, SUM(T2.Rate) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room",
        "question": "What are the room names and their total rates for each room in the reservations?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT T1.roomName, T2.Room FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.basePrice <= T2.Rate",
        "question": "What are the names of the rooms in the hotel where the reservation rate is higher than or equal to the base price of the room?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT T1.roomName FROM Rooms AS T1 WHERE T1.basePrice = 100",
        "question": "What room name has a base price of 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT roomName FROM Rooms WHERE basePrice > 100 ORDER BY basePrice DESC",
        "question": "What are the room names of the rooms with a base price greater than 100 ordered by base price from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "inn_1"
    },
    {
        "query": "SELECT T1.first_name, T2.course_name FROM People AS T1 JOIN People_Addresses AS T3 ON T1.person_id = T3.person_id JOIN Student_Course_Registrations AS T4 ON T3.person_id = T4.student_id JOIN Courses AS T2 ON T4.course_id = T2.course_id WHERE T3.date_from > T4.registration_date ORDER BY T1.first_name ASC",
        "question": "What are the names of students and the courses they registered for, where their address start date is later than their course registration date, listed alphabetically by first name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT T1.first_name FROM People AS T1 WHERE EXISTS (SELECT T2.student_id FROM Students AS T2 WHERE T1.person_id = T2.student_id) ORDER BY T1.first_name ASC",
        "question": "What are the first names of students in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.course_name) FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 1 ORDER BY T1.course_name DESC",
        "question": "How many unique courses is student 1 registered for, listed in descending order of course name?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT T1.first_name, AVG(T2.student_details) FROM People AS T1 JOIN Students AS T2 ON T1.person_id = T2.student_id WHERE T1.person_id > 100 GROUP BY T1.first_name HAVING AVG(T2.student_details) > 0",
        "question": "What is the average student details for each person with first name, where the average student details is greater than 0, considering only people with person id greater than 100?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.student_id) FROM Student_Course_Registrations AS T1 WHERE T1.course_id NOT IN (SELECT T2.course_id FROM Student_Course_Attendance AS T2)",
        "question": "How many students are registered for courses that they have never attended?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT COUNT(course_id), SUM(course_id) FROM Student_Course_Registrations AS T1",
        "question": "What is the total number of course registrations and the sum of the course ids in the student course registrations?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT COUNT(*) AS count FROM People",
        "question": "How many people are there in total?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT T1.first_name, SUM(T2.student_details) FROM People AS T1 JOIN Students AS T2 ON T1.person_id = T2.student_id WHERE T1.first_name != 'John' GROUP BY T1.first_name",
        "question": "For each person, excluding John, what is the first name and the total of their student details?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT COUNT(candidate_id) FROM Candidates AS T1 WHERE candidate_id < 100 LIMIT 10",
        "question": "What is the number of candidates with a candidate id less than 100, 11th to 20th in the list?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT last_name FROM People WHERE person_id = 1",
        "question": "What is the last name of the person with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.first_name), COUNT(DISTINCT T1.middle_name), COUNT(DISTINCT T1.last_name) FROM People AS T1 WHERE T1.person_id < 10 LIMIT 5",
        "question": "What are the counts of unique first names, middle names, and last names of the first 5 people with person id less than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id",
        "question": "What are the names of the courses that students are registered for?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT COUNT(person_id) FROM People WHERE person_id < 10 ORDER BY person_id DESC LIMIT 5",
        "question": "How many people have a person id less than 10, starting from the 6th highest person id?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT T1.person_id, T2.person_id FROM People AS T1 JOIN People AS T2 ON T1.person_id = T2.person_id WHERE T1.person_id BETWEEN (SELECT MIN(person_id) FROM People) AND (SELECT MAX(person_id) FROM People) AND T1.first_name = 'John' ORDER BY T1.person_id DESC LIMIT 10",
        "question": "What are the person ids of the 11th to 20th individuals with the first name 'John' when ordered from highest to lowest person id in the People table? ",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_assessment"
    },
    {
        "query": "SELECT T1.name, COUNT(DISTINCT T3.liked_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T2.student_id = T3.student_id WHERE T1.grade BETWEEN 9 AND 12",
        "question": "What are the names of the high school students in grades 9-12 and how many unique people do they like?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "network_1"
    },
    {
        "query": "SELECT name FROM Highschooler WHERE grade > 9 ORDER BY name ASC",
        "question": "What are the names of high schoolers in grades higher than 9, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "network_1"
    },
    {
        "query": "SELECT T1.name, T2.friend_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = 9 LIMIT 5",
        "question": "What are the names of the 6th to 10th 9th graders in high school along with their friend IDs?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "network_1"
    },
    {
        "query": "SELECT T1.name, COUNT(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name != T2.friend_id GROUP BY T1.name ORDER BY COUNT(T2.friend_id) DESC",
        "question": "What is the name of each high schooler and how many friends do they have excluding themselves, listed in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "network_1"
    },
    {
        "query": "SELECT name FROM Highschooler WHERE ID = 1000 ORDER BY name ASC LIMIT 5",
        "question": "What are names of high schoolers with id 1000 in ascending order, starting from the sixth name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "network_1"
    },
    {
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.friend_id = 100 LIMIT 5",
        "question": "What are the names of the students with ids from 6 to 10 who are friends with student 100?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "network_1"
    },
    {
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = 11 AND T2.friend_id NOT IN ( SELECT student_id FROM Likes WHERE liked_id = 100 )",
        "question": "What are the names of the 11th graders who do not like the person with id 100 and are friends with someone?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "network_1"
    },
    {
        "query": "SELECT name FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend WHERE friend_id IN ( SELECT liked_id FROM Likes WHERE student_id = 1501 ) ) GROUP BY name HAVING COUNT(DISTINCT liked_id) = 1 AND COUNT(DISTINCT friend_id) = 1",
        "question": "Who are the students with only one friend and one person they like, but are not liked by anyone who is friends with student 1501?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "network_1"
    },
    {
        "query": "SELECT T1.name, COUNT(DISTINCT T3.liked_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T2.friend_id = T3.student_id WHERE T1.grade > 9 ORDER BY T1.name DESC",
        "question": "For students in grade 10 or higher, what is the number of distinct people they have friends who like, listed in descending order by student name?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "network_1"
    },
    {
        "query": "SELECT T1.name, COUNT(DISTINCT T2.friend_id), T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade >= 10",
        "question": "What are the names, distinct number of friends and grades of high schoolers in grade 10 or above?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "network_1"
    },
    {
        "query": "SELECT AVG(p.numCiting) , j.journalName FROM paper AS p JOIN journal AS j ON p.journalId = j.journalId GROUP BY j.journalName ORDER BY AVG(p.numCiting) ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th journals with the lowest average number of citations, along with their average number of citations?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "scholar"
    },
    {
        "query": "SELECT title FROM paper WHERE venueId = 10 AND year BETWEEN 2000 AND 2010 AND EXISTS (SELECT paperId FROM writes WHERE paper.paperId = writes.paperId AND authorId = 1) ORDER BY numCiting DESC",
        "question": "What are the titles of papers published in venue with ID 10 between 2000 and 2010, written by author with ID 1, sorted by the number of citations in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "scholar"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.paperId) FROM writes AS T1 JOIN paper AS T2 ON T1.paperId = T2.paperId WHERE T2.year >= 2010",
        "question": "How many distinct papers were published from 2010 onwards?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "scholar"
    },
    {
        "query": "SELECT T1.title FROM paper AS T1 WHERE T1.venueId IN (SELECT T2.venueId FROM venue AS T2 WHERE T2.venueName = 'venueName')",
        "question": "What are the titles of papers published in the venue named 'venueName'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "scholar"
    },
    {
        "query": "SELECT T1.venueName FROM venue AS T1 WHERE T1.venueName = 'Test Venue'",
        "question": "What is the name of the venue with the name 'Test Venue'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "scholar"
    },
    {
        "query": "SELECT T1.authorName FROM author AS T1 JOIN writes AS T2 ON T1.authorId = T2.authorId JOIN paper AS T3 ON T2.paperId = T3.paperId WHERE T3.numCiting >= 10 ORDER BY T1.authorName DESC",
        "question": "What are the names of authors who wrote a paper with at least 10 citations, sorted in descending order by author name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "scholar"
    },
    {
        "query": "SELECT T1.title, T1.year FROM paper AS T1 WHERE EXISTS (SELECT T2.paperId FROM writes AS T2 WHERE T2.paperId = T1.paperId LIMIT 1)",
        "question": "What are the titles and years of papers that have at least one author?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "scholar"
    },
    {
        "query": "SELECT T1.authorName FROM author AS T1 JOIN writes AS T2 ON T1.authorId = T2.authorId JOIN paper AS T3 ON T3.paperId = T2.paperId WHERE T3.year < 2010",
        "question": "Who are the authors of papers published before 2010?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "scholar"
    },
    {
        "query": "SELECT AVG(T1.numCiting), COUNT(DISTINCT T1.paperId) FROM paper AS T1 INNER JOIN writes AS T2 ON T1.paperId = T2.paperId LIMIT 10",
        "question": "What is the average number of citations and the number of unique paper IDs for the next 10 papers written by an author?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "scholar"
    },
    {
        "query": "SELECT T1.title FROM paper AS T1 JOIN writes AS T2 ON T1.paperId = T2.paperId WHERE T1.year <= 2015 ORDER BY T1.title DESC",
        "question": "What are the titles of papers published before or in 2015, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "scholar"
    },
    {
        "query": "SELECT T1.venueName FROM venue AS T1 JOIN paper AS T2 ON T1.venueId = T2.venueId WHERE T2.title = 'Machine Learning'",
        "question": "What are the names of the venues where the paper titled 'Machine Learning' was published?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "scholar"
    },
    {
        "query": "SELECT AVG(T2.Result) FROM event AS T1 JOIN record AS T2 ON T1.ID = T2.Event_ID WHERE EXISTS (SELECT 1 FROM swimmer AS T3 WHERE T3.ID = T2.Swimmer_ID AND T3.Nationality = 'USA') GROUP BY T2.Swimmer_ID",
        "question": "What is the average result of each USA swimmer in the events they participated in?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "swimming"
    },
    {
        "query": "SELECT name FROM swimmer WHERE Nationality = 'American' AND meter_100 BETWEEN 50 AND 70",
        "question": "What are the names of American swimmers with a 100 meter time between 50 and 70 seconds?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "swimming"
    },
    {
        "query": "SELECT Time FROM swimmer ORDER BY meter_100 ASC",
        "question": "What are the times of the swimmers ordered by their 100 meter swim times in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "swimming"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.City) FROM event AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.ID JOIN record AS T3 ON T1.ID = T3.Event_ID WHERE T3.Result > 10 OR T2.Capacity BETWEEN 50000 AND 100000 AND T1.Year < 2010 GROUP BY T1.Name HAVING MIN(T2.Capacity) > 50000 ORDER BY T1.Name ASC",
        "question": "For each event name, how many different cities have stadiums hosted events before 2010 with either a result greater than 10 or a capacity between 50000 and 100000, and where the minimum stadium capacity is greater than 50000, sorted by event name in ascending order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "swimming"
    },
    {
        "query": "SELECT name, COUNT(*) FROM swimmer WHERE meter_100 < 100 GROUP BY name ORDER BY name ASC",
        "question": "What are the names of swimmers with a 100-meter time of less than 100 seconds, along with the count of such swimmers, listed in ascending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "swimming"
    },
    {
        "query": "SELECT Name FROM swimmer WHERE meter_100 < 60",
        "question": "What are the names of swimmers with a 100 meter time of less than 60 seconds?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "swimming"
    },
    {
        "query": "SELECT name FROM swimmer WHERE meter_100 > 50",
        "question": "What are the names of the swimmers with a 100 meter time greater than 50 seconds?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "swimming"
    },
    {
        "query": "SELECT name FROM swimmer WHERE meter_100 BETWEEN 20 AND 30 OR meter_100 NOT IN (SELECT meter_100 FROM swimmer WHERE meter_100 > 40) ORDER BY meter_100 DESC",
        "question": "List the names of swimmers with a 100 meter time between 20 and 30, or any time if their time is not over 40, in descending order by 100 meter time.",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "swimming"
    },
    {
        "query": "SELECT MAX(T1.Capacity) FROM stadium AS T1 WHERE T1.Capacity <= 50000 LIMIT 1",
        "question": "What is the largest stadium capacity that is less than or equal to 50000?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "swimming"
    },
    {
        "query": "SELECT meter_100 FROM swimmer WHERE meter_100 > 50 LIMIT 1",
        "question": "What is the next highest meter 100 time after the first one that is greater than 50 seconds?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "swimming"
    },
    {
        "query": "SELECT Name FROM swimmer AS S WHERE Nationality = 'USA' OR meter_200 = '1:45.00'",
        "question": "What are the names of the USA swimmers or swimmers with a 200 meter time of 1:45.00?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "swimming"
    },
    {
        "query": "SELECT S.name, E.Name FROM swimmer AS S JOIN record AS R ON S.ID = R.Swimmer_ID JOIN event AS E ON R.Event_ID = E.ID WHERE R.Result > 100 OR E.Name = 'TestEvent' OR EXISTS (SELECT * FROM stadium AS T WHERE T.Capacity > 10000)",
        "question": "What are the names of swimmers and events where the result is greater than 100, or the event is 'TestEvent', or there exists a stadium with a capacity of more than 10000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "swimming"
    },
    {
        "query": "SELECT meter_100, meter_200, meter_300 FROM swimmer ORDER BY meter_100 ASC",
        "question": "What are the times for the 100, 200, and 300 meter swims, listed in order of the 100 meter swim times from fastest to slowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "swimming"
    },
    {
        "query": "SELECT COUNT(customer_id) FROM Customers WHERE date_last_hire > '2020-01-01'",
        "question": "How many customers have been hired since 2020-01-01?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "products_for_hire"
    },
    {
        "query": "SELECT T1.good_or_bad_customer FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id WHERE T2.booking_start_date IN (SELECT T3.booking_start_date FROM Bookings AS T3 WHERE T3.count_hired = '1')",
        "question": "What kind of customers are those who have hired only one product in their bookings?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_for_hire"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.coupon_id) FROM Discount_Coupons AS T1 WHERE T1.coupon_amount < 100",
        "question": "How many unique discount coupons with an amount less than 100 are there?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "products_for_hire"
    },
    {
        "query": "SELECT T1.coupon_amount AS coupon_amount FROM Discount_Coupons AS T1 WHERE T1.coupon_amount < 10 ORDER BY T1.coupon_amount ASC LIMIT 10",
        "question": "What are the next 10 smallest coupon amounts less than 10 dollars in the discount coupons table?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "products_for_hire"
    },
    {
        "query": "SELECT T1.good_or_bad_customer FROM Customers AS T1 WHERE NOT EXISTS (SELECT 1 FROM Payments AS T2 WHERE T2.customer_id = T1.customer_id AND T2.amount_paid < 100) ORDER BY T1.first_name ASC",
        "question": "What are the classifications of good or bad customers for those customers who have never made a payment less than 100, listed in ascending order by first name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_for_hire"
    },
    {
        "query": "SELECT T1.first_name FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id WHERE T2.amount_of_discount < (SELECT MAX(amount_of_discount) FROM Bookings) LIMIT 10",
        "question": "What are the first names of the next 10 customers with bookings that are not the maximum discounted amount?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_for_hire"
    },
    {
        "query": "SELECT SUM(T1.coupon_amount) FROM Discount_Coupons AS T1 WHERE T1.coupon_id IN (SELECT T2.coupon_id FROM Customers AS T2 GROUP BY T2.coupon_id HAVING COUNT(T2.coupon_id) = 1) ORDER BY T1.coupon_amount ASC",
        "question": "What is the total amount of coupons used by customers who have used a coupon only once, listed in ascending order of coupon amount?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_for_hire"
    },
    {
        "query": "SELECT T1.coupon_id FROM Discount_Coupons AS T1 WHERE T1.coupon_amount > 100 AND T1.date_issued > '2020-01-01'",
        "question": "What are the coupon IDs of the discount coupons issued after January 1, 2020 with a coupon amount greater than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "products_for_hire"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.customer_id), SUM(T1.amount_payable) FROM Bookings AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.good_or_bad_customer = 'good' AND T1.amount_payable BETWEEN 100 AND 500",
        "question": "What is the number of unique good customers who have made bookings with an amount payable between 100 and 500, and what is the total amount payable for these bookings?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "products_for_hire"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.coupon_id), COUNT(DISTINCT T2.customer_id), SUM(T1.coupon_amount) FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T1.date_issued < T2.date_last_hire OR T1.coupon_amount > 0 OR EXISTS (SELECT 1 FROM Payments AS T3 WHERE T3.customer_id = T2.customer_id) ORDER BY T1.coupon_amount ASC",
        "question": "What are the counts of distinct discount coupons and customers, and the total discount amount given to customers who either received a discount coupon before their last hire date or received a coupon with a positive amount or made any payments, ordered by the discount amount in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_for_hire"
    },
    {
        "query": "SELECT T1.Fname FROM employee AS T1 JOIN works_on AS T2 ON T1.Ssn = T2.Essn",
        "question": "What are the first names of employees who work on projects?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "company_1"
    },
    {
        "query": "SELECT Fname, Lname, Salary FROM employee WHERE Salary <= 50000 AND Sex = 'M'",
        "question": "What are the first name, last name, and salary of all male employees whose salary is less than or equal to 50000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "company_1"
    },
    {
        "query": "SELECT Lname, Salary FROM employee WHERE Salary BETWEEN 50000 AND 100000 ORDER BY Salary DESC",
        "question": "What are the last names and salaries of employees who earn between 50000 and 100000, listed in descending order by salary?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "company_1"
    },
    {
        "query": "SELECT T1.Fname, COUNT(T2.Pno) FROM employee AS T1 JOIN works_on AS T2 ON T1.Ssn = T2.Essn WHERE T1.Salary > 50000 AND EXISTS (SELECT T3.Pnumber FROM project AS T3 WHERE T3.Pnumber = T2.Pno AND T3.Pname = 'ProjectX')",
        "question": "What are the first names of employees who earn more than 50000 and work on project 'ProjectX', along with the total number of projects they work on?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_1"
    },
    {
        "query": "SELECT COUNT(T1.Pno) FROM works_on AS T1 JOIN project AS T2 ON T1.Pno = T2.Pnumber",
        "question": "How many projects are being worked on?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "company_1"
    },
    {
        "query": "SELECT E.Lname, W.Hours FROM employee AS E JOIN works_on AS W ON E.Ssn = W.Essn WHERE W.Hours > 5 ORDER BY W.Hours DESC LIMIT 10",
        "question": "What are the last names of employees who work more than 5 hours and what are their respective working hours, listed from the 11th to the 20th highest?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_1"
    },
    {
        "query": "SELECT T1.Fname FROM employee AS T1 JOIN works_on AS T2 ON T1.Ssn = T2.Essn WHERE T1.Salary != 10000",
        "question": "What are the first names of employees who earn a salary other than 10000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "company_1"
    },
    {
        "query": "SELECT Fname, Lname FROM employee WHERE Dno IN (SELECT Dnumber FROM department WHERE Dname = 'Research')",
        "question": "What are the first and last names of employees in the Research department?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT Plocation) FROM project WHERE Pnumber > 10 LIMIT 5",
        "question": "What are the counts of distinct project locations for projects with a project number greater than 10, starting from the 6th row and limited to 5 results?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "company_1"
    },
    {
        "query": "SELECT Fname, COUNT(DISTINCT Dno) FROM employee WHERE Ssn NOT IN (SELECT Essn FROM works_on) GROUP BY Fname ORDER BY Fname ASC",
        "question": "What are the first names of employees who do not work on any project, along with the number of different departments they belong to, listed in ascending order by first name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_1"
    },
    {
        "query": "SELECT T1.Name, T2.Date FROM people AS T1 JOIN candidate AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Sex = 'Male' ORDER BY T1.Name ASC",
        "question": "What are the names of male people and the dates they became candidates, listed in alphabetical order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT * FROM candidate WHERE Support_rate != 10",
        "question": "What are the details of candidates with a support rate other than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), COUNT(DISTINCT Sex), COUNT(DISTINCT Date_of_Birth) FROM people WHERE Sex = 'Male'",
        "question": "How many distinct male names, sexes, and dates of birth are there in the people table?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT Name FROM people WHERE Sex = 'Male' AND Height >= 180",
        "question": "What are the names of the male people whose height is 180 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Name), COUNT(DISTINCT T2.Sex), SUM(T1.Support_rate) FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Poll_Source != 'TV'",
        "question": "Excluding TV polls, how many unique candidate names and sexes are there, and what is the total support rate for these candidates?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT Name FROM people WHERE Sex = 'male' OR Height BETWEEN 170 AND 190 AND Weight = 70 ORDER BY Name ASC",
        "question": "What are the names of all males and people with a height between 170 and 190 and a weight of 70, listed in ascending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT AVG(Support_rate) FROM candidate LIMIT 1",
        "question": "What is the average support rate of the second candidate in the list?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT Name FROM people WHERE Sex = 'Male' AND Height BETWEEN 170 AND 180 OR Name = 'John' GROUP BY Name HAVING COUNT(Name) > 1",
        "question": "What are the names of males who are between 170 and 180 cm tall or are named John, and appear more than once?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), AVG(Support_rate) FROM candidate JOIN people ON candidate.People_ID = people.People_ID WHERE Support_rate >= 50 GROUP BY Name ORDER BY AVG(Support_rate) ASC",
        "question": "What are the number of unique names of candidates and their average support rate for each name, when the support rate is at least 50, listed in ascending order of average support rate?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT COUNT(DISTINCT Candidate_ID), COUNT(DISTINCT People_ID), COUNT(DISTINCT Poll_Source) FROM candidate WHERE Support_rate >= 0",
        "question": "What are the counts of unique candidate IDs, people IDs, and poll sources for candidates with a support rate of 0 or higher?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT T1.People_ID FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN candidate AS T3 ON T2.People_ID = T3.People_ID JOIN people AS T4 ON T3.People_ID = T4.People_ID WHERE T1.Support_rate > 50 AND T2.Weight BETWEEN 60 AND 80 AND T3.Candidate_ID NOT IN (SELECT Candidate_ID FROM candidate WHERE Poll_Source = 'Survey')",
        "question": "Which people with a weight between 60 and 80 kilograms have a support rate greater than 50 percent in polls that are not from a survey?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.People_ID), T1.Support_rate, T1.Consider_rate FROM Candidate AS T1 WHERE T1.People_ID IN (SELECT People_ID FROM Candidate WHERE Support_rate = 0.5)",
        "question": "What is the count of distinct people ids and their corresponding support rate and consider rate for people with a support rate of 0.5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Consider_rate) FROM people AS T1 JOIN candidate AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Name",
        "question": "What is the total consider rate for each candidate by name?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "candidate_poll"
    },
    {
        "query": "SELECT T1.product_id FROM product AS T1 JOIN store_product AS T2 ON T1.product_id = T2.Product_ID WHERE T2.Store_ID IN (SELECT T3.Store_ID FROM store AS T3 WHERE T3.Store_Name = 'store_name') LIMIT 10",
        "question": "What are the next 10 product IDs in store_name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "store_product"
    },
    {
        "query": "SELECT Store_Name FROM store WHERE Area_size > 10 LIMIT 5",
        "question": "What are the names of the next 5 stores that have an area size greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "store_product"
    },
    {
        "query": "SELECT product FROM product WHERE pages_per_minute_color BETWEEN 20 AND 50",
        "question": "What products have pages per minute color between 20 and 50?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "store_product"
    },
    {
        "query": "SELECT T1.product FROM product AS T1 JOIN store_product AS T2 ON T1.product_id = T2.Product_ID WHERE EXISTS (SELECT 1 FROM store AS T3 WHERE T3.Store_ID = T2.Store_ID AND T3.Ranking > 10) ORDER BY T1.product ASC LIMIT 10",
        "question": "What are the next 10 products in ascending order, available in stores with a ranking higher than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "store_product"
    },
    {
        "query": "SELECT * FROM product WHERE dpi BETWEEN 1 AND 100 OR pages_per_minute_color > 50 LIMIT 10",
        "question": "What are the details of the next 10 products with a dpi between 1 and 100 or a pages per minute color rating greater than 50?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "store_product"
    },
    {
        "query": "SELECT product FROM product WHERE product_id IN (SELECT Product_ID FROM store_product WHERE Store_ID IN (SELECT Store_ID FROM store_district WHERE District_ID = 1))",
        "question": "What products are available in stores located in district 1?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "store_product"
    },
    {
        "query": "SELECT MIN(dpi) , MAX(pages_per_minute_color) FROM product AS product_table ORDER BY dpi ASC",
        "question": "What are the minimum dpi and maximum pages per minute color of the products when ordered from lowest to highest dpi?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "store_product"
    },
    {
        "query": "SELECT COUNT(product_id) FROM product AS T1 WHERE dpi > 200 AND product_id NOT IN (SELECT Product_ID FROM store_product)",
        "question": "How many products with a dpi greater than 200 are not available in any store?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "store_product"
    },
    {
        "query": "SELECT product FROM product WHERE dpi = 300",
        "question": "What are the products with a dpi of 300?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "store_product"
    },
    {
        "query": "SELECT product, COUNT(product_id) FROM product WHERE pages_per_minute_color BETWEEN 1 AND 10 GROUP BY product ORDER BY product ASC",
        "question": "What is the number of products for each product type with a color printing speed between 1 and 10 pages per minute, sorted alphabetically by product type?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "store_product"
    },
    {
        "query": "SELECT T1.product FROM product AS T1 WHERE T1.product_id IN (SELECT T2.Product_ID FROM store_product AS T2 WHERE T2.Store_ID = (SELECT T3.Store_ID FROM store AS T3 WHERE T3.Store_Name = 'store_name'))",
        "question": "What products are available in the store named 'store_name'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "store_product"
    },
    {
        "query": "SELECT dpi FROM product WHERE dpi BETWEEN 100 AND 500 AND pages_per_minute_color > 10 ORDER BY dpi ASC",
        "question": "What are the dpi values of products with pages per minute color greater than 10, ordered from lowest to highest dpi, and within the range of 100 to 500 dpi?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "store_product"
    },
    {
        "query": "SELECT T1.Store_Name FROM store AS T1 JOIN store_product AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Product_ID IN (SELECT product_id FROM product WHERE dpi > 400)",
        "question": "What are the names of the stores that sell products with a dpi greater than 400?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "store_product"
    },
    {
        "query": "SELECT Store_Name FROM store WHERE Type = 'A' AND Area_size BETWEEN 100 AND 200 AND Store_ID NOT IN (SELECT Store_ID FROM store_product)",
        "question": "What are the names of the stores of type 'A' with area size between 100 and 200 square units that do not carry any products?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "store_product"
    },
    {
        "query": "SELECT product FROM product WHERE dpi <= 200",
        "question": "What products have a dpi of 200 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "store_product"
    },
    {
        "query": "SELECT product FROM product WHERE product = 'Printer' AND dimensions = '17 x 14 x 8' AND dpi = 600",
        "question": "What product is a 'Printer' with '17 x 14 x 8' dimensions and 600 dpi?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "store_product"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Teacher_ID) FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T1.Staring_Date BETWEEN '2020-01-01' AND '2020-12-31' ORDER BY T1.Staring_Date DESC",
        "question": "How many distinct teachers taught courses that started in the year 2020, listed in descending order of the course start date?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Course_ID, T2.Course_ID FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T2.Grade = 80 LIMIT 10",
        "question": "What are the matching course IDs in the course and course arrange tables where the grade is 80, starting from the 11th result and returning 10 results?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course_ID >= 100 AND T1.Hometown = 'New York'",
        "question": "What are the names of the teachers from New York and the courses they teach with course id 100 or above?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Course FROM course AS T1 WHERE EXISTS (SELECT 1 FROM course_arrange AS T2 WHERE T1.Course_ID = T2.Course_ID AND T2.Grade > 90) ORDER BY T1.Staring_Date DESC LIMIT 10",
        "question": "Which are the 11th to 20th most recently started courses with at least one student having scored more than 90?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Teacher_ID, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Age > 40 AND T2.Grade > (SELECT AVG(Grade) FROM course_arrange)",
        "question": "What are the IDs of teachers over 40 years old and the number of courses they have taught where the grade is higher than the average grade of all courses?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T2.Grade < 60 ORDER BY T1.Course ASC",
        "question": "What are the courses with a grade less than 60, listed in ascending order by course name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Course, T2.Name, T3.Grade FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T2.Teacher_ID = T3.Teacher_ID WHERE T3.Teacher_ID != 2 ORDER BY T3.Grade DESC",
        "question": "What are the courses, teacher names, and grades for courses taught by teachers other than teacher 2, listed in descending order of grade?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Course, SUM(T2.Grade) FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T1.Course_ID NOT IN (SELECT Course_ID FROM course_arrange) OR T2.Grade > 80 GROUP BY T1.Course HAVING SUM(T2.Grade) > 100",
        "question": "Which courses have a total grade of more than 100 and either are not assigned to any teacher or have a grade higher than 80?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T2.Teacher_ID != 1",
        "question": "What courses are not taught by the teacher with ID 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID",
        "question": "What are the names of the teachers and the courses they are assigned to?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Course, COUNT(DISTINCT T2.Teacher_ID) FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T2.Grade <= 80 GROUP BY T1.Course HAVING AVG(T2.Grade) > 75",
        "question": "For each course, how many distinct teachers are assigned to the course when the course's average grade is above 75 and the teacher's grade for the course is below or equal to 80?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Course_ID), T2.Name, T2.Hometown FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T2.Teacher_ID = T3.Teacher_ID WHERE T2.Age > 35 AND T2.Hometown = 'New York' AND T1.Course_ID NOT IN (SELECT Course_ID FROM course_arrange WHERE Grade < 80)",
        "question": "How many distinct courses are taught by teachers from New York who are over 35 years old and have never taught a course with a grade lower than 80, and what are their names and hometowns?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Course, COUNT(DISTINCT T3.Teacher_ID) FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T3.Teacher_ID = T2.Teacher_ID WHERE T2.Grade > 3 AND T2.Course_ID BETWEEN 1 AND 10 AND T3.Age > 25 ORDER BY T1.Course DESC",
        "question": "What are the courses with their number of distinct teachers older than 25 who taught with a grade higher than 3 in courses 1 to 10, listed in descending order by course name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T3.Teacher_ID = T2.Teacher_ID WHERE T1.Course_ID NOT IN (SELECT Course_ID FROM course_arrange WHERE Grade < 60) AND T2.Grade = 90 LIMIT 10",
        "question": "What are the next 10 courses with a grade of 90 that have no grades below 60?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Grade) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Teacher_ID != 1 GROUP BY T1.Name ORDER BY T1.Name ASC",
        "question": "What is the total grade of courses taught by each teacher, excluding teacher with ID 1, listed in ascending order of teacher name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Course) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Hometown = 'New York' OR T1.Age > 30 GROUP BY T1.Name ORDER BY COUNT(T2.Course) DESC",
        "question": "What are the names of teachers from New York or above 30 years old, along with the number of courses they teach, listed in descending order of the number of courses?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "course_teach"
    },
    {
        "query": "SELECT T1.Name FROM building AS T1",
        "question": "What are the names of the buildings?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "region_building"
    },
    {
        "query": "SELECT Region_ID, SUM(Number_of_Stories) FROM building GROUP BY Region_ID HAVING SUM(Number_of_Stories) <= 20 ORDER BY Region_ID ASC",
        "question": "What are the region IDs and the total number of stories in each region, for regions with 20 or fewer total stories, listed in ascending order of region ID?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "region_building"
    },
    {
        "query": "SELECT T2.Name, T2.Address FROM Region AS T1 INNER JOIN Building AS T2 ON T1.Region_ID = T2.Region_ID WHERE T1.Area >= 10000 ORDER BY T2.Name DESC",
        "question": "What are the names and addresses of buildings in regions with an area of at least 10000, listed in descending order by building name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "region_building"
    },
    {
        "query": "SELECT T1.Name, MIN(T1.Completed_Year) FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID JOIN region AS T3 ON T2.Region_ID = T3.Region_ID GROUP BY T1.Name HAVING T1.Completed_Year != 1950 ORDER BY T1.Name DESC",
        "question": "What is the earliest completion year for each building name that is not 1950, listed in descending order by building name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "region_building"
    },
    {
        "query": "SELECT COUNT(T1.Number_of_Stories), T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Name HAVING COUNT(T1.Number_of_Stories) > 1",
        "question": "What are the names of the regions with more than one building and how many buildings are there in each of these regions?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "region_building"
    },
    {
        "query": "SELECT T2.Name, T1.Completed_Year FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID JOIN region AS T3 ON T2.Region_ID = T3.Region_ID WHERE T1.Completed_Year <= 2000 ORDER BY T1.Completed_Year DESC",
        "question": "What is the name of the region and the year that a building was completed, for buildings completed before or in the year 2000, listed in descending order of completion year?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "region_building"
    },
    {
        "query": "SELECT * FROM building WHERE Completed_Year <= 2000 AND Address = 'Street 1'",
        "question": "What are the details of the buildings located at Street 1 and completed before or during the year 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "region_building"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), COUNT(DISTINCT Address), SUM(Number_of_Stories) FROM building WHERE Completed_Year != 2020 GROUP BY Name ORDER BY Name ASC LIMIT 10",
        "question": "What are the counts of distinct building names and addresses, and the total number of stories for each building with a name that completed in a year other than 2020, listed in alphabetical order by name, starting from the 11th result?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "region_building"
    },
    {
        "query": "SELECT b1.Name, COUNT(b2.Region_ID) FROM building b1 JOIN region r ON b1.Region_ID = r.Region_ID JOIN building b2 ON b1.Region_ID = b2.Region_ID WHERE NOT EXISTS (SELECT 1 FROM region r2 WHERE r2.Region_ID = b1.Region_ID AND r2.Population > 1000000) GROUP BY b1.Name ORDER BY b1.Name ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th buildings in regions with a population of less than 1,000,000, along with the number of buildings in each region?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "region_building"
    },
    {
        "query": "SELECT T2.Name, MAX(T1.Number_of_Stories) FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T1.Completed_Year = 2020 GROUP BY T2.Name",
        "question": "What is the name of the region and the maximum number of stories of the buildings that were completed in 2020 in each region?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "region_building"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Name), T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T1.Number_of_Stories >= 20",
        "question": "What is the number of distinct building names and the capital of the region where the number of stories in a building is 20 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "region_building"
    },
    {
        "query": "SELECT AVG(T1.Number_of_Stories) FROM building AS T1 WHERE T1.Region_ID = 1 OR T1.Completed_Year BETWEEN 2000 AND 2020 ORDER BY T1.Number_of_Stories DESC LIMIT 10",
        "question": "What are the average number of stories for the 11th to 20th buildings with the most stories in region 1 or completed between 2000 and 2020?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "region_building"
    },
    {
        "query": "SELECT T1.Name, T2.Name, T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID JOIN region AS T3 ON T1.Region_ID = T3.Region_ID WHERE T1.Completed_Year BETWEEN 1990 AND 2000 AND T2.Population > 1000000 AND T1.Address = 'London'",
        "question": "What are the names of the buildings and regions, and the number of stories in each building, in regions with more than 1000000 population, where the buildings were completed between 1990 and 2000 and located in London?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "region_building"
    },
    {
        "query": "SELECT * FROM building WHERE Number_of_Stories >= 50",
        "question": "What are the details of all the buildings with 50 or more stories?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "region_building"
    },
    {
        "query": "SELECT Name FROM pilot WHERE Age < 30",
        "question": "What are the names of pilots who are younger than 30?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Pilot_Id), COUNT(DISTINCT T1.Name) FROM pilot AS T1 JOIN match AS T2 ON T1.Pilot_Id = T2.Winning_Pilot JOIN aircraft AS T3 ON T3.Aircraft_ID = T2.Winning_Aircraft JOIN airport_aircraft AS T4 ON T4.Aircraft_ID = T3.Aircraft_ID JOIN airport AS T5 ON T5.Airport_ID = T4.Airport_ID WHERE T1.Age > 30 OR T1.Name = 'John' OR NOT EXISTS (SELECT 1 FROM match AS T6 WHERE T6.Winning_Pilot = T1.Pilot_Id LIMIT 1)",
        "question": "How many unique pilots older than 30 or named John or having no winning match are there, and how many unique names do these pilots have?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT T1.Aircraft, T1.Aircraft_ID FROM aircraft AS T1 JOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft WHERE T1.Max_Gross_Weight >= '1000' ORDER BY T1.Aircraft ASC",
        "question": "What are the aircraft and their respective IDs with a max gross weight of 1000 or more, listed in ascending order by aircraft name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT Name FROM pilot WHERE Age BETWEEN 20 AND 40 OR Age > (SELECT AVG(Age) FROM pilot) OR Pilot_Id IN (SELECT Winning_Pilot FROM match)",
        "question": "What are the names of the pilots who are between 20 and 40 years old, or older than the average age of pilots, or have won a match?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT MIN(T1.Age) FROM pilot AS T1 WHERE T1.Pilot_Id = 1 GROUP BY T1.Pilot_Id",
        "question": "What is the minimum age of the pilot with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT Name FROM pilot WHERE Pilot_Id = 100",
        "question": "What is the name of pilot with id 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT T1.Name, MAX(T1.Age), MAX(T2.Age) FROM pilot AS T1 JOIN pilot AS T2 ON T1.Age >= T2.Age GROUP BY T1.Name HAVING MAX(T1.Age) > MAX(T2.Age)",
        "question": "What are the names of the oldest pilots along with their age and the maximum age of the pilots younger than them?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT DISTINCT COUNT(DISTINCT T1.Aircraft_ID), COUNT(T1.Aircraft_ID) FROM aircraft AS T1 WHERE T1.Aircraft_ID NOT IN ( SELECT T2.Aircraft_ID FROM airport_aircraft AS T2 ) OR T1.Max_Gross_Weight = '1000' ORDER BY T1.Aircraft_ID DESC LIMIT 10",
        "question": "What are the distinct and total counts of aircraft IDs of the 10 aircraft with the highest IDs that are either not assigned to any airport or have a maximum gross weight of 1000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT MAX(Total_Passengers), MIN(International_Passengers) FROM airport ORDER BY Total_Passengers DESC LIMIT 1",
        "question": "What is the maximum total number of passengers and minimum international passengers of the second busiest airport by total passengers?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT * FROM pilot AS pl WHERE pl.Age > 40",
        "question": "What are the details of all pilots who are older than 40?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT * FROM match WHERE Country = 'France' AND Winning_Pilot = 'John Smith' AND Round BETWEEN 1 AND 10",
        "question": "What are the details of the matches that took place in France, where John Smith was the winning pilot, and the match round was between 1 and 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Aircraft_ID) FROM aircraft AS T1 WHERE T1.Max_Gross_Weight >= 1000",
        "question": "How many distinct aircraft have a maximum gross weight of 1000 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "aircraft"
    },
    {
        "query": "SELECT MAX(Price) FROM headphone WHERE Price <= 200",
        "question": "What is the highest price of headphones that cost $200 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "headphone_store"
    },
    {
        "query": "SELECT Model FROM headphone AS headphonetable WHERE Price <= 500",
        "question": "What are the headphone models that cost 500 dollars or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "headphone_store"
    },
    {
        "query": "SELECT * FROM stock WHERE EXISTS (SELECT 1 FROM headphone WHERE headphone.Headphone_ID = stock.Headphone_ID AND headphone.Price > 200) LIMIT 10",
        "question": "What are the next 10 stock items of headphones that have a price greater than $200?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "headphone_store"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Store_ID) FROM stock AS T1 JOIN headphone AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T1.Quantity > 10 AND T2.Price BETWEEN 50 AND 200 AND T2.Class = 'Full-size'",
        "question": "How many unique stores have more than 10 units of full-size headphones priced between 50 and 200 dollars in stock?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "headphone_store"
    },
    {
        "query": "SELECT T1.Model, AVG(T1.Price) FROM headphone AS T1 WHERE T1.Price > 100 OR T1.Price < 500 AND T1.Construction = 'Closed' AND T1.Headphone_ID NOT IN ( SELECT T2.Headphone_ID FROM stock AS T2 WHERE T2.Quantity < 10 ) GROUP BY T1.Model LIMIT 10",
        "question": "What are the models and average prices of closed-construction headphones with prices between 100 and 500 and a quantity of at least 10 in stock, listed from the 11th to the 20th result?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "headphone_store"
    },
    {
        "query": "SELECT T1.Model, T2.Quantity FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID JOIN store AS T3 ON T2.Store_ID = T3.Store_ID WHERE T1.Price BETWEEN 50 AND 100 OR T3.Parking = 'Yes' OR T2.Quantity > 10 ORDER BY T1.Price DESC",
        "question": "What are the models and quantities of headphones that are either priced between 50 and 100, available in stores with parking, or in stock more than 10 units, listed in descending order of price?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "headphone_store"
    },
    {
        "query": "SELECT T1.Headphone_ID, T2.Store_ID, T3.Name FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID JOIN store AS T3 ON T2.Store_ID = T3.Store_ID WHERE T1.Price BETWEEN 50 AND 150 OR T3.Name = 'Store1' AND NOT EXISTS (SELECT 1 FROM store WHERE T3.Store_ID = Store_ID AND Neighborhood = 'Neighborhood1')",
        "question": "What are the headphone IDs, store IDs, and names of stores that carry headphones priced between 50 and 150, or are from 'Store1' but not located in 'Neighborhood1'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "headphone_store"
    },
    {
        "query": "SELECT T1.Model, COUNT(T2.Store_ID) FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T2.Quantity > 10 AND EXISTS (SELECT 1 FROM store AS T3 WHERE T3.Store_ID = T2.Store_ID AND T3.Parking = 'Yes')",
        "question": "What are the headphone models that have more than 10 items in stock at stores that have parking, and how many such stores are there for each model?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "headphone_store"
    },
    {
        "query": "SELECT T2.Name, MIN(T1.Total_Production) FROM vehicle AS T1 JOIN vehicle_driver AS T3 ON T1.Vehicle_ID = T3.Vehicle_ID JOIN driver AS T2 ON T3.Driver_ID = T2.Driver_ID GROUP BY T2.Name ORDER BY T2.Name ASC",
        "question": "What is the lowest total production for each vehicle driven by the drivers, listed in ascending order of driver's name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT Builder FROM vehicle WHERE Model BETWEEN 'Ferrari' AND 'Porsche'",
        "question": "Who are the builders of the vehicles whose model names are between 'Ferrari' and 'Porsche'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Driver_ID) AS T1_Driver_ID FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Driver_ID >= 10",
        "question": "How many distinct drivers with driver id of at least 10 have driven vehicles?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT Model FROM vehicle WHERE Build_Year = 2015 LIMIT 10",
        "question": "What are the models of vehicles built in 2015, starting from the 11th result and listing the next 10 results?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT T1.Model, COUNT(DISTINCT T2.Name) FROM vehicle AS T1 JOIN vehicle_driver AS T3 ON T1.Vehicle_ID = T3.Vehicle_ID JOIN driver AS T2 ON T3.Driver_ID = T2.Driver_ID WHERE T1.Power BETWEEN 100 AND 200 AND T1.Top_Speed IN (SELECT MAX(Top_Speed) FROM vehicle) GROUP BY T1.Model HAVING COUNT(T1.Model) > 1 LIMIT 5",
        "question": "What are the top five vehicle models, excluding the first five results, that have top speed equal to the maximum top speed of all vehicles, have power between 100 and 200, and are driven by more than one driver, along with the number of distinct drivers for each model?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT Builder, Top_Speed FROM vehicle WHERE Top_Speed BETWEEN 150 AND 250 ORDER BY Top_Speed ASC LIMIT 10",
        "question": "What are the builders and top speeds of the next 10 vehicles with top speeds between 150 and 250, in ascending order by top speed?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT * FROM vehicle WHERE Top_Speed > 250 LIMIT 10",
        "question": "What are the details of the next 10 vehicles after the first 10 that have a top speed greater than 250?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE NOT EXISTS (SELECT 1 FROM driver AS T3 WHERE T3.Driver_ID = T2.Driver_ID) GROUP BY T1.Model HAVING COUNT(T1.Model) = 1",
        "question": "Which vehicle models are only associated with one driver that does not exist in the driver table?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT AVG(Top_Speed) FROM vehicle WHERE Build_Year BETWEEN 2000 AND 2010",
        "question": "What is the average top speed of vehicles built between 2000 and 2010?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT * FROM vehicle WHERE EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID AND vehicle_driver.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'John'))",
        "question": "What vehicles are driven by the driver named John?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT T1.Model, COUNT(DISTINCT T3.Name) FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID GROUP BY T1.Model HAVING COUNT(DISTINCT T3.Name) = (SELECT MAX(mycount) FROM (SELECT COUNT(DISTINCT T3.Name) as mycount FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID GROUP BY T1.Model)) LIMIT 1",
        "question": "Which vehicle model has the highest number of distinct drivers?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT T1.Name, T2.Model FROM driver AS T1 JOIN vehicle_driver AS T3 ON T1.Driver_ID = T3.Driver_ID JOIN vehicle AS T2 ON T3.Vehicle_ID = T2.Vehicle_ID WHERE T1.Driver_ID < 100",
        "question": "What is the name of the drivers with id less than 100 and the model of the vehicles they drive?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT Name, COUNT(DISTINCT Model) FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T3.Vehicle_ID = T2.Vehicle_ID WHERE T3.Build_Year >= '1999' ORDER BY T1.Name ASC",
        "question": "What are the names of drivers, along with the number of distinct vehicle models they have driven, for vehicles built in or after 1999, listed in ascending order by driver name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT COUNT(DISTINCT Builder), Model FROM vehicle WHERE Build_Year BETWEEN '1990' AND '2000' OR Model IN ('F1', 'IndyCar') OR Builder NOT IN (SELECT Builder FROM vehicle WHERE Top_Speed < 200) GROUP BY Model ORDER BY Model ASC LIMIT 10",
        "question": "What is the number of distinct builders for each model of vehicles built between 1990 and 2000 or models F1 or IndyCar or vehicles with a top speed of at least 200, listed in ascending order by model, starting from the 11th result?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_driver"
    },
    {
        "query": "SELECT cust_name, acc_type FROM customer WHERE acc_type = 'checking' AND state = 'New York' ORDER BY cust_name ASC",
        "question": "What are the customer names and account types of customers in New York who have a checking account, listed in alphabetical order?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT branch_ID), MAX(no_of_customers) FROM bank",
        "question": "What is the number of distinct bank branches and the maximum number of customers in a bank branch?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.cust_name), COUNT(DISTINCT T2.cust_ID), T2.state FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.acc_type = 'Savings' OR T2.no_of_loans BETWEEN 1 AND 5 OR EXISTS (SELECT 1 FROM loan AS T3 WHERE T3.cust_ID = T2.cust_ID)",
        "question": "What are the counts of distinct customer names and IDs, and the state, for customers who either have a savings account, or have between 1 and 5 loans, or have any loan?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT T1.branch_ID, T2.cust_name, T3.amount FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID JOIN loan AS T3 ON T2.cust_ID = T3.cust_ID WHERE T3.amount BETWEEN 1000 AND 5000 LIMIT 10",
        "question": "What are the branch IDs, customer names, and loan amounts of loans between $1000 and $5000 for the 11th to 20th matching records?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT T1.cust_name, SUM(T2.amount) FROM customer AS T1 JOIN loan AS T2 ON T1.cust_ID = T2.cust_ID WHERE T1.no_of_loans > 2 OR T1.credit_score < 500 OR T1.branch_ID NOT IN (SELECT branch_ID FROM bank) ORDER BY T1.cust_name ASC",
        "question": "What is the total amount borrowed by each customer with more than two loans, a credit score below 500, or who does not bank at a listed branch, listed in ascending order by customer name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT T1.branch_ID FROM bank AS T1 WHERE T1.no_of_customers BETWEEN 100 AND 500 LIMIT 10",
        "question": "What are the branch IDs of the next 10 bank branches with between 100 and 500 customers?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT T1.branch_ID, COUNT(T1.cust_ID) FROM customer AS T1 JOIN bank AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.credit_score > 500 ORDER BY T1.branch_ID ASC",
        "question": "What are the branch IDs and the number of customers in each branch with a credit score above 500, listed in ascending order of branch ID?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT bname FROM bank WHERE state = 'NY' AND branch_ID NOT IN (SELECT branch_ID FROM customer WHERE acc_type = 'Savings')",
        "question": "What are the names of banks in New York that do not have any savings customers?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT * FROM customer WHERE no_of_loans >= 5 LIMIT 10",
        "question": "What information is available for the next 10 customers with at least 5 loans?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.branch_ID), SUM(T1.no_of_customers) FROM bank AS T1 WHERE T1.no_of_customers BETWEEN 100 AND 200",
        "question": "What is the number of distinct bank branches with between 100 and 200 customers and the total number of customers in these branches?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT acc_type), COUNT(DISTINCT cust_name) FROM customer WHERE acc_bal <= 10000 LIMIT 5",
        "question": "What are the counts of distinct account types and customer names for accounts with a balance of 10000 or less, starting from the sixth row?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT b.bname, b.state, c.cust_name, c.acc_type FROM bank AS b JOIN customer AS c ON b.branch_ID = c.branch_ID ORDER BY c.acc_bal DESC",
        "question": "What are the bank names, states, customer names, and account types for each customer ordered by account balance from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT T1.cust_name, MIN(T1.acc_bal) FROM customer AS T1 JOIN customer AS T2 ON T1.cust_ID = T2.cust_ID WHERE T1.acc_bal > 1000 GROUP BY T1.cust_name",
        "question": "What is the name of the customers with at least one account balance greater than $1000, along with their minimum account balance?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "loan_1"
    },
    {
        "query": "SELECT Location FROM Warehouses WHERE Capacity <= 3000 ORDER BY Location ASC",
        "question": "List the locations of the warehouses with a capacity less than or equal to 3000, sorted by location in ascending order.",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse JOIN Boxes AS T3 ON T2.Code = T3.Code WHERE T2.Value > 100 OR T2.Contents = 'Toys' OR EXISTS (SELECT 1 FROM Warehouses AS T4 WHERE T4.Code = T3.Warehouse AND T4.Capacity BETWEEN 100 AND 500)",
        "question": "Which warehouse locations have boxes with a value over 100 or contain toys or are in a warehouse with capacity between 100 and 500?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT SUM(W.Capacity), B.Value FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse",
        "question": "What is the total capacity of the warehouses and the total value of the boxes stored in them?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT T1.Location FROM Warehouses AS T1, Boxes AS T2 WHERE T1.Code = T2.Warehouse AND T2.Contents = 'Toys'",
        "question": "What are the locations of the warehouses that contain boxes with 'Toys'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT W1.Location, B1.Contents, SUM(B1.Value) FROM Warehouses W1 JOIN Boxes B1 ON W1.Code = B1.Warehouse JOIN Boxes B2 ON B1.Warehouse = B2.Warehouse WHERE W1.Capacity >= 3000 GROUP BY W1.Location, B1.Contents",
        "question": "What is the total value of each type of box stored in each warehouse with a capacity of at least 3000?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT W1.Location FROM Warehouses AS W1 JOIN Boxes AS T2 ON W1.Code = T2.Warehouse WHERE W1.Capacity > 3000 AND T2.Value > 1000 AND EXISTS (SELECT 1 FROM Boxes AS T3 WHERE T3.Warehouse = W1.Code AND T3.Contents = 'Toys')",
        "question": "What are the locations of warehouses with a capacity over 3000 that store boxes valued over 1000 and also store toys?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT T1.Location, AVG(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Value BETWEEN 100 AND 200 OR T1.Capacity > (SELECT AVG(Capacity) FROM Warehouses) GROUP BY T1.Location ORDER BY T1.Location ASC",
        "question": "What is the average value of boxes in each warehouse location where the box value is between 100 and 200 or the warehouse capacity is above average, listed in ascending order by location?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT Location FROM Warehouses WHERE Capacity < 2000",
        "question": "Which warehouses have a capacity less than 2000?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Capacity = 3000 AND T1.Code IN (SELECT T2.Warehouse FROM Boxes AS T2 GROUP BY T2.Warehouse HAVING COUNT(DISTINCT T2.Contents) > 5) GROUP BY T1.Location HAVING MAX(T1.Capacity) = 3000",
        "question": "At which locations are there warehouses with a capacity of 3000 that store more than 5 different types of items?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT T1.Location, T2.Contents FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Value BETWEEN 100 AND 200 AND T1.Capacity > 1000 GROUP BY T1.Location ORDER BY T1.Location ASC",
        "question": "What are the locations and contents of warehouses with capacity greater than 1000, that have boxes worth between 100 and 200, sorted by location?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT * FROM Warehouses WHERE Location = 'New York' AND Capacity > 1000 AND EXISTS (SELECT 1 FROM Boxes WHERE Warehouse = Warehouses.Code)",
        "question": "What are the details of warehouses in New York with a capacity greater than 1000 that store at least one box?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT Warehouse FROM Boxes WHERE Value > 100 AND Contents = 'Toys' AND Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Capacity < 1000)",
        "question": "Which warehouses with a capacity of at least 1000 have boxes of toys worth more than 100?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT Code, Location FROM Warehouses WHERE Capacity < 2000 ORDER BY Code ASC",
        "question": "What are the codes and locations of the warehouses with a capacity of less than 2000, listed in ascending order of their codes?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT AVG(Capacity) FROM Warehouses WHERE Capacity > 3000 AND Location = 'New York' AND Capacity BETWEEN 2000 AND 5000",
        "question": "What is the average capacity of warehouses in New York with capacity between 2000 and 5000 and greater than 3000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT T1.Location, SUM(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Code < 100 GROUP BY T1.Location HAVING T1.Code NOT IN (SELECT T3.Code FROM Warehouses AS T3 JOIN Boxes AS T4 ON T3.Code = T4.Warehouse WHERE T3.Capacity > 1000) LIMIT 10",
        "question": "What are the locations of the top 10 warehouses with a code less than 100 and a capacity of 1000 or less, along with the total value of boxes in each location, excluding the first 10 results?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "warehouse_1"
    },
    {
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actid = T2.actid WHERE NOT EXISTS (SELECT 1 FROM Faculty_Participates_in AS T3 WHERE T3.actid = T1.actid) ORDER BY T1.activity_name ASC",
        "question": "What are the names of the activities in ascending order that do not have any faculty participation?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT T1.actid, T2.activity_name FROM Activity AS T1 JOIN Activity AS T2 ON T1.actid = T2.actid ORDER BY T1.actid ASC",
        "question": "What are the activity ids and corresponding activity names ordered by activity id?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT activity_name, COUNT(actid) FROM Activity WHERE actid = 1 ORDER BY actid DESC",
        "question": "What is the activity name with activity id 1 and how many times does this id occur?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT T1.LName FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.stuid WHERE T1.Age >= 20 LIMIT 5",
        "question": "What are the last names of students aged 20 or older, listed from the sixth to the tenth?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT COUNT(S.StuID) FROM Student AS S JOIN Participates_in AS P ON S.StuID = P.stuid WHERE S.Age BETWEEN 20 AND 25 AND EXISTS (SELECT 1 FROM Faculty_Participates_in AS F WHERE F.actid = P.actid)",
        "question": "How many students aged 20 to 25 participate in activities that are also participated in by faculty members?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT activity_name) , activity_name, activity_name FROM Activity WHERE activity_name = 'Tennis' AND activity_name = 'Tennis' ORDER BY activity_name DESC",
        "question": "How many distinct tennis activities are there?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT activity_name FROM Activity WHERE actid != 1",
        "question": "What are the names of activities that are not the first activity?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT activity_name FROM Activity WHERE actid <= 100",
        "question": "What are the names of activities with an activity id of 100 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.LName) FROM Student AS T1 WHERE T1.Sex = 'M' AND T1.Age > 20 AND T1.StuID NOT IN (SELECT T2.stuid FROM Participates_in AS T2) ORDER BY T1.LName DESC",
        "question": "How many unique last names are there of male students older than 20 who do not participate in any activities?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT T1.activity_name FROM Activity AS T1 WHERE EXISTS (SELECT 1 FROM Faculty_Participates_in AS T2 WHERE T2.actid = T1.actid)",
        "question": "What are the names of the activities in which at least one faculty member participates?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT T3.activity_name, COUNT(T1.stuid) FROM Participates_in AS T1 JOIN Activity AS T3 ON T1.actid = T3.actid JOIN Student AS T2 ON T1.stuid = T2.StuID WHERE T2.Sex = 'M' GROUP BY T3.activity_name ORDER BY COUNT(T1.stuid) DESC",
        "question": "What are the activity names with the number of male student participants, listed in descending order of the number of participants?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actid = T2.actid JOIN Student AS T3 ON T2.stuid = T3.StuID WHERE T1.actid BETWEEN 100 AND 200 OR T3.Age > 20 OR T3.Sex = 'F'",
        "question": "What are the names of activities with ids between 100 and 200 or participated in by students older than 20 or students who are female?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT T1.activity_name, AVG(T1.actid) FROM Activity AS T1 WHERE T1.actid = 101 GROUP BY T1.activity_name HAVING AVG(T1.actid) = 101",
        "question": "What are the activity names with an average activity id of 101 and an activity id of 101?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT COUNT(*) FROM Student WHERE Age BETWEEN 20 AND 30 OR Sex = 'M' OR NOT EXISTS (SELECT 1 FROM Participates_in WHERE Participates_in.stuid = Student.StuID)",
        "question": "How many students are between the ages of 20 and 30, or male, or do not participate in any activities?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT T1.actid FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actid = T2.actid WHERE T1.actid > 1 AND T2.stuid = 10 AND NOT EXISTS (SELECT 1 FROM Faculty_Participates_in AS T3 WHERE T3.actid = T1.actid)",
        "question": "What activity ids, greater than 1, are participated in by student 10 but not by any faculty?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "activity_1"
    },
    {
        "query": "SELECT SUM(T1.cmi_details) FROM Customer_Master_Index AS T1 WHERE T1.master_customer_id > 1000 GROUP BY T1.master_customer_id LIMIT 10",
        "question": "What are the sums of cmi details for master customer ids greater than 1000, grouped by master customer id and sorted in ascending order, for the 11th to 20th results?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.master_customer_id) AS count_distinct_master_customer_id, SUM(T1.council_tax_id) AS sum_council_tax_id FROM Council_Tax AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T1.council_tax_id != 0 GROUP BY T2.master_customer_id ORDER BY T2.master_customer_id DESC",
        "question": "What are the counts of distinct master customer IDs and sums of council tax IDs for each master customer ID, ordered in descending master customer ID order, excluding zero council tax IDs?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT T1.master_customer_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Council_Tax AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE NOT EXISTS (SELECT T4.council_tax_id FROM Benefits_Overpayments AS T4 JOIN CMI_Cross_References AS T5 ON T4.cmi_cross_ref_id = T5.cmi_cross_ref_id WHERE T5.master_customer_id = T1.master_customer_id) ORDER BY T1.master_customer_id DESC",
        "question": "What are the master customer IDs of customers with no benefits overpayments, ordered by master customer ID in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT source_system_code FROM CMI_Cross_References WHERE master_customer_id <= 100",
        "question": "What are the source system codes for master customer IDs less than or equal to 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT T1.master_customer_id FROM Customer_Master_Index AS T1 WHERE T1.master_customer_id IN (SELECT T2.master_customer_id FROM CMI_Cross_References AS T2 WHERE T2.source_system_code = 'A' OR T2.master_customer_id = 1 OR T2.source_system_code = 'B') ORDER BY T1.master_customer_id ASC LIMIT 10",
        "question": "What are the next 10 master customer IDs from the customer master index, starting from the 11th record, where the master customer ID is either linked to source system codes 'A' or 'B', or has a master customer ID of 1? ",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT T2.master_customer_id, T3.cmi_cross_ref_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Council_Tax AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details BETWEEN 'abc' AND 'def' OR T3.council_tax_id IN (SELECT council_tax_id FROM Benefits_Overpayments)",
        "question": "What are the master customer ids and cmi cross ref ids for customers with cmi details between 'abc' and 'def' or with council tax ids that are in the benefits overpayments list?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT cmi_details FROM Customer_Master_Index WHERE master_customer_id >= 1000 ORDER BY master_customer_id ASC",
        "question": "What are the cmi details for the customers whose master customer id is 1000 or more, listed in ascending order of master customer id?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Council_Tax AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T2.master_customer_id NOT IN (SELECT master_customer_id FROM CMI_Cross_References) LIMIT 10",
        "question": "What are the cmi details of the next 10 master customers not listed in the CMI cross references table?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT T2.source_system_code FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE NOT EXISTS (SELECT 1 FROM Council_Tax AS T3 WHERE T3.cmi_cross_ref_id = T2.cmi_cross_ref_id) ORDER BY T2.source_system_code DESC",
        "question": "What are the source system codes of CMI cross references that are not linked to any council tax, in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.master_customer_id = 100 OR T2.cmi_cross_ref_id BETWEEN 100 AND 200 OR T2.source_system_code > 'A'",
        "question": "What are the cmi details of the customer with master customer id 100 or cmi cross reference id between 100 and 200 or source system code greater than A?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT COUNT(cmi_details) FROM Customer_Master_Index WHERE master_customer_id IN (SELECT master_customer_id FROM CMI_Cross_References WHERE cmi_cross_ref_id = 123)",
        "question": "How many customer master index details are associated with the cross reference id 123?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT COUNT(DISTINCT T4.cmi_cross_ref_id) FROM Customer_Master_Index AS T1 INNER JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id INNER JOIN Council_Tax AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id INNER JOIN Benefits_Overpayments AS T4 ON T3.cmi_cross_ref_id = T4.cmi_cross_ref_id WHERE T2.source_system_code = 'system_code' AND T2.master_customer_id BETWEEN 100 AND 200 AND T3.council_tax_id > 100 ORDER BY T1.master_customer_id DESC",
        "question": "How many unique cmi_cross_ref_id values from Benefits_Overpayments are linked to Customer_Master_Index through CMI_Cross_References and Council_Tax for master_customer_id between 100 and 200 where source_system_code is 'system_code' and council_tax_id is greater than 100?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT T1.master_customer_id, T2.source_system_code FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'ABC' OR T1.master_customer_id NOT IN (SELECT cmi_cross_ref_id FROM Council_Tax)",
        "question": "What are the master customer IDs and their respective source system codes from system 'ABC', excluding those also mentioned in the council tax data?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT MAX(cmi_details), MIN(cmi_details), AVG(cmi_details) FROM Customer_Master_Index WHERE master_customer_id = 1 ORDER BY master_customer_id DESC",
        "question": "For the customer with master customer ID 1, what are the maximum, minimum and average cmi details?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT COUNT(council_tax_id) FROM Council_Tax AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.master_customer_id <= 100 GROUP BY T2.master_customer_id ORDER BY COUNT(council_tax_id) DESC",
        "question": "What is the number of council tax IDs for each master customer ID that is less than or equal to 100, ordered from highest to lowest count?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT cmi_details FROM Customer_Master_Index WHERE master_customer_id BETWEEN 100 AND 200 AND cmi_details = 'active' ORDER BY master_customer_id DESC",
        "question": "What are the 'active' customer master index details for customer ids between 100 and 200, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.master_customer_id) FROM CMI_Cross_References AS T1 JOIN Customer_Master_Index AS T2 ON T1.master_customer_id = T2.master_customer_id",
        "question": "How many distinct master customer IDs are present in both the CMI Cross References and Customer Master Index tables?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT COUNT(T1.cmi_cross_ref_id) FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.council_tax_id BETWEEN 100 AND 200 OR T1.master_customer_id IN (SELECT master_customer_id FROM Customer_Master_Index WHERE cmi_details = 'abc')",
        "question": "How many CMI cross references have a corresponding council tax ID between 100 and 200 or a master customer ID with cmi details as 'abc'?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_mdm"
    },
    {
        "query": "SELECT T1.Floor_Exercise_Points, T2.Floor_Exercise_Points FROM gymnast AS T1 JOIN gymnast AS T2 ON T1.Floor_Exercise_Points > T2.Floor_Exercise_Points ORDER BY T1.Floor_Exercise_Points ASC",
        "question": "What are the pairs of floor exercise points for gymnasts where the first gymnast scored higher than the second gymnast, listed in ascending order by the first gymnast's points?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "gymnast"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 INNER JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID WHERE EXISTS (SELECT 1 FROM gymnast WHERE Rings_Points = T2.Rings_Points AND Horizontal_Bar_Points = T2.Horizontal_Bar_Points) ORDER BY T1.Name ASC",
        "question": "What are the names of gymnasts who share the same rings and horizontal bar points with at least one other gymnast, listed in ascending order by name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "gymnast"
    },
    {
        "query": "SELECT Gymnast_ID FROM gymnast WHERE NOT EXISTS (SELECT 1 FROM people WHERE gymnast.Gymnast_ID = people.People_ID) LIMIT 10",
        "question": "What are the gymnast IDs of the gymnasts who are not listed in the people table, limited to 10 results offset by 10?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "gymnast"
    },
    {
        "query": "SELECT Gymnast_ID FROM gymnast WHERE Floor_Exercise_Points BETWEEN 10 AND 20 AND Rings_Points > (SELECT AVG(Rings_Points) FROM gymnast) ORDER BY Total_Points DESC LIMIT 10",
        "question": "What are the IDs of the top 10 gymnasts with floor exercise points between 10 and 20 and above-average rings points, ranked by total points in descending order, excluding the top 10 gymnasts?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "gymnast"
    },
    {
        "query": "SELECT Name FROM people WHERE Age > 20 AND People_ID IN (SELECT Gymnast_ID FROM gymnast WHERE Floor_Exercise_Points > Rings_Points) ORDER BY Name ASC LIMIT 10",
        "question": "What are the names of the next 10 people older than 20 who scored higher in floor exercise than in rings, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "gymnast"
    },
    {
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Floor_Exercise_Points BETWEEN 10 AND 15 AND T2.Age > 20",
        "question": "What are the names of gymnasts older than 20 years with floor exercise points between 10 and 15?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "gymnast"
    },
    {
        "query": "SELECT Name FROM people WHERE Age > 20 OR Height < 170 OR NOT EXISTS (SELECT 1 FROM gymnast AS T1 WHERE T1.Gymnast_ID = people.People_ID AND T1.Total_Points > 40) LIMIT 10",
        "question": "What are the names of the 11th to 20th people who are either older than 20, shorter than 170, or not a gymnast with more than 40 total points?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "gymnast"
    },
    {
        "query": "SELECT Name FROM ( SELECT T1.Name, T2.Floor_Exercise_Points FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID ) WHERE Floor_Exercise_Points <= 12.5",
        "question": "What are the names of the gymnasts with floor exercise points of 12.5 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "gymnast"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Floor_Exercise_Points) FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID WHERE T2.Floor_Exercise_Points < 15 GROUP BY T1.Name ORDER BY T1.Name ASC",
        "question": "What is the total floor exercise points for each gymnast who scored less than 15 points, listed in ascending order by name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "gymnast"
    },
    {
        "query": "SELECT Name FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast WHERE Total_Points > (SELECT AVG(Total_Points) FROM gymnast)) ORDER BY Name ASC LIMIT 5",
        "question": "What are the names of the next 5 gymnasts after the first 5, in alphabetical order, who scored higher than the average total points?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "gymnast"
    },
    {
        "query": "SELECT T1.Shop_ID FROM happy_hour AS T1 JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T1.Num_of_shaff_in_charge < 5 OR T2.Num_of_shaff_in_charge BETWEEN 3 AND 10 OR T1.HH_ID NOT IN (SELECT HH_ID FROM happy_hour WHERE Month = 'January') ORDER BY T1.Shop_ID DESC LIMIT 10",
        "question": "What are the top 10 shop IDs with the largest IDs first where the number of staff in charge is either less than 5, or between 3 and 10, or the month is not January, listing 10 records starting from the 11th record?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "coffee_shop"
    },
    {
        "query": "SELECT Name FROM member AS T1 WHERE Age > 18",
        "question": "What are the names of the members who are older than 18?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "coffee_shop"
    },
    {
        "query": "SELECT Shop_ID FROM shop WHERE Score > 3 AND Num_of_staff > 10",
        "question": "What are the IDs of shops with a score over 3 and more than 10 staff?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "coffee_shop"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Shop_ID) FROM shop AS T1 JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T1.Score > 4 OR T1.Num_of_staff = 'Few' OR T1.Shop_ID IN (SELECT Shop_ID FROM happy_hour WHERE Num_of_shaff_in_charge > 5) ORDER BY T1.Shop_ID ASC",
        "question": "How many unique shops have a score greater than 4, few staff, or more than 5 staff in charge during happy hour, ordered by shop ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "coffee_shop"
    },
    {
        "query": "SELECT Time_of_purchase, Address FROM member WHERE Age > 30 ORDER BY Time_of_purchase ASC",
        "question": "What are the purchase times and addresses of members older than 30, listed in ascending order of purchase time?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "coffee_shop"
    },
    {
        "query": "SELECT T1.Shop_ID, T1.Address FROM shop AS T1 WHERE EXISTS (SELECT 1 FROM happy_hour AS T2 WHERE T2.Shop_ID = T1.Shop_ID AND T2.Num_of_shaff_in_charge > 5)",
        "question": "What are the shop IDs and addresses of the shops that have more than 5 staff in charge during happy hour?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "coffee_shop"
    },
    {
        "query": "SELECT T1.Shop_ID FROM shop AS T1 WHERE T1.Address = 'Tokyo' AND T1.Score BETWEEN 4 AND 5 AND EXISTS (SELECT 1 FROM member AS T2 WHERE T2.Address = 'Tokyo' AND T2.Age > 20)",
        "question": "What are the shop IDs of shops located in Tokyo with a score between 4 and 5 where there is at least one member from Tokyo who is older than 20?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "coffee_shop"
    },
    {
        "query": "SELECT T1.Shop_ID FROM shop AS T1 JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE NOT EXISTS (SELECT 1 FROM happy_hour_member AS T3 WHERE T3.HH_ID = T2.HH_ID AND T3.Total_amount < 100)",
        "question": "Which shop ids have no happy hour members who spent less than 100 dollars?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "coffee_shop"
    },
    {
        "query": "SELECT SUM(T1.Score) FROM shop AS T1 WHERE T1.Shop_ID > 10 AND T1.Shop_ID NOT IN ( SELECT T2.Shop_ID FROM happy_hour AS T2 ) OR T1.Score < ( SELECT SUM(T3.Num_of_shaff_in_charge) FROM happy_hour AS T3 )",
        "question": "What is the total score of shops that either have a shop id greater than 10 and do not have a happy hour, or have a score less than the total number of staff in charge of happy hours?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "coffee_shop"
    },
    {
        "query": "SELECT m.Address, h.Month, hhm.Total_amount FROM shop s JOIN happy_hour h ON s.Shop_ID = h.Shop_ID JOIN happy_hour_member hhm ON h.HH_ID = hhm.HH_ID JOIN member m ON hhm.Member_ID = m.Member_ID ORDER BY m.Address ASC",
        "question": "What are the addresses of members, the months of happy hour, and the total amounts spent by members at each happy hour location, listed in ascending order by address?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "coffee_shop"
    },
    {
        "query": "SELECT M1.agency_details FROM Agencies AS M1 WHERE M1.agency_id = 10",
        "question": "What are the agency details of the agency with agency id 10?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT staff_details FROM Staff WHERE staff_id > 10 ORDER BY staff_id DESC",
        "question": "What are the staff details of staff members with staff id greater than 10, listed in descending order by staff id?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT AVG(T1.sic_code) FROM Clients AS T1 GROUP BY T1.agency_id HAVING T1.agency_id != 100 ORDER BY T1.agency_id ASC",
        "question": "What is the average sic code of clients for each agency id, excluding agency id 100, listed in ascending order of agency id?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT COUNT(DISTINCT client_id) FROM Clients WHERE agency_id < 10",
        "question": "How many unique clients are associated with agencies that have an agency id less than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT T1.client_details FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id = T2.client_id JOIN Invoices AS T3 ON T1.client_id = T3.client_id WHERE T2.start_date_time >= '2020-01-01'",
        "question": "What are the client details for clients who had meetings starting from 2020-01-01 and also have invoices?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.staff_id) FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id WHERE T2.meeting_id < 10",
        "question": "How many distinct staff members attended meetings with meeting ID less than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT agency_id FROM Agencies WHERE agency_id = 1 OR agency_id IN (SELECT agency_id FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)) ORDER BY agency_id ASC LIMIT 5",
        "question": "What are the next 5 agency ids, in ascending order, that are either 1 or not represented by any staff member who has attended a meeting, starting from the 6th agency id?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT AVG(T1.invoice_status), SUM(T2.meeting_outcome) FROM Invoices AS T1 JOIN Meetings AS T2 ON T1.client_id = T2.client_id JOIN Clients AS T3 ON T3.client_id = T1.client_id WHERE T2.meeting_type != 'Type1'",
        "question": "What is the average invoice status and the total meeting outcome for clients who have had meetings that are not of type 'Type1'?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT T1.agency_id, T2.staff_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id WHERE T2.staff_id > 400 AND T2.staff_id < 500 AND NOT EXISTS (SELECT 1 FROM Clients AS T3 WHERE T3.agency_id = T2.agency_id AND T3.client_id IS NULL) ORDER BY T1.agency_id ASC",
        "question": "What are the agency IDs and staff details for agencies that have staff members with IDs between 400 and 500, and these agencies do not have any clients with missing client IDs?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT * FROM Clients AS Client WHERE client_id BETWEEN 100 AND 200 ORDER BY client_id ASC LIMIT 10",
        "question": "What are the details of the 11th to 20th clients with client IDs between 100 and 200?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT AVG(T1.staff_id) FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id WHERE T1.agency_id = 100 AND T2.meeting_id BETWEEN 100 AND 200 AND T1.staff_details LIKE '%Details%'",
        "question": "What is the average staff id of staff in agency 100 who attended meetings between 100 and 200 and have staff details containing 'Details'?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "advertising_agencies"
    },
    {
        "query": "SELECT T1.Name, T2.Nickname FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Enrollment BETWEEN (SELECT MIN(Enrollment) FROM institution) AND (SELECT MAX(Enrollment) FROM institution) OR T2.Nickname = 'Team1' OR T1.Founded > (SELECT AVG(Founded) FROM institution)",
        "question": "What are the names of institutions and their corresponding nicknames for institutions with enrollment between the minimum and maximum enrollment, or with the nickname 'Team1', or institutions founded after the average founding year?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT Name, Team FROM institution WHERE Province = 'Ontario' OR City IN ( SELECT City FROM institution WHERE Enrollment > 10000 ) ORDER BY Name DESC",
        "question": "What are the names and teams of institutions in Ontario or in cities with institutions having more than 10000 enrollment, listed in descending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT T1.Institution_ID FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Enrollment > 10000",
        "question": "What are the institution ids of institutions with an enrollment greater than 10,000 that have won championships?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Team), COUNT(DISTINCT T2.Nickname), T1.Name FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Enrollment > 5000 AND T1.Endowment BETWEEN 'High' AND 'Highest' AND T2.Number_of_Championships = 5 ORDER BY T1.Enrollment DESC",
        "question": "Among institutions with an enrollment greater than 5000 and an endowment between 'High' and 'Highest', how many distinct teams and nicknames are there for institutions that have won exactly 5 championships, and what are the names of these institutions, listed in descending order by enrollment?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT T1.Name, T1.Team, T2.Nickname FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Name ASC",
        "question": "What are the names, teams, and nicknames of institutions sorted by their names in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT T1.City, COUNT(DISTINCT T1.Name) FROM institution AS T1 GROUP BY T1.City ORDER BY T1.City ASC",
        "question": "What are the cities of institutions and their corresponding number of distinct institution names, listed in ascending order by city?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT T1.Name, T2.Capacity FROM institution AS T1 JOIN Championship AS T3 ON T1.Institution_ID = T3.Institution_ID JOIN institution AS T2 ON T3.Institution_ID = T2.Institution_ID WHERE (T1.Enrollment > 1000 OR T2.Capacity < 50000) AND T1.Institution_ID IN (SELECT Institution_ID FROM Championship) ORDER BY T2.Capacity ASC",
        "question": "What are the names and capacities of institutions with enrollments over 1000 or capacities under 50000 that have won championships, listed in ascending order of capacity?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Nickname) FROM institution AS T1 LEFT JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Founded > 1900 AND NOT EXISTS ( SELECT 1 FROM Championship AS T3 WHERE T3.Institution_ID = T2.Institution_ID AND T3.Number_of_Championships = 0 ) ORDER BY T1.Founded DESC",
        "question": "What are the names of institutions founded after 1900 that have won championships, along with the number of unique nicknames of these institutions, ordered by founding year in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT Name FROM institution WHERE Enrollment > 20000",
        "question": "What are the names of institutions with enrollment over 20000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT Institution_ID FROM institution WHERE Enrollment >= 10000 LIMIT 10",
        "question": "What are the institution ids of the next 10 institutions (after the first 10) with an enrollment of at least 10000?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT T1.Team, T1.Capacity FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID JOIN institution AS T3 ON T2.Institution_ID = T3.Institution_ID WHERE T1.Enrollment >= 10000 AND T3.Founded >= 1800",
        "question": "What are the team names and stadium capacities of institutions with at least 10000 enrollment, founded in or after 1800?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Name), COUNT(T2.Institution_ID) FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Founded BETWEEN 1900 AND 1950 AND T2.City NOT IN (SELECT City FROM institution WHERE Province = 'Ontario') ORDER BY T2.Name ASC",
        "question": "How many unique institutions and total institution ids are there for institutions founded between 1900 and 1950, excluding those in Ontario, listed in ascending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), COUNT(DISTINCT Institution_ID) FROM institution WHERE Enrollment > 10000",
        "question": "How many distinct institution names and ids are there for institutions with an enrollment of more than 10000?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "institution_sports"
    },
    {
        "query": "SELECT Name FROM people WHERE Party = 'Democrat'",
        "question": "What are the names of the democrats?",
        "iter": 5,
        "flag": true,
        "hardness": "easy",
        "db_name": "debate"
    },
    {
        "query": "SELECT Name FROM people WHERE District = 'A' OR Age > 40 OR Party NOT IN (SELECT Party FROM people WHERE Age < 30) LIMIT 10",
        "question": "What are the names of people from district 'A' or above 40 years old or from parties that have no members under 30 years old, starting from the 11th person?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "debate"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Debate_ID) FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Affirmative WHERE T1.Age > 40",
        "question": "What are the names of people older than 40 and the number of debates they participated in as affirmative speakers?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "debate"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Negative WHERE T1.Age >= 30",
        "question": "What are the names of people who are older than or equal to 30 years and took part in a debate as a negative speaker?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "debate"
    },
    {
        "query": "SELECT T2.Name, SUM(T1.Num_of_Audience) FROM debate AS T1 JOIN debate_people AS T3 ON T1.Debate_ID = T3.Debate_ID JOIN people AS T2 ON T3.Negative = T2.People_ID WHERE T2.Age >= 50 ORDER BY T2.Name ASC",
        "question": "What are the names of people aged 50 or above who participated as the negative side in debates, along with the total audience for each of them, listed in ascending order by name?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "debate"
    },
    {
        "query": "SELECT T1.Name, COUNT(T1.People_ID) FROM people AS T1 WHERE T1.Age <= 50",
        "question": "What are the names of people 50 years old or younger and how many people are there for each name?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "debate"
    },
    {
        "query": "SELECT Name FROM people WHERE Name NOT IN (SELECT Name FROM people WHERE District = 'North')",
        "question": "What are the names of people not from the North district?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "debate"
    },
    {
        "query": "SELECT T.Name, AVG(T.Age) FROM people AS T WHERE T.District = 'North' OR T.Age > ( SELECT AVG(Age) FROM people AS S )",
        "question": "What are the names of people in the North district or older than the average age, and what is the average age of these people?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "debate"
    },
    {
        "query": "SELECT Name FROM people WHERE Age > 50 OR Age BETWEEN 20 AND 40 OR Age > (SELECT MAX(Age) FROM people WHERE Party = 'Democrat') ORDER BY Age DESC",
        "question": "What are the names of the people who are either older than 50, or between 20 and 40 years old, or older than the oldest Democrat, listed in descending order of age?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "debate"
    },
    {
        "query": "SELECT Name FROM people WHERE Party != 'Democrat' ORDER BY Age DESC",
        "question": "What are the names of the non-Democrat people listed in order from oldest to youngest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "debate"
    },
    {
        "query": "SELECT Name FROM people AS Debate WHERE Age < 50 ORDER BY District DESC",
        "question": "What are the names of people under 50, listed in order of district in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "debate"
    },
    {
        "query": "SELECT Name FROM member WHERE College_ID = 1 AND EXISTS (SELECT 1 FROM college WHERE College_ID = member.College_ID AND Name = 'College Name')",
        "question": "What are the names of the members in the college named 'College Name' with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT Name FROM college WHERE College_ID >= 10 ORDER BY Leader_Name DESC",
        "question": "What are the names of colleges with id 10 or higher, listed in descending order of leader name?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Name), COUNT(DISTINCT T2.Name), AVG(T1.College_ID) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T1.College_ID = 1 ORDER BY T1.College_ID ASC",
        "question": "What are the number of distinct college names, number of distinct member names, and average college ID of the college with ID 1?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT T1.Name, COUNT(T1.College_ID) FROM college AS T1 WHERE T1.College_ID > 10 GROUP BY T1.Name ORDER BY T1.Name ASC LIMIT 5",
        "question": "What are the names of colleges with more than 10 college id, ordered alphabetically, along with the number of times they appear, starting from the 6th result and showing only 5 results?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT COUNT(DISTINCT T3.Round_ID), SUM(T1.College_ID) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID JOIN round AS T3 ON T2.Member_ID = T3.Member_ID",
        "question": "What is the count of distinct rounds and the sum of college IDs of colleges that have members participating in rounds?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Name NOT IN (SELECT Name FROM member AS T3 WHERE T3.College_ID = 1)",
        "question": "What are the locations of the colleges that do not have members with the same name as members in college 1?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT T1.Name, T2.Name, T3.Decoration_Theme FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID JOIN round AS T3 ON T2.Member_ID = T3.Member_ID WHERE T1.College_ID = T2.College_ID AND T2.Member_ID = T3.Member_ID AND T3.Decoration_Theme = 'Theme1' LIMIT 10",
        "question": "What are the names of the colleges and members, along with the decoration theme, for the first 10 matches where the decoration theme is 'Theme1'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT T1.College_Location, SUM(T2.Round_ID) FROM college AS T1 JOIN round AS T2 ON T1.College_ID = T2.Member_ID WHERE T2.Round_ID >= 1 GROUP BY T1.College_Location ORDER BY SUM(T2.Round_ID) DESC",
        "question": "Which college locations have the most rounds, sorted by the total number of rounds in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT T1.Name, T2.Name, T3.Decoration_Theme FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID JOIN round AS T3 ON T2.Member_ID = T3.Member_ID",
        "question": "What are the names of colleges, their members and the decoration themes of the rounds the members participated in?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT T1.Name, T2.Name, T2.Country FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID LIMIT 5",
        "question": "What are the names of colleges and members along with the country of the members for the next 5 colleges after the first 4?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Name), COUNT(DISTINCT T2.Name), COUNT(DISTINCT T3.Round_ID) FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID JOIN round AS T3 ON T2.Member_ID = T3.Member_ID WHERE T3.Rank_in_Round <= 2 LIMIT 5",
        "question": "What are the counts of distinct colleges, members, and rounds, where members rank within top 2 in a round, limited to 5 results?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Member_ID) FROM round AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Round_ID BETWEEN 1 AND 10 OR T2.Country = 'USA' OR NOT EXISTS (SELECT 1 FROM college AS T3 WHERE T2.College_ID = T3.College_ID)",
        "question": "How many unique members participated in rounds 1 through 10 or are from the USA or do not attend college?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID JOIN round AS T3 ON T2.Member_ID = T3.Member_ID WHERE T1.Leader_Name != T2.Name ORDER BY T1.Name ASC",
        "question": "What are the names of colleges and their members, excluding the leader, listed in ascending order by college name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT College_Location FROM college WHERE College_ID BETWEEN 1 AND 100 ORDER BY College_ID ASC",
        "question": "What are the locations of the colleges with IDs from 1 to 100, listed in ascending order of their IDs?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT COUNT(Member_ID), College_ID FROM member WHERE College_ID != 10 GROUP BY College_ID ORDER BY College_ID ASC",
        "question": "What is the number of members in each college, excluding college 10, listed in ascending order by college ID?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "decoration_competition"
    },
    {
        "query": "SELECT Name FROM people AS T1 WHERE NOT EXISTS ( SELECT 1 FROM body_builder AS T2 WHERE T2.People_ID = T1.People_ID AND T2.Total > 500 )",
        "question": "What are the names of people who do not have a total body builder score greater than 500?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT Name FROM people WHERE EXISTS (SELECT 1 FROM body_builder WHERE people.People_ID = body_builder.People_ID AND body_builder.Snatch > (SELECT AVG(Snatch) FROM body_builder) AND body_builder.Clean_Jerk > (SELECT AVG(Clean_Jerk) FROM body_builder))",
        "question": "What are the names of the people who have a better than average snatch and a better than average clean and jerk?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT p.Name, COUNT(b.Body_Builder_ID) FROM people p JOIN body_builder b ON p.People_ID = b.People_ID WHERE b.Total BETWEEN 200 AND 300 AND EXISTS (SELECT 1 FROM body_builder WHERE Snatch > 100 AND Clean_Jerk > 150) GROUP BY p.Name LIMIT 1",
        "question": "Among people with a total body build between 200 and 300 and where there exists a body build with a snatch over 100 and a clean jerk over 150, what is the name of the second person with the most body builds?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT Name FROM people WHERE Birth_Place != 'China' LIMIT 10",
        "question": "What are the names of the next 10 people not born in China?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT T1.Name, T2.Snatch FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Clean_Jerk > 100 AND T2.Total BETWEEN 200 AND 300 ORDER BY T1.Name ASC",
        "question": "What are the names of body builders with a clean jerk greater than 100 and a total between 200 and 300, listed along with their snatch in ascending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT AVG(T1.Snatch) FROM body_builder AS T1 WHERE T1.People_ID = 1 OR T1.Snatch BETWEEN 100 AND 200 OR T1.Total NOT IN (SELECT AVG(T2.Total) FROM body_builder AS T2 GROUP BY T2.People_ID)",
        "question": "What is the average snatch of body builders with a people id of 1, or a snatch between 100 and 200, or a total that is not equal to the average total of any group of body builders?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT MAX(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Weight = 70 ORDER BY T1.Total DESC LIMIT 1",
        "question": "What is the second highest total score of a body builder who weighs 70 units?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT People_ID FROM body_builder WHERE Snatch > (SELECT AVG(Snatch) FROM body_builder) ORDER BY People_ID ASC",
        "question": "Which people have a snatch greater than the average snatch, listed in ascending order of people ID?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID JOIN body_builder AS T3 ON T2.People_ID = T3.People_ID WHERE T2.Snatch < 100",
        "question": "What are the names of people who have a snatch of less than 100 in bodybuilding competition?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 INNER JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Snatch < AVG(T2.Snatch) AND T2.Clean_Jerk BETWEEN 100 AND 150 AND NOT EXISTS (SELECT 1 FROM body_builder AS T3 WHERE T3.People_ID = T1.People_ID AND T3.Total > 200)",
        "question": "What are the names of people whose snatch is below average, clean jerk is between 100 and 150, and have no total record greater than 200?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT Name, Birth_Place FROM people AS T1 INNER JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID",
        "question": "What are the names and birthplaces of body builders?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Snatch) FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Total > (SELECT AVG(Total) FROM body_builder) ORDER BY T1.Name ASC",
        "question": "What is the name of each body builder with above average total lift and how many distinct snatches have they achieved, listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT AVG(T1.Snatch), AVG(T1.Clean_Jerk) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Weight BETWEEN 60 AND 80",
        "question": "What is the average snatch and clean jerk for body builders who weigh between 60 and 80 kilograms?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Total = T2.Clean_Jerk",
        "question": "What are the names of the people who have the same clean jerk and total weight in body building?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Name ASC",
        "question": "What are the names of all body builders in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "body_builder"
    },
    {
        "query": "SELECT Name FROM conductor WHERE Age BETWEEN 40 AND 50 LIMIT 10",
        "question": "What are the names of the 11th to 20th conductors between the ages of 40 and 50?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT AVG(Age) FROM conductor WHERE Age <= 50 ORDER BY Age DESC",
        "question": "What is the average age of conductors 50 years or younger, listed from oldest to youngest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT Name FROM conductor WHERE Age >= 50 AND Year_of_Work >= 20",
        "question": "What are the names of the conductors who are at least 50 years old and have at least 20 years of work experience?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT T1.Orchestra, T3.Name FROM orchestra AS T1 JOIN conductor AS T3 ON T1.Conductor_ID = T3.Conductor_ID JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Major_Record_Format != 'Vinyl' AND T2.Type = 'Classical' ORDER BY T3.Age DESC",
        "question": "What are the names of the orchestras and their conductors that have classical performances and do not primarily record on vinyl, listed in descending order of the conductor's age?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT T1.Orchestra FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Orchestra ORDER BY T1.Orchestra ASC LIMIT 1",
        "question": "What is the second smallest orchestra name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT AVG(T1.Age) , COUNT(T1.Conductor_ID) FROM conductor AS T1 WHERE T1.Year_of_Work > 1950 LIMIT 10",
        "question": "What is the average age of the conductors who worked after 1950 and how many such conductors are there, for the 10th to 20th results?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Age > 50 OR T1.Nationality = 'American' OR T2.Year_of_Founded BETWEEN 1800 AND 1850 ORDER BY T1.Conductor_ID DESC",
        "question": "What are the names of conductors and their orchestras for conductors who are over 50 years old or American, or whose orchestras were founded between 1800 and 1850, listed in descending order of the conductor ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(Conductor_ID) = 1)",
        "question": "What are the names of the conductors who have worked with only one orchestra?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT T1.Name FROM conductor AS T1 INNER JOIN conductor AS T2 ON T1.Name = T2.Name WHERE EXISTS (SELECT 1 FROM orchestra AS T3 WHERE T3.Conductor_ID = T1.Conductor_ID AND EXISTS (SELECT 1 FROM performance AS T4 WHERE T4.Orchestra_ID = T3.Orchestra_ID AND T4.Type = 'Classical')) ORDER BY T1.Age DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th oldest conductors who have led a classical performance?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT MIN(T1.Age), MAX(T1.Age) FROM ( SELECT T1.Age FROM conductor AS T1 ) AS T1 WHERE T1.Age < 100",
        "question": "What is the youngest and oldest age of conductors who are less than 100 years old?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT T1.Nationality, SUM(T1.Age) AS sum FROM conductor AS T1 WHERE T1.Age <= 60 ORDER BY sum ASC",
        "question": "What are the nationalities of conductors aged 60 or under, listed in order of their total age from lowest to highest?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "orchestra"
    },
    {
        "query": "SELECT AVG(Votes) FROM election WHERE Date >= '2000-01-01'",
        "question": "What is the average number of votes in elections held since the year 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Representative_ID) FROM election AS T1 WHERE T1.Votes BETWEEN 100 AND 500 AND NOT EXISTS (SELECT T2.Name FROM representative AS T2 WHERE T2.Representative_ID = T1.Representative_ID AND T2.Party = 'Democrat') AND T1.Seats > 5",
        "question": "How many unique non-Democratic representatives won more than 5 seats with between 100 and 500 votes?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Election_ID) FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Votes >= 10000 ORDER BY T1.Name ASC",
        "question": "What is the name of each representative and the number of elections in which they received 10000 or more votes, listed in ascending order by representative name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT AVG(T1.Votes), AVG(T1.Vote_Percent) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID JOIN election AS T3 ON T3.Representative_ID = T2.Representative_ID WHERE T1.Place != T3.Place",
        "question": "What are the average votes and vote percentages of all pairs of elections with different places for the same representative?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT COUNT(DISTINCT Representative_ID) FROM election WHERE Seats > 1",
        "question": "How many different representatives have won more than one seat in an election?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T1.Votes IN (SELECT Votes FROM election ORDER BY Votes ASC LIMIT 1) ORDER BY T2.Name ASC",
        "question": "What are the names of the representatives who received the lowest number of votes in elections, listed in alphabetical order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT COUNT(Place) FROM election AS e ORDER BY Vote_Percent DESC",
        "question": "How many places are there in the election, listed in order of highest to lowest vote percent?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT Votes FROM election WHERE Vote_Percent BETWEEN 40 AND 60 ORDER BY Votes DESC",
        "question": "What are the votes for elections with a vote percent between 40 and 60, listed in order of most votes?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Date), T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Name NOT IN (SELECT Name FROM representative WHERE Party = 'Democrat')",
        "question": "What is the number of distinct election dates and the names of non-democrat representatives?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election WHERE Votes = (SELECT MAX(Votes) FROM election)) ORDER BY Name DESC",
        "question": "What are the names of the representatives who have never received the highest number of votes in an election, listed in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT Representative_ID FROM election WHERE Election_ID = 1",
        "question": "What is the representative id for election with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "election_representative"
    },
    {
        "query": "SELECT AVG(Annual_entry_exit) FROM station WHERE Total_Passengers < 1000000",
        "question": "What is the average annual entry and exit of the stations with less than 1 million total passengers?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "train_station"
    },
    {
        "query": "SELECT T1.Name AS Station_Name FROM station AS T1 WHERE T1.Location = 'London' OR T1.Annual_entry_exit IN ( SELECT MAX(T2.Annual_entry_exit) FROM station AS T2 ) ORDER BY T1.Name ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th stations in alphabetical order that are either located in London or have the highest annual entry and exit?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "train_station"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Train_ID) FROM station AS T1 JOIN train_station AS T2 ON T1.Station_ID = T2.Station_ID WHERE T1.Number_of_Platforms BETWEEN 10 AND 20 AND EXISTS (SELECT 1 FROM train AS T3 WHERE T3.Time >= '08:00' AND T3.Train_ID = T2.Train_ID) LIMIT 10",
        "question": "What are the names of the next 10 stations with 10 to 20 platforms that serve at least one train that departs at or after 8:00 AM, along with the number of such trains for each station?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "train_station"
    },
    {
        "query": "SELECT COUNT(Station_ID), COUNT(Annual_entry_exit) FROM station AS T1",
        "question": "What is the number of stations and the number of annual entries and exits in the station data?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "train_station"
    },
    {
        "query": "SELECT COUNT(DISTINCT Station_ID), COUNT(DISTINCT Train_ID) FROM train_station WHERE Train_ID > 10",
        "question": "How many distinct train stations and how many distinct trains have train IDs greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "train_station"
    },
    {
        "query": "SELECT T1.Name FROM station AS T1 WHERE T1.Total_Passengers BETWEEN 10000 AND 20000 AND NOT EXISTS ( SELECT 1 FROM train_station AS T2 WHERE T2.Station_ID = T1.Station_ID AND T2.Train_ID IN ( SELECT Train_ID FROM train WHERE Name = 'express' ) ) ORDER BY T1.Total_Passengers DESC",
        "question": "What are the names of the stations with a total of passengers between 10,000 and 20,000 that do not serve express trains, listed in descending order of total passengers?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "train_station"
    },
    {
        "query": "SELECT T1.Name FROM station AS T1 INNER JOIN train_station AS T2 ON T1.Station_ID = T2.Station_ID INNER JOIN train AS T3 ON T2.Train_ID = T3.Train_ID WHERE T1.Name NOT IN (SELECT T4.Name FROM station AS T4 INNER JOIN train_station AS T5 ON T4.Station_ID = T5.Station_ID INNER JOIN train AS T6 ON T5.Train_ID = T6.Train_ID WHERE T6.Service = 'Commuter') GROUP BY T1.Name",
        "question": "What are the names of the stations that serve trains with non-commuter services?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "train_station"
    },
    {
        "query": "SELECT Name FROM station AS T1",
        "question": "What are the names of the stations?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "train_station"
    },
    {
        "query": "SELECT Name FROM station WHERE Annual_entry_exit <= 10000 ORDER BY Name ASC",
        "question": "What are the names of the stations with annual entry and exit of 10000 or less, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "train_station"
    },
    {
        "query": "SELECT Name, COUNT(Station_ID) FROM station GROUP BY Name HAVING COUNT(Station_ID) = 2 ORDER BY Name ASC",
        "question": "Which station names appear exactly twice, listed in alphabetical order? Along with how many times they appear?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "train_station"
    },
    {
        "query": "SELECT T1.Name, T1.Location FROM station AS T1 WHERE T1.Annual_entry_exit > 100000 AND EXISTS (SELECT 1 FROM train_station AS T2 WHERE T2.Station_ID = T1.Station_ID) ORDER BY T1.Total_Passengers DESC LIMIT 10",
        "question": "What are the names and locations of the next 10 stations with more than 100,000 annual entries or exits that have trains and are ordered by the total number of passengers in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "train_station"
    },
    {
        "query": "SELECT Name FROM station WHERE Total_Passengers <= 10000",
        "question": "What are the names of the stations that have 10,000 or fewer total passengers?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "train_station"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), Station_ID FROM station WHERE Annual_entry_exit > 10000 OR Location = 'London' ORDER BY Station_ID DESC",
        "question": "How many unique station names are there for each station id where the annual entry exit is greater than 10000 or the location is London, listed in descending order of station id?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "train_station"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_price < 10 ORDER BY product_price DESC LIMIT 5",
        "question": "What are the names of the 6th to 10th most expensive products that cost less than $10?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "e_commerce"
    },
    {
        "query": "SELECT product_price FROM Products WHERE product_price <= 100",
        "question": "What are the prices of the products that cost $100 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "e_commerce"
    },
    {
        "query": "SELECT COUNT(DISTINCT product_name), COUNT(DISTINCT product_color), SUM(product_price) FROM Products WHERE product_size <= 'M'",
        "question": "What are the number of distinct product names, distinct product colors, and total product price for products with size M or smaller?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "e_commerce"
    },
    {
        "query": "SELECT product_name FROM (SELECT product_name, product_price FROM Products WHERE product_price > 50 ORDER BY product_price DESC LIMIT 10) AS T1",
        "question": "What are the names of the ten most expensive products that cost more than 50 dollars?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "e_commerce"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.product_id), COUNT(DISTINCT T2.order_id) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_price > 100",
        "question": "How many distinct products priced over 100 and how many distinct orders are those products part of?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_commerce"
    },
    {
        "query": "SELECT MIN(T1.product_price), MAX(T1.product_price) FROM Products AS T1 ORDER BY T1.product_price ASC",
        "question": "What is the lowest and highest price of all products?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "e_commerce"
    },
    {
        "query": "SELECT T1.product_name FROM Products AS T1 WHERE NOT EXISTS (SELECT T2.order_item_id FROM Order_Items AS T2 WHERE T2.product_id = T1.product_id) ORDER BY T1.product_price DESC",
        "question": "What are the names of the products that have not been ordered, listed in descending order of price?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_commerce"
    },
    {
        "query": "SELECT product_price FROM Products WHERE product_price = 50 ORDER BY product_price DESC LIMIT 10",
        "question": "What are the 11th to 20th highest prices of products that cost 50 dollars?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "e_commerce"
    },
    {
        "query": "SELECT product_name FROM Products WHERE EXISTS (SELECT order_item_id FROM Order_Items WHERE Order_Items.product_id = Products.product_id) GROUP BY product_name HAVING COUNT(product_id) > 5 ORDER BY product_name DESC",
        "question": "What are the product names that appear in more than 5 order items, listed in descending order?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_commerce"
    },
    {
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.student_id = 1 AND T1.date_first_registered BETWEEN '2020-01-01' AND '2021-01-01' AND NOT EXISTS (SELECT 1 FROM Students AS T3 WHERE T3.student_id = T1.student_id AND T3.date_left IS NOT NULL) ORDER BY T1.first_name ASC LIMIT 10",
        "question": "What are the first names of the students who first registered between '2020-01-01' and '2021-01-01', did not leave, and have a student_id of 1, listed in ascending order from the 11th to the 20th student?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.degree_program_id), T2.department_name FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name HAVING SUM(T1.degree_program_id) >= 1 ORDER BY T2.department_name ASC",
        "question": "What are the names of the departments that offer at least one degree program, and how many distinct degree programs does each department offer, listed in ascending order by department name?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT T1.first_name FROM Students AS T1 WHERE T1.current_address_id BETWEEN 100 AND 200 AND T1.date_first_registered > '2000-01-01' AND T1.student_id NOT IN (SELECT T2.student_id FROM Student_Enrolment AS T2) ORDER BY T1.student_id DESC",
        "question": "What are the first names of students, listed in descending order of student ID, who registered after '2000-01-01' and have a current address ID between 100 and 200, and are not enrolled in any courses?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T1.degree_program_id BETWEEN 1 AND 100",
        "question": "How many unique degree programs with ids between 1 and 100 are there in any department?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT student_id FROM Students WHERE date_first_registered >= '2020-01-01'",
        "question": "What are the student IDs of students who first registered in 2020 or later?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT AVG(T1.degree_summary_name) FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.semester_id = 1 AND T1.degree_summary_name BETWEEN 'A' AND 'C' GROUP BY T1.degree_summary_name HAVING AVG(T1.degree_summary_name) > 50",
        "question": "What is the average degree summary name for degree programs with names between A and C in semester 1, for those with an average greater than 50?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT T1.first_name, T2.degree_summary_name FROM Students AS T1 JOIN Student_Enrolment AS T3 ON T1.student_id = T3.student_id JOIN Degree_Programs AS T2 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T3.student_enrolment_id = T4.student_enrolment_id JOIN Courses AS T5 ON T4.course_id = T5.course_id WHERE T5.course_id > 10 ORDER BY T1.first_name ASC",
        "question": "What are the first names of students and their degree summary names, given that students are enrolled in courses with course id greater than 10, listed in ascending order of first name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT AVG(T1.degree_program_id), T2.department_name FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name HAVING AVG(T1.degree_program_id) BETWEEN 10 AND 20",
        "question": "What are the department names and average degree program IDs for departments with average degree program IDs ranging from 10 to 20?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT email_address FROM Students WHERE date_first_registered > '2020-01-01' ORDER BY date_first_registered DESC LIMIT 10",
        "question": "What are the email addresses of the 11th to 20th students who registered after January 1st, 2020, in the order of most recent registrations?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT department_name FROM Departments WHERE department_id > 5 GROUP BY department_name HAVING COUNT(department_id) > 1 ORDER BY department_name DESC",
        "question": "What are the department names that appear more than once and have a department id greater than 5, listed in descending order by department name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = 'John' AND T2.first_name = 'Alice' AND T1.student_id BETWEEN 1 AND 10 AND EXISTS (SELECT 1 FROM Students AS T3 WHERE T3.student_id = T1.student_id)",
        "question": "What are the first names of students named John who have a matching student ID with a student named Alice and a student ID between 1 and 10, and who exist in the database?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT department_id, MAX(degree_program_id) FROM Degree_Programs WHERE department_id <= 10",
        "question": "For each department with an id less than or equal to 10, what is the highest degree program id?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = 1",
        "question": "How many degree programs are offered by the department with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT student_id FROM Students WHERE date_first_registered < '1990-01-01'",
        "question": "What are the student ids of students who first registered before January 1, 1990?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT AVG(T3.semester_id) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Semesters AS T3 ON T2.semester_id = T3.semester_id WHERE T1.first_name != 'John' GROUP BY T2.semester_id ORDER BY AVG(T3.semester_id) DESC",
        "question": "What is the average semester ID of the semesters in which students, excluding those named John, are enrolled, ordered by the average semester ID in descending order?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "student_transcripts_tracking"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 WHERE T1.People_ID NOT IN (SELECT T2.People_ID FROM perpetrator AS T2) ORDER BY T1.Name ASC",
        "question": "What are the names of all people who are not perpetrators, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Perpetrator_ID) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID",
        "question": "What are the names of people and the number of times they committed a crime?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT T1.Name, T2.Killed FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Year > (SELECT AVG(Year) FROM perpetrator) OR T1.Name = 'John' OR T1.Height < 170 ORDER BY T2.Killed ASC",
        "question": "What are the names and number of people killed by perpetrators with above-average year of incident, or by a person named John, or by a person with a height below 170, listed in ascending order by the number of people killed?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT SUM(T1.Killed) FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Weight >= 70",
        "question": "What is the total number of people killed by perpetrators who weigh 70 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT SUM(Killed) + SUM(Injured) FROM perpetrator WHERE Year > 10 OR Location = 'New York' OR Year BETWEEN 2000 AND 2010",
        "question": "What is the total number of people killed or injured in attacks that occurred after 2010, in New York, or between 2000 and 2010?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT P.Name FROM people AS P JOIN perpetrator AS R ON P.People_ID = R.People_ID WHERE R.Year BETWEEN 1990 AND 2000 AND R.Killed > 100 AND NOT EXISTS (SELECT 1 FROM perpetrator AS R1 WHERE R1.Killed > R.Killed) LIMIT 10",
        "question": "Who are the names of the top 10 perpetrators responsible for the most fatalities in a terrorist attack between 1990 and 2000, with more than 100 killed?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Injured <= 10",
        "question": "What are the names of the people who injured 10 or fewer people in a crime?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Country), SUM(T1.Injured) FROM perpetrator AS T1 WHERE T1.Year != 2000 GROUP BY T1.Country",
        "question": "What are the number of countries and the total number of people injured by perpetrators in each country excluding the year 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT p.Name FROM perpetrator AS t1 JOIN people AS p ON t1.People_ID = p.People_ID WHERE (t1.Killed > 10 OR t1.Injured BETWEEN 5 AND 20) AND NOT EXISTS (SELECT 1 FROM perpetrator WHERE perpetrator.Year IS NULL)",
        "question": "What are the names of perpetrators who have killed more than 10 people or injured between 5 and 20 people, considering only incidents with specified years?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 WHERE EXISTS (SELECT 1 FROM perpetrator AS T2 WHERE T2.People_ID = T1.People_ID AND T2.Killed > 10) ORDER BY T1.Name DESC",
        "question": "What are the names of people who have been involved in incidents with more than 10 killed, listed in descending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT Killed FROM perpetrator WHERE Killed > 100",
        "question": "What are the numbers of people killed in attacks that resulted in more than 100 deaths?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Killed), COUNT(DISTINCT T1.Injured), T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Year <= 2000",
        "question": "What are the number of distinct people killed, the number of distinct people injured, and the name of the perpetrator who carried out attacks before or in the year 2000?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "perpetrator"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name), SUM(T1.rating) FROM Sailors AS T1 WHERE T1.age BETWEEN 20 AND 30 AND T1.rating > 5",
        "question": "What is the number of unique sailors and their total rating who are between 20 and 30 years old and have a rating greater than 5?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT * FROM Sailors WHERE NOT EXISTS (SELECT * FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T1.sid = Sailors.sid AND T2.color = 'red')",
        "question": "Which sailors have not reserved a red boat?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT COUNT(name) FROM Sailors AS S",
        "question": "How many sailors are there? ",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT T1.name FROM Sailors AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE (T1.rating = 10 OR T2.rating = 8 OR T1.name NOT IN (SELECT name FROM Sailors AS T3 WHERE T3.age > 20))",
        "question": "What are the names of sailors who either have a rating of 10 or 8, or are 20 years or younger?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.bid), T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T1.bid = T3.bid WHERE T2.age <= 20 ORDER BY COUNT(DISTINCT T1.bid) DESC LIMIT 1",
        "question": "Which sailor aged 20 or less has the second-highest number of distinct boats reserved?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT name FROM Sailors WHERE rating > 5 LIMIT 5",
        "question": "What are the names of the 5 sailors with a rating greater than 5, starting from the sixth sailor when ordered by rating?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT bid FROM Boats WHERE NOT EXISTS (SELECT 1 FROM Reserves WHERE Reserves.bid = Boats.bid AND Reserves.sid = 22) LIMIT 10",
        "question": "What are the ids of the next 10 boats that sailor with id 22 has not reserved?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT name FROM Sailors WHERE rating BETWEEN 3 AND 5",
        "question": "What are the names of the sailors with a rating between 3 and 5?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.day) FROM Sailors AS T1 LEFT JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.day BETWEEN '2019-01-01' AND '2019-12-31' OR T1.rating = 5 OR T1.age > 20",
        "question": "How many distinct days in 2019 did sailors with a rating of 5 or an age greater than 20 make a reservation, or if a reservation was made regardless of the sailor?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT name, MAX(rating) FROM Sailors WHERE name != 'John' GROUP BY name",
        "question": "What is the highest rating achieved by each sailor, excluding John?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT DISTINCT T1.name FROM Sailors AS T1 WHERE T1.rating = 8 OR T1.sid IN ( SELECT T2.sid FROM Reserves AS T2 WHERE T2.day = 'Monday' ) ORDER BY T1.rating DESC",
        "question": "What are the names of the sailors with a rating of 8 or who have a reservation on Monday, listed in descending order of rating?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT name FROM Sailors WHERE rating >= 5 ORDER BY name ASC",
        "question": "List all the sailors' names in ascending order with a rating of 5 or more.",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT S1.name), COUNT(DISTINCT B1.name), COUNT(DISTINCT R1.day) FROM Sailors S1 JOIN Reserves R1 ON S1.sid = R1.sid JOIN Boats B1 ON R1.bid = B1.bid LIMIT 5",
        "question": "What are the counts of distinct sailor names, boat names, and reserve days for the 6th to 10th rows of the reserves table?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT T.name, COUNT(DISTINCT T.rating), SUM(T.age) FROM (SELECT S.name, S.rating, S.age FROM Sailors AS S WHERE S.sid NOT IN ( SELECT R.sid FROM Reserves AS R WHERE R.bid = 102 ) AND S.rating > 5 ) AS T GROUP BY T.name ORDER BY T.name ASC",
        "question": "What are the names of sailors with a rating above 5 who have never reserved boat 102, along with the number of unique ratings and total age of these sailors?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT S1.name FROM Sailors AS S1 JOIN Reserves AS R1 ON S1.sid = R1.sid JOIN Boats AS B1 ON R1.bid = B1.bid WHERE S1.sid NOT IN (SELECT S2.sid FROM Sailors AS S2 JOIN Reserves AS R2 ON S2.sid = R2.sid JOIN Boats AS B2 ON R2.bid = B2.bid WHERE S2.rating = 3 AND B2.color = 'red')",
        "question": "What are the names of sailors who do not sail on a red boat with a rating of 3?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T2.sid = T1.sid WHERE T2.rating != 8 ORDER BY T2.rating DESC",
        "question": "What are the names of sailors with ratings other than 8, listed in descending order of rating?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT name) FROM Sailors WHERE rating < 5",
        "question": "How many sailors with a rating less than 5 have unique names?",
        "iter": 6,
        "flag": true,
        "hardness": "easy",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT SUM(rating) FROM Sailors WHERE age < 20",
        "question": "What is the total rating of all sailors under the age of 20?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT sid FROM Sailors WHERE rating BETWEEN 2 AND 5 LIMIT 10",
        "question": "What are the IDs of the 11th to 20th sailors with a rating between 2 and 5?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "boat_1"
    },
    {
        "query": "SELECT * FROM captain AS T1 WHERE T1.Ship_ID IN (SELECT Ship_ID FROM Ship AS T2 WHERE T2.Built_Year > 1990)",
        "question": "What are the details of the captains who are commanding the ships built after the year 1990?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT Name FROM captain WHERE age >= '50'",
        "question": "What are the names of the captains who are 50 years old or older?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT AVG(T1.age) FROM captain AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Built_Year < 1999 GROUP BY T1.age",
        "question": "What is the average age of captains serving on ships built before 1999, grouped by captain age?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Class) FROM Ship AS T1 JOIN captain AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Built_Year BETWEEN 1950 AND 2000 LIMIT 10",
        "question": "What are the names of ships built between 1950 and 2000, along with the number of distinct classes of their captains, listed from the 11th to the 20th result?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT T1.Name, T2.Name, T1.age FROM captain AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Built_Year BETWEEN 1990 AND 2000 ORDER BY T1.age ASC",
        "question": "What are the names of captains and ships they are on, and the captains' ages, for ships built between 1990 and 2000, listed in ascending order of the captains' ages?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM captain AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Built_Year BETWEEN 1900 AND 1950 AND T1.age > 50 ORDER BY T2.Name DESC LIMIT 10",
        "question": "What are the names of captains older than 50 and the ships they command, for ships built between 1900 and 1950, listed in descending order by ship name, starting from the 11th result?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT COUNT(Ship_ID) FROM captain WHERE Name = 'John'",
        "question": "How many ships are captained by John?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Ship_ID) FROM captain AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.age > 50 AND T2.Built_Year BETWEEN 1900 AND 1950 AND T1.Rank = 'Captain' ORDER BY T1.Name DESC",
        "question": "What are the names of captains over 50 years old with the rank of Captain, along with the number of distinct ships they have commanded that were built between 1900 and 1950, listed in descending order of captain name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT T2.Name, COUNT(DISTINCT T1.Ship_ID), MIN(T2.Built_Year) FROM captain AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.age = '40' GROUP BY T2.Name LIMIT 5",
        "question": "What are the names of the ships, the number of unique captains' ship ids, and the earliest built year for ships with 40-year-old captains, listed from the sixth to the tenth group of results?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT Name FROM captain ORDER BY Name DESC",
        "question": "What are the names of captains in descending alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT Ship_ID FROM captain WHERE age > 50 ORDER BY Ship_ID ASC LIMIT 10",
        "question": "What are the ids of the next 10 ships with captains older than 50, listed in ascending order of ship id?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "ship_1"
    },
    {
        "query": "SELECT T1.name, T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "question": "What are the names and savings account balances of the customers?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.custid), COUNT(T1.balance) FROM SAVINGS AS T1 JOIN ACCOUNTS AS T2 ON T1.custid = T2.custid WHERE T1.balance = 1000 ORDER BY T1.balance DESC",
        "question": "How many distinct customer IDs and total number of savings accounts have a balance of 1000?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT T1.name, T2.balance, T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid WHERE T2.balance BETWEEN 100 AND 1000 OR T2.balance IN (SELECT balance FROM SAVINGS WHERE balance > 500) ORDER BY T1.name ASC",
        "question": "What are the names and savings and checking balances of customers whose savings balance is between 100 and 1000 or greater than 500, listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance != 0 ORDER BY T1.name ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th customers, in ascending order, who have a non-zero checking balance?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT COUNT(T1.custid), T1.balance FROM SAVINGS AS T1 WHERE T1.custid NOT IN ( SELECT T2.custid FROM CHECKING AS T2 WHERE T2.balance > 1000 ) AND T1.balance > 1500 LIMIT 5",
        "question": "What are the balances of the top 5 customers with a savings balance over 1500 who do not have a checking balance over 1000, along with the count of such customers?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < 1000 ORDER BY T1.name ASC",
        "question": "What are the names of customers with a savings balance less than 1000, listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT COUNT(A.custid), A.name, S.balance FROM ACCOUNTS A JOIN SAVINGS S ON A.custid = S.custid JOIN CHECKING C ON A.custid = C.custid",
        "question": "How many accounts, and what are the names and total savings balances for each account, of customers who have both savings and checking accounts?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT name FROM ACCOUNTS WHERE name <= 'John'",
        "question": "What are the names of the accounts that are alphabetically before or equal to 'John'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T2.custid = T3.custid WHERE T3.balance > 1000 OR T2.balance BETWEEN 500 AND 1000",
        "question": "What are the names of the customers who have a checking account balance greater than 1000 or have a savings account balance between 500 and 1000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT name FROM ACCOUNTS WHERE name = 'John' OR name = 'Jane' OR name NOT IN (SELECT name FROM SAVINGS WHERE balance BETWEEN 100 AND 1000) ORDER BY name DESC",
        "question": "What are the names of customers whose names are John or Jane or who do not have a savings account balance between 100 and 1000, listed in descending order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT T1.name, AVG(T2.balance) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.custid = 100 OR T2.balance > 500 OR NOT EXISTS (SELECT * FROM CHECKING AS T3 WHERE T3.custid = T1.custid AND T3.balance < 0) GROUP BY T1.name",
        "question": "What are the names of the customers with id 100, or with savings balance greater than 500, or who do not have checking accounts with negative balances, along with their average savings balance?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT T1.balance FROM CHECKING AS T1 JOIN ACCOUNTS AS T2 ON T1.custid = T2.custid WHERE T2.custid <= 100 ORDER BY T1.balance DESC",
        "question": "What are the checking account balances, in descending order, for customers with customer IDs 100 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "small_bank_1"
    },
    {
        "query": "SELECT p.Name, c.Name FROM people AS p JOIN employment AS e ON p.People_ID = e.People_ID JOIN company AS c ON e.Company_ID = c.Company_ID WHERE p.Age > 30 AND p.Age < 50 AND c.Sales_in_Billion = 10 ORDER BY p.Age DESC",
        "question": "What are the names of people aged between 30 and 50, along with the names of the companies they work for, where the company has sales of 10 billion, listed in descending order of the people's ages?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_employee"
    },
    {
        "query": "SELECT Name FROM people WHERE Age > 30 OR Name = 'John' OR Nationality NOT IN (SELECT Nationality FROM people WHERE Graduation_College = 'MIT') LIMIT 10",
        "question": "List the names of the next 10 people who are over 30 years old or named John or from a nationality not represented by any MIT graduates.",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_employee"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name) FROM company WHERE Headquarters = 'USA' OR Headquarters = 'Canada' OR Headquarters IN (SELECT Headquarters FROM company WHERE Sales_in_Billion > 10) ORDER BY Name DESC",
        "question": "How many distinct company names in the USA, Canada, or with sales over 10 billion are there, listed in descending order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_employee"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Name), T1.Name FROM people AS T1 JOIN company AS T2 ON T1.Graduation_College != T2.Headquarters GROUP BY T1.Name",
        "question": "For each person, how many unique company names are there where the company's headquarters is different from the person's graduation college?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "company_employee"
    },
    {
        "query": "SELECT Name AS people_name FROM people WHERE Age != 30 ORDER BY Age DESC",
        "question": "What are the names of the people who are not 30 years old, listed in descending order of age?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "company_employee"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Name), COUNT(T2.Company_ID) FROM people AS T1 JOIN employment AS T2 ON T1.People_ID = T2.People_ID",
        "question": "How many unique people names are there and how many company IDs are there among the people's employment records?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "company_employee"
    },
    {
        "query": "SELECT Name FROM company WHERE Name NOT IN (SELECT Name FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID)",
        "question": "What are the names of the companies with no employees?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "company_employee"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Company_ID) FROM people AS T1 JOIN employment AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T3.Company_ID = T2.Company_ID WHERE T1.Nationality = 'American' ORDER BY T1.Name ASC LIMIT 10",
        "question": "What are the names of the top 11-20 American people, ordered alphabetically, along with the number of distinct companies they have worked for?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_employee"
    },
    {
        "query": "SELECT T1.asset_id FROM Assets AS T1 JOIN Maintenance_Contracts AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id WHERE T2.contract_start_date BETWEEN '2020-01-01' AND '2020-12-31'",
        "question": "What are the asset ids of assets with maintenance contracts that started in the year 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT T1.engineer_id FROM Maintenance_Engineers T1 JOIN Maintenance_Engineers T2 ON T1.engineer_id = T2.engineer_id WHERE T2.company_id NOT IN (SELECT company_id FROM Third_Party_Companies WHERE company_name = 'ABC') ORDER BY T1.engineer_id ASC",
        "question": "What are the IDs of the maintenance engineers who do not work for the company 'ABC', listed in ascending order?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT part_fault_id FROM Part_Faults WHERE part_id = 10 OR part_fault_id BETWEEN 15 AND 20 OR part_fault_id > 25",
        "question": "What are the part fault IDs for the part with ID 10 or the part fault IDs between 15 and 20, or the part fault IDs greater than 25?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id JOIN Assets AS T3 ON T2.asset_id = T3.asset_id WHERE T3.asset_acquired_date BETWEEN '2020-01-01' AND '2020-12-31'",
        "question": "What are the names of parts used in assets acquired in the year 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id WHERE T1.company_type = 'Contractor' AND T2.engineer_id IN (SELECT engineer_id FROM Engineer_Skills WHERE skill_id = 1)",
        "question": "What are the names of the third-party companies of type 'Contractor' that have engineers with the skill of id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 WHERE T1.company_type != 'government'",
        "question": "What are the names of the third party companies that are not government companies?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT T1.engineer_id FROM Maintenance_Engineers AS T1 JOIN Maintenance_Engineers AS T2 ON T1.engineer_id = T2.engineer_id WHERE T1.first_name = 'John'",
        "question": "What is the engineer id of the maintenance engineer with the first name 'John'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT T1.company_name, COUNT(T2.maintenance_contract_id) FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id WHERE T2.contract_start_date BETWEEN '2020-01-01' AND '2020-12-31'",
        "question": "What are the names of third-party companies and the number of maintenance contracts they signed in 2020?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT T1.part_id FROM Parts AS T1 WHERE T1.part_name != '' LIMIT 10",
        "question": "What are the part IDs of the first 10 parts with non-empty part names?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT COUNT(T1.maintenance_contract_id) FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id ORDER BY COUNT(T1.maintenance_contract_id) ASC LIMIT 10",
        "question": "What are the maintenance contract ids with the 11th to 20th lowest number of associated assets?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.staff_name) FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id WHERE T1.staff_id = 1 OR T2.fault_log_entry_datetime > '2020-01-01' OR T1.staff_id IN (SELECT staff_id FROM Staff WHERE staff_name = 'John')",
        "question": "How many unique staff names are there for staff with id 1 or staff who recorded faults after '2020-01-01' or staff named 'John'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id WHERE T2.first_name = 'John' OR T2.first_name IN (SELECT T3.first_name FROM Maintenance_Engineers AS T3 WHERE T3.last_name = 'Doe') GROUP BY T1.company_name",
        "question": "What are the names of the third-party companies that have maintenance engineers with the first name 'John' or the same first name as engineers with the last name 'Doe'?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "assets_maintenance"
    },
    {
        "query": "SELECT M1.loser_ioc, M2.winner_ioc FROM matches M1, matches M2 WHERE M1.match_num = M2.match_num AND M1.winner_id = M2.loser_id AND M1.loser_id BETWEEN 1 AND 100 ORDER BY M1.match_num DESC",
        "question": "What are the loser and winner ioc in matches where the loser id is between 1 and 100, ordered by match number in descending order, and the winner and loser have the same match number and swapped id?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "wta_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.hand), T1.last_name FROM players AS T1 WHERE T1.country_code = 'rus' OR T1.hand = 'right' OR T1.player_id IN (SELECT player_id FROM rankings)",
        "question": "How many distinct hands are there among Russian players or players who are right-handed or players who have a ranking, and what are their last names?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "wta_1"
    },
    {
        "query": "SELECT T1.first_name, T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year BETWEEN 2000 AND 2010",
        "question": "What were the first names and winner ranks of players who won matches between 2000 and 2010?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "wta_1"
    },
    {
        "query": "SELECT COUNT(T1.player_id) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id",
        "question": "How many players have a ranking?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "wta_1"
    },
    {
        "query": "SELECT COUNT(MATCHES.winner_id) FROM MATCHES WHERE MATCHES.winner_id >= 10 LIMIT 10",
        "question": "How many matches were won by players with a winner_id of 10 or higher, starting from the 10th record?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "wta_1"
    },
    {
        "query": "SELECT * FROM players WHERE player_id > (SELECT MIN(player_id) FROM rankings)",
        "question": "What information is available for players with an id higher than that of the player with the lowest id in the rankings?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "wta_1"
    },
    {
        "query": "SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking < 10 ORDER BY T1.first_name ASC",
        "question": "What are the first names of players who have a ranking less than 10, listed in alphabetical order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "wta_1"
    },
    {
        "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id JOIN Subjects AS T3 ON T2.subject_id = T3.subject_id WHERE T1.author_id < 10 LIMIT 5",
        "question": "What are the login names of the next five course authors and tutors with author ids less than 10, after the first five?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_learning"
    },
    {
        "query": "SELECT COUNT(T1.student_id) FROM Students AS T1 WHERE T1.student_id BETWEEN 1000 AND 2000 AND T1.login_name = 'john_doe' AND NOT EXISTS (SELECT T2.student_id FROM Student_Course_Enrolment AS T2 WHERE T2.student_id = T1.student_id)",
        "question": "How many students with the login name 'john_doe' and student id between 1000 and 2000 are not enrolled in any course?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_learning"
    },
    {
        "query": "SELECT T1.family_name, T1.middle_name FROM Course_Authors_and_Tutors AS T1 WHERE T1.login_name = 'author1' OR T1.password = 'password1' OR T1.author_tutor_ATB BETWEEN 'ATB1' AND 'ATB2'",
        "question": "What are the family names and middle names of course authors or tutors with the login name 'author1', the password 'password1', or author tutor atb between 'ATB1' and 'ATB2'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "e_learning"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.course_name), T2.subject_name FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id ORDER BY T1.course_name ASC",
        "question": "How many unique course names are there, listed in ascending order, along with their respective subject names?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "e_learning"
    },
    {
        "query": "SELECT T1.course_name, T4.subject_name, COUNT(T5.registration_id) FROM Courses AS T1 JOIN Course_Authors_and_Tutors AS T2 ON T1.author_id = T2.author_id JOIN Student_Course_Enrolment AS T3 ON T1.course_id = T3.course_id JOIN Subjects AS T4 ON T4.subject_id = T1.subject_id LEFT JOIN Student_Tests_Taken AS T5 ON T3.registration_id = T5.registration_id WHERE T1.course_name != '' ORDER BY COUNT(T5.registration_id) DESC LIMIT 10",
        "question": "What are the names of the top 11th to 20th courses by the number of students who have taken the course test in each subject?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_learning"
    },
    {
        "query": "SELECT COUNT(T3.course_name), SUM(T3.course_name) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id JOIN Courses AS T3 ON T2.course_id = T3.course_id WHERE (T3.course_name BETWEEN 'A' AND 'Z') OR EXISTS (SELECT T4.student_id FROM Students AS T4 WHERE T4.student_id = T2.student_id) OR T3.course_name = 'Math'",
        "question": "What is the total number of courses with names between A and Z or those taken by any student, including the course Math, and what is the sum of their course names?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_learning"
    },
    {
        "query": "SELECT COUNT(course_id) FROM Courses WHERE author_id < 100",
        "question": "How many courses are created by authors with an author id less than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "e_learning"
    },
    {
        "query": "SELECT COUNT(course_id) AS num_courses FROM Courses AS T1",
        "question": "How many courses are there in total?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "e_learning"
    },
    {
        "query": "SELECT COUNT(T1.student_id), MAX(T1.student_id) FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.date_of_registration <= '2020-01-01'",
        "question": "What is the total number of students and the highest student ID of students who registered before January 1st, 2020 and enrolled in at least one course?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "e_learning"
    },
    {
        "query": "SELECT Name FROM member WHERE Role = 'Coach' ORDER BY Member_ID DESC",
        "question": "What are the names of the coaches, listed in descending order by member ID?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "performance_attendance"
    },
    {
        "query": "SELECT Performance_ID FROM performance WHERE Attendance != 0 LIMIT 10",
        "question": "What are the performance IDs of the performances that had attendees, listed from the 11th to the 20th?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "performance_attendance"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Member_ID) FROM member_attendance AS T1 WHERE T1.Num_of_Pieces >= 10",
        "question": "How many members have attended a performance with 10 or more pieces?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "performance_attendance"
    },
    {
        "query": "SELECT T1.dept_name FROM department AS T1 WHERE T1.dept_name IN ( SELECT T2.dept_name FROM course AS T2 GROUP BY T2.dept_name ) ORDER BY T1.dept_name ASC",
        "question": "What are the names of departments that offer at least one course, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_2"
    },
    {
        "query": "SELECT T1.dept_name FROM department AS T1 WHERE T1.budget > 100000",
        "question": "What are the names of the departments with a budget greater than 100000?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "college_2"
    },
    {
        "query": "SELECT T1.building FROM department AS T1 WHERE T1.budget > 50000 AND T1.dept_name NOT IN ( SELECT T2.dept_name FROM instructor AS T2 WHERE T2.salary < 100000 )",
        "question": "Which buildings are departments with a budget of more than 50,000 located in, where the department does not have any instructors with a salary of less than 100,000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_2"
    },
    {
        "query": "SELECT s_ID FROM advisor WHERE i_ID < (SELECT ID FROM instructor WHERE salary = (SELECT MIN(salary) FROM instructor)) LIMIT 1",
        "question": "What is the student ID of the student advised by the second lowest paid instructor?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_2"
    },
    {
        "query": "SELECT course_id FROM course WHERE credits > (SELECT AVG(credits) FROM course)",
        "question": "What are the course ids of courses with credits greater than the average credits of all courses?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "college_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT course_id) FROM course WHERE credits BETWEEN 3 AND 5",
        "question": "How many distinct courses have credits between 3 and 5?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "college_2"
    },
    {
        "query": "SELECT T1.building FROM classroom AS T1 WHERE T1.capacity BETWEEN 50 AND 100 ORDER BY T1.building ASC LIMIT 10",
        "question": "What are the names of buildings with classroom capacities between 50 and 100, listed in ascending order, from the 11th to the 20th?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "college_2"
    },
    {
        "query": "SELECT COUNT(dept_name), SUM(budget) FROM department WHERE budget < 1000000",
        "question": "How many departments have a budget less than 1 million dollars and what is the total budget of these departments?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_2"
    },
    {
        "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = (SELECT T3.dept_name FROM student AS T3 WHERE T3.tot_cred = 100) ORDER BY T1.name ASC LIMIT 10",
        "question": "What are the names of the next 10 instructors in ascending order from the department with the same name as the department of students with total credits of 100?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_2"
    },
    {
        "query": "SELECT T1.Name, T1.Density_km, T1.Government_website FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID JOIN spokesman AS T3 ON T2.Spokesman_ID = T3.Spokesman_ID WHERE T3.Name != 'John Doe' ORDER BY T1.Population ASC LIMIT 10",
        "question": "What are the names, population densities, and government websites of the 11th to 20th least populated districts not represented by the spokesman John Doe?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT AVG(Area_km) FROM district WHERE Population BETWEEN 50000 AND 100000 ORDER BY Area_km DESC",
        "question": "What is the average area of the districts with a population between 50,000 and 100,000, listed in descending order of area?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT T1.District_ID, T2.Name FROM district AS T1 JOIN district AS T2 ON T1.District_ID = T2.District_ID WHERE T1.Population < 100000",
        "question": "What are the names and district ids of the districts with a population of less than 100000?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT COUNT(DISTINCT Spokesman_ID), MAX(Points) FROM spokesman ORDER BY Points DESC",
        "question": "What is the count of distinct spokesmen and the maximum points earned by spokesmen ranked in descending order of points?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Population) FROM spokesman AS T1 JOIN spokesman_district AS T3 ON T1.Spokesman_ID = T3.Spokesman_ID JOIN district AS T2 ON T3.District_ID = T2.District_ID WHERE T1.Age > 30 OR T2.Population BETWEEN 10000 AND 20000 OR T2.Name = 'District A' ORDER BY T1.Name ASC",
        "question": "What are the names of spokesmen older than 30 and the total population of the districts they represent, also including spokesmen representing districts with a population between 10,000 and 20,000 or named 'District A', listed in ascending order by spokesman name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT T1.Name FROM district AS T1 WHERE T1.Population < 100000 LIMIT 5",
        "question": "What are the names of the 5th to 9th least populous districts?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT * FROM district WHERE Population BETWEEN 50000 AND 100000 LIMIT 10",
        "question": "What are the details of the next 10 districts with population between 50000 and 100000 after the first 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT Name FROM district WHERE Area_km >= 100 ORDER BY Name ASC",
        "question": "What are the names of districts with an area of 100 km or more, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID LIMIT 1",
        "question": "What is the name of a district that has a spokesman, excluding the first one?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT S1.Name, D1.Population FROM spokesman AS S1 JOIN spokesman_district AS SD1 ON S1.Spokesman_ID = SD1.Spokesman_ID JOIN district AS D1 ON SD1.District_ID = D1.District_ID WHERE S1.Age > 30 AND D1.Population BETWEEN 10000 AND 50000 AND EXISTS (SELECT * FROM spokesman AS S2 WHERE S2.Age > 30)",
        "question": "What are the names of spokesmen over 30 years old and the populations of the districts they serve, where the district population is between 10,000 and 50,000, and there exists at least one spokesman over 30 years old?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT T1.District_ID, COUNT(T2.Spokesman_ID) FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID WHERE T2.District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(Spokesman_ID) > 1) GROUP BY T1.District_ID",
        "question": "What are the district IDs along with the number of spokesmen assigned to each of these districts that have more than one spokesman?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT Name, Population FROM district WHERE Government_website != 'https://www.gov.il/en'",
        "question": "What are the names and populations of the districts with a government website other than 'https://www.gov.il/en'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.District_ID) FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.Name ORDER BY COUNT(T2.District_ID) DESC LIMIT 5",
        "question": "What are the names of the next 5 districts with the most spokesmen after the top 5?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "district_spokesman"
    },
    {
        "query": "SELECT IATA FROM airport WHERE City = 'New York'",
        "question": "What are the IATA codes of airports in New York?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT T1.name, T2.name, T3.Velocity FROM airport AS T1 JOIN flight AS T3 ON T1.id = T3.airport_id JOIN operate_company AS T2 ON T2.id = T3.company_id WHERE T3.Velocity >= 800 LIMIT 10",
        "question": "What are the names of the airport, the operating company, and the flight speed for the 11th to 20th flights with a speed of at least 800?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT * FROM operate_company WHERE Group_Equity_Shareholding > 10 ORDER BY id ASC",
        "question": "What are the details of all operating companies with more than 10% group equity shareholding, listed in ascending order by id?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT COUNT(name) , COUNT(ICAO) FROM airport AS T1",
        "question": "How many airport names and ICAO codes are there in total in the airport table?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT AVG(T1.Velocity), AVG(T1.Altitude), COUNT(T2.id) FROM flight AS T1 JOIN airport AS T2 ON T1.airport_id = T2.id JOIN operate_company AS T3 ON T1.company_id = T3.id WHERE T3.Group_Equity_Shareholding <= 50 LIMIT 10",
        "question": "What are the average velocity and altitude of flights and the number of airports for the next 10 flights operated by companies with equity shareholding less than or equal to 50%?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT T1.name FROM airport AS T1 WHERE T1.id BETWEEN 100 AND 200 AND T1.City = 'New York' AND T1.Country = 'USA' ORDER BY T1.id DESC",
        "question": "What are the names of airports in 'New York', 'USA', with id between 100 and 200, listed in descending order by id?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.id), T1.id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T2.company_id != 1 GROUP BY T1.id ORDER BY COUNT(DISTINCT T2.id) DESC",
        "question": "What are the airport IDs with the number of distinct flights for each airport, excluding flights operated by the company with ID 1, listed in descending order by the number of distinct flights?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT Velocity FROM flight WHERE Altitude <= 10000 ORDER BY Velocity ASC",
        "question": "What are the velocities of all flights flying at or below an altitude of 10000, listed from lowest to highest?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.id), COUNT(DISTINCT T3.id), COUNT(T2.id) FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id JOIN operate_company AS T3 ON T2.company_id = T3.id WHERE T2.Velocity BETWEEN 500 AND 1000 AND T3.Group_Equity_Shareholding > 20 AND T1.Country = 'USA' ORDER BY T2.id DESC LIMIT 10",
        "question": "What are the counts of distinct USA airports, distinct operating companies with more than 20% group equity shareholding and flights with velocities between 500 and 1000 for the 11th to 20th recent flights respectively?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT T2.City, COUNT(DISTINCT T1.id) FROM flight AS T1 JOIN airport AS T2 ON T1.airport_id = T2.id WHERE T1.Velocity BETWEEN 500 AND 1000 OR T1.id IN (SELECT id FROM flight WHERE Velocity > 1000) OR T1.company_id = (SELECT id FROM operate_company WHERE name = 'Company A') GROUP BY T2.City HAVING COUNT(DISTINCT T1.id) > 1 ORDER BY T2.City ASC",
        "question": "What cities have more than one flight with a velocity between 500 and 1000, or a velocity greater than 1000, or operated by 'Company A', and list them in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT COUNT(f.id), f.Pilot, f.Altitude FROM flight AS f WHERE f.Velocity BETWEEN 200 AND 400 AND f.Altitude > 5000 AND f.Pilot = 'Bob'",
        "question": "How many flights flown by Bob at an altitude above 5000 were at a velocity between 200 and 400?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT * FROM airport WHERE IATA IN ( SELECT IATA FROM airport WHERE City = 'New York' ) OR City IN ( SELECT City FROM airport WHERE Country = 'USA' )",
        "question": "What are the details of airports that either have the same IATA code as airports in New York or are located in the same city as airports in the USA?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT T1.City, T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T2.id = 1 AND T2.Velocity > 100 AND T2.Altitude IN (SELECT T2.Altitude FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id) LIMIT 10",
        "question": "What are the cities and pilots of the flights with an altitude that has been flown by some flight and a velocity above 100 and a flight id of 1, listed 11th to 20th?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT name FROM airport WHERE IATA != 'ABC' ORDER BY name ASC LIMIT 10",
        "question": "What are the names of the next 10 airports, excluding the one with IATA code 'ABC', in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT T1.name, T2.name FROM airport AS T1 JOIN operate_company AS T2 ON T1.id = T2.id WHERE T1.ICAO = 'KJFK' OR T1.ICAO = 'KLAX' AND NOT EXISTS (SELECT 1 FROM flight AS T3 WHERE T3.company_id = T2.id)",
        "question": "What are the names of the airports and their operating companies that have either 'KJFK' or 'KLAX' as their ICAO and do not operate any flights?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT id FROM airport WHERE Country = 'USA' OR IATA = 'JFK' OR id = (SELECT airport_id FROM flight WHERE Velocity > 800) ORDER BY id ASC LIMIT 10",
        "question": "What are the ids of the next 10 airports in the USA or with IATA 'JFK' or the airport of a flight with velocity greater than 800, ordered by id in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_company"
    },
    {
        "query": "SELECT SUM(T1.Card_Credit), SUM(T1.Level_of_Membership), SUM(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Level_of_Membership BETWEEN 1 AND 3 AND T2.Quantity > 5 GROUP BY T1.Customer_ID HAVING SUM(T2.Quantity) > 10 ORDER BY T1.Customer_ID ASC LIMIT 10",
        "question": "What are the sums of card credit, level of membership, and quantity for customers with a membership level between 1 and 3, quantity greater than 5, and total quantity greater than 10, ordered by customer ID and showing results from 11 to 20?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Customer_ID) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID LIMIT 10",
        "question": "What are the number of unique customers who have placed an order, listed 11th to 20th?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT T1.Customer_ID FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN branch AS T3 ON T3.Branch_ID = T2.Branch_ID WHERE T2.Quantity BETWEEN 1 AND 10 AND T1.Customer_ID NOT IN (SELECT T1.Customer_ID FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN branch AS T3 ON T3.Branch_ID = T2.Branch_ID WHERE T2.Branch_ID = 101)",
        "question": "What are the customer IDs of customers who ordered between 1 and 10 items and have never ordered from branch 101?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT T1.Nationality, COUNT(DISTINCT T2.Dish_Name) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Quantity < 5 GROUP BY T1.Nationality",
        "question": "For each nationality, how many distinct dishes are ordered in quantities of less than 5?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT T1.Name, SUM(T3.Quantity) FROM customer AS T1 JOIN customer_order AS T3 ON T1.Customer_ID = T3.Customer_ID WHERE T1.Card_Credit <= 100 ORDER BY T1.Name DESC",
        "question": "What are the names of the customers with a credit of 100 or less, along with the total quantity of dishes they ordered, listed in descending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT SUM(Card_Credit) AS total_credit, COUNT(Level_of_Membership) AS total_membership FROM customer AS t1",
        "question": "What is the total credit and the total number of membership levels of all customers?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT Name FROM customer WHERE Card_Credit <= 5000 ORDER BY Level_of_Membership ASC",
        "question": "What are the names of the customers with a credit limit of less than or equal to 5000, listed in ascending order of their membership levels?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT COUNT(Level_of_Membership), SUM(Card_Credit) FROM customer",
        "question": "What is the total count of membership levels and total card credits of all customers?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Customer_ID), T1.Level_of_Membership FROM customer AS T1 WHERE T1.Card_Credit < 10000 AND T1.Card_Credit > 5000 AND T1.Nationality = 'USA'",
        "question": "How many distinct USA customers and the levels of membership do these customers have, given that their card credit is between 5000 and 10000?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Customer_ID) , COUNT(DISTINCT T1.Nationality) , COUNT(DISTINCT T1.Level_of_Membership) FROM customer AS T1 ORDER BY T1.Customer_ID DESC",
        "question": "What are the counts of total unique customer IDs, unique nationalities, and unique membership levels among all customers when ordered by customer ID in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT Name, Nationality FROM customer WHERE Card_Credit = 1000 AND Level_of_Membership < 3 ORDER BY Name ASC LIMIT 10",
        "question": "What are the names and nationalities of the next 10 customers with a card credit of 1000 and a membership level less than 3, listed in ascending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Customer_ID), COUNT(T2.Customer_ID) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Level_of_Membership = 1 AND T1.Card_Credit > 1000 AND NOT EXISTS (SELECT 1 FROM branch AS T3 WHERE T3.Branch_ID = T2.Branch_ID AND T3.Years_opened < 5) ORDER BY T1.Customer_ID ASC",
        "question": "How many distinct customers with a membership level of 1 and a credit card limit over 1000 have placed orders in branches that have been open for at least 5 years?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT Name FROM customer WHERE Level_of_Membership IN (SELECT Level_of_Membership FROM customer WHERE Card_Credit > 100) ORDER BY Customer_ID ASC LIMIT 5",
        "question": "What are the names of the next 5 customers with the same level of membership as those with a credit card balance over 100, listed in ascending customer ID order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT T1.Branch_ID, SUM(T1.Quantity) FROM customer_order AS T1 WHERE T1.Branch_ID IN (SELECT T2.Branch_ID FROM branch AS T2 WHERE T2.Years_opened > 10) GROUP BY T1.Branch_ID ORDER BY SUM(T1.Quantity) ASC",
        "question": "What is the total quantity of orders for each branch that has been open for more than 10 years, listed in ascending order by total quantity?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "restaurant_bills"
    },
    {
        "query": "SELECT COUNT(*) FROM Ref_Characteristic_Types AS T1",
        "question": "How many reference characteristic types are there?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT T1.product_id FROM Products AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.product_id NOT IN (SELECT T3.product_id FROM Products AS T3 GROUP BY T3.product_id HAVING COUNT(DISTINCT T3.product_category_code) = 1)",
        "question": "Which product IDs have more than one product category?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT AVG(p.typical_buying_price) FROM Products p WHERE p.product_category_code = 'PC001' AND p.typical_selling_price BETWEEN 10 AND 100 AND p.product_name = 'Product A'",
        "question": "What is the average buying price of Product A, with a selling price between 10 and 100, in the product category PC001?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT COUNT(DISTINCT characteristic_type_code), COUNT(DISTINCT characteristic_data_type) FROM Characteristics WHERE characteristic_name = 'size' ORDER BY characteristic_id DESC",
        "question": "How many distinct types and data types of characteristics are there for the characteristic named 'size', when ordered in descending order by characteristic ID?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT characteristic_name FROM Characteristics WHERE characteristic_type_code != 'A' LIMIT 10",
        "question": "What are the names of the next 10 characteristics that are not of type A?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT AVG(typical_buying_price), AVG(typical_selling_price) FROM Products WHERE typical_buying_price = typical_selling_price",
        "question": "What are the average typical buying and selling prices of products where the buying and selling prices are the same?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT COUNT(DISTINCT characteristic_id) , COUNT(DISTINCT characteristic_type_code) FROM Characteristics ORDER BY characteristic_id DESC",
        "question": "What is the count of distinct characteristic IDs and distinct characteristic types in the Characteristics table, ordered by characteristic ID in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T1.characteristic_id >= T2.characteristic_id ORDER BY T1.characteristic_name DESC",
        "question": "What are the characteristic names, in descending order, of paired characteristics with the same characteristic type code, where the characteristic id of the first characteristic is greater than or equal to the characteristic id of the second characteristic?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT T1.product_name FROM Products AS T1 WHERE NOT EXISTS (SELECT 1 FROM Product_Characteristics AS T2 WHERE T1.product_id = T2.product_id AND T2.product_characteristic_value = 'S') ORDER BY T1.product_name ASC",
        "question": "What are the names of products that do not have the characteristic value 'S', listed in ascending order by product name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.characteristic_type_code) AS count_distinct_characteristic_type_code FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id",
        "question": "How many distinct characteristic types are associated with products?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT T1.product_name, T2.typical_selling_price FROM Products AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.typical_selling_price > (SELECT AVG(typical_selling_price) FROM Products) ORDER BY T1.typical_selling_price DESC",
        "question": "What are the names and prices of products with prices higher than the average price, listed from highest to lowest price?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT T1.product_name, AVG(T2.typical_buying_price) FROM Products AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name NOT IN (SELECT product_name FROM Products WHERE product_category_code = 'Electronics') GROUP BY T1.product_name ORDER BY AVG(T2.typical_buying_price) ASC",
        "question": "What are the names of non-electronic products along with their average buying prices, listed in ascending order of average buying price?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT T1.product_category_description, COUNT(T2.product_id) FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE NOT EXISTS ( SELECT 1 FROM Characteristics AS T3 JOIN Product_Characteristics AS T4 ON T3.characteristic_id = T4.characteristic_id WHERE T2.product_id = T4.product_id AND T3.characteristic_type_code = 'Size' ) GROUP BY T1.product_category_description",
        "question": "How many products are there in each category that do not have a size characteristic?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT COUNT(DISTINCT product_id) AS product_count, product_category_code FROM Products GROUP BY product_category_code ORDER BY product_count DESC",
        "question": "What is the count of distinct products in each product category, listed in descending order by count?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "products_gen_characteristics"
    },
    {
        "query": "SELECT T1.Country_name, COUNT(T1.Official_native_language) FROM country AS T1 WHERE T1.Capital = 'Madrid' GROUP BY T1.Country_name ORDER BY COUNT(T1.Official_native_language) ASC",
        "question": "What is the country name and number of official native languages for the country whose capital is Madrid, listed in ascending order by the number of official native languages?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "match_season"
    },
    {
        "query": "SELECT COUNT(Country_id) FROM country WHERE Country_name > 'USA'",
        "question": "How many countries are alphabetically listed after the USA?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "match_season"
    },
    {
        "query": "SELECT Country_name, Official_native_language FROM country WHERE Capital = 'Madrid'",
        "question": "What is the official native language and country name of the country whose capital is Madrid?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "match_season"
    },
    {
        "query": "SELECT T1.Country_name FROM country AS T1 WHERE NOT EXISTS (SELECT T2.Country FROM match_season AS T2 WHERE T1.Country_id = T2.Country AND T2.Season = 2020)",
        "question": "What are the country names that did not participate in the 2020 season?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "match_season"
    },
    {
        "query": "SELECT Country_name FROM country AS T1 WHERE Country_id < 10 ORDER BY Country_name ASC",
        "question": "What are the country names with a country id less than 10, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "match_season"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Player) FROM match_season AS T1 JOIN match_season AS T2 ON T1.Player = T2.Player WHERE T2.Draft_Pick_Number > 100",
        "question": "How many distinct players were drafted after the 100th pick?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "match_season"
    },
    {
        "query": "SELECT Country_name FROM country WHERE Country_id = 10 AND Capital = 'London' AND Country_name NOT IN (SELECT Country_name FROM country WHERE Country_id < 5) ORDER BY Country_name DESC",
        "question": "What are the country names with country id 10 and capital 'London' that are not among the first 5 country ids, listed in descending order by country name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "match_season"
    },
    {
        "query": "SELECT T1.Country_name, T2.Name, COUNT(T3.Player) FROM country AS T1 JOIN match_season AS T3 ON T1.Country_id = T3.Country JOIN team AS T2 ON T2.Team_id = T3.Team WHERE T3.Season > 2010 LIMIT 10",
        "question": "What are the countries, teams and the number of players for each country and team combination, where the season is greater than 2010, listed from 11th to 20th in the count of players?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "match_season"
    },
    {
        "query": "SELECT MAX(T1.Country_id) FROM country AS T1 WHERE T1.Country_id BETWEEN 10 AND 20 AND EXISTS (SELECT T2.Team FROM team AS T2 WHERE T2.Team_id = T1.Country_id)",
        "question": "What is the maximum country id between 10 and 20 that also exists as a team id?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "match_season"
    },
    {
        "query": "SELECT MAX(T1.Draft_Pick_Number) FROM match_season AS T1 WHERE T1.Season >= 2010 LIMIT 1",
        "question": "What is the highest draft pick number for players in the 2010 season or later?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "match_season"
    },
    {
        "query": "SELECT id FROM Web_client_accelerator WHERE Operating_system = 'Windows' OR id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser WHERE browser_id = 1 ) LIMIT 10",
        "question": "What are the IDs of the first 10 web client accelerators that are either compatible with the Windows operating system or not compatible with browser ID 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT COUNT(name), COUNT(Operating_system) FROM Web_client_accelerator WHERE Client != 'Win32'",
        "question": "How many web client accelerator names and operating systems are there for non-Win32 clients?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name) FROM Web_client_accelerator AS T1 WHERE NOT EXISTS (SELECT T3.accelerator_id FROM accelerator_compatible_browser AS T3 JOIN browser AS T2 ON T3.browser_id = T2.id WHERE T1.id = T3.accelerator_id AND T2.market_share > 0.5) LIMIT 10",
        "question": "What are the names of the 10 distinct web client accelerators that are not compatible with any browser having a market share of more than 0.5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT name FROM Web_client_accelerator WHERE id > 5 LIMIT 10",
        "question": "What are the names of the next 10 web client accelerators with an id greater than 5?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT T1.name, COUNT(T2.browser_id) FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id WHERE T1.Connection = 'SSL' AND T2.compatible_since_year <= 2010",
        "question": "What are the names of web client accelerators that use SSL connections and the number of browsers that are compatible with them since 2010 or before?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT AVG(T2.market_share) FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id JOIN browser AS T2 ON T3.browser_id = T2.id WHERE T1.id < 10",
        "question": "What is the average market share of the browsers that are compatible with the first 9 web client accelerators?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT T1.name, T2.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id JOIN browser AS T2 ON T2.id = T3.browser_id WHERE T3.compatible_since_year BETWEEN 2000 AND 2010",
        "question": "What are the names of the web client accelerators and compatible browsers that were compatible between the years 2000 and 2010?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT T1.name FROM Web_client_accelerator AS T1 WHERE T1.id IN ( SELECT T2.accelerator_id FROM accelerator_compatible_browser AS T2 ) ORDER BY T1.id DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th web client accelerators that are compatible with at least one browser, sorted in descending order of their IDs?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE NOT EXISTS (SELECT 1 FROM accelerator_compatible_browser AS T4 JOIN browser AS T5 ON T4.browser_id = T5.id WHERE T4.accelerator_id = T2.accelerator_id AND T5.market_share < T3.market_share) ORDER BY T3.market_share ASC",
        "question": "What are the names of the web client accelerators that are compatible only with the browser that has the highest market share with which they are compatible, listed in ascending order of the browser's market share?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id WHERE T1.Client = 'Chrome' AND T2.compatible_since_year > 2010 AND T1.id NOT IN (SELECT accelerator_id FROM accelerator_compatible_browser WHERE browser_id = 1) ORDER BY T1.name ASC",
        "question": "What are the names of Chrome accelerators that are compatible with browsers introduced after 2010, excluding the browser with id 1, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT T1.name, COUNT(DISTINCT T2.browser_id) FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id WHERE T2.compatible_since_year > 2010 AND T1.Client = 'Windows' AND T2.browser_id IN (SELECT id FROM browser WHERE market_share > 0.5)",
        "question": "What are the names of Windows web client accelerators that are compatible with browsers having a market share greater than 0.5 since after 2010, and how many distinct browsers are compatible with each accelerator?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id WHERE T2.compatible_since_year < 2010 ORDER BY T1.name DESC",
        "question": "What are the names of the web client accelerators compatible with browsers before 2010, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "browser_web"
    },
    {
        "query": "SELECT name FROM Person WHERE city = 'New York' AND job = 'Engineer'",
        "question": "What are the names of persons who live in New York and work as Engineers?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "network_2"
    },
    {
        "query": "SELECT name FROM Person WHERE age < 30 LIMIT 5",
        "question": "What are the names of the 6th to 10th youngest persons?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "network_2"
    },
    {
        "query": "SELECT T1.name FROM Person AS T1 WHERE T1.age > 25 OR T1.city = 'New York' OR NOT EXISTS (SELECT 1 FROM PersonFriend AS T2 WHERE T2.name = T1.name) ORDER BY T1.name ASC",
        "question": "What are the names of people who are either over 25 years old or live in New York or do not have any friends, listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "network_2"
    },
    {
        "query": "SELECT T1.age, COUNT(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age <= 30 GROUP BY T1.age ORDER BY T1.age ASC",
        "question": "For people under 31 years old, how many friends does each age have?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "network_2"
    },
    {
        "query": "SELECT name FROM Person WHERE city NOT IN (SELECT city FROM Person WHERE job = 'Doctor')",
        "question": "What are the names of people who do not live in the same city as any doctors?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "network_2"
    },
    {
        "query": "SELECT T1.name, COUNT(DISTINCT T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age BETWEEN 20 AND 30 OR T1.city = 'New York' OR T1.name NOT IN (SELECT name FROM Person WHERE job = 'Engineer') ORDER BY T1.name ASC",
        "question": "What are the names and the number of distinct friends of people who are between the ages of 20 and 30, or live in New York, or are not engineers, listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "network_2"
    },
    {
        "query": "SELECT name FROM Person WHERE name NOT IN (SELECT name FROM PersonFriend WHERE year = 2000) ORDER BY name ASC LIMIT 10",
        "question": "What are the names of the next 10 people who did not have any friends in the year 2000, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "network_2"
    },
    {
        "query": "SELECT T3.name, T1.name, MIN(T2.year) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name JOIN Person AS T3 ON T2.friend = T3.name GROUP BY T3.name, T1.name",
        "question": "What is the friend's name, person's name and the earliest year they became friends for each pair of friends?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "network_2"
    },
    {
        "query": "SELECT T1.name, COUNT(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age <= 25 ORDER BY COUNT(T2.friend) DESC LIMIT 10",
        "question": "What are the names of the top 10 people aged 25 or younger with the most friends, excluding the first 10 results?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "network_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT job), AVG(age) FROM Person WHERE age BETWEEN 18 AND 65 OR city = 'New York' OR gender = 'Male'",
        "question": "What is the number of distinct jobs and average age of people who are between 18 and 65 years old, or live in New York, or are male?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "network_2"
    },
    {
        "query": "SELECT T1.name, COUNT(T1.friend) FROM Person AS T2 INNER JOIN PersonFriend AS T1 ON T2.name = T1.name WHERE T2.age > 20 GROUP BY T1.name HAVING COUNT(T1.friend) > 1",
        "question": "What are the names of people over 20 years old who have more than one friend?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "network_2"
    },
    {
        "query": "SELECT name FROM Person WHERE city != 'New York'",
        "question": "What are the names of people who do not live in New York?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "network_2"
    },
    {
        "query": "SELECT MIN(T1.age), T1.name FROM Person AS T1 WHERE T1.age > 20 LIMIT 5",
        "question": "What are the names and ages of the 5 youngest people older than 20, excluding the 5 youngest?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "network_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Club_ID), COUNT(DISTINCT T1.Club_Name) FROM club AS T1 WHERE T1.Overall_Ranking > 5 OR T1.Club_ID NOT IN (SELECT T2.Club_ID FROM club_leader AS T2 WHERE T2.Year_Join BETWEEN 2010 AND 2020)",
        "question": "How many distinct clubs and club names are ranked above 5 or did not have a leader join between 2010 and 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT SUM(Member_ID), MAX(Age) FROM member ORDER BY Age DESC",
        "question": "What is the sum of member IDs and the maximum age of all members listed in order from oldest to youngest?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Member_ID), T2.Age FROM member AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Age <= 20 GROUP BY T2.Age",
        "question": "How many distinct members are there in each age group for members aged 20 or younger?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT MIN(Club_ID), MAX(Overall_Ranking), AVG(Team_Leader) FROM club WHERE Overall_Ranking > 100 ORDER BY Club_ID ASC",
        "question": "What are the minimum club id, maximum overall ranking, and average team leader of the clubs with overall ranking greater than 100, listed in ascending order by club id?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT Age FROM member WHERE Age > 30",
        "question": "What is the age of members who are older than 30?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT Name FROM member WHERE Age >= 18",
        "question": "What are the names of the members who are 18 years old or older?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT T1.Name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID WHERE NOT EXISTS (SELECT 1 FROM club AS T3 WHERE T3.Club_ID = T2.Club_ID AND T3.Overall_Ranking < 10) ORDER BY T1.Age ASC",
        "question": "What are the names of the members who lead a club that has no overall ranking less than 10, sorted in ascending order of age?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Club_ID), COUNT(DISTINCT T2.Club_ID), COUNT(DISTINCT T1.Club_ID) FROM club AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID",
        "question": "How many distinct clubs are there in total, how many distinct clubs are there in total, and how many distinct clubs are there in total?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT T1.Club_ID FROM club AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Overall_Ranking >= T2.Overall_Ranking",
        "question": "Which club IDs have a ranking greater than or equal to another club with the same ID?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT MAX(T.Age) FROM member AS T WHERE T.Nationality = 'USA' OR T.Age BETWEEN 20 AND 30 OR T.Member_ID = 101 ORDER BY T.Age DESC LIMIT 1",
        "question": "What is the second-highest age of a member who is from the USA or between the ages of 20 and 30, or has a member ID of 101?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT * FROM member WHERE Age BETWEEN 20 AND 30 ORDER BY Age DESC",
        "question": "List all members with age between 20 and 30 in descending order of age.",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT T1.Club_Name, COUNT(DISTINCT T2.Member_ID) FROM club AS T1 JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Overall_Ranking < 10 GROUP BY T1.Club_Name ORDER BY T1.Club_Name ASC",
        "question": "What are the names of the top 9 ranked clubs and the number of unique members in each club, listed in ascending order by club name?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT Name, MIN(Age) FROM member WHERE Nationality != 'USA' ORDER BY Name ASC",
        "question": "What is the name and minimum age of members from countries other than the USA, listed in alphabetical order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT T1.Club_Name FROM club AS T1 JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Overall_Ranking BETWEEN 10 AND 50 AND T1.Team_Leader = 'John Doe' GROUP BY T1.Club_Name HAVING COUNT(T2.Member_ID) > 5",
        "question": "What club names, led by John Doe, have an overall ranking between 10 and 50 and more than 5 members?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT T1.Club_Name FROM club AS T1 JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID JOIN member AS T3 ON T2.Member_ID = T3.Member_ID WHERE T3.Age = 25 LIMIT 10",
        "question": "What are the names of clubs led by members aged 25, starting from the 11th result, and listing a maximum of 10 clubs?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT T1.Name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Year_Join = '2000' ORDER BY T1.Name ASC",
        "question": "What are the names of the members who became club leaders in the year 2000, listed in ascending order?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "club_leader"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.authID), COUNT(T1.paperID) FROM Papers AS T1 JOIN Authorship AS T2 ON T1.paperID = T2.paperID WHERE T1.paperID = 1",
        "question": "How many distinct authors and total authors are there for the paper with ID 1?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT I.instID, AVG(A.authOrder) FROM Authorship AS A JOIN Inst AS I ON A.instID = I.instID JOIN Authors AS T1 ON A.authID = T1.authID WHERE T1.authID BETWEEN 1 AND 10 GROUP BY I.instID ORDER BY I.instID ASC",
        "question": "What are the average authorship counts for authors with IDs between 1 and 10, grouped by institution ID, listed in ascending order of institution ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.instID), COUNT(DISTINCT T2.paperID) FROM Inst AS T1 JOIN Authorship AS T2 ON T1.instID = T2.instID JOIN Authors AS T3 ON T2.authID = T3.authID JOIN Papers AS T4 ON T2.paperID = T4.paperID",
        "question": "How many distinct institutions and papers are there in the publications?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT DISTINCT T1.fname, T1.lname FROM Authors AS T1 JOIN Authorship AS T2 ON T1.authID = T2.authID WHERE T2.authOrder != 1 LIMIT 10",
        "question": "What are the names of the next 10 co-authors (excluding first authors) from the list of authors who have co-authored papers?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT T1.name FROM Inst AS T1 WHERE NOT EXISTS (SELECT T2.authID FROM Authorship AS T2 WHERE T2.instID = T1.instID) ORDER BY T1.name ASC LIMIT 10",
        "question": "What are the names of the next 10 institutions that do not have any authors?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT I.name FROM Inst I WHERE NOT EXISTS ( SELECT * FROM Authorship A JOIN Papers P ON A.paperID = P.paperID WHERE A.instID = I.instID GROUP BY P.paperID HAVING MIN(A.authOrder) > 1 ) LIMIT 10",
        "question": "What are the names of the next 10 institutions that have at least one paper with a researcher from that institution as the first author?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT T1.name FROM Inst AS T1 JOIN Inst AS T2 ON T1.instID = T2.instID WHERE T1.instID > 10 LIMIT 5",
        "question": "What are the names of the next 5 institutions with an institution id greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT T3.name, COUNT(DISTINCT T1.paperID), COUNT(T2.authID) FROM Papers AS T1 JOIN Authorship AS T2 ON T1.paperID = T2.paperID JOIN Inst AS T3 ON T3.instID = T2.instID WHERE T3.country > 'USA'",
        "question": "What are the names of institutions outside the USA along with the number of unique papers and total authors from these institutions?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT T1.instID, COUNT(T2.paperID) FROM Inst AS T1 JOIN Authorship AS T2 ON T1.instID = T2.instID WHERE EXISTS (SELECT T3.authID FROM Authors AS T3 WHERE T3.authID = T2.authID) GROUP BY T1.instID ORDER BY T1.instID ASC",
        "question": "How many papers are affiliated with each institution, ordered by institution id?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT name FROM Inst WHERE country = 'USA' OR country = 'Canada' OR instID NOT IN (SELECT instID FROM Authorship WHERE authID = 1) ORDER BY name ASC",
        "question": "What are the names of institutions in the USA or Canada, excluding those associated with author 1, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT T1.name, T3.title FROM Inst AS T1 JOIN Authorship AS T2 ON T1.instID = T2.instID JOIN Papers AS T3 ON T2.paperID = T3.paperID WHERE T2.authOrder > 1 AND T1.country = 'USA'",
        "question": "What are the names of institutions in the USA with authors who are not the first author of a paper, and what are the titles of those papers?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT T1.name, COUNT(DISTINCT T3.authID) FROM Inst AS T1 JOIN Authorship AS T2 ON T1.instID = T2.instID JOIN Authors AS T3 ON T2.authID = T3.authID WHERE T2.paperID IN (SELECT T4.paperID FROM Authorship AS T4 JOIN Authors AS T5 ON T4.authID = T5.authID WHERE T5.lname = 'Smith') GROUP BY T1.name",
        "question": "What are the names of institutions and the number of distinct authors from those institutions that have co-authored papers with someone with the last name 'Smith'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.authID), COUNT(T2.paperID) FROM Authorship AS T1 JOIN Papers AS T2 ON T1.paperID = T2.paperID",
        "question": "How many distinct authors are there and how many papers have been written in total?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T3.fname), COUNT(T4.authID) FROM Authors AS T3 JOIN Authorship AS T4 ON T3.authID = T4.authID JOIN Inst AS T1 ON T4.instID = T1.instID JOIN Papers AS T2 ON T4.paperID = T2.paperID WHERE T1.country = 'USA' AND T2.paperID BETWEEN 1 AND 100 AND T4.authOrder > 1",
        "question": "How many distinct first names of authors and total authors are there in the USA for papers with IDs between 1 and 100, where the author is not the first author?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "icfp_1"
    },
    {
        "query": "SELECT * FROM department WHERE Department_ID IN (SELECT department_ID FROM management WHERE head_ID IN (SELECT head_ID FROM head WHERE age > 40))",
        "question": "What are the details of departments managed by heads who are older than 40?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "department_management"
    },
    {
        "query": "SELECT COUNT(Department_ID), Name FROM department WHERE EXISTS (SELECT 1 FROM management AS T1 WHERE T1.department_ID = department.Department_ID AND T1.head_ID = ( SELECT head_ID FROM head WHERE age > 50 ) ) AND Ranking > 5 ORDER BY COUNT(Department_ID) DESC",
        "question": "What are the names of the departments with a ranking higher than 5 that are led by a head older than 50 years, sorted by the number of such departments in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_management"
    },
    {
        "query": "SELECT * FROM department WHERE Budget_in_Billions >= 10",
        "question": "What are the details of the departments with a budget of 10 billion or more?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "department_management"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), MAX(Budget_in_Billions), COUNT(Name) FROM department AS d",
        "question": "What is the number of distinct department names, the highest budget in billions, and the total number of department names?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "department_management"
    },
    {
        "query": "SELECT COUNT(*) FROM department WHERE (Budget_in_Billions BETWEEN 1 AND 2 OR Ranking > 3) OR Budget_in_Billions > (SELECT AVG(Budget_in_Billions) FROM department) LIMIT 5",
        "question": "What is the number of the top 5 departments that have either a budget between 1 and 2 billion or a ranking above 3, or have a budget above the average of all departments?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_management"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Department_ID), COUNT(DISTINCT T2.head_ID) FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID JOIN head AS T3 ON T2.head_ID = T3.head_ID WHERE T1.Department_ID NOT IN (SELECT T4.Department_ID FROM department AS T4 JOIN management AS T5 ON T4.Department_ID = T5.department_ID WHERE T4.Ranking = 1) ORDER BY T2.head_ID DESC",
        "question": "How many distinct non-top ranked departments and their corresponding distinct heads are there, listed in descending order by head ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_management"
    },
    {
        "query": "SELECT * FROM department WHERE Creation BETWEEN '1960-01-01' AND '1980-01-01'",
        "question": "What are the details of departments created between 1960 and 1980?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "department_management"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.head_ID) FROM management AS T1 JOIN management AS T2 ON T1.head_ID = T2.head_ID WHERE T1.department_ID = T2.department_ID ORDER BY COUNT(DISTINCT T1.head_ID) DESC LIMIT 1",
        "question": "Which second most common head ID is shared between two department IDs in the management table?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_management"
    },
    {
        "query": "SELECT Name FROM department WHERE Budget_in_Billions != 5 ORDER BY Budget_in_Billions DESC LIMIT 1",
        "question": "What is the name of the second highest budget department with a budget not equal to 5 billion?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "department_management"
    },
    {
        "query": "SELECT COUNT(T3.head_ID), T1.Name, T3.head_ID FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID JOIN head AS T3 ON T3.head_ID = T2.head_ID WHERE T3.age > 30 AND T1.Name = 'Sales' AND T3.head_ID IN (SELECT head_ID FROM head WHERE born_state = 'California') LIMIT 10",
        "question": "What are the names and head IDs of the heads older than 30 from California who are leading the Sales department, and how many are they, returning 10 results after the first 10?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_management"
    },
    {
        "query": "SELECT name FROM department WHERE Creation BETWEEN '2010' AND '2015' OR Ranking NOT IN (SELECT Ranking FROM department WHERE Budget_in_Billions > 10)",
        "question": "What are the names of the departments created between 2010 and 2015, or departments with a ranking that does not belong to any department with a budget in billions greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "department_management"
    },
    {
        "query": "SELECT Name, Creation, Ranking FROM department WHERE Budget_in_Billions > 1",
        "question": "What are the names, creation years, and rankings of the departments with a budget of more than one billion?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "department_management"
    },
    {
        "query": "SELECT COUNT(StuID), AVG(Age) FROM Student ORDER BY StuID ASC",
        "question": "What is the count and average age of students in ascending order of their IDs?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT LName, Fname FROM Student WHERE Age BETWEEN 18 AND 22 AND Sex NOT IN (SELECT Sex FROM Student WHERE Major = 1) ORDER BY Age DESC",
        "question": "What are the last and first names of students between the ages of 18 and 22, whose sex is not the same as that of students majoring in 1, listed in descending order by age?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT T1.stuid, T1.dormid, MIN(T2.student_capacity) FROM Lives_in AS T1 JOIN Dorm AS T2 ON T1.dormid = T2.dormid WHERE T2.student_capacity <= 200 GROUP BY T1.stuid, T1.dormid LIMIT 10",
        "question": "What are the student IDs, dorm IDs, and minimum student capacities for the 11th to 20th students who live in dorms with a capacity of 200 or less?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT T1.dormid FROM Dorm AS T1 JOIN Lives_in AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity <= 50 LIMIT 10",
        "question": "What are the dorm ids of the next 10 dorms that have a student capacity of 50 or less, starting from the 11th dorm?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT T1.dorm_name, COUNT(DISTINCT T3.amenity_name), COUNT(DISTINCT T3.amenity_name) FROM Dorm AS T1 JOIN Has_amenity AS T2 ON T1.dormid = T2.dormid JOIN Dorm_amenity AS T3 ON T3.amenid = T2.amenid WHERE T1.student_capacity > 100 ORDER BY T1.dorm_name ASC",
        "question": "What are the names of dorms with more than 100 student capacity, along with the number of distinct amenities they have, listed in ascending order by dorm name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT T1.LName FROM Student AS T1 JOIN Student AS T2 ON T1.StuID = T2.Advisor WHERE T2.Major = 1 ORDER BY T1.LName ASC",
        "question": "What are the last names of students advised by a student majoring in 1, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT T1.LName FROM Student AS T1 WHERE T1.Major IN (SELECT T2.Major FROM Student AS T2 WHERE T2.Sex = 'M')",
        "question": "What are the last names of the students who have the same major as any male student?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT T1.dorm_name, COUNT(DISTINCT T2.stuid) FROM Dorm AS T1 JOIN Lives_in AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 50 ORDER BY T1.dorm_name ASC",
        "question": "What are the dorm names and the number of distinct students living in each dorm, for dorms with a capacity of more than 50 students, listed in ascending order by dorm name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT COUNT(*) FROM Student WHERE Age >= 20",
        "question": "How many students are 20 years old or older?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT D.dorm_name, COUNT(L.stuid), MIN(S.Age) FROM Dorm D JOIN Lives_in L ON D.dormid = L.dormid JOIN Student S ON L.stuid = S.StuID WHERE S.Age > 20 AND D.student_capacity > 100 AND D.gender = 'Male' AND S.Sex = 'Male' ORDER BY COUNT(L.stuid) DESC",
        "question": "What are the names of male dorms with more than 100 capacity, ordered by the number of male students over 20 years old living in them in descending order, along with the count of these students and the minimum age of these students?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT LName FROM Student WHERE EXISTS (SELECT 1 FROM Lives_in WHERE Lives_in.stuid = Student.StuID AND Lives_in.dormid = 1) ORDER BY LName DESC",
        "question": "List the last names of students who live in dorm 1, in reverse alphabetical order.",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT COUNT(StuID), SUM(Age) FROM Student WHERE Sex = 'M'",
        "question": "What is the total number and age of male students?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT dorm_name) FROM Dorm",
        "question": "How many different dorm names are there?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT stuid) FROM Lives_in WHERE dormid = 1",
        "question": "How many students live in dorm 1?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT LName FROM Student WHERE Age > 20",
        "question": "What are the last names of students who are older than 20?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT COUNT(T1.dormid), T1.dorm_name FROM Dorm AS T1 JOIN Lives_in AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 50 OR T2.room_number > 100 OR EXISTS (SELECT 1 FROM Student AS T3 WHERE T3.StuID = T2.stuid AND T3.Age > 20) LIMIT 10",
        "question": "What are the names and counts of the 11th to 20th dorms with capacity greater than 50 students or room numbers greater than 100, or having students older than 20 years?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "dorm_1"
    },
    {
        "query": "SELECT Theme, MAX(Sales) FROM journal GROUP BY Theme ORDER BY MAX(Sales) DESC",
        "question": "What are the themes in the journal with their maximum sales, listed in order of highest sales first?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT AVG(j.Sales) FROM journal AS j JOIN journal_committee AS jc ON j.Journal_ID = jc.Journal_ID WHERE j.Sales > 500 OR jc.Work_Type = 'Editor' OR NOT EXISTS (SELECT * FROM journal_committee jc2 WHERE jc2.Journal_ID = j.Journal_ID AND jc2.Work_Type = 'Reviewer') GROUP BY j.Date",
        "question": "What is the average sales for each date of journals that either have sales greater than 500, have an editor, or do not have a reviewer?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT AVG(Sales) FROM journal WHERE Date BETWEEN '2000-01-01' AND '2020-12-31' OR Theme = 'Science' ORDER BY Sales ASC",
        "question": "What is the average sales of journals from the year 2000 to 2020 or with the theme 'Science', listed from lowest to highest sales?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT T1.Date, T1.Theme FROM journal AS T1 JOIN journal_committee AS T2 ON T1.Journal_ID = T2.Journal_ID WHERE T1.Sales > 100 AND T2.Work_Type > 'Editor'",
        "question": "What are the dates and themes of the journals with sales greater than 100 that have a work type higher than 'Editor'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT Theme FROM journal WHERE Sales > 100",
        "question": "What are the themes of the journals with sales greater than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT e.Name, SUM(j.Sales) FROM editor e JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID JOIN journal j ON jc.Journal_ID = j.Journal_ID WHERE e.Age <= 30 GROUP BY e.Name",
        "question": "What are the total sales of journals edited by editors who are 30 years old or younger, listed by editor name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT T1.Name, T3.Date FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T2.Journal_ID = T3.Journal_ID WHERE T2.Work_Type = 'Editor' AND T3.Date BETWEEN '2020-01-01' AND '2020-12-31' AND T3.Sales > 100 ORDER BY T3.Date ASC",
        "question": "What are the names of the editors and the corresponding dates for journals with sales over 100, published in 2020, and edited by the mentioned editor, listed in chronological order by date?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Editor_ID) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID WHERE T2.Work_Type = 'Editor' OR T1.Age BETWEEN 30 AND 50 OR T1.Editor_ID NOT IN (SELECT Editor_ID FROM journal_committee WHERE Work_Type = 'Reviewer') ORDER BY T1.Name DESC",
        "question": "How many distinct editors are either editors in the journal committee, or are between the ages of 30 and 50, or are not reviewers in the journal committee, ordered by their name in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T3.Journal_ID = T2.Journal_ID WHERE T3.Sales < 100",
        "question": "What are the names of the editors who work on journals that have sold less than 100 copies?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT COUNT(DISTINCT Theme), COUNT(DISTINCT Sales), Name FROM journal AS T1 JOIN journal_committee AS T2 ON T1.Journal_ID = T2.Journal_ID JOIN editor AS T3 ON T2.Editor_ID = T3.Editor_ID WHERE T1.Journal_ID = 1",
        "question": "For the journal with Journal_ID 1, what are the names of the editors, the number of distinct themes, and the number of distinct sales?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT T1.Journal_ID, COUNT(DISTINCT T2.Editor_ID) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.Journal_ID = T2.Journal_ID JOIN editor AS T3 ON T3.Editor_ID = T2.Editor_ID WHERE NOT EXISTS (SELECT 1 FROM editor AS T4 WHERE T4.Editor_ID = T2.Editor_ID AND T4.Age > 50)",
        "question": "For each journal, how many unique editors under the age of 50 are there?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT T1.Date FROM journal AS T1 JOIN journal_committee AS T2 ON T1.Journal_ID = T2.Journal_ID JOIN editor AS T3 ON T2.Editor_ID = T3.Editor_ID WHERE T1.Sales < 500 ORDER BY T1.Date ASC",
        "question": "What are the dates of journals with sales less than 500, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT T1.Name FROM editor AS T1 WHERE NOT EXISTS (SELECT 1 FROM journal_committee AS T2 JOIN journal AS T3 ON T2.Journal_ID = T3.Journal_ID WHERE T2.Editor_ID = T1.Editor_ID AND T3.Theme = 'Science')",
        "question": "What are the names of editors who are not part of a journal committee for a science journal?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT Name FROM editor WHERE Editor_ID IN (SELECT Editor_ID FROM journal_committee WHERE Journal_ID IN (SELECT Journal_ID FROM journal WHERE Sales <= 100)) ORDER BY Name DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th editors who worked on journals with sales less than or equal to 100, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT AVG(T1.Sales) + COUNT(T2.Editor_ID), T3.Name FROM journal AS T1 JOIN journal_committee AS T2 ON T1.Journal_ID = T2.Journal_ID JOIN editor AS T3 ON T2.Editor_ID = T3.Editor_ID WHERE T1.Date > '2020-01-01' GROUP BY T3.Name",
        "question": "What is the average sales of journals published after January 1, 2020, plus the number of editors, grouped by editor name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "journal_committee"
    },
    {
        "query": "SELECT Document_Type_Name FROM Ref_Document_Types WHERE Document_Type_Name >= 'A' AND Document_Type_Description >='A'",
        "question": "What document type names start with the letter 'A' or later and have a description that starts with the letter 'A' or later in the reference document types?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT T1.Document_Type_Name FROM Ref_Document_Types AS T1 WHERE T1.Document_Type_Code IN (SELECT T2.Document_Type_Code FROM Documents AS T2 WHERE T2.Project_ID = 1) AND T1.Document_Type_Code = 'code1'",
        "question": "What is the document type name for the document type code 'code1' used in project with ID 1?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT T1.Document_ID, T2.Document_Type_Name FROM Documents AS T1 JOIN Ref_Document_Types AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE EXISTS (SELECT 1 FROM Documents_with_Expenses AS T3 WHERE T3.Document_ID = T1.Document_ID AND T3.Budget_Type_Code = 'Type1')",
        "question": "What are the document IDs and document type names of documents with expenses of budget type 'Type1'?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT MAX(Document_ID) FROM Documents WHERE Document_Type_Code >= 'A'",
        "question": "What is the maximum document ID for documents with a document type code of A or higher?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT SUM(Document_ID), COUNT(Document_Type_Code) FROM Documents WHERE Document_Date BETWEEN '2000-01-01' AND '2020-12-31' LIMIT 10",
        "question": "What is the sum of document ids and the count of document type codes for documents dated between 2000 and 2020, showing only rows 11 to 20?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT COUNT(Document_ID) FROM Documents WHERE Document_Type_Code = 'Type1' LIMIT 10",
        "question": "What are the 11th to 20th counts of documents with type 'Type1'?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT T1.Document_Type_Name FROM Ref_Document_Types AS T1 JOIN Ref_Document_Types AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T1.Document_Type_Name BETWEEN 'A' AND 'Z' OR T2.Document_Type_Name NOT IN (SELECT Document_Type_Name FROM Ref_Document_Types WHERE Document_Type_Description = 'Test') OR T1.Document_Type_Name NOT IN (SELECT Document_Type_Name FROM Ref_Document_Types WHERE Document_Type_Description = 'Test')",
        "question": "What document type names, either from A to Z, or not described as 'Test' appear in the reference document types table?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT T1.Document_Type_Name, MIN(T2.Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE NOT EXISTS (SELECT 1 FROM Projects AS T3 WHERE T3.Project_ID = T2.Project_ID AND T3.Project_Details = ' cancelled') GROUP BY T1.Document_Type_Name",
        "question": "What is the earliest document date for each document type excluding documents associated with cancelled projects?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT T1.Document_Type_Name, COUNT(T2.Document_ID) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_ID NOT IN (SELECT T3.Document_ID FROM Documents_with_Expenses AS T3 WHERE T3.Budget_Type_Code = 'type1') ORDER BY T1.Document_Type_Name DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th document types along with the number of documents of each type that do not have type1 budget expenses?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT MAX(Document_ID) , MIN(Project_ID) FROM Documents WHERE Document_Type_Code <= ' Code '",
        "question": "What is the maximum document ID and the minimum project ID for documents with a document type code less than or equal to 'Code'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT * FROM Documents WHERE Project_ID BETWEEN 100 AND 200",
        "question": "What are the details of all documents associated with projects whose IDs are between 100 and 200?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Docs_and_Epenses"
    },
    {
        "query": "SELECT T1.Workshop_ID FROM workshop AS T1 JOIN Acceptance AS T2 ON T1.Workshop_ID = T2.Workshop_ID JOIN submission AS T3 ON T2.Submission_ID = T3.Submission_ID WHERE T3.Scores <= T3.Scores",
        "question": "What are the workshop IDs of workshops with submissions having scores less than or equal to their own scores?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "workshop_paper"
    },
    {
        "query": "SELECT T1.Author, AVG(T1.Scores) FROM submission AS T1 JOIN Acceptance AS T2 ON T1.Submission_ID = T2.Submission_ID WHERE T2.Workshop_ID < 100 GROUP BY T1.Author ORDER BY AVG(T1.Scores) DESC LIMIT 10",
        "question": "Who are the 11th to 20th top authors with the highest average scores in workshops with an ID below 100?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "workshop_paper"
    },
    {
        "query": "SELECT COUNT(Result) FROM Acceptance WHERE Result < 0",
        "question": "How many submissions have a result less than 0?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "workshop_paper"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Workshop_ID), MIN(T1.Scores) FROM submission AS T1 JOIN Acceptance AS T2 ON T1.Submission_ID = T2.Submission_ID WHERE T1.Scores BETWEEN 50 AND 100",
        "question": "What is the number of distinct workshops and the minimum score of the submissions with scores between 50 and 100?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "workshop_paper"
    },
    {
        "query": "SELECT T2.Workshop_ID, T1.Scores FROM submission AS T1 JOIN Acceptance AS T2 ON T1.Submission_ID = T2.Submission_ID WHERE T1.Scores = 90",
        "question": "What are the scores of submissions and their respective workshop IDs for submissions with a score of 90?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "workshop_paper"
    },
    {
        "query": "SELECT T1.Name, T1.Venue FROM workshop AS T1",
        "question": "What are the names and venues of the workshops?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "workshop_paper"
    },
    {
        "query": "SELECT T1.customer_id, T2.customer_id FROM Customers AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_id BETWEEN 100 AND 200 OR EXISTS (SELECT T3.customer_id FROM Customers AS T3 WHERE T3.customer_id > 100) OR T2.customer_id = 50",
        "question": "What are the customer ids for customers with ids between 100 and 200, customer id 50, or any customer if there exists a customer with an id greater than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_and_lot"
    },
    {
        "query": "SELECT COUNT(*) FROM Residents",
        "question": "How many residents are there?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "local_govt_and_lot"
    },
    {
        "query": "SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
        "question": "What are the customer ids of customers who have at least one customer event?",
        "iter": 5,
        "flag": true,
        "hardness": "easy",
        "db_name": "local_govt_and_lot"
    },
    {
        "query": "SELECT AVG(T1.property_id), T2.resident_id FROM Properties AS T1 JOIN Residents AS T2 ON T1.property_id = T2.property_id WHERE T1.property_type_code = 'type_code' AND T2.date_moved_in BETWEEN '2020-01-01' AND '2020-12-31' AND T1.property_id > 100",
        "question": "What is the average property id of properties of type 'type_code' with property id greater than 100, and what are the corresponding resident ids of residents who moved in between '2020-01-01' and '2020-12-31'?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_and_lot"
    },
    {
        "query": "SELECT COUNT(T1.customer_id) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_details != ''",
        "question": "How many customers have non-empty customer details and have at least one customer event?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "local_govt_and_lot"
    },
    {
        "query": "SELECT T1.customer_id FROM Customers AS T1 WHERE T1.customer_id > 1000 AND EXISTS (SELECT 1 FROM Residents AS T2 WHERE T2.property_id = T1.customer_id) LIMIT 10",
        "question": "What are the customer ids greater than 1000 that also exist as property ids in the residents table, starting from the 11th record and limited to 10 records?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_and_lot"
    },
    {
        "query": "SELECT T1.customer_id FROM Customers AS T1 WHERE T1.customer_id = 10 OR NOT EXISTS (SELECT 1 FROM Customer_Events AS T2 WHERE T2.customer_id = T1.customer_id AND T2.customer_id BETWEEN 1 AND 100) ORDER BY T1.customer_id ASC",
        "question": "What is the customer ID of customer with ID 10, or of any customer without an event record between customer IDs 1 and 100, listed in ascending order of customer ID?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_and_lot"
    },
    {
        "query": "SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_moved_in <= '2020-01-01' ORDER BY T1.customer_id ASC",
        "question": "What are the customer ids of customers who moved in on or before January 1st, 2020, listed in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "local_govt_and_lot"
    },
    {
        "query": "SELECT T1.customer_details FROM Customers AS T1 WHERE T1.customer_id IN (SELECT T2.resident_id FROM Residents AS T2 WHERE T2.property_id = 1234) ORDER BY T1.customer_details ASC LIMIT 10",
        "question": "What are the next 10 customer details of customers who live in property 1234, listed in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "local_govt_and_lot"
    },
    {
        "query": "SELECT T1.Make FROM team AS T1 WHERE NOT EXISTS (SELECT T2.Make FROM driver AS T2 WHERE T2.Make = T1.Make GROUP BY T2.Make HAVING AVG(T2.Laps) > 100)",
        "question": "Which teams' cars have drivers with an average of 100 laps or less?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "car_racing"
    },
    {
        "query": "SELECT T1.Country, COUNT(T1.Country_Id) FROM country AS T1 WHERE T1.Country_Id < 5 GROUP BY T1.Country HAVING COUNT(T1.Country_Id) > 1",
        "question": "Which countries have more than one country id less than 5?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_racing"
    },
    {
        "query": "SELECT d.Country FROM driver d WHERE NOT EXISTS (SELECT 1 FROM team_driver td WHERE td.Driver_ID = d.Driver_ID)",
        "question": "Which countries are the drivers from who are not part of any team?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "car_racing"
    },
    {
        "query": "SELECT T1.Country, T2.Team, T3.Driver FROM country AS T1 JOIN team_driver AS T2 ON T1.Country_Id = T2.Team_ID JOIN driver AS T3 ON T3.Country = T2.Driver_ID WHERE T3.Age >= 25",
        "question": "What are the countries, teams, and drivers of drivers aged 25 and above?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "car_racing"
    },
    {
        "query": "SELECT Driver FROM driver WHERE Country NOT IN (SELECT Country_Id FROM country WHERE Capital = 'City') LIMIT 100",
        "question": "What are the names of the 100 drivers from countries whose capitals are not 'City', excluding the first 100 results?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_racing"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Driver_ID) FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.Make = 'Ford' AND T2.Driver_ID BETWEEN 1 AND 10 AND NOT EXISTS (SELECT 1 FROM driver WHERE driver.Driver_ID = T2.Driver_ID AND driver.Age > 30) ORDER BY T1.Team_ID DESC",
        "question": "What is the count of distinct drivers under 30 years old driving for teams with a Ford make, with driver IDs between 1 and 10, ordered by team ID in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_racing"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Make) FROM team AS T1 LEFT JOIN driver AS T2 ON T1.Team_ID = T2.Driver_ID WHERE T1.Team_ID NOT IN (SELECT T3.Team_ID FROM team_driver AS T3)",
        "question": "How many different car makes are there among the teams that have not participated in any team driver event?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_racing"
    },
    {
        "query": "SELECT T1.Country FROM country AS T1 WHERE T1.Official_native_language = 'English'",
        "question": "Which countries have English as an official native language?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "car_racing"
    },
    {
        "query": "SELECT Name, Crime_rate FROM county_public_safety WHERE Crime_rate > 100 ORDER BY Crime_rate DESC LIMIT 10",
        "question": "What are the names and crime rates of the 11th to 20th counties with the highest crime rates?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "county_public_safety"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.City_ID) FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID = T2.County_ID WHERE T1.Population > 10000 GROUP BY T1.Name ORDER BY COUNT(T2.City_ID) DESC LIMIT 5",
        "question": "What are the names of the 6-10 counties with the most cities, among counties with a population over 10,000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "county_public_safety"
    },
    {
        "query": "SELECT T1.Name FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID = T2.County_ID WHERE T1.Police_officers BETWEEN 100 AND 1000 AND T1.Crime_rate > 0.5 AND EXISTS (SELECT 1 FROM city WHERE city.County_ID = T1.County_ID)",
        "question": "What are the names of the county public safety departments with police officers between 100 and 1000, a crime rate above 0.5, and located in a county with at least one city?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "county_public_safety"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID = T2.County_ID JOIN county_public_safety AS T3 ON T2.County_ID = T3.County_ID WHERE T1.Name != 'USA'",
        "question": "What are the names of county public safety entities and cities in the same county where the county public safety entity name is not 'USA'?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "county_public_safety"
    },
    {
        "query": "SELECT T1.Name, T2.Name, T3.White FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID = T2.County_ID JOIN city AS T3 ON T2.County_ID = T3.County_ID WHERE T1.County_ID NOT IN (SELECT County_ID FROM city) ORDER BY T1.Name ASC LIMIT 10",
        "question": "What are the names of the next 10 county public safety entities and corresponding city names and white population percentages, excluding county public safety entities that have a corresponding city, listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "county_public_safety"
    },
    {
        "query": "SELECT Name FROM county_public_safety WHERE Residents_per_officer <= 1000",
        "question": "What are the names of the county public safety departments with 1000 or fewer residents per police officer?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "county_public_safety"
    },
    {
        "query": "SELECT Name, Police_officers FROM county_public_safety WHERE Crime_rate > 50 AND Police_officers BETWEEN 100 AND 200 OR Residents_per_officer IN (SELECT MAX(Residents_per_officer) FROM county_public_safety) ORDER BY Police_officers ASC",
        "question": "What are the names and number of police officers of counties with a crime rate greater than 50 and either between 100 and 200 police officers, or the highest residents per officer, listed in ascending order of police officers?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "county_public_safety"
    },
    {
        "query": "SELECT Name FROM county_public_safety WHERE Police_officers != 0",
        "question": "What are the names of the counties with police officers?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "county_public_safety"
    },
    {
        "query": "SELECT MIN(Police_officers), MAX(Crime_rate) FROM county_public_safety WHERE Residents_per_officer > 100 ORDER BY Police_officers ASC LIMIT 10",
        "question": "What is the minimum number of police officers and maximum crime rate in the next 10 counties with the lowest number of police officers where there are more than 100 residents per officer?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "county_public_safety"
    },
    {
        "query": "SELECT T1.Name, T2.Population FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T2.County_ID IN (SELECT County_ID FROM county_public_safety WHERE Population > 100000) ORDER BY T2.Population DESC",
        "question": "What are the names of cities and their corresponding county populations in descending order for counties with a population greater than 100,000?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "county_public_safety"
    },
    {
        "query": "SELECT COUNT(Film_ID), SUM(Rank_in_series) FROM film WHERE Title != 'Batman'",
        "question": "What is the count of films and the total rank in series of all films that are not 'Batman'?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cinema"
    },
    {
        "query": "SELECT Title, Production_code FROM film WHERE Title NOT IN (SELECT Title FROM film WHERE Original_air_date = '2000')",
        "question": "What are the titles and production codes of the films that did not first air in the year 2000?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "cinema"
    },
    {
        "query": "SELECT T1.Cinema_ID FROM cinema AS T1 JOIN schedule AS T2 ON T1.Cinema_ID = T2.Cinema_ID WHERE EXISTS ( SELECT 1 FROM film AS T3 WHERE T2.Film_ID = T3.Film_ID AND T3.Number_in_season = 5 ) LIMIT 10",
        "question": "What are the ids of the 11th to 20th cinemas that have shown a film which was the 5th in its season?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "cinema"
    },
    {
        "query": "SELECT T3.Title, SUM(T1.Show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.Cinema_ID = T2.Cinema_ID JOIN film AS T3 ON T1.Film_ID = T3.Film_ID WHERE T3.Title != 'Movie1'",
        "question": "What are the titles of movies other than 'Movie1' and their total daily showtimes in cinemas?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "cinema"
    },
    {
        "query": "SELECT T1.Title FROM film AS T1 JOIN schedule AS T2 ON T1.Film_ID = T2.Film_ID WHERE T1.Rank_in_series <= 5",
        "question": "What are the titles of the films that are ranked 5 or lower in their series and are scheduled to be shown in a cinema?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "cinema"
    },
    {
        "query": "SELECT Title, Directed_by FROM film AS myTable ORDER BY Rank_in_series ASC LIMIT 10",
        "question": "What are the titles and directors of the next 10 films in a series, after the first 10, in order of their rank?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cinema"
    },
    {
        "query": "SELECT Title FROM film WHERE Film_ID IN (SELECT Film_ID FROM schedule WHERE Price BETWEEN 5 AND 10) OR Number_in_season NOT IN (SELECT Number_in_season FROM film WHERE Rank_in_series > 5) ORDER BY Film_ID DESC LIMIT 10",
        "question": "What are the titles of the next 10 films with ids in descending order, which are either scheduled at a price between 5 and 10, or have a season number not among the films with a series rank greater than 5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cinema"
    },
    {
        "query": "SELECT * FROM film WHERE Rank_in_series = 1 OR Number_in_season = 3 OR Film_ID NOT IN (SELECT Film_ID FROM schedule WHERE Date = '2020-01-01')",
        "question": "What are the details of the films that are either the first in their series, or the third in their season, or not scheduled to play on '2020-01-01'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cinema"
    },
    {
        "query": "SELECT T1.Title, T2.Title FROM film AS T1 JOIN film AS T2 ON T1.Rank_in_series != T2.Rank_in_series GROUP BY T1.Title",
        "question": "What are the titles of film pairs that have different ranks in a series?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cinema"
    },
    {
        "query": "SELECT T1.Title, AVG(T3.Price) FROM film AS T1 JOIN schedule AS T3 ON T1.Film_ID = T3.Film_ID WHERE T3.Show_times_per_day < 10 ORDER BY T3.Price ASC",
        "question": "What are the movie titles and their average prices per show when shown less than 10 times a day, listed from lowest price to highest?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "cinema"
    },
    {
        "query": "SELECT MAX(Number_in_season), MIN(Rank_in_series), AVG(Production_code) FROM film ORDER BY Title ASC",
        "question": "What are the maximum number in season, minimum rank in series, and average production code of all films listed in ascending order by title?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cinema"
    },
    {
        "query": "SELECT Title, COUNT(DISTINCT Film_ID) FROM film WHERE Rank_in_series BETWEEN 1 AND 5",
        "question": "What are the titles of films and the number of distinct films with a rank in series between 1 and 5?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cinema"
    },
    {
        "query": "SELECT Title, COUNT(Film_ID) FROM film GROUP BY Title HAVING COUNT(Film_ID) > 1 ORDER BY Title DESC LIMIT 1",
        "question": "What is the second title with the most film entries in the film table?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "cinema"
    },
    {
        "query": "SELECT T1.Film_ID FROM film AS T1 JOIN film AS T2 ON T1.Directed_by = T2.Directed_by WHERE T1.Rank_in_series > 5 AND T1.Rank_in_series < 10 AND T1.Number_in_season = (SELECT MAX(Number_in_season) FROM film)",
        "question": "What are the film ids of films directed by the same director, with a rank in series between 5 and 10 and the maximum number in season?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cinema"
    },
    {
        "query": "SELECT AVG(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Rank_in_series <= 5 LIMIT 10",
        "question": "What is the average price of films ranked 5 or lower in the series, considering only the 11th to 20th results?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "cinema"
    },
    {
        "query": "SELECT Title FROM film WHERE Original_air_date BETWEEN '2010-01-01' AND '2015-12-31' OR Rank_in_series > 2 OR Number_in_season = 1 ORDER BY Production_code ASC",
        "question": "What are the titles of the films that were originally aired between 2010 and 2015, or have a rank in series greater than 2, or are the first in the season, listed in ascending order of production code?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cinema"
    },
    {
        "query": "SELECT Title, AVG(Number_in_season) FROM film WHERE Rank_in_series > 5 GROUP BY Title",
        "question": "What is the average number in season for each film title where the rank in series is greater than 5?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "cinema"
    },
    {
        "query": "SELECT Film_ID FROM film WHERE Rank_in_series < 5",
        "question": "What are the film IDs of films with a rank in series less than 5?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cinema"
    },
    {
        "query": "SELECT T1.Title FROM film AS T1 JOIN schedule AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Show_times_per_day > 5 OR T1.Rank_in_series BETWEEN 1 AND 10 AND T1.Title NOT IN (SELECT T1.Title FROM film AS T1 JOIN schedule AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Show_times_per_day < 5) ORDER BY T2.Price ASC",
        "question": "What are the titles of the films shown more than five times a day, or ranked between one and ten in their series and shown at least five times a day, listed in order of increasing price?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "cinema"
    },
    {
        "query": "SELECT T1.Title FROM film AS T1 WHERE T1.Title = 'Film Title' ORDER BY T1.Rank_in_series DESC",
        "question": "What is the film title with the highest rank in a series with the title 'Film Title'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cinema"
    },
    {
        "query": "SELECT AVG(T1.dock_count), AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.docks_available <= 10 ORDER BY T1.dock_count DESC",
        "question": "What are the average dock count, latitude, and longitude of the stations with the most docks that have 10 or fewer docks available, listed in descending order by dock count?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT T1.name, T1.lat FROM station AS T1 WHERE T1.installation_date BETWEEN '2014-01-01' AND '2014-12-31' AND T1.city = 'San Francisco'",
        "question": "What are the names and latitude values of the stations installed in San Francisco in the year 2014?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name), COUNT(T1.dock_count) FROM station AS T1 WHERE NOT EXISTS (SELECT T2.events FROM weather AS T2 WHERE T1.city = T2.zip_code)",
        "question": "How many distinct station names and total dock counts are in cities with no weather records?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT T1.name, T2.bikes_available FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id JOIN trip AS T3 ON T1.id = T3.start_station_id WHERE T3.duration BETWEEN 100 AND 200 ORDER BY T1.name ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th stations with the number of bikes available, for stations where trip durations range from 100 to 200 seconds, listed in ascending order by station name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT city, name FROM station",
        "question": "What are the cities and names of all the stations?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT name FROM station WHERE city = 'San Francisco' OR dock_count BETWEEN 10 AND 50 OR lat > 37.75",
        "question": "What are the names of the stations in San Francisco or with dock counts between 10 and 50, or with latitudes greater than 37.75?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT s.name, t.duration, w.mean_temperature_f FROM station AS s JOIN status AS st ON s.id = st.station_id JOIN trip AS t ON s.name = t.start_station_name JOIN weather AS w ON w.zip_code = s.city WHERE w.mean_temperature_f != 50 LIMIT 10",
        "question": "What are the names of the stations, trip durations, and mean temperatures for the cities with a mean temperature other than 50 degrees, listed from the 11th to the 20th entry?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT start_station_name, AVG(duration) FROM trip WHERE start_date BETWEEN '2018-01-01' AND '2018-01-31' AND subscription_type = 'Subscriber' GROUP BY start_station_name ORDER BY AVG(duration) ASC LIMIT 10",
        "question": "What are the next 10 start stations with the shortest average trip duration for subscribers in January 2018?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT T1.name, T1.dock_count FROM station AS T1 WHERE T1.lat BETWEEN 37.75 AND 37.8 AND T1.long > -122.4 AND T1.dock_count > 50 ORDER BY T1.dock_count DESC",
        "question": "What are the names and dock counts of stations located between latitude 37.75 and 37.8, and longitude greater than -122.4, with more than 50 docks, listed in order of dock count in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT T1.city FROM station AS T1 WHERE T1.lat BETWEEN 30 AND 40",
        "question": "Which cities have a latitude between 30 and 40?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT T1.id, T1.name FROM station AS T1 WHERE T1.lat <= 37.75 ORDER BY T1.name ASC LIMIT 10",
        "question": "What are the names and IDs of the stations with latitude below or equal to 37.75, listed in ascending order by name, from the 11th to the 20th station?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT T1.name FROM station AS T1 JOIN station AS T2 ON T1.id = T2.id WHERE EXISTS (SELECT T3.name FROM station AS T3 WHERE T3.name = T1.name AND T3.lat > T2.lat) ORDER BY T1.name DESC",
        "question": "What are the names of the stations that have a station with the same name but at a higher latitude, listed in descending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.lat) FROM station AS T1 WHERE NOT EXISTS (SELECT T2.docks_available FROM status AS T2 WHERE T2.station_id = T1.id AND T2.docks_available < 10)",
        "question": "How many distinct latitude values are there for stations that always have at least 10 docks available?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name) FROM station AS T1 WHERE T1.lat > 37.75 ORDER BY T1.dock_count DESC",
        "question": "How many distinct station names are there for stations with a latitude greater than 37.75, listed in order of dock count in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > ( SELECT AVG(bikes_available) FROM status ) ORDER BY T1.name DESC",
        "question": "What are the names of the stations with more than average available bikes, listed in descending alphabetical order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT AVG(T1.dock_count) FROM station AS T1 LEFT JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.installation_date BETWEEN '2010-01-01' AND '2015-01-01' OR T2.bikes_available > 50",
        "question": "What is the average dock count of the stations installed between 2010 and 2015 or having more than 50 bikes available?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "bike_1"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM museum AS T1 JOIN museum AS T2 ON T1.Museum_ID < T2.Museum_ID LIMIT 10",
        "question": "What are the names of the first 10 pairs of museums, where the first museum in each pair has a smaller museum id than the second museum?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "museum_visit"
    },
    {
        "query": "SELECT COUNT(Museum_ID), SUM(Num_of_Staff) FROM museum LIMIT 10",
        "question": "What are the total number of museums and total staff count for museums ranked 11th to 20th?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "museum_visit"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Num_of_Ticket) FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Num_of_Staff < 50 GROUP BY T1.Name LIMIT 10",
        "question": "What are the names of the next 10 museums with less than 50 staff members and the total tickets sold for each museum?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "museum_visit"
    },
    {
        "query": "SELECT T1.Name, MIN(T3.Total_spent) FROM museum AS T1 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID GROUP BY T1.Name",
        "question": "What is the name of the museum and the minimum amount spent by visitors at each museum?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "museum_visit"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Num_of_Ticket) FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID",
        "question": "What is the name of each museum and the total number of tickets sold for each museum?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "museum_visit"
    },
    {
        "query": "SELECT T1.Name, MIN(T1.Num_of_Staff) FROM museum AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE NOT EXISTS (SELECT 1 FROM visit WHERE visit.Museum_ID = T1.Museum_ID) GROUP BY T1.Name ORDER BY T1.Num_of_Staff DESC",
        "question": "What are the names of the museums that have not been visited, listed in descending order of their staff numbers, along with their minimum staff numbers?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "museum_visit"
    },
    {
        "query": "SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Museum_ID IN (SELECT T2.Museum_ID FROM visit AS T2 GROUP BY T2.Museum_ID HAVING SUM(T2.Total_spent) > 10000)",
        "question": "What are the names of the museums where the total amount spent by all visitors is greater than $10,000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "museum_visit"
    },
    {
        "query": "SELECT COUNT(Museum_ID), SUM(Num_of_Staff), COUNT(Open_Year) FROM museum",
        "question": "What are the total number of museums, the total number of staff, and the number of museums with an opening year?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "museum_visit"
    },
    {
        "query": "SELECT Museum_ID FROM museum WHERE EXISTS (SELECT 1 FROM visit WHERE museum.Museum_ID = visit.Museum_ID AND Total_spent > 100 LIMIT 1)",
        "question": "What are the museum IDs of museums where at least one visitor has spent more than 100?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "museum_visit"
    },
    {
        "query": "SELECT T1.Name FROM (SELECT Name, Museum_ID FROM museum WHERE Museum_ID IN (SELECT Museum_ID FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership > 2))) AS T1 ORDER BY T1.Name ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th museums visited by visitors with a membership level higher than 2, listed alphabetically?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "museum_visit"
    },
    {
        "query": "SELECT T1.name, T2.name FROM author AS T1 JOIN author AS T2 ON T1.aid = T2.oid WHERE T1.oid <= 10",
        "question": "What are the names of authors who collaborated with authors whose organization id is less than or equal to 10?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "academic"
    },
    {
        "query": "SELECT COUNT(pid), title FROM publication WHERE (cid BETWEEN 10 AND 20 OR citation_num = 100) AND (jid > 50 OR year BETWEEN 1990 AND 2000) GROUP BY title",
        "question": "What is the count of publications for each title that has a conference id between 10 and 20 or a citation number of 100, and also has a journal id greater than 50 or was published between 1990 and 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "academic"
    },
    {
        "query": "SELECT * FROM publication WHERE YEAR BETWEEN 2010 AND 2020 AND citation_num > 100",
        "question": "What are the details of publications with more than 100 citations that were published between 2010 and 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "academic"
    },
    {
        "query": "SELECT COUNT(T1.aid) FROM author AS T1 JOIN writes AS T2 ON T1.aid = T2.aid WHERE T1.name != 'John'",
        "question": "How many authors are there excluding the author named John?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "academic"
    },
    {
        "query": "SELECT COUNT(T1.cid) FROM conference AS T1 JOIN publication AS T2 ON T1.cid = T2.cid WHERE T1.cid = 10 OR T2.year BETWEEN 2000 AND 2010 OR T2.citation_num > 100 ORDER BY T1.cid DESC LIMIT 10",
        "question": "What is the number of conferences with id 10 or publications between 2000 and 2010 or more than 100 citations, listed in descending order of conference id, from the 11th to the 20th?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "academic"
    },
    {
        "query": "SELECT T1.name, COUNT(DISTINCT T2.kid) FROM domain AS T1 JOIN domain_keyword AS T2 ON T1.did = T2.did WHERE T2.kid BETWEEN 10 AND 20 OR T1.name = 'Computer Science' OR T2.kid IN (SELECT kid FROM keyword WHERE keyword = 'AI') GROUP BY T1.name HAVING AVG(T2.did) > 5 ORDER BY T1.name ASC",
        "question": "For each domain, what is the number of unique keywords associated with it, given that the keyword id is between 10 and 20, or the domain name is 'Computer Science', or the keyword is 'AI', and the average domain id is greater than 5, sorted by domain name in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "academic"
    },
    {
        "query": "SELECT * FROM publication WHERE pid = ( SELECT T2.pid FROM writes AS T1 JOIN publication AS T2 ON T1.pid = T2.pid WHERE T1.aid = 123 )",
        "question": "What are the details of the publications written by author with aid 123?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "academic"
    },
    {
        "query": "SELECT COUNT(citation_num), COUNT(reference_num) FROM publication WHERE citation_num <= 100 AND reference_num <= 100 LIMIT 10",
        "question": "What are the counts of citation numbers and reference numbers for the top 10 publications with less than or equal to 100 citations and 100 references?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "academic"
    },
    {
        "query": "SELECT T1.aid, T1.name FROM author AS T1 WHERE T1.oid NOT IN (SELECT T2.oid FROM organization AS T2 WHERE T2.continent = 'Asia') ORDER BY T1.aid ASC LIMIT 100",
        "question": "What are the names and IDs of authors affiliated with organizations outside of Asia, listed in ascending order of author ID, from the 101st to the 200th author?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "academic"
    },
    {
        "query": "SELECT T1.oid, T1.homepage FROM organization AS T1 WHERE T1.name IN (SELECT T2.name FROM organization AS T2 WHERE T2.continent = 'Asia')",
        "question": "What are the homepages and ids of organizations that have the same name as an organization in Asia?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "academic"
    },
    {
        "query": "SELECT T2.title, AVG(T1.reference_num) FROM publication AS T1 JOIN publication AS T2 ON T1.pid = T2.pid WHERE T1.year = 2020 GROUP BY T2.title",
        "question": "What are the titles of publications from 2020 and their average number of references?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "academic"
    },
    {
        "query": "SELECT COUNT(title), MAX(abstract), MIN(citation_num) FROM publication WHERE year <= 2000",
        "question": "What are the count of titles, maximum abstract, and minimum citation number for publications published before or in the year 2000?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "academic"
    },
    {
        "query": "SELECT name FROM author WHERE aid <= 10 ORDER BY aid ASC LIMIT 5",
        "question": "What are the names of authors with aid greater than or equal to 6 and less than or equal to 10, listed in ascending order of aid?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "academic"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM stadium AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Capacity >= 10000",
        "question": "What are the names of stadiums with a capacity of 10000 or more, paired with themselves?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2020')",
        "question": "What are the names of the stadiums that did not host any concerts in the year 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.concert_Name), COUNT(T1.Stadium_ID), T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Average > 10000 OR T1.Name = 'Stadium1' OR NOT EXISTS (SELECT 1 FROM singer_in_concert AS T3 WHERE T3.concert_ID = T2.concert_ID)",
        "question": "How many distinct concerts, total concerts, and what locations are there for concerts held in stadiums with average attendance over 10,000 or named 'Stadium1' and without any singers attending?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT COUNT(DISTINCT c.concert_Name) , AVG(s.Capacity) FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE s.Average BETWEEN 1000 AND 10000 OR s.Capacity > 50000 OR s.Location = 'New York'",
        "question": "What is the number of unique concert names and the average capacity of stadiums with an average attendance between 1000 and 10000, or a capacity greater than 50000, or located in New York?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT T1.Name AS stadium_name FROM ( SELECT Name, Capacity FROM stadium ) AS T1 WHERE T1.Capacity >= 50000 ORDER BY T1.Name ASC",
        "question": "What are the names of the stadiums with a capacity of at least 50000, listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.concert_ID), T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Capacity > 50000 AND T2.Year BETWEEN 2010 AND 2020 AND T2.Theme = 'Music'",
        "question": "What is the number of distinct concerts and the capacity of stadiums with a capacity greater than 50000 that hosted music concerts between 2010 and 2020?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT T2.Name, COUNT(T1.concert_ID) AS count_concert_ID FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Name != 'Stadium1' GROUP BY T2.Name ORDER BY count_concert_ID DESC",
        "question": "What are the names of all stadiums except Stadium1, along with the number of concerts they have hosted, listed in descending order by the number of concerts?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT Name FROM stadium",
        "question": "What are the names of the stadiums?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT COUNT(T1.Stadium_ID), COUNT(DISTINCT T1.concert_ID) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T2.Singer_ID <= 10 LIMIT 5",
        "question": "What are the counts of stadiums and distinct concerts where singers with ID 10 or less performed, excluding the first 5 results?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT DISTINCT T1.concert_Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T2.Singer_ID IN (SELECT Singer_ID FROM singer WHERE Age > 25)",
        "question": "What are the names of concerts performed by singers older than 25 years old?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT Location FROM stadium WHERE Capacity BETWEEN 10000 AND 50000 OR  Average > 30000 OR Name = 'Stadium1'",
        "question": "What are the locations of the stadiums with a capacity between 10,000 and 50,000 or an average attendance greater than 30,000 or named 'Stadium1'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT Name FROM stadium WHERE Location != 'USA' ORDER BY Capacity DESC",
        "question": "What are the names of the stadiums outside of the USA, listed in order of their capacity from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT T1.concert_Name, COUNT(T2.Singer_ID) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T2.Singer_ID = 1 OR T2.Singer_ID IN (SELECT Singer_ID FROM singer WHERE Country = 'USA')",
        "question": "What are the names of concerts that feature singer 1 or singers from the USA, and how many singers from the USA perform in these concerts?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT T1.Location, T1.Name FROM stadium AS T1 WHERE T1.Capacity BETWEEN 50000 AND 100000 OR T1.Name = 'Stadium 1' OR EXISTS ( SELECT 1 FROM concert AS T2 WHERE T2.concert_Name = 'Concert 1' AND T2.Stadium_ID = T1.Stadium_ID ) LIMIT 10",
        "question": "What are the locations and names of the next 10 stadiums with capacities between 50,000 and 100,000, or named 'Stadium 1', or that have hosted 'Concert 1'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "concert_singer"
    },
    {
        "query": "SELECT T1.first_name, T1.last_name FROM Staff AS T1 WHERE T1.gender = 'Male' OR T1.email_address IN (SELECT T2.email_address FROM Customers AS T2) AND T1.staff_id BETWEEN 100 AND 200",
        "question": "What are the names of male staff members or staff members with email addresses that are also found in the customers list, with staff IDs between 100 and 200?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_complaints"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.staff_id), COUNT(T2.staff_id) FROM Staff AS T1 JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_complaint_raised < '2020-01-01'",
        "question": "How many unique staff members and total staff complaints were there before 2020?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_complaints"
    },
    {
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id WHERE T2.date_complaint_raised >= '2020-01-01' LIMIT 5",
        "question": "What are the names of the next 5 products that received complaints on or after January 1st, 2020?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "customer_complaints"
    },
    {
        "query": "SELECT COUNT(product_id) FROM Products WHERE product_price < 100 ORDER BY product_id ASC",
        "question": "How many products cost less than $100, listed in ascending order by product ID?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "customer_complaints"
    },
    {
        "query": "SELECT T1.staff_id FROM Staff AS T1 JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id WHERE T2.complaint_id BETWEEN 100 AND 200 OR T2.product_id IN (SELECT product_id FROM Products WHERE product_price > 100) OR T1.gender = 'Male'",
        "question": "What are the staff ids of staff members who are male or have handled complaints with ids between 100 and 200, or have handled complaints related to products with prices greater than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_complaints"
    },
    {
        "query": "SELECT product_id FROM Products WHERE product_price BETWEEN 10 AND 20",
        "question": "What are the product ids of products with a price between $10 and $20?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "customer_complaints"
    },
    {
        "query": "SELECT first_name FROM Staff WHERE EXISTS (SELECT 1 FROM Complaints WHERE Complaints.staff_id = Staff.staff_id AND Complaints.customer_id = 100 AND Complaints.product_id BETWEEN 100 AND 200)",
        "question": "What are the first names of staff members who handled complaints from customer 100 regarding products with IDs between 100 and 200?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customer_complaints"
    },
    {
        "query": "SELECT COUNT(DISTINCT staff_id), COUNT(DISTINCT gender), COUNT(DISTINCT first_name) FROM Staff WHERE staff_id = 1",
        "question": "What are the counts of distinct staff id, gender, and first name for staff with id 1?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "customer_complaints"
    },
    {
        "query": "SELECT COUNT(staff_id) FROM Staff WHERE gender != 'M' ORDER BY staff_id DESC LIMIT 1",
        "question": "What is the number of female staff members, excluding the one with the highest staff id?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "customer_complaints"
    },
    {
        "query": "SELECT T1.staff_id FROM Staff T1 JOIN Complaints T2 ON T1.staff_id = T2.staff_id JOIN Products T3 ON T2.product_id = T3.product_id JOIN Customers T4 ON T2.customer_id = T4.customer_id WHERE T2.product_id NOT IN ( SELECT product_id FROM Complaints WHERE product_id = 100) ORDER BY T1.staff_id ASC",
        "question": "What are the staff ids of staff who handled complaints, excluding those who handled a complaint with product id 100, listed in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_complaints"
    },
    {
        "query": "SELECT T3.Player, COUNT(DISTINCT T1.id) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T3.Player HAVING AVG(T2.Season) > 10 ORDER BY T3.Player ASC",
        "question": "Which players have played in stadiums with an average season number greater than 10 and how many distinct stadium matches have they played in, listed by player in ascending order?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT MAX(T1.Capacity_Percentage), T2.Date FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id WHERE T1.Home_Games > 10 AND T2.Date BETWEEN '2020-01-01' AND '2020-12-31' AND T2.Season = 2020",
        "question": "What was the maximum capacity percentage of stadiums hosting more than 10 home games in the 2020 season, along with the corresponding date?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT SUM(Total_Attendance) FROM stadium WHERE Average_Attendance < 10000",
        "question": "What is the total attendance in stadiums with average attendance less than 10,000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT T1.name FROM stadium AS T1 WHERE T1.name = 'Stadium_1'",
        "question": "What is the name of the stadium which is named 'Stadium_1'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT name FROM stadium WHERE Total_Attendance > 10000",
        "question": "What are the names of the stadiums with a total attendance greater than 10000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name) , COUNT(DISTINCT T2.Home_team), T3.Player FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T1.Capacity_Percentage > 90 OR T2.Season BETWEEN 2015 AND 2018 OR T3.Injury = 'Hamstring' ORDER BY T1.Capacity_Percentage DESC",
        "question": "How many distinct stadium names, home teams, and players are associated with games played in stadiums with a capacity percentage greater than 90, or games played between 2015 and 2018, or games where a player suffered a hamstring injury, ordered by capacity percentage in descending order?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT Home_team FROM game WHERE Home_team >= 'A'",
        "question": "Which home teams in the game start with the letter 'A' or later in the alphabet?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT T1.Name, T2.id FROM stadium AS T1 JOIN stadium AS T2 ON T1.id = T2.id WHERE T1.Average_Attendance BETWEEN 10000 AND 20000 ORDER BY T1.id ASC LIMIT 10",
        "question": "What are the names and ids of the 11th to 20th stadiums with an average attendance between 10,000 and 20,000, listed in ascending order by id?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT s.name, g.Date FROM stadium AS s JOIN game AS g ON s.id = g.stadium_id WHERE s.id = 1 AND g.id IN (SELECT id FROM game WHERE Season = 2020) ORDER BY g.Date ASC",
        "question": "What is the name of the stadium with id 1 and what are the dates of its games in the 2020 season, listed in chronological order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT T1.id FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id WHERE T1.Average_Attendance = 10000 AND T2.Score = '1-0' AND EXISTS (SELECT 1 FROM injury_accident AS T3 WHERE T3.game_id = T2.id)",
        "question": "What are the stadium ids where the average attendance is 10000, the game score is 1-0, and there is at least one injury or accident recorded in that game?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT T1.name, MAX(T1.Capacity_Percentage) FROM stadium AS T1 WHERE EXISTS (SELECT 1 FROM game AS T2 WHERE T2.stadium_id = T1.id) GROUP BY T1.name ORDER BY T1.name ASC",
        "question": "What are the names of stadiums that have hosted games, listed in ascending order along with their highest capacity percentages?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT T1.name, T2.Score FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id WHERE T2.Competition = 'La Liga'",
        "question": "What are the names of the stadiums and the scores of the games played in La Liga?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "game_injury"
    },
    {
        "query": "SELECT T1.title FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE EXISTS (SELECT 1 FROM Sculptures AS T3 WHERE T3.title = T1.title)",
        "question": "What are the titles of the paintings that have the same title as some sculpture?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "art_1"
    },
    {
        "query": "SELECT painterID, COUNT(paintingID) FROM Paintings WHERE painterID NOT IN ( SELECT sculptorID FROM Sculptures ) LIMIT 10",
        "question": "Which 10 painters, who are not sculptors, have the most paintings?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "art_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.painterID) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year > 1900 OR T1.lname = 'Picasso' OR EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = T1.artistID)",
        "question": "How many unique painters are there who either created a painting after 1900, have the last name 'Picasso', or have created a sculpture?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "art_1"
    },
    {
        "query": "SELECT COUNT(paintingID) FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.lname = 'Wong'",
        "question": "How many paintings were created by the artist with the last name 'Wong'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "art_1"
    },
    {
        "query": "SELECT T1.artistID, COUNT(T2.paintingID), COUNT(T3.sculptureID) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID WHERE T2.title != T3.title LIMIT 10",
        "question": "What are the IDs of artists who created both paintings and sculptures with different titles, along with the number of paintings and sculptures they created, for the 11th to 20th results?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "art_1"
    },
    {
        "query": "SELECT T1.lname, T2.title FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'John' AND EXISTS (SELECT 1 FROM Sculptures AS T3 WHERE T3.sculptorID = T1.artistID AND T3.title = 'David')",
        "question": "What are the last names of artists named John who have created a sculpture titled 'David' and what are the titles of their paintings?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "art_1"
    },
    {
        "query": "SELECT T2.lname FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.title != 'My Title'",
        "question": "What are the last names of artists who created paintings with titles other than 'My Title'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "art_1"
    },
    {
        "query": "SELECT T1.lname, COUNT(T2.title) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.birthYear > 1800 GROUP BY T1.lname ORDER BY T1.lname ASC",
        "question": "For each artist born after 1800, what is their last name and the total number of paintings they have created, listed in ascending order by last name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "art_1"
    },
    {
        "query": "SELECT lname FROM Artists WHERE fname = 'John' AND birthYear > (SELECT MIN(year) FROM Paintings) ORDER BY lname ASC LIMIT 10",
        "question": "What are the last names of the 11th to 20th artists named John who were born after the earliest known painting year, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "art_1"
    },
    {
        "query": "SELECT COUNT(*) FROM Artists WHERE birthYear < 1900",
        "question": "How many artists were born before 1900?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "art_1"
    },
    {
        "query": "SELECT COUNT(paintingID) FROM Paintings WHERE painterID != 100 LIMIT 10",
        "question": "What is the number of paintings not created by the artist with ID 100, from the 11th to the 20th in the overall list?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "art_1"
    },
    {
        "query": "SELECT T1.fname, T1.lname FROM Artists AS T1 WHERE T1.birthYear > 1850 AND T1.artistID IN (SELECT T2.painterID FROM Paintings AS T2 WHERE T2.year > 1900) AND T1.lname = 'Monet'",
        "question": "What are the first and last names of artists with the last name Monet who were born after 1850 and painted after 1900?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "art_1"
    },
    {
        "query": "SELECT T1.lname, T1.fname, MAX(T2.year), MIN(T2.year) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.title = 'The Night Watch' ORDER BY T1.lname ASC",
        "question": "Who painted 'The Night Watch' and what are the earliest and latest years they painted it, listed alphabetically by last name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "art_1"
    },
    {
        "query": "SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID LIMIT 10",
        "question": "What are the first names and last names of the 11th to 20th artists who have created both paintings and sculptures?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "art_1"
    },
    {
        "query": "SELECT lname FROM Artists WHERE birthYear != 1850 ORDER BY deathYear DESC LIMIT 10",
        "question": "What are the last names of the 11th to 20th artists by death year, excluding those born in 1850?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "art_1"
    },
    {
        "query": "SELECT T1.lname, T2.fname FROM Artists AS T1 JOIN Artists AS T2 ON T1.artistID = T2.artistID WHERE T1.lname = T2.fname ORDER BY T1.lname DESC",
        "question": "What are the pairs of last names and first names of artists where the last name matches the first name, listed in descending order by last name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "art_1"
    },
    {
        "query": "SELECT A.fname, A.lname, P.title FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.year BETWEEN 1600 AND 1800 AND EXISTS (SELECT 1 FROM Sculptures S WHERE S.sculptorID = A.artistID AND S.year > 1600) LIMIT 10",
        "question": "What are the names and painting titles of artists who created paintings between 1600 and 1800 and also created sculptures after 1600, listed from the 11th to the 20th result?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "art_1"
    },
    {
        "query": "SELECT COUNT(ID) FROM city_channel WHERE Owned_Since <= 30 LIMIT 10",
        "question": "What is the count of the 11th to 20th city channels that have been owned for 30 or fewer years?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT COUNT(DISTINCT Owned_Since) FROM city_channel WHERE Owned_Since >= 2000",
        "question": "How many different years since 2000 have city channels been owned?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT Station_name, City, COUNT(ID) FROM city_channel WHERE City >= 'Dublin' GROUP BY Station_name, City",
        "question": "How many city channels are there for each station name and city that starts with 'Dublin' or comes after it alphabetically?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT T1.City, T2.City FROM city_channel AS T1 JOIN city_channel AS T2 ON T1.ID = T2.ID WHERE T1.Owned_Since > T2.Owned_Since ORDER BY T1.City DESC",
        "question": "What are the pairs of cities with the same ID where one city was owned since a later date than the other, listed in descending order by city?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT City, Station_name FROM city_channel",
        "question": "What are the cities and station names of city channels?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT City FROM city_channel WHERE City > 'Dublin'",
        "question": "What cities come after Dublin?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT COUNT(ID) FROM city_channel AS T1 WHERE Owned_Since BETWEEN 1950 AND 1960",
        "question": "How many city channels were owned between 1950 and 1960?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT T1.City, COUNT(T2.Radio_ID) FROM city_channel AS T1 JOIN city_channel_radio AS T2 ON T1.ID = T2.City_channel_ID WHERE T1.Owned_Since BETWEEN 1900 AND 2000",
        "question": "In what cities are there radio stations affiliated with city channels that were owned between 1900 and 2000, and how many radio stations are there in each city?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT T1.City, T2.Radio_MHz FROM city_channel AS T1 JOIN city_channel_radio AS T3 ON T1.ID = T3.City_channel_ID JOIN radio AS T2 ON T3.Radio_ID = T2.Radio_ID WHERE T2.Radio_MHz BETWEEN 1 AND 10",
        "question": "What are the cities and their corresponding radio frequencies in MHz between 1 and 10?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT T1.City, COUNT(T2.Radio_ID) FROM city_channel AS T1 JOIN city_channel_radio AS T2 ON T1.ID = T2.City_channel_ID WHERE T2.Is_online <= 1",
        "question": "In each city, how many radios are not online or are online with a status of 1?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT COUNT(City), City FROM city_channel WHERE ID > 10 GROUP BY City",
        "question": "What are the cities with their count where the city channel id is greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT COUNT(T1.Radio_ID), COUNT(DISTINCT T1.Transmitter) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID",
        "question": "How many radios and distinct transmitters are there in the joined radio and city channel radio data?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT COUNT(ID) FROM city_channel AS T1 WHERE T1.Station_name = 'Station_name'",
        "question": "How many city channels have the station name 'Station_name'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT City, Station_name FROM city_channel WHERE Owned_Since > 2000 OR ID IN (SELECT City_channel_ID FROM city_channel_tv_show WHERE Is_free = 1) ORDER BY City ASC",
        "question": "What are the cities and station names of city channels that were owned since 2000 or have a free TV show, listed in ascending order by city?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tv_shows"
    },
    {
        "query": "SELECT T1.University_Name, COUNT(T2.Major_ID) FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T1.Home_Conference IN (SELECT T4.Home_Conference FROM university AS T4 WHERE T4.Enrollment < 10000) GROUP BY T1.University_Name HAVING COUNT(T2.Major_ID) > 5",
        "question": "What are the names of universities with home conferences also used by universities with less than 10000 enrollment, that offer more than 5 majors?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT Enrollment FROM university WHERE City != 'New York'",
        "question": "What are the enrollments of universities located in cities other than New York?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT COUNT(University_ID) FROM university AS U1 WHERE U1.University_Name != 'ABC University' GROUP BY U1.University_Name LIMIT 10",
        "question": "What is the number of universities with different names from 'ABC University', listed from 11th to 20th?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT MAX(Home_Conference) AS Home_Conference, MIN(Home_Conference) AS Home_Conference FROM university ORDER BY University_ID DESC LIMIT 10",
        "question": "What are the highest and lowest home conferences of the 11th to 20th universities with the highest IDs?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT Enrollment FROM university WHERE Enrollment != 10000 LIMIT 10",
        "question": "What are the enrollments of the next 10 universities with an enrollment other than 10,000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT University_Name, MAX(Enrollment) FROM university WHERE University_ID IN ( SELECT University_ID FROM major_ranking WHERE Rank = 1 ) GROUP BY University_Name",
        "question": "What are the names of the universities with top-ranked majors and what is their maximum enrollment?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT University_Name FROM university WHERE University_Name NOT IN (SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank > 10)) ORDER BY University_Name DESC",
        "question": "What are the names of the universities with at least one major ranking of 10 or less, listed in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT Enrollment FROM university WHERE University_ID = 1 ORDER BY Enrollment DESC",
        "question": "What is the enrollment of the university with ID 1, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT COUNT(DISTINCT University_ID) , COUNT(DISTINCT University_Name) , COUNT(DISTINCT City) FROM university WHERE University_Name = 'University of California' ORDER BY University_ID DESC",
        "question": "How many distinct university ids, names, and cities are there for the University of California?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT T1.University_Name, T1.Home_Conference FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Enrollment <= 10000 AND T2.Reputation_point <= 80",
        "question": "What are the names and home conferences of universities with an enrollment of 10,000 or less and a reputation point of 80 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT T1.University_Name FROM university AS T1 JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE EXISTS (SELECT 1 FROM overall_ranking AS T3 WHERE T3.University_ID = T1.University_ID) ORDER BY COUNT(DISTINCT T1.University_ID) ASC",
        "question": "What are the names of the universities with at least one overall ranking, listed in ascending order by the number of unique university IDs?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT University_ID, University_Name, City, State, Team_Name, Affiliation, Enrollment, Home_Conference FROM university WHERE Enrollment <= 2000 ORDER BY Enrollment ASC",
        "question": "What are the university id, name, city, state, team name, affiliation, enrollment, and home conference of universities with an enrollment of 2000 or less, listed in ascending order of enrollment?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT COUNT(DISTINCT University_Name), COUNT(DISTINCT Team_Name) FROM university WHERE Enrollment BETWEEN 1000 AND 20000 ORDER BY Enrollment DESC",
        "question": "How many unique universities and teams are there with enrollment between 1000 and 20000, listed in order of highest enrollment to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT University_Name, Enrollment FROM university WHERE University_ID = 1 OR University_Name = 'University of California' OR NOT EXISTS (SELECT 1 FROM major_ranking WHERE major_ranking.University_ID = university.University_ID)",
        "question": "What are the names and enrollments of the university with ID 1, University of California, and universities that do not have a major ranking?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_rank"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID JOIN poker_player AS T3 ON T2.People_ID = T3.People_ID WHERE T1.Height <= 180 GROUP BY T1.Name ORDER BY T1.Name DESC",
        "question": "What are the names of people 180cm or shorter, along with their total earnings from poker, listed in descending order by name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Name",
        "question": "What is the total earnings for each poker player?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT T1.Height, T1.Nationality, COUNT(T2.Poker_Player_ID) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Height, T1.Nationality ORDER BY T1.Height ASC",
        "question": "What is the number of poker players by height and nationality, listed in ascending order of height?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT MAX(T1.Earnings) AS max_earning, T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height >= 180 ORDER BY T1.Earnings DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th highest-earning poker players who are at least 180cm tall, listed in order of their earnings?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT T1.People_ID, T2.Height FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height != 180",
        "question": "What are the IDs and heights of people who are not 180cm tall and are a poker player?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT T1.Name, T2.Earnings FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Final_Table_Made BETWEEN 1 AND 5 AND T2.Best_Finish > 10 AND T2.People_ID NOT IN (SELECT People_ID FROM poker_player WHERE Earnings < 10000) ORDER BY T1.Name DESC",
        "question": "What are the names and earnings of the top poker players with more than 10 best finishes, who have made it to the final table between 1 and 5 times and have earnings of at least 10000, listed in descending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT T1.People_ID, T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Final_Table_Made > 10 OR T2.Nationality = 'American' OR EXISTS (SELECT 1 FROM people WHERE Height BETWEEN 170 AND 180) ORDER BY T1.People_ID ASC",
        "question": "What are the IDs and names of poker players who either made more than 10 final tables, are American, or where there are people with a height between 170 and 180, listed in ascending order by player ID?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT P1.Name, P2.Final_Table_Made FROM poker_player AS P2 JOIN people AS P1 ON P2.People_ID = P1.People_ID WHERE P2.Best_Finish = 1 AND P1.Height = 175 LIMIT 1",
        "question": "What is the name and the number of final tables made by the second poker player who is 175 cm tall and has the best finish of 1?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings >= 1000000 ORDER BY T1.Height DESC",
        "question": "What are the names of the poker players who have earned at least $1,000,000, listed in order of height from tallest to shortest?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT T2.Nationality, COUNT(DISTINCT T1.Poker_Player_ID) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = 175 ORDER BY T2.Nationality ASC",
        "question": "What is the number of unique poker players of each nationality, for people with a height of 175, listed in ascending order by nationality?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT T1.Nationality, AVG(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 180 AND T2.Final_Table_Made > 5 AND T2.People_ID NOT IN (SELECT People_ID FROM poker_player WHERE Earnings < 10000) GROUP BY T1.Nationality ORDER BY AVG(T2.Earnings) ASC",
        "question": "What is the average earnings of poker players from each nationality, who are taller than 180cm, have made more than 5 final tables, and have never earned less than $10,000, ordered by average earnings from lowest to highest?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT COUNT(T2.People_ID), MIN(T1.Earnings), MAX(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Money_Rank > 10 ORDER BY T1.Earnings ASC",
        "question": "What is the number of people, the minimum earnings, and the maximum earnings of poker players who have a money rank higher than 10, listed from lowest to highest earnings?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "poker_player"
    },
    {
        "query": "SELECT T1.document_structure_description FROM Document_Structures AS T1 WHERE T1.document_structure_code = 'DS-001' OR T1.document_structure_code IN (SELECT T2.document_structure_code FROM Documents AS T2 WHERE T2.document_name = 'Document-1') ORDER BY T1.document_structure_code DESC",
        "question": "What are the document structure descriptions with the code 'DS-001' or belonging to the document named 'Document-1', listed in descending order by document structure code?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "document_management"
    },
    {
        "query": "SELECT COUNT(T1.document_code) FROM Documents AS T1 WHERE T1.document_type_code = 'code' AND EXISTS ( SELECT 1 FROM Document_Functional_Areas AS T2 WHERE T2.document_code = T1.document_code )",
        "question": "How many documents of type 'code' are assigned to at least one functional area?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "document_management"
    },
    {
        "query": "SELECT user_name FROM Users WHERE role_code = 'admin' AND user_login = 'root' AND password = 'password' ORDER BY user_name ASC LIMIT 10",
        "question": "What are the names of the next 10 users, starting from the 11th user, with the role admin, login root, and password password, listed in ascending order by username?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "document_management"
    },
    {
        "query": "SELECT * FROM Documents WHERE access_count BETWEEN 10 AND 100",
        "question": "What are the details of the documents that have been accessed between 10 and 100 times?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "document_management"
    },
    {
        "query": "SELECT T1.document_code FROM Documents AS T1 WHERE T1.document_structure_code = 'structure_1' AND T1.document_type_code = 'type_1' AND T1.access_count BETWEEN (SELECT MIN(access_count) FROM Documents) AND (SELECT MAX(access_count) FROM Documents) ORDER BY T1.document_name ASC LIMIT 10",
        "question": "What are the next 10 document codes in ascending order of document name for documents of structure 'structure_1' and type 'type_1' with access counts within the range of minimum and maximum access counts across all documents?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "document_management"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.document_code) FROM Document_Structures AS T1 LEFT JOIN Documents AS T2 ON T1.document_structure_code = T2.document_structure_code WHERE NOT EXISTS (SELECT 1 FROM Document_Sections AS T3 WHERE T3.document_code = T2.document_code)",
        "question": "How many unique documents do not have any sections?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "document_management"
    },
    {
        "query": "SELECT role_code, role_description FROM Roles WHERE role_code BETWEEN 'admin' AND 'user'",
        "question": "What are the role codes and descriptions for roles with codes between 'admin' and 'user'?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "document_management"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.document_code), T2.section_title FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code WHERE T1.access_count < 10",
        "question": "What is the count of distinct documents with less than 10 accesses and their respective section titles?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "document_management"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.user_id), COUNT(DISTINCT T1.user_name), COUNT(DISTINCT T1.user_login) FROM Users AS T1 WHERE T1.role_code IN (SELECT T2.role_code FROM Roles AS T2)",
        "question": "How many distinct user IDs, names, and logins are there in the users table where the role code exists in the roles table?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "document_management"
    },
    {
        "query": "SELECT T1.document_structure_description FROM Document_Structures AS T1 JOIN Documents AS T2 ON T1.document_structure_code = T2.document_structure_code JOIN Document_Sections AS T3 ON T3.document_code = T2.document_code JOIN Document_Sections_Images AS T4 ON T4.section_id = T3.section_id WHERE T1.document_structure_description = 'structure' OR T2.document_name = 'document' OR T3.section_title IN (SELECT section_title FROM Document_Sections WHERE section_sequence > 1) ORDER BY T1.document_structure_description ASC",
        "question": "What are the document structure descriptions in ascending order for structures that either are described as 'structure', or have a document name 'document', or have a section title with sequence greater than 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "document_management"
    },
    {
        "query": "SELECT T1.document_name FROM Documents AS T1 WHERE T1.document_structure_code = 'code1' AND EXISTS (SELECT T2.document_code FROM Document_Functional_Areas AS T2 WHERE T2.document_code = T1.document_code) ORDER BY T1.document_name ASC LIMIT 10",
        "question": "What are the document names of the next 10 documents that belong to the 'code1' document structure and have a functional area, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "document_management"
    },
    {
        "query": "SELECT T1.user_name, T2.role_description FROM Users AS T1 JOIN Roles AS T2 ON T1.role_code = T2.role_code",
        "question": "What are the usernames and corresponding role descriptions of all users?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "document_management"
    },
    {
        "query": "SELECT MAX(T1.order_id) FROM Orders AS T1 WHERE T1.order_id = 100 AND T1.order_status = 'shipped' AND T1.order_id NOT IN (SELECT T2.order_id FROM Shipments AS T2 WHERE T2.shipment_id > 1000)",
        "question": "What is the maximum order id where the order status is 'shipped', the order id is 100, and there is no shipment with an id greater than 1000 for that order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT * FROM Customers WHERE customer_name NOT IN (SELECT customer_name FROM Customers WHERE customer_name = 'John') ORDER BY customer_id DESC",
        "question": "What are the details of all customers whose names are not 'John', listed in descending order by customer id?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT order_id FROM Orders WHERE order_status = 'shipped' OR date_order_placed BETWEEN '2020-01-01' AND '2020-12-31' OR customer_id > 100 LIMIT 10",
        "question": "What are the order IDs of orders that are shipped or were placed in the year 2020 or have a customer ID greater than 100, listed from the 11th to the 20th match?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT T1.customer_name FROM Customers AS T1 WHERE T1.customer_name = 'John'",
        "question": "What is the name of the customer named 'John'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.order_id), COUNT(DISTINCT T2.order_item_id) FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status IN ( SELECT T3.order_status FROM Orders AS T3 WHERE T3.customer_id IN ( SELECT T4.customer_id FROM Customers AS T4 WHERE T4.customer_name = 'ABC Company' ) )",
        "question": "How many distinct orders and order items are there for the orders placed by 'ABC Company'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT T1.order_id, T2.order_id FROM Orders AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id WHERE NOT EXISTS (SELECT 1 FROM Order_Items WHERE order_id = T1.order_id)",
        "question": "What are the order ids of the orders that do not have any items?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT COUNT(order_id) FROM Orders WHERE order_status > 'placed'",
        "question": "How many orders have a status beyond 'placed'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT T1.customer_name, T2.order_status FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id WHERE T3.order_item_status BETWEEN 'pending' AND 'shipped' AND T1.customer_details = 'premium' AND EXISTS (SELECT 1 FROM Shipments AS T4 WHERE T4.order_id = T2.order_id LIMIT 1)",
        "question": "What are the names and order statuses of premium customers who have at least one order with items pending or shipped and for which a shipment exists?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'pending' LIMIT 10",
        "question": "What are the 11th to 20th distinct customer IDs of customers who have placed pending orders?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT COUNT(order_id) FROM Orders WHERE customer_id = 100 OR date_order_placed BETWEEN '2020-01-01' AND '2020-12-31' OR order_status = 'pending'",
        "question": "How many orders were placed by the customer with id 100 or made in the year 2020 or have a pending status?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT * FROM Orders WHERE order_status = 'shipped' OR date_order_placed BETWEEN '2018-01-01' AND '2018-12-31' OR customer_id > 100 ORDER BY order_id DESC",
        "question": "What are the details of all orders that were shipped, or placed in the year 2018, or belong to customers with IDs greater than 100, listed in descending order of order ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT customer_name FROM Customers WHERE customer_id = 10 OR customer_name = 'John' OR NOT EXISTS (SELECT 1 FROM Orders WHERE customer_id = Customers.customer_id AND order_status = 'cancelled')",
        "question": "What is the name of the customer with id 10 or the name 'John', who does not have any cancelled orders?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_orders"
    },
    {
        "query": "SELECT COUNT(DISTINCT Campus) FROM Campuses WHERE Year >= 2000 ORDER BY Year DESC",
        "question": "What is the number of unique campuses with a year of 2000 or later, listed in descending order by year?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT Campus) , COUNT(DISTINCT Location) , SUM(Year) FROM Campuses WHERE Id = 1 ORDER BY Id ASC",
        "question": "What are the counts of distinct campuses and locations and the total year for the campus with Id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT Campus FROM Campuses WHERE EXISTS (SELECT 1 FROM degrees WHERE degrees.Campus = Campuses.Id GROUP BY degrees.Campus HAVING COUNT(DISTINCT degrees.Degrees) > 1) ORDER BY Campus ASC",
        "question": "Which campuses offer more than one type of degree, listed in ascending order?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT T1.Campus, T2.TotalEnrollment_AY FROM Campuses AS T1 JOIN enrollments AS T2 ON T1.Id = T2.Campus JOIN csu_fees AS T3 ON T1.Id = T3.Campus WHERE T3.CampusFee != 1000",
        "question": "Which campuses and their total enrollments have a campus fee other than $1000?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT Campus, Location, County FROM Campuses",
        "question": "What are the campuses, locations, and counties of the campuses?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT Campus, Location FROM Campuses WHERE Year = 2010 AND Location = 'California'",
        "question": "What are the names and locations of the campuses in California in the year 2010?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT Year, MIN(Degrees) FROM degrees WHERE Campus != 1 GROUP BY Year",
        "question": "In each year, what is the minimum number of degrees awarded at campuses other than 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT Campus FROM Campuses WHERE Year BETWEEN 2000 AND 2010 LIMIT 10",
        "question": "What are the 11th to 20th campuses in the list of campuses established between the year 2000 and 2010?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT T1.Campus, COUNT(DISTINCT T2.Discipline) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus WHERE NOT EXISTS (SELECT 1 FROM enrollments AS T3 WHERE T3.Campus = T1.Id AND T3.TotalEnrollment_AY > 10000)",
        "question": "Which campuses have less than 10001 total enrollments and how many distinct disciplines are enrolled in each of these campuses?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT Location FROM Campuses WHERE County = 'San Francisco' AND Year BETWEEN 2010 AND 2015 AND Campus NOT IN (SELECT Campus FROM csu_fees WHERE CampusFee > 10000)",
        "question": "What locations of the campuses in San Francisco county between 2010 and 2015 have a campus fee of 10000 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT T1.CampusFee, T2.Degrees FROM csu_fees AS T1 JOIN degrees AS T2 ON T1.Campus = T2.Campus WHERE T2.Degrees <= 1000 LIMIT 10",
        "question": "What are the campus fees and degrees for the next 10 campuses with 1000 or fewer degrees, in no specific order?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT T1.Campus, T2.Discipline FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus WHERE T1.Year > 2000 ORDER BY T1.Campus DESC",
        "question": "What are the campuses and disciplines of the campuses that were established after year 2000, listed in descending order by campus name?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT CampusFee FROM csu_fees WHERE Campus IN ( SELECT Campus FROM enrollments WHERE TotalEnrollment_AY > 10000 )",
        "question": "What are the campus fees for the campuses with more than 10,000 total enrollments?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT Campus AS CampusName FROM Campuses WHERE Year <= 2015 ORDER BY Campus ASC",
        "question": "What are the names of campuses established in or before 2015, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "csu_1"
    },
    {
        "query": "SELECT SUM(Enrollment) FROM School WHERE Location = 'City'",
        "question": "What is the total enrollment of schools located in the city?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT COUNT(DISTINCT School_name), COUNT(DISTINCT Enrollment), COUNT(DISTINCT Location) FROM School WHERE Enrollment >= 1000 LIMIT 10",
        "question": "What are the number of unique school names, enrollment figures, and locations for the top 10 schools with an enrollment of 1000 or more, excluding the first 10 results?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Location) FROM School AS T1 WHERE T1.Enrollment < 1000",
        "question": "How many distinct locations have schools with an enrollment of less than 1000 students?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T2.Year BETWEEN 2010 AND 2020 AND T3.amount BETWEEN 1000 AND 10000 AND T1.Location NOT IN (SELECT Location FROM School WHERE IHSAA_Class = '3A')",
        "question": "Who are the donators of endowments to schools with budgets between 2010 and 2020 and endowment amounts between 1000 and 10000, excluding schools with 3A IHSAA class?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT S.School_name FROM School AS S WHERE Enrollment BETWEEN 1500 AND 2000 OR S.Location = 'Indianapolis' AND NOT EXISTS (SELECT 1 FROM budget AS B WHERE S.School_id = B.School_id AND B.Year = 2020 LIMIT 10)",
        "question": "What are the names of schools with enrollment between 1500 and 2000 or located in Indianapolis that do not have a budget record for the year 2020?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT T1.School_name, T2.Budgeted FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year BETWEEN 2010 AND 2020 ORDER BY T1.School_name ASC",
        "question": "What are the school names and corresponding budgeted amounts for each school from year 2010 to 2020, listed in ascending order by school name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT T1.School_name, T2.Budgeted FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year BETWEEN 2010 AND 2020 LIMIT 10",
        "question": "What are the school names and their budgeted amounts for schools with budget data between 2010 and 2020, starting from the 11th result?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT COUNT(T1.Location) AS count_location, T1.Location FROM School AS T1 WHERE T1.County IN (SELECT T2.County FROM School AS T2 WHERE T2.Enrollment BETWEEN 1000 AND 2000) AND T1.Enrollment > 500 GROUP BY T1.Location",
        "question": "What are the counts of locations of schools with enrollment over 500, and the locations themselves, where the county also contains schools with enrollment between 1000 and 2000?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT MAX(T1.Enrollment), MIN(T1.Enrollment), T1.Location FROM School AS T1 WHERE T1.Enrollment BETWEEN 100 AND 200 AND T1.School_id IN (SELECT T2.School_id FROM budget AS T2 WHERE T2.Year > 2010) ORDER BY T1.Enrollment ASC LIMIT 5",
        "question": "What are the maximum and minimum enrollment numbers and their corresponding locations for schools with enrollment between 100 and 200 and a budget year greater than 2010, for the 6th to 10th schools when sorted by enrollment in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT School_name FROM School WHERE Enrollment BETWEEN 1000 AND 2000 OR Enrollment > 3000 ORDER BY Enrollment DESC",
        "question": "What are the names of the schools with enrollment between 1000 and 2000 or more than 3000, listed in order of highest to lowest enrollment?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT School_name FROM School WHERE School_id NOT IN (SELECT School_id FROM budget WHERE Year = 2015 AND Budgeted > 1000000)",
        "question": "What are the names of the schools that did not have a budget of more than $1,000,000 in 2015?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT School_name FROM School WHERE Location = 'Indiana' AND Mascot = 'Wildcats'",
        "question": "What are the names of schools located in Indiana with the mascot 'Wildcats'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT AVG(T1.Enrollment), T2.Budgeted FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year BETWEEN 2015 AND 2020",
        "question": "What is the average enrollment of schools and their corresponding budgeted amounts for years between 2015 and 2020?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT School_name FROM School WHERE School_id IN (SELECT School_id FROM budget WHERE Budgeted > 10000 AND total_budget_percent_budgeted > 0.5 AND Budget_invested_percent = 'High') ORDER BY Enrollment DESC",
        "question": "Which school names have a budget of more than 10000, more than half of the total budget percent budgeted, and a high budget invested percent, listed in descending order of enrollment?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT T1.Enrollment, T1.Location FROM School AS T1 WHERE T1.Enrollment BETWEEN 1000 AND 2000 AND T1.Mascot = 'Wildcats'",
        "question": "What are the locations and enrollments of schools with Wildcats as their mascot and enrollments between 1000 and 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT Enrollment FROM School WHERE School_id IN (SELECT School_id FROM budget WHERE Budgeted > 500000) ORDER BY Enrollment DESC LIMIT 10",
        "question": "What are the enrollments of the next 10 schools with more than 500000 budgeted, listed in descending order of enrollment?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_finance"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Code) FROM Procedures AS T1 JOIN Trained_In AS T2 ON T1.Code = T2.Treatment JOIN Physician AS T3 ON T2.Physician = T3.EmployeeID JOIN Undergoes AS T4 ON T3.EmployeeID = T4.Physician WHERE T4.DateUndergoes > '2020-01-01'",
        "question": "How many different procedures were undergone after '2020-01-01'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "hospital_1"
    },
    {
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician WHERE T1.EmployeeID != 1001",
        "question": "What are the names of all physicians who have appointments and are not physician 1001?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "hospital_1"
    },
    {
        "query": "SELECT * FROM Physician WHERE EmployeeID = 101 OR EmployeeID NOT IN (SELECT Physician FROM Trained_In WHERE Treatment = 201) ORDER BY EmployeeID ASC",
        "question": "What is the information about physicians with an EmployeeID of 101 or who are not trained in the treatment with a code of 201, listed in ascending order by EmployeeID?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "hospital_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT Physician.EmployeeID), COUNT(Physician.EmployeeID) FROM Physician WHERE Physician.Position != 'SR'",
        "question": "What are the counts of distinct employee IDs of non-SR physicians and the total number of non-SR physicians?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "hospital_1"
    },
    {
        "query": "SELECT Name FROM Physician WHERE Position > 'Doctor'",
        "question": "What are the names of physicians who hold a position higher than Doctor?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "hospital_1"
    },
    {
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Affiliated_With AS T2 ON T1.EmployeeID = T2.Physician WHERE T2.Department = 5 ORDER BY T1.Name ASC",
        "question": "What are the names of all the physicians affiliated with department 5, listed in alphabetical order?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "hospital_1"
    },
    {
        "query": "SELECT T1.Name FROM Physician AS T1 WHERE T1.EmployeeID BETWEEN 100 AND 200 AND T1.SSN NOT IN (SELECT T2.Physician FROM Trained_In AS T2)",
        "question": "What are the names of the physicians whose employee IDs are between 100 and 200 but who are not trained in any procedure?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "hospital_1"
    },
    {
        "query": "SELECT Document_Subset_Name AS Document_Name, Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_ID < 50 ORDER BY Document_Subset_ID DESC LIMIT 10",
        "question": "What are the names and details of the 10 document subsets with the highest IDs less than 50?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T1.Document_Subset_ID IN (SELECT T3.Document_Subset_ID FROM Document_Subsets AS T3)",
        "question": "What are the names of the document subsets that have at least one member?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT T1.Document_Subset_Name, T1.Document_Subset_Details FROM Document_Subsets AS T1 WHERE T1.Document_Subset_ID < 100 ORDER BY T1.Document_Subset_Name DESC",
        "question": "What are the names and details of document subsets with IDs less than 100, listed in descending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT T1.Document_Subset_Name FROM Document_Subsets AS T1 WHERE T1.Document_Subset_ID BETWEEN 100 AND 200 AND T1.Document_Subset_Name IN (SELECT T2.Document_Subset_Name FROM Document_Subsets AS T2 WHERE T2.Document_Subset_Name = 'Subset_Name') ORDER BY T1.Document_Subset_ID ASC",
        "question": "What are the document subset names with subset id between 100 and 200 and subset name equal to 'Subset_Name', listed in ascending order of subset id?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT Document_Subset_ID, Document_Subset_Name, Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name != 'test' AND Document_Subset_Name != 'dev' AND Document_Subset_Name != 'prod'",
        "question": "What are the document subset id, name, and details for all document subsets that are not named 'test', 'dev', or 'prod'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT T1.Document_Subset_Name, COUNT(T2.Document_Object_ID) FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T1.Document_Subset_ID > 10 GROUP BY T1.Document_Subset_Name ORDER BY COUNT(T2.Document_Object_ID) ASC",
        "question": "What are the document subset names with the number of document objects they contain for document subset IDs greater than 10, listed from the fewest to the most document objects?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT T.Document_Subset_Name, AVG(T.Document_Subset_ID), COUNT(DISTINCT T.Document_Subset_Details), COUNT(DISTINCT T.Document_Subset_Name) FROM Document_Subsets AS T GROUP BY T.Document_Subset_Name HAVING AVG(T.Document_Subset_ID) > 0 ORDER BY T.Document_Subset_Name DESC LIMIT 10",
        "question": "What are the names of the document subsets with average document subset id greater than 0, along with their average document subset id, count of distinct details, and count of distinct names, ordered in descending order by name, starting from the 11th subset?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT COUNT(DISTINCT Document_Subset_Name) FROM Document_Subsets WHERE Document_Subset_ID BETWEEN 10 AND 50 AND Document_Subset_ID > 20",
        "question": "How many unique document subset names are there for document subset IDs between 21 and 50?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID NOT IN (SELECT Document_Subset_ID FROM Document_Subset_Members)",
        "question": "What are the names of the document subsets that do not have any members?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT Document_Subset_Name, Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_ID > 1 LIMIT 5",
        "question": "What are the names and details of document subsets with IDs greater than 1, starting from the 6th subset and including the next 5 subsets?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT SUM(T1.Document_Subset_ID), COUNT(T2.Collection_Subset_ID) FROM Document_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Collection_Subset_ID JOIN Collection_Subsets AS T3 ON T2.Collection_Subset_ID = T3.Collection_Subset_ID WHERE T1.Document_Subset_Name != T3.Collection_Subset_Name",
        "question": "What is the total document subset ID and the total count of collection subset IDs for the document subsets that do not have the same name as the collection subsets they belong to?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT T1.Document_Subset_Name FROM Document_Subsets AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T1.Document_Subset_ID != 1 ORDER BY T1.Document_Subset_ID DESC",
        "question": "What are the names of all document subsets, excluding the first one, listed in descending order by document subset id?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT AVG(Document_Subset_ID) FROM Document_Subset_Members AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Collection_ID",
        "question": "What is the average document subset ID for each collection?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT T1.Document_Subset_Name FROM Document_Subsets AS T1 WHERE T1.Document_Subset_ID = 100 AND EXISTS ( SELECT 1 FROM Document_Subset_Members AS T2 WHERE T2.Document_Subset_ID = T1.Document_Subset_ID ) ORDER BY T1.Document_Subset_Name ASC",
        "question": "What is the name of document subset with id 100, in ascending order, if it exists in document subset members?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Document_Object_ID) FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T2.Document_Object_ID <= 10",
        "question": "How many distinct document objects with an ID less than or equal to 10 are members of a document subset?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_ID > 10 ORDER BY Document_Subset_ID ASC",
        "question": "What are the document subset ids greater than 10, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_and_collections"
    },
    {
        "query": "SELECT T1.Manufacturer, SUM(T1.Order_Year) AS Order_Year, SUM(T2.Age) AS Age FROM aircraft AS T1 JOIN pilot_record AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T2.Pilot_ID = T3.Pilot_ID GROUP BY T1.Manufacturer ORDER BY T1.Manufacturer ASC LIMIT 10",
        "question": "What are the manufacturers of the top 10 aircraft ordered by manufacturer in ascending order along with the total order year and total age of pilots flying them?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT Model, Manufacturer FROM aircraft AS T1 WHERE EXISTS (SELECT T2.Aircraft_ID FROM pilot_record AS T2 WHERE T2.Aircraft_ID = T1.Aircraft_ID AND T2.Aircraft_ID > 100 AND T2.Aircraft_ID < 500) ORDER BY T1.Model ASC",
        "question": "What are the models and manufacturers of aircraft that have been flown by pilots who have flown aircraft with IDs between 100 and 500, listed in ascending order by model?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT COUNT(DISTINCT Pilot_ID) FROM pilot_record AS T1 WHERE T1.Pilot_ID NOT IN ( SELECT T2.Pilot_ID FROM pilot AS T2 WHERE T2.Rank = 1 ) AND T1.Aircraft_ID = 100",
        "question": "How many distinct pilots who are not ranked 1 have flown the aircraft with ID 100?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT T1.Aircraft_ID, T2.Record_ID FROM aircraft AS T1 JOIN pilot_record AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T2.Pilot_ID = T3.Pilot_ID WHERE T3.Rank != 1 LIMIT 10",
        "question": "What are the aircraft IDs and corresponding pilot record IDs for the next 10 records of aircraft flown by pilots who are not ranked 1? ",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT Pilot_name FROM pilot WHERE Rank = 1 ORDER BY Pilot_ID ASC",
        "question": "What are the names of the first-ranked pilots in ascending order of their pilot IDs?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT DISTINCT T1.Aircraft_ID, COUNT(T2.Pilot_ID) FROM aircraft AS T1 LEFT JOIN pilot_record AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID WHERE NOT EXISTS (SELECT 1 FROM pilot_record AS T3 WHERE T3.Aircraft_ID = T1.Aircraft_ID AND T3.Date > '2010') AND T2.Pilot_ID IS NULL",
        "question": "What are the aircraft IDs with no pilots that have flown after 2010 and their corresponding number of pilots which is zero?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT T1.Manufacturer FROM aircraft AS T1 WHERE T1.Order_Year BETWEEN (SELECT MIN(Order_Year) FROM aircraft) AND (SELECT MAX(Order_Year) FROM aircraft) AND T1.Order_Year = (SELECT MIN(Order_Year) FROM aircraft)",
        "question": "What manufacturers produced aircraft ordered in the first year that any aircraft were ordered?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT T1.Aircraft_ID, T2.Aircraft_ID FROM aircraft AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID != T2.Aircraft_ID ORDER BY T1.Aircraft_ID DESC",
        "question": "What are all pairs of distinct aircraft IDs ordered by the first aircraft ID in descending order?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Manufacturer) AS Manufacturer FROM aircraft AS T1",
        "question": "How many different aircraft manufacturers are there?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Aircraft_ID) FROM aircraft AS T1 WHERE T1.Order_Year BETWEEN 2010 AND 2020 OR T1.Manufacturer = 'Boeing'",
        "question": "How many distinct aircraft IDs are there for aircraft ordered between 2010 and 2020 or manufactured by Boeing?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT T1.Aircraft_ID, T2.Aircraft_ID FROM aircraft AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID WHERE T1.Order_Year BETWEEN 2000 AND 2010 OR T2.Manufacturer = 'Boeing' OR T1.Model = 'A320-200'",
        "question": "What are the aircraft IDs of the aircraft that were ordered between 2000 and 2010 or manufactured by Boeing or are A320-200 models?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_record"
    },
    {
        "query": "SELECT T1.Device, AVG(T3.Quantity) FROM device AS T1 JOIN stock AS T3 ON T1.Device_ID = T3.Device_ID WHERE T3.Shop_ID = (SELECT Shop_ID FROM shop WHERE Shop_Name = 'XYZ') AND T3.Quantity > 100 ORDER BY T3.Quantity DESC",
        "question": "What are the devices with their average quantity sold in shop 'XYZ', considering only quantities above 100, listed in descending order of quantity?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "device"
    },
    {
        "query": "SELECT T1.Device, T2.Quantity FROM device AS T1 JOIN stock AS T2 ON T1.Device_ID = T2.Device_ID WHERE T1.Device = 'iPhone' OR T2.Quantity > (SELECT AVG(Quantity) FROM stock)",
        "question": "What are the devices and their corresponding quantities for iPhones or devices with quantities above the average stock quantity?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "device"
    },
    {
        "query": "SELECT Device FROM device WHERE Carrier = 'AT&T' AND Applications = 'Facebook' ORDER BY Device_ID DESC",
        "question": "What are the devices, in reverse order of device ID, offered by AT&T with Facebook application?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "device"
    },
    {
        "query": "SELECT T1.Shop_Name, T2.Device FROM shop AS T1 JOIN stock AS T2 ON T1.Shop_ID = T2.Shop_ID JOIN device AS T3 ON T2.Device_ID = T3.Device_ID WHERE T1.Open_Date = '2020-01-01' ORDER BY T1.Shop_Name ASC LIMIT 10",
        "question": "What are the names of the next 10 shops that opened on '2020-01-01', along with the devices they stock, listed in ascending order by shop name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "device"
    },
    {
        "query": "SELECT s.Shop_Name, d.Device FROM shop AS s JOIN stock AS st ON s.Shop_ID = st.Shop_ID JOIN device AS d ON st.Device_ID = d.Device_ID WHERE st.Quantity <= 10 ORDER BY d.Device DESC LIMIT 5",
        "question": "What are the names of shops and their corresponding devices with a stock quantity of 10 or less, listed in descending order of device names, starting from the 6th entry?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "device"
    },
    {
        "query": "SELECT Device FROM device WHERE Device_ID IN (SELECT Device_ID FROM stock WHERE Quantity BETWEEN 10 AND 50) AND Carrier = 'Carrier1' LIMIT 10",
        "question": "What are the next 10 devices by Carrier1 that have between 10 and 50 units in stock?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "device"
    },
    {
        "query": "SELECT Device_ID, COUNT(Device) FROM device GROUP BY Device_ID ORDER BY Device_ID ASC",
        "question": "What is the count of each device type grouped by device id, listed in ascending order by device id?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "device"
    },
    {
        "query": "SELECT MIN(T1.Device_ID), SUM(T2.Quantity) FROM device AS T1 JOIN stock AS T2 ON T1.Device_ID = T2.Device_ID WHERE T1.Package_Version <= 3 ORDER BY T1.Device_ID DESC",
        "question": "What is the device id of the device with the highest device id and the total quantity of all devices that have a package version less than or equal to 3, listed in descending order by device id?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "device"
    },
    {
        "query": "SELECT T1.Device, T2.Quantity FROM device AS T1 JOIN stock AS T2 ON T1.Device_ID = T2.Device_ID WHERE T2.Quantity > 100 AND T1.Applications = 'app1' AND T2.Shop_ID BETWEEN 1 AND 10 ORDER BY T2.Quantity DESC",
        "question": "What are the devices with application 'app1' and their quantities in shops 1 to 10 with more than 100 items, listed in descending order of quantity?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "device"
    },
    {
        "query": "SELECT Device, MIN(Quantity) FROM stock WHERE Shop_ID IN (SELECT Shop_ID FROM shop WHERE Location = 'New York') GROUP BY Device",
        "question": "What is the minimum quantity of each device in stock in shops located in New York?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "device"
    },
    {
        "query": "SELECT T1.Device, MIN(T2.Quantity) FROM device AS T1 JOIN stock AS T2 ON T1.Device_ID = T2.Device_ID WHERE NOT EXISTS (SELECT 1 FROM shop AS T3 WHERE T3.Shop_ID = T2.Shop_ID AND T3.Open_Year > 2010) GROUP BY T1.Device LIMIT 10",
        "question": "What are the devices with their minimum quantities in stock, limited to 10, excluding those sold in shops that opened after 2010?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "device"
    },
    {
        "query": "SELECT T1.Device FROM device AS T1 WHERE EXISTS (SELECT 1 FROM stock AS T2 WHERE T2.Device_ID = T1.Device_ID AND T2.Quantity > 100) LIMIT 10",
        "question": "What are the next 10 devices that have more than 100 in stock?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "device"
    },
    {
        "query": "SELECT Device, COUNT(Device_ID) FROM device",
        "question": "What is the count of each device?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "device"
    },
    {
        "query": "SELECT T1.Device, T2.Shop_Name, T3.Quantity FROM device AS T1 JOIN stock AS T3 ON T1.Device_ID = T3.Device_ID JOIN shop AS T2 ON T3.Shop_ID = T2.Shop_ID WHERE T1.Package_Version <= '1.0' AND T2.Location = 'USA' ORDER BY T1.Device ASC",
        "question": "What devices with a package version of 1.0 or lower are available in which shops in the USA, and what are the quantities, listed in ascending order of device name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "device"
    },
    {
        "query": "SELECT AVG(T1.MPG), AVG(T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year BETWEEN 2000 AND 2020 ORDER BY T1.Id DESC",
        "question": "What are the average MPG and Horsepower of cars made between 2000 and 2020, listed in descending order by id?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Maker), COUNT(DISTINCT T1.FullName), COUNT(T1.Country) FROM car_makers AS T1 WHERE T1.Id = 10 OR T1.Id BETWEEN 5 AND 15 OR T1.Id NOT IN (SELECT T2.Maker FROM model_list AS T2) ORDER BY T1.Id ASC LIMIT 10",
        "question": "What are the counts of distinct makers and full names, and total countries of car makers where the id is 10 or between 5 and 15 or id is not in the model list, ordered by id in ascending order from 10th to 20th records?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_1"
    },
    {
        "query": "SELECT T1.Id, COUNT(DISTINCT T1.Id), SUM(T2.MPG) FROM cars_data AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id WHERE T1.Id <= 100 GROUP BY T1.Id ORDER BY COUNT(DISTINCT T1.Id) DESC LIMIT 100",
        "question": "What are the identities of the cars with their distinct counts and total MPG, for the top 100 cars with the highest distinct counts, after excluding the first 100 cars?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_1"
    },
    {
        "query": "SELECT MAX(T1.Cylinders) FROM cars_data AS T1 GROUP BY T1.Cylinders HAVING T1.Cylinders >= 4 ORDER BY T1.Cylinders DESC",
        "question": "What is the highest number of cylinders in cars, considering only cars with at least 4 cylinders and ranking the results in descending order by the number of cylinders?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "car_1"
    },
    {
        "query": "SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker ORDER BY T1.Maker DESC",
        "question": "What are the car makers and their corresponding models, listed in descending order of the car maker?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "car_1"
    },
    {
        "query": "SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE EXISTS (SELECT T3.Model FROM model_list AS T3 WHERE T3.Maker = T1.Id AND T3.ModelId = 1)",
        "question": "What are the names of the car makers that have a model with ModelId 1?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_1"
    },
    {
        "query": "SELECT Id FROM cars_data WHERE Year > 2000 ORDER BY Weight ASC LIMIT 10",
        "question": "What are the Ids of the 11th to 20th lightest cars manufactured after the year 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "car_1"
    },
    {
        "query": "SELECT Maker FROM car_makers WHERE Maker <= 'Toyota'",
        "question": "What are the car manufacturers whose names come before or are the same as 'Toyota'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "car_1"
    },
    {
        "query": "SELECT T1.Model FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker >= 'Toyota' ORDER BY T1.Model ASC",
        "question": "What are the models of cars manufactured by makers whose names are lexicographically greater than or equal to 'Toyota', listed in ascending order by model?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "car_1"
    },
    {
        "query": "SELECT Id, Horsepower FROM cars_data WHERE Cylinders > 3 OR Edispl BETWEEN 2 AND 5 OR Weight < 3000 ORDER BY Id DESC",
        "question": "What are the IDs and horsepower of cars with more than 3 cylinders, or engine displacement between 2 and 5, or weight less than 3000, listed in descending order of ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "car_1"
    },
    {
        "query": "SELECT T1.Name, T2.Num_of_stock FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock BETWEEN 100 AND 500 ORDER BY T1.Name DESC",
        "question": "What are the names of phones with their corresponding stock quantities in the market, where the stock quantity is between 100 and 500, listed in descending order by phone name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT Name, Price FROM phone WHERE Price > 1000 ORDER BY Price DESC",
        "question": "What are the names and prices of the phones that cost more than $1000, listed in order of highest price to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT T1.Name, T1.Price FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Market_ID NOT IN (SELECT T3.Market_ID FROM market AS T3 WHERE T3.Num_of_employees < 100 AND T3.Ranking > 50) LIMIT 10",
        "question": "What are the names and prices of the next 10 phones sold in markets with at least 100 employees or a ranking of 50 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT T1.Name, T1.Carrier FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID JOIN market AS T3 ON T3.Market_ID = T2.Market_ID WHERE T2.Num_of_stock < 100 AND T3.Ranking = 1 ORDER BY T1.Name DESC",
        "question": "What are the names and carriers of phones with less than 100 items in stock in the top-ranked market, listed in descending order by phone name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT T1.Name, AVG(T2.Num_of_stock) FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T1.Carrier != 'AT&T' GROUP BY T1.Name HAVING AVG(T2.Num_of_stock) > 100 ORDER BY T1.Name DESC",
        "question": "What are the names of phones from carriers other than AT&T, along with their average stock count, for phones with an average stock count greater than 100, listed in descending order by phone name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT T1.Name, T1.Carrier, T1.Price FROM phone AS T1 WHERE T1.Carrier != 'AT&T'",
        "question": "What are the names, carriers, and prices of phones that are not from AT&T?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT Name FROM phone WHERE Price < 1000",
        "question": "What are the names of phones that cost less than $1000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT T1.Name, T2.Num_of_stock FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID JOIN market AS T3 ON T3.Market_ID = T2.Market_ID WHERE T2.Num_of_stock != 0",
        "question": "What are the names of phones that have stock in any market and in what quantity?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT COUNT(DISTINCT Carrier) FROM phone AS T1 ORDER BY Carrier ASC",
        "question": "How many distinct carriers of phones are there, listed in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT T1.Carrier, T2.District FROM phone AS T1 JOIN market AS T2 ON T1.Phone_ID = T2.Market_ID WHERE T1.Price > 100 OR T1.Memory_in_G BETWEEN 32 AND 64 AND T1.Name = 'Apple' ORDER BY T2.Ranking ASC",
        "question": "What are the carriers and districts of Apple phones with either a price greater than 100, or a memory of 32 to 64 GB, listed in ascending order of district ranking?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT T1.Name, T3.District FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID JOIN market AS T3 ON T2.Market_ID = T3.Market_ID WHERE T1.Price >= 500 AND T1.Carrier = 'Verizon'",
        "question": "What are the names of the phones offered by Verizon that cost at least $500, and in which district are they sold?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT Name, Carrier FROM phone WHERE Price = 500",
        "question": "What are the names and carriers of phones that cost 500?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT T1.Name, T2.District FROM phone AS T1 JOIN market AS T2 ON T1.Phone_ID = T2.Market_ID WHERE T1.Carrier != 'AT&T'",
        "question": "What are the names of the phones and their respective districts for phones that are not from AT&T?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT T1.Name, T2.Num_of_stock FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock BETWEEN 100 AND 200 ORDER BY T1.Name ASC",
        "question": "What are the names of phones with stock between 100 and 200, listed in ascending order by name, along with the corresponding stock amounts?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "phone_market"
    },
    {
        "query": "SELECT title, director FROM Movie",
        "question": "What are the titles and directors of the movies?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT DISTINCT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T3.rID = T2.rID WHERE T1.year = 2010 AND T3.name IN ( SELECT name FROM Reviewer ) LIMIT 10",
        "question": "What are the titles of 2010 movies rated by any reviewer, listed 11th to 20th?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars BETWEEN 3 AND 4 AND T2.mID IN (SELECT mID FROM Rating WHERE stars > 4)",
        "question": "What are the titles of movies rated between 3 and 4 stars by some reviewers and greater than 4 stars by other reviewers?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT title FROM Movie WHERE director != 'Steven Spielberg'",
        "question": "What are the titles of movies not directed by Steven Spielberg?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT title FROM Movie WHERE mID = (SELECT mID FROM Rating WHERE stars > 3)",
        "question": "What are the titles of the movies that have been rated more than 3 stars?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT title FROM Movie WHERE year != 1999",
        "question": "What movie titles are from years other than 1999?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT T1.title, T2.stars FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars BETWEEN 3 AND 5 AND T2.ratingDate > '2000-01-01'",
        "question": "What are the titles of movies rated between 3 and 5 stars after '2000-01-01' and their corresponding ratings?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating WHERE stars = 5)",
        "question": "What are the titles of the movies that have not received a 5-star rating?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT AVG(T2.stars) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE NOT EXISTS (SELECT 1 FROM Reviewer AS T3 WHERE T3.rID = T2.rID AND T3.name = 'James') GROUP BY T1.title",
        "question": "What is the average rating of each movie that was not rated by James?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT title FROM Movie WHERE title = 'Titanic' OR director = (SELECT director FROM Movie WHERE title = 'Alien') LIMIT 10",
        "question": "What are the titles of movies that are either 'Titanic' or directed by the director of 'Alien', starting from the 11th entry, and limited to 10 entries?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.rID), COUNT(T2.mID) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > 3 AND T2.year BETWEEN 1990 AND 2000 AND T2.director = 'Steven Spielberg'",
        "question": "How many distinct reviewers rated and how many Steven Spielberg movies from 1990 to 2000 received more than 3 stars?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT T1.title FROM Movie AS T1 WHERE T1.year BETWEEN 1990 AND 2000 AND T1.director = 'Steven Spielberg'",
        "question": "What are the movie titles by Steven Spielberg released between 1990 and 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT DISTINCT T2.title, T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE (T2.year BETWEEN 1950 AND 1960 OR T3.name = 'James Cameron') AND T2.title = 'Titanic'",
        "question": "What are the distinct titles and reviewer names for the movie 'Titanic' released between 1950 and 1960, or reviewed by James Cameron?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT T1.title, AVG(T2.stars) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T1.title NOT IN ( SELECT T3.title FROM Movie AS T3 JOIN Rating AS T4 ON T3.mID = T4.mID WHERE T4.stars > 4 ) GROUP BY T1.title ORDER BY T1.title ASC LIMIT 10",
        "question": "What are the titles and average ratings of the next 10 movies that have at least one rating of 4 stars or less, ordered alphabetically by title?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT title FROM Movie WHERE title BETWEEN 'A' AND 'M'",
        "question": "What movie titles are between 'A' and 'M', inclusive?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT T1.title, T2.name, T3.stars FROM Movie AS T1 JOIN Rating AS T3 ON T1.mID = T3.mID JOIN Reviewer AS T2 ON T3.rID = T2.rID WHERE T3.stars BETWEEN 1 AND 5 ORDER BY T3.stars DESC",
        "question": "What are the titles of movies that have been rated between 1 and 5 stars along with the reviewers who gave those ratings, listed in descending order of the rating stars?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT title FROM Movie WHERE year > 1990 LIMIT 10",
        "question": "What are the titles of the next 10 movies released after the first 10 movies released after 1990?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "movie_1"
    },
    {
        "query": "SELECT MAX(SALARY) FROM employees WHERE SALARY <= 10000 ORDER BY SALARY DESC",
        "question": "What is the highest salary less than or equal to 10000 among employees?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT REGION_NAME FROM regions WHERE REGION_NAME != 'Asia'",
        "question": "What are the region names excluding Asia?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT * FROM employees WHERE SALARY >= 10000 ORDER BY SALARY ASC",
        "question": "What are the details of all employees who earn a salary of at least 10,000, listed in ascending order of salary?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT job_id FROM employees WHERE salary = ( SELECT MAX(SALARY) FROM employees ) GROUP BY job_id HAVING MAX(SALARY) = ( SELECT MAX(SALARY) FROM employees ) ORDER BY job_id DESC",
        "question": "What job IDs have employees who earn the maximum salary, sorted by job ID in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT LOCATION_ID) AS LOCATION_COUNT, MIN(POSTAL_CODE) AS MIN_POSTAL_CODE, MAX(CITY) AS MAX_CITY FROM locations WHERE CITY != 'San Francisco' ORDER BY LOCATION_ID DESC",
        "question": "What are the total number of distinct location ids, the minimum postal code, and the maximum city for locations not in San Francisco, listed in descending order by location id?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT * FROM employees AS e WHERE e.SALARY BETWEEN 10000 AND 20000 AND e.JOB_ID NOT IN (SELECT JOB_ID FROM jobs WHERE MIN_SALARY < 5000) AND e.DEPARTMENT_ID = 80",
        "question": "What information is available about employees in department 80 with salaries between 10000 and 20000 and job ids that have a minimum salary of at least 5000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT DISTINCT REGION_NAME AS r_name FROM regions WHERE REGION_ID < 4 OR REGION_ID BETWEEN 2 AND 5 OR REGION_NAME = 'Europe' ORDER BY REGION_NAME ASC LIMIT 10",
        "question": "What are the next 10 unique region names in ascending order, excluding the first 10, where the region id is either less than 4, between 2 and 5, or the region name is 'Europe'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT REGION_NAME FROM regions WHERE REGION_ID BETWEEN 100 AND 200 OR REGION_NAME = 'Europe' ORDER BY REGION_NAME ASC",
        "question": "What are the names of regions with id between 100 and 200 or region name 'Europe', listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT FIRST_NAME, LAST_NAME FROM employees WHERE HIRE_DATE BETWEEN '1995-01-01' AND '1995-12-31' OR SALARY > 10000 OR JOB_ID = 'IT_PROG' ORDER BY EMPLOYEE_ID ASC",
        "question": "What are the first and last names of employees hired in 1995 or with a salary greater than 10000, or in the 'IT_PROG' job, listed in ascending order of employee ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT T1.FIRST_NAME, T2.JOB_TITLE, T3.DEPARTMENT_NAME FROM employees AS T1 JOIN jobs AS T2 ON T1.JOB_ID = T2.JOB_ID JOIN departments AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE EXISTS (SELECT 1 FROM job_history WHERE EMPLOYEE_ID = T1.EMPLOYEE_ID) ORDER BY T1.SALARY DESC LIMIT 10",
        "question": "What are the names, job titles, and department names of the top 10 highest paid employees who have a job history, ordered by their salaries in descending order, excluding the first 10 results?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT LOCATION_ID AS LOCATION FROM locations WHERE STREET_ADDRESS >= '1600 Farnam St.'",
        "question": "What are the location ids of the locations with a street address of '1600 Farnam St.' or higher?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT job_title FROM jobs WHERE (MIN_SALARY = 10000 OR MIN_SALARY BETWEEN 5000 AND 15000 OR MAX_SALARY > (SELECT MIN_SALARY FROM jobs WHERE JOB_TITLE = 'Marketing Manager'))",
        "question": "What job titles have either a minimum salary of 10000, or a minimum salary between 5000 and 15000, or a maximum salary greater than the minimum salary of a 'Marketing Manager'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT LOCATION_ID), COUNT(DISTINCT STREET_ADDRESS), COUNT(DISTINCT POSTAL_CODE), COUNT(DISTINCT CITY), COUNT(DISTINCT STATE_PROVINCE), COUNT(DISTINCT COUNTRY_ID) FROM locations AS T1 ORDER BY COUNTRY_ID ASC",
        "question": "How many unique location ids, street addresses, postal codes, cities, states, and countries are there in the locations table when ordered by country id in ascending order?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT T1.COUNTRY_NAME FROM countries AS T1 JOIN regions AS T2 ON T1.REGION_ID = T2.REGION_ID WHERE T1.COUNTRY_ID = 'US' ORDER BY T1.COUNTRY_NAME DESC LIMIT 1",
        "question": "What is the country name in the country with country id 'US', excluding the one with the lexicographically largest country name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "hr_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name) FROM battle AS T1 WHERE T1.date BETWEEN '1800' AND '1900' AND T1.result = 'win' ORDER BY T1.id ASC",
        "question": "How many distinct battles were won between 1800 and 1900?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "battle_death"
    },
    {
        "query": "SELECT name FROM battle WHERE date <= '1500-01-01'",
        "question": "What are the names of battles that took place before or in the year 1500?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "battle_death"
    },
    {
        "query": "SELECT date, MAX(id) FROM battle WHERE id BETWEEN 1 AND 10 GROUP BY date ORDER BY date ASC",
        "question": "On each date, what is the highest battle id for battles with ids between 1 and 10, listed in ascending order by date?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "battle_death"
    },
    {
        "query": "SELECT SUM(T1.tonnage) FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id WHERE T1.id > 10",
        "question": "What is the total tonnage of ships with an id greater than 10 that were lost in a battle?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "battle_death"
    },
    {
        "query": "SELECT id FROM battle WHERE date BETWEEN '1000' AND '1500' OR result = 'Victory' OR id NOT IN (SELECT lost_in_battle FROM ship)",
        "question": "What are the ids of battles that took place between the years 1000 and 1500, or resulted in victory, or were not lost by a ship?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "battle_death"
    },
    {
        "query": "SELECT name FROM battle WHERE date > '1945'",
        "question": "What are the names of the battles that took place after 1945?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "battle_death"
    },
    {
        "query": "SELECT T1.name, T2.name, T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date BETWEEN '2000-01-01' AND '2020-12-31' AND T2.disposition_of_ship = 'sunk' AND T3.killed > 10",
        "question": "What are the names of battles, ships, and notes on deaths, where the battle date is between 2000 and 2020, the ship was sunk and more than 10 people were killed?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "battle_death"
    },
    {
        "query": "SELECT COUNT(DISTINCT name), COUNT(DISTINCT latin_commander), COUNT(id) FROM battle LIMIT 5",
        "question": "What are the counts of distinct battle names, distinct latin commanders, and total battles, for battles 6 through 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "battle_death"
    },
    {
        "query": "SELECT name FROM battle WHERE date BETWEEN 1800 AND 1900 OR latin_commander = 'John' ORDER BY date DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th latest battles that either took place between 1800 and 1900 or were led by latin commander 'John'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "battle_death"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_price BETWEEN 10 AND 100 AND EXISTS (SELECT 1 FROM Order_Items WHERE product_id = Products.product_id) AND product_type_code = 'A'",
        "question": "What are the names of product type 'A' that are priced between 10 and 100, and have been ordered?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Products AS T2 ON T1.product_type_code = T2.product_type_code WHERE T1.product_price BETWEEN 10 AND 100 AND T2.product_id NOT IN (SELECT T3.product_id FROM Products AS T3 WHERE T3.product_name = 'Laptop')",
        "question": "What are the names of products with prices between $10 and $100, where the same product type as the Laptop, but excluding the Laptop itself?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Customer_Orders AS T3 ON T2.order_id = T3.order_id WHERE EXISTS (SELECT T4.order_id FROM Customer_Orders AS T4 JOIN Customers AS T5 ON T4.customer_id = T5.customer_id WHERE T4.order_id = T3.order_id AND T5.payment_method_code = 'Credit Card')",
        "question": "What are the names of the products ordered by customers who paid using a credit card?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
        "question": "What are the names of products that have never been ordered?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT T1.customer_name, SUM(T4.product_price * T5.order_quantity) AS total_spent FROM Customers AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id JOIN Customer_Orders AS T3 ON T1.customer_id = T3.customer_id JOIN Products AS T4 ON T4.product_id = T5.product_id JOIN Order_Items AS T5 ON T3.order_id = T5.order_id WHERE T4.product_price < 10 GROUP BY T1.customer_name ORDER BY total_spent DESC LIMIT 1",
        "question": "Which customer spent the second most on products that cost less than 10 dollars?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.product_id) FROM Products AS T1 WHERE T1.product_price >= 50",
        "question": "How many distinct products have a price of 50 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_type_code = 'Electronics' ORDER BY product_price ASC LIMIT 10",
        "question": "What are the names of the next 10 lowest priced electronics products after the first 10?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT product_name, product_price FROM Products WHERE product_price >= 10 GROUP BY product_price",
        "question": "What are the names and prices of products priced 10 or more, grouped by price?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_type_code != 'A' GROUP BY product_name",
        "question": "What are the names of the products that are not of type A?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items) ORDER BY product_price DESC",
        "question": "What are the names of the most expensive products that have never been ordered?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_type_code != 'A' LIMIT 10",
        "question": "What are the names of the next 10 products, skipping the first 10, that are not of type A?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_type_code = 'A' AND product_name = 'ProductA'",
        "question": "What are the names of products that have type code 'A' and product name 'ProductA'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT COUNT(DISTINCT product_type_code) FROM Products AS T1 WHERE product_type_code != 'A1' ORDER BY product_price DESC LIMIT 1",
        "question": "Excluding product type 'A1', what is the number of distinct product types for the second most expensive product?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT DISTINCT product_name FROM Products WHERE product_price != 10 ORDER BY product_name ASC",
        "question": "What are the names of all products that do not cost $10, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT T1.product_name, COUNT(T2.order_item_id) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "question": "What are the product names and their respective order frequencies?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_orders"
    },
    {
        "query": "SELECT T1.organisation_id FROM Projects AS T1 WHERE T1.organisation_id = 1",
        "question": "What is the organisation id of the project with organisation id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT grant_amount FROM Grants WHERE grant_amount BETWEEN 1000 AND 2000 LIMIT 10",
        "question": "What are the 11th to 20th grant amounts that are between 1000 and 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT T1.document_type_code FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.grant_id = 500 ORDER BY T1.document_type_code ASC",
        "question": "What are the document type codes for the documents associated with grant 500, listed in ascending order?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT T1.outcome_code FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code WHERE T1.outcome_code != T2.outcome_code",
        "question": "What research outcome codes are present in both Research Outcomes and Project Outcomes but have different codes?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.document_type_code) , COUNT(T1.document_id) , T1.grant_id FROM Documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN Projects AS T4 ON T3.organisation_id = T4.organisation_id",
        "question": "How many unique document types are there, what is the total number of documents, and what is the grant id for each grant in the joined documents, grants, organisations, and projects?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT COUNT(document_type_code) FROM Document_Types WHERE document_type_code > '100'",
        "question": "How many document types have a code greater than 100?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT T1.document_type_code FROM Document_Types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code",
        "question": "What are the document type codes that are available in both the Document_Types table and the Documents table?",
        "iter": 5,
        "flag": true,
        "hardness": "easy",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT * FROM Documents WHERE grant_id = 100 OR document_id BETWEEN 100 AND 200 OR document_type_code IN (SELECT document_type_code FROM Document_Types WHERE document_description = 'document') ORDER BY document_id ASC",
        "question": "What are the details of documents that have a grant id of 100, or a document id between 100 and 200, or are of a type that is described as 'document', sorted by document id in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Projects AS T2 ON T1.organisation_id = T2.organisation_id JOIN Tasks AS T3 ON T2.project_id = T3.project_id LIMIT 10",
        "question": "What are the grant amounts of the next 10 grants for organisations that are managing a project with tasks?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT MAX(T1.grant_amount) AS grant_amount, T2.organisation_id FROM Grants AS T1 JOIN Projects AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING MAX(T1.grant_amount) <= 10000",
        "question": "What are the maximum grant amounts and corresponding organisation IDs for projects where the maximum grant amount is less than or equal to 10000?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT T1.document_type_code FROM Document_Types AS T1 WHERE NOT EXISTS (SELECT T2.document_id FROM Documents AS T2 WHERE T2.document_type_code = T1.document_type_code)",
        "question": "What are the document type codes that have no documents?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT T1.document_type_code, T2.grant_id FROM Document_Types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T2.grant_id = T3.grant_id WHERE T2.sent_date < T3.grant_start_date AND T1.document_type_code IN (SELECT document_type_code FROM Document_Types WHERE document_description = 'Type 1')",
        "question": "What are the document type codes and grant ids for Type 1 documents that were sent before the grant start date?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_grants_for_research"
    },
    {
        "query": "SELECT Name FROM musical WHERE Year <= 2010 LIMIT 5",
        "question": "What are the names of the next 5 musicals released before or in 2010, excluding the first 5 ones?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "musical"
    },
    {
        "query": "SELECT COUNT(Musical_ID), COUNT(Year) FROM musical ORDER BY Musical_ID ASC",
        "question": "How many musicals and years are there in the musical data when ordered by musical id?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "musical"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T1.Year BETWEEN 2000 AND 2010 OR T2.age > 30 OR T1.Year < 1990",
        "question": "What are the names of the musicals and actors for musicals released between 2000 and 2010, or actors older than 30, or musicals released before 1990?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "musical"
    },
    {
        "query": "SELECT * FROM musical WHERE Year < 2010 LIMIT 10",
        "question": "What are the details of the 11th to 20th musicals produced before 2010?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "musical"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM Musical AS T1 JOIN Actor AS T2 ON T1.Musical_ID = T2.Musical_ID LIMIT 1",
        "question": "What are the names of a musical and its actor in the second row of the ordered list of musicals and actors?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "musical"
    },
    {
        "query": "SELECT COUNT(Musical_ID), MAX(Year) FROM musical WHERE Year <= 1970",
        "question": "What is the count of musicals and the most recent year of musicals before or in the year 1970?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "musical"
    },
    {
        "query": "SELECT COUNT(DISTINCT Musical_ID), COUNT(*) FROM actor WHERE age >= 30 ORDER BY COUNT(*) ASC",
        "question": "What are the counts of distinct musicals and total performances by actors aged 30 or older, listed in ascending order of total performances?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "musical"
    },
    {
        "query": "SELECT Name, COUNT(Actor_ID) FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE Award != 'Tony' GROUP BY Name ORDER BY Name ASC LIMIT 10",
        "question": "What are the names of the next 10 musicals with non-Tony awards, along with the number of actors in each musical, listed in ascending order by name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "musical"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Name ORDER BY T2.Name ASC",
        "question": "What are the musical names and corresponding actor names, grouped by musical names and sorted by actor names in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "musical"
    },
    {
        "query": "SELECT a.Name FROM musical AS m JOIN actor AS a ON m.Musical_ID = a.Musical_ID WHERE m.Year != 2000 ORDER BY a.Name ASC LIMIT 10",
        "question": "What are the names of actors in the 11th to 20th positions in the list of actors from musicals not produced in 2000, sorted alphabetically by name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "musical"
    },
    {
        "query": "SELECT Name, Result FROM musical WHERE Award = 'Tony' AND Year <= 2000",
        "question": "What are the names and results of musicals that won Tony awards before or in the year 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "musical"
    },
    {
        "query": "SELECT T1.Name FROM musical AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T1.Year IN (SELECT Year FROM musical) ORDER BY T1.Year DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th most recent musicals?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "musical"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), COUNT(DISTINCT Musical_ID), COUNT(DISTINCT Result) FROM musical WHERE Year <= 2010 LIMIT 1",
        "question": "What are the numbers of unique musical names, unique musical ids, and unique results of the musicals that took place before or in the year 2010, excluding the first row?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "musical"
    },
    {
        "query": "SELECT Musical_ID, Year FROM musical AS T1 WHERE T1.Year < 2000",
        "question": "What are the musical IDs and corresponding years of the musicals released before 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "musical"
    },
    {
        "query": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = 'D001' AND document_type_code BETWEEN 'D001' AND 'D005' AND LENGTH(document_type_description) > 10 LIMIT 5",
        "question": "What are the 5th to 9th document type descriptions that are longer than 10 characters and have a document type code between D001 and D005, including D001?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT MAX(draft_number) FROM Draft_Copies",
        "question": "What is the maximum draft number of the draft copies?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT T1.document_id, COUNT(T2.document_id) FROM Documents AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE NOT EXISTS (SELECT 1 FROM Documents_Mailed WHERE Documents_Mailed.document_id = T1.document_id) GROUP BY T1.document_id LIMIT 10",
        "question": "What are the document ids and their corresponding counts for the 11th to 20th documents that have not been mailed?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.employee_id) FROM Circulation_History AS T1 JOIN Circulation_History AS T2 ON T1.document_id = T2.document_id WHERE T1.draft_number > 1",
        "question": "How many unique employees are involved in the circulation history of documents with more than one draft?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT document_type_code FROM Ref_Document_Types WHERE NOT EXISTS (SELECT document_type_code FROM Documents WHERE Ref_Document_Types.document_type_code = Documents.document_type_code)",
        "question": "What document type codes from Ref_Document_Types are not referenced in the Documents table?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT MAX(receipt_date) FROM Documents WHERE document_status_code < 'Draft'",
        "question": "What is the latest receipt date for documents that are not in 'Draft' status?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT T1.document_type_description FROM Ref_Document_Types AS T1 WHERE T1.document_type_code >= 'A'",
        "question": "What are the descriptions of document types with code A or higher?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT COUNT(DISTINCT employee_id), COUNT(DISTINCT role_code) FROM Employees WHERE role_code != 'Manager'",
        "question": "How many distinct non-manager employees are there and how many distinct non-manager roles are there?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT T1.document_type_description, T2.document_type_code FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code WHERE (T1.document_type_code BETWEEN 'A' AND 'Z') OR (T2.document_type_code = 'P') OR (T1.document_type_description = 'document_type_description') GROUP BY T1.document_type_description HAVING COUNT(T1.document_type_code) > 10 ORDER BY T1.document_type_description ASC",
        "question": "What are the descriptions and codes of document types that either start with a letter between A and Z, have a code of 'P', or have a description of 'document_type_description', and appear more than 10 times, listed in ascending order by description?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT T1.document_type_code, COUNT(T1.document_type_code) FROM Ref_Document_Types AS T1 WHERE NOT EXISTS (SELECT 1 FROM Documents AS T2 WHERE T2.document_type_code = T1.document_type_code AND T2.document_status_code = 'Draft') AND T1.document_type_description = 'Draft'",
        "question": "What are the document type codes for 'Draft' document types that do not have any 'Draft' documents, along with their respective counts?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT T1.document_type_description FROM Ref_Document_Types AS T1 WHERE T1.document_type_code < 'A100'",
        "question": "What are the descriptions of document types with a code less than 'A100'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT COUNT(DISTINCT document_status_code), COUNT(DISTINCT document_type_code), COUNT(document_id) FROM Documents AS T1 WHERE document_id = 1 OR document_id IN ( SELECT document_id FROM Document_Drafts WHERE draft_number = 1 ) OR EXISTS ( SELECT document_id FROM Draft_Copies WHERE document_id = T1.document_id AND copy_number = 1 ) ORDER BY document_id ASC LIMIT 10",
        "question": "What are the counts of unique document status codes, unique document type codes, and total documents for the top 10 documents that are either document id 1, or have a draft number 1 in the document drafts, or have a copy number 1 in the draft copies?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT T1.document_type_description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code JOIN Document_Drafts AS T3 ON T2.document_id = T3.document_id WHERE NOT EXISTS (SELECT * FROM Circulation_History AS T4 WHERE T4.document_id = T3.document_id AND T4.employee_id = 1)",
        "question": "What are the descriptions of document types that have not been circulated to employee with id 1?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Control_Systems"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.ISBN), SUM(T2.amount) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T1.PurchasePrice >= 10",
        "question": "How many distinct books with a purchase price of at least 10 dollars have been ordered, and what is the total amount of these ordered books?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_1"
    },
    {
        "query": "SELECT T1.Title, T2.Amount FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Amount > 10 AND T1.PurchasePrice BETWEEN 10 AND 100 AND T1.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
        "question": "What are the titles and amounts of the books that are ordered more than 10 times, have a purchase price between 10 and 100, and have a sale price higher than the average sale price of all books?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.ISBN) FROM Book AS T1 WHERE EXISTS ( SELECT 1 FROM Books_Order AS T2 WHERE T2.ISBN = T1.ISBN ) ORDER BY T1.PurchasePrice DESC",
        "question": "How many distinct books that have been ordered are there, listed in order of their purchase price from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_1"
    },
    {
        "query": "SELECT Name FROM Client ORDER BY Name ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th clients in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "book_1"
    },
    {
        "query": "SELECT IdClient FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders WHERE DateOrder > '2020-01-01')",
        "question": "Which client IDs have no orders placed after '2020-01-01'?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_1"
    },
    {
        "query": "SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T1.PurchasePrice > 10 OR T2.amount < 5 OR T1.SalePrice = (SELECT MIN(SalePrice) FROM Book) ORDER BY T1.Title DESC",
        "question": "What are the titles of the books with a purchase price greater than 10, ordered amount less than 5, or the lowest sale price, listed in descending order by title?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_1"
    },
    {
        "query": "SELECT Title, Author FROM Book WHERE SalePrice = 500",
        "question": "What are the titles and authors of the books that have a sale price of 500?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "book_1"
    },
    {
        "query": "SELECT T1.Title, SUM(T2.amount) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.amount = 10 GROUP BY T1.Title ORDER BY T1.Title ASC LIMIT 10",
        "question": "What are the titles of the books ordered 10 units at a time, along with the total amount of each, listed in alphabetical order, starting from the 11th book?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_1"
    },
    {
        "query": "SELECT T1.Name FROM Client AS T1 WHERE T1.IdClient NOT IN ( SELECT T2.IdClient FROM Orders AS T2 GROUP BY T2.IdClient HAVING COUNT(T2.IdClient) > 1 )",
        "question": "What are the names of the clients who have placed only one order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_1"
    },
    {
        "query": "SELECT IdClient FROM Client WHERE IdClient BETWEEN 1 AND 10 OR Name = 'John' OR Address = 'New York' ORDER BY IdClient DESC LIMIT 5",
        "question": "What are the client ids of the 5 clients with the highest ids among those whose ids are between 1 and 10 or whose names are 'John' or whose addresses are 'New York'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_1"
    },
    {
        "query": "SELECT MAX(SalePrice) FROM Book WHERE PurchasePrice > 50",
        "question": "What is the highest sale price of a book that costs more than $50 to purchase?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "book_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT ISBN) FROM Book WHERE Title = 'BookTitle'",
        "question": "How many distinct ISBNs are there for the book titled 'BookTitle'?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "book_1"
    },
    {
        "query": "SELECT T1.Title, SUM(T2.amount * T1.PurchasePrice) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.Title ORDER BY SUM(T2.amount * T1.PurchasePrice) DESC",
        "question": "What are the titles of the books with their total purchase value in descending order?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_1"
    },
    {
        "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Event_ID = 10 OR T1.Product_Type_Code = 'A' OR T1.Product_Price BETWEEN 100 AND 200",
        "question": "What are the names of products that are either featured in event 10, or are of type 'A', or have a price between 100 and 200?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT Product_Name FROM Products WHERE Product_Price <= 1000 LIMIT 10",
        "question": "What are the names of the next 10 products after the first 10 products that cost 1000 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT Product_ID FROM Products WHERE NOT EXISTS (SELECT 1 FROM Products_in_Events AS T1 JOIN Events AS T2 ON T1.Event_ID = T2.Event_ID WHERE T2.Location_ID = 2 AND T1.Product_ID = Products.Product_ID)",
        "question": "Which products have never been part of any event at location 2?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT * FROM Products WHERE Product_Price > 10 OR Product_Name = 'Product1' OR NOT EXISTS ( SELECT 1 FROM Products_in_Events WHERE Products_in_Events.Product_ID = Products.Product_ID ) ORDER BY Product_Price DESC",
        "question": "What products cost more than 10, or are named 'Product1', or have never been part of any event, listed from most expensive to least expensive?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT Product_Name FROM Products WHERE Product_Price >= 10 AND Product_Type_Code = 'ABC'",
        "question": "What are the names of the products with type code 'ABC' and price 10 or more?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT Product_Price, AVG(Product_Price) FROM Products WHERE Product_Price >= 10 GROUP BY Product_Price ORDER BY Product_Price DESC",
        "question": "What are the prices of products that cost at least 10 dollars, listed from highest to lowest, along with the average price of each?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT COUNT(DISTINCT Product_ID) FROM Products_in_Events",
        "question": "How many distinct products are there in events?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID WHERE T1.Product_Price < 10 ORDER BY T1.Product_Name ASC",
        "question": "What are the names of the products with a price less than 10 dollars that were in any event, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Product_Type_Code), T2.Event_Type_Code FROM Products AS T1 JOIN Products_in_Events AS T3 ON T1.Product_ID = T3.Product_ID JOIN Events AS T2 ON T3.Event_ID = T2.Event_ID WHERE T2.Event_Type_Code = 'Type1' AND T1.Product_Price BETWEEN 10 AND 100 AND T1.Product_Name = 'ProductA'",
        "question": "How many unique product types and what event type are associated with ProductA when the product price is between 10 and 100 and the event type is Type1?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT Product_Name FROM Products WHERE Product_Price <= 100 AND Product_ID = 10",
        "question": "What is the name of the product with ID 10 and a price of 100 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price > (SELECT AVG(Product_Price) FROM Products) ORDER BY Product_Type_Code ASC",
        "question": "What are the product type codes of the products with prices higher than the average price, listed in ascending order by product type code?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT T1.Party_ID, T1.Party_Details FROM Parties AS T1 JOIN Parties_in_Events AS T2 ON T1.Party_ID = T2.Party_ID WHERE T2.Event_ID BETWEEN 100 AND 200 AND T2.Role_Code = 'Manager'",
        "question": "What are the party IDs and party details of parties that played a 'Manager' role in events with IDs between 100 and 200?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "solvency_ii"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.student_id), COUNT(DISTINCT T2.transcript_id), COUNT(DISTINCT T3.class_id) FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id = T2.student_id JOIN Classes AS T3 ON T1.student_id = T3.student_id WHERE T1.student_id = 100 AND NOT EXISTS (SELECT 1 FROM Detention AS T4 WHERE T4.student_id = T1.student_id)",
        "question": "How many unique student id, transcript id and class id are there for a student with id 100 who has never been in detention?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Students_Information_Systems"
    },
    {
        "query": "SELECT COUNT(DISTINCT bio_data), COUNT(DISTINCT student_details), COUNT(DISTINCT student_id) FROM Students WHERE student_id <= 100 ORDER BY student_id DESC",
        "question": "How many unique bio data, student details, and student ids are there for students with a student id less than or equal to 100, listed in descending order by student id?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Students_Information_Systems"
    },
    {
        "query": "SELECT COUNT(T3.class_id), T2.student_id FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Classes AS T3 ON T2.student_id = T3.student_id WHERE T1.address_details >= 'ABC' GROUP BY T2.student_id",
        "question": "For students living in addresses with details of 'ABC' or higher, how many classes does each student attend?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Students_Information_Systems"
    },
    {
        "query": "SELECT T1.student_id FROM Students AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.student_id = 1",
        "question": "What is the student id of a student with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Students_Information_Systems"
    },
    {
        "query": "SELECT COUNT(student_id) FROM Students WHERE student_id <= 100",
        "question": "How many students have a student ID less than or equal to 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Students_Information_Systems"
    },
    {
        "query": "SELECT AVG(T1.student_id) FROM Students AS T1 JOIN Achievements AS T2 ON T1.student_id = T2.student_id WHERE T2.date_achievement > '2020-01-01' ORDER BY T1.student_id DESC",
        "question": "What is the average student ID of students who achieved something after 2020-01-01, listed in descending order of student ID?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Students_Information_Systems"
    },
    {
        "query": "SELECT staff_address_id, MIN(date_of_birth) FROM Staff WHERE staff_id > 10 ORDER BY staff_address_id ASC",
        "question": "What is the staff address id and the youngest date of birth for each staff address, for staff members with staff id greater than 10, ordered by staff address id in ascending order?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT last_name FROM Customers WHERE last_name != 'Smith' ORDER BY last_name DESC",
        "question": "What are the last names of all customers excluding 'Smith' listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT staff_id FROM Staff WHERE staff_id BETWEEN 1 AND 5 OR staff_id NOT IN (SELECT staff_id FROM Lessons) ORDER BY staff_id ASC",
        "question": "What are the staff ids of the staff members with ids between 1 and 5 or those who have not taught any lessons, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT COUNT(customer_id) FROM Customers WHERE customer_status_code = 'active' AND date_of_birth BETWEEN '1990-01-01' AND '1999-12-31' AND amount_outstanding < 1000 LIMIT 10",
        "question": "What is the number of active customers born in the 1990s with outstanding amounts less than 1000, counted from the 11th to the 20th customer in the list?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT * FROM Customers WHERE EXISTS (SELECT * FROM Customer_Payments WHERE Customer_Payments.customer_id = Customers.customer_id AND Customer_Payments.amount_payment > 1000 AND Customer_Payments.amount_payment < 5000) LIMIT 10",
        "question": "What are the details of the next 10 customers who have made payments between $1000 and $5000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT T1.first_name FROM Customers AS T1 JOIN Customer_Payments AS T2 ON T1.customer_id = T2.customer_id WHERE T2.amount_payment < 100 LIMIT 10",
        "question": "What are the first names of the next 10 customers who made a payment of less than 100?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT MAX(T1.amount_outstanding), T1.first_name FROM Customers AS T1 WHERE T1.amount_outstanding BETWEEN 100 AND 1000 GROUP BY T1.first_name",
        "question": "What is the maximum amount outstanding for each customer's first name where the amount outstanding is between 100 and 1000?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.amount_outstanding < 100",
        "question": "What are the last names of customers who owe less than $100?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT T1.first_name, T2.line_1_number_building FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name != 'John' ORDER BY T2.line_1_number_building DESC LIMIT 10",
        "question": "What are the first names and addresses of the top 10 customers, excluding those named 'John', with the highest address line 1 number building, skipping the first 10 results?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT T1.first_name FROM Customers AS T1 WHERE T1.amount_outstanding > 100 OR T1.date_of_birth BETWEEN '1990-01-01' AND '2000-12-31' OR T1.last_name = 'Smith' LIMIT 10",
        "question": "What are the first names of the next 10 customers who either owe more than 100, were born between 1990 and 2000, or have the last name Smith?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT T2.staff_id FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.staff_id NOT IN (SELECT staff_id FROM Staff WHERE staff_id = 1)",
        "question": "What are the staff ids of all staff except the one with staff id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.first_name) FROM Customers AS T1 INNER JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.zip_postcode != '11111'",
        "question": "How many unique first names of customers are there who do not reside in the 11111 zip postcode area?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 WHERE T1.amount_outstanding > 100 AND T1.amount_outstanding < 500",
        "question": "How many customers have an outstanding amount greater than 100 and less than 500?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.staff_id) FROM Staff AS T1 JOIN Addresses AS T2 ON T1.staff_address_id = T2.address_id WHERE T1.staff_id != 1 ORDER BY T1.staff_id ASC LIMIT 1",
        "question": "What is the second lowest staff id among the unique staff ids excluding staff id 1?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT country FROM Addresses",
        "question": "What countries are listed in the addresses?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT amount_outstanding FROM Customers WHERE amount_outstanding BETWEEN 0 AND 1000 ORDER BY amount_outstanding ASC LIMIT 1",
        "question": "What is the smallest amount outstanding that is greater than the lowest amount outstanding among customers with an amount outstanding between 0 and 1000?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT T1.first_name, T2.first_name FROM Customers AS T1 JOIN Staff AS T2 ON T1.first_name != T2.first_name",
        "question": "What are all possible pairs of first names of customers and staff members that are not the same?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT COUNT(DISTINCT T4.staff_id) FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id JOIN Lessons AS T3 ON T1.customer_id = T3.customer_id JOIN Staff AS T4 ON T3.staff_id = T4.staff_id WHERE T1.amount_outstanding < 1000 OR T3.lesson_status_code = 'PLANNED' OR NOT EXISTS ( SELECT 1 FROM Customer_Payments AS T5 WHERE T5.customer_id = T1.customer_id )",
        "question": "How many distinct staff members are assigned to customers who either have an outstanding balance of less than 1000, have a planned lesson, or have no payment history?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "driving_school"
    },
    {
        "query": "SELECT * FROM (SELECT Region_name, Date, Label, Format, Catalogue FROM region WHERE Region_ID > 5 ORDER BY Region_name ASC) AS subquery",
        "question": "What are the details of the regions with region id greater than 5, listed in ascending order of region name?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "party_people"
    },
    {
        "query": "SELECT * FROM region WHERE Region_ID = 1 AND Region_ID BETWEEN (SELECT MIN(Region_ID) FROM region) AND (SELECT MAX(Region_ID) FROM region) LIMIT 10",
        "question": "What are the details of the region with id 1, considering it should be between the minimum and maximum region ids, and return 10 records starting from the 11th record?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT * FROM region WHERE Region_ID <= 10 ORDER BY Region_ID DESC",
        "question": "What are the details of the regions with a region id less than or equal to 10, listed in descending order by region id?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "party_people"
    },
    {
        "query": "SELECT T1.Region_name, T2.Member_Name, COUNT(T1.Region_ID) FROM region AS T1 JOIN member AS T2 ON T1.Region_ID = T2.Party_ID WHERE T1.Region_ID = 10 AND T1.Label = 'label' AND T2.Member_Name BETWEEN 'name1' AND 'name2' GROUP BY T2.Member_Name HAVING COUNT(T1.Region_ID) = 5 ORDER BY T2.Member_Name ASC LIMIT 10",
        "question": "What are the names of the top 10 members in region 10 with label 'label' and whose name falls between 'name1' and 'name2', along with their respective region names, if they have exactly 5 regions, ordered alphabetically by member name?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT Region_ID FROM region WHERE Date BETWEEN '1900-01-01' AND '2000-12-31' ORDER BY Region_ID DESC",
        "question": "What are the region IDs that have a date between 1900-01-01 and 2000-12-31, listed in descending order by region ID?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "party_people"
    },
    {
        "query": "SELECT COUNT(DISTINCT Region_ID) FROM region WHERE Region_name != 'test'",
        "question": "How many distinct region ids are there excluding the regions named 'test'?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "party_people"
    },
    {
        "query": "SELECT Region_name FROM region WHERE Region_ID = 1 AND Region_ID IN ( SELECT Region_ID FROM party WHERE Party_ID = 1 )",
        "question": "What is the name of the region that has a region id of 1 and is associated with the party that has a party id of 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT Party_name, MAX(Region_ID) FROM party WHERE Party_name != 'ABC' ORDER BY Party_name ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th parties (ordered alphabetically) that are not named 'ABC', along with their highest region ID?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "party_people"
    },
    {
        "query": "SELECT T1.Member_Name FROM member AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID WHERE T2.Region_ID BETWEEN 10 AND 20 OR T2.Party_ID IN (SELECT Party_ID FROM party_events) OR T2.Minister = 'John'",
        "question": "What are the names of the members whose party is either located in a region between 10 and 20, has an event, or is led by Minister John?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT Format FROM region WHERE Date BETWEEN '1900-01-01' AND '2000-01-01' AND Region_ID = 1 ORDER BY Format ASC LIMIT 10",
        "question": "What are the next 10 formats of the region with ID 1 in ascending order after the first 10 formats, dating from 1900 to 2000?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "party_people"
    },
    {
        "query": "SELECT T1.Party_name, T2.Member_Name FROM party AS T1 JOIN member AS T2 ON T1.Party_ID = T2.Party_ID WHERE NOT EXISTS (SELECT 1 FROM party_events AS T3 WHERE T3.Party_ID = T1.Party_ID AND T3.Event_Name = 'Election') ORDER BY T1.Party_name DESC",
        "question": "What are the names of parties and their members that have not participated in any 'Election' event, listed in descending order of party names?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT Region_name FROM region WHERE Format != 'pdf' ORDER BY Region_name ASC",
        "question": "What are the names of regions with non-pdf formats, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "party_people"
    },
    {
        "query": "SELECT Region_ID FROM region WHERE Region_ID < 5",
        "question": "What are the region IDs less than 5?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "party_people"
    },
    {
        "query": "SELECT DISTINCT T1.Minister FROM party AS T1 JOIN member AS T2 ON T1.Party_ID = T2.Party_ID WHERE T1.Party_name = 'Party_name' OR T1.Region_ID IN (SELECT Region_ID FROM region WHERE Region_name = 'Region_name') LIMIT 10",
        "question": "What are the distinct ministers of the party named 'Party_name' or parties in regions named 'Region_name', listing 11th to 20th results?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT Region_name FROM region WHERE Region_ID = 1 OR Date BETWEEN '2020-01-01' AND '2020-12-31' OR NOT EXISTS (SELECT 1 FROM party WHERE party.Region_ID = region.Region_ID)",
        "question": "What are the region names where the region id is 1, or the date is in the year 2020, or there are no parties associated with the region?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT T1.Region_name, T2.Party_name FROM region AS T1 JOIN party AS T2 ON T1.Region_ID = T2.Region_ID JOIN member AS T3 ON T2.Party_ID = T3.Party_ID WHERE T3.Member_ID <= 10000 LIMIT 10",
        "question": "What are the next 10 region names and corresponding party names for parties with members who have a member ID of 10000 or less?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Member_Name) FROM member AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID JOIN party_events AS T3 ON T2.Party_ID = T3.Party_ID JOIN region AS T4 ON T2.Region_ID = T4.Region_ID WHERE T1.Member_ID < 100",
        "question": "How many unique members with a member ID less than 100 are in the parties?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT Region_name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM party WHERE Party_name = 'ABC') LIMIT 10",
        "question": "What are the next 10 region names where there is no party named 'ABC'?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT T1.Region_name FROM region AS T1 WHERE T1.Region_ID = 1 AND T1.Region_ID IN ( SELECT T2.Region_ID FROM party AS T2 WHERE T2.Party_ID = 1 ) ORDER BY T1.Region_ID DESC",
        "question": "What is the region name of the region with id 1 where the party id is 1, and list the results in descending order of region id?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_people"
    },
    {
        "query": "SELECT Party_name FROM party WHERE Party_ID >= 1 AND Party_name = 'Party_name'",
        "question": "Which party name has a party ID greater than or equal to 1 and is also named 'Party_name'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "party_people"
    },
    {
        "query": "SELECT MAX(T1.Tonnage) FROM ship AS T1 JOIN mission AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Launched_Year <= 2000",
        "question": "What is the maximum tonnage of ships that were involved in a mission launched before or in the year 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT Name FROM ship WHERE Tonnage >= 1000 ORDER BY Tonnage DESC",
        "question": "What are the names of ships with a tonnage of 1000 or more, listed in descending order of tonnage?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT T1.Name FROM ship AS T1 JOIN mission AS T2 ON T1.Ship_ID = T2.Ship_ID JOIN ship AS T3 ON T2.Ship_ID = T3.Ship_ID WHERE T2.Launched_Year > 1945 AND T3.Tonnage > 1000 AND EXISTS (SELECT 1 FROM mission AS T4 WHERE T4.Ship_ID = T2.Ship_ID AND T4.Speed_knots > 20) LIMIT 10",
        "question": "What are the names of the next 10 ships that have a tonnage over 1000 and launched after 1945 with speeds over 20 knots in at least one mission?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT T1.Mission_ID FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID JOIN ship AS T3 ON T2.Ship_ID = T3.Ship_ID WHERE (T1.Speed_knots BETWEEN 10 AND 20) OR (T1.Launched_Year > 1990) OR (T2.Tonnage > 50000) ORDER BY T1.Mission_ID DESC LIMIT 10",
        "question": "What are the last 10 mission IDs in descending order of missions with speeds between 10 and 20 knots or launched after 1990 or with a tonnage over 50000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT COUNT(T1.Mission_ID) FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Code = 'Code1' OR T1.Code = 'Code2' OR T1.Code IN (SELECT Code FROM mission WHERE Launched_Year > 2000)",
        "question": "How many missions are there with the code 'Code1', 'Code2', or launched after the year 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT T1.Ship_ID, SUM(T1.Speed_knots) AS sum_speed, MAX(T2.Tonnage) AS max_tonnage FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Tonnage >= 10000 GROUP BY T1.Ship_ID ORDER BY sum_speed DESC",
        "question": "What are the ship IDs along with the sum of their speeds and the maximum tonnage, for ships with a tonnage of at least 10000, ordered by the sum of their speeds in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT T1.Name, T2.Code FROM ship AS T1 JOIN mission AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Location = 'Japan' AND T2.Fate = 'Sunk'",
        "question": "What are the names of the ships and their mission codes that were sunk in Japan?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT * FROM mission WHERE Speed_knots > 20 OR Speed_knots BETWEEN 10 AND 20 OR Speed_knots IN (SELECT Speed_knots FROM mission WHERE Speed_knots < 15)",
        "question": "What are the details of the missions with a speed of more than 20 knots, between 10 and 20 knots, or where the speed is less than 15 knots?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Code), COUNT(DISTINCT T2.Name), SUM(T1.Launched_Year) FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Speed_knots < 20 LIMIT 10",
        "question": "What are the counts of distinct mission codes and ship names, and the total launched years of the 11th to 20th slowest missions with speeds less than 20 knots?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT T1.Mission_ID, T2.Tonnage FROM Mission AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year <= T2.Tonnage",
        "question": "What are the mission ids and corresponding ship tonnages of the ships where the mission launched year is less than or equal to the ship tonnage?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT T2.Name, T1.Location, SUM(T1.Speed_knots) FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID JOIN ship AS T3 ON T2.Ship_ID = T3.Ship_ID WHERE T1.Code = 'Code' GROUP BY T2.Name, T1.Location ORDER BY T2.Name ASC LIMIT 10",
        "question": "What are the names of ships, their locations, and the total speed in knots for each ship and location combination, grouped by name and location, ordered by ship name in ascending order, starting from the 11th entry?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT T1.Name FROM ship AS T1 JOIN mission AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Tonnage > 1000 AND T2.Launched_Year BETWEEN 1940 AND 1945 AND T2.Speed_knots < 20 ORDER BY T2.Launched_Year DESC",
        "question": "What are the names of the ships with a tonnage of over 1000 that were launched between 1940 and 1945 with a speed of less than 20 knots, listed in descending order of launch year?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "ship_mission"
    },
    {
        "query": "SELECT COUNT(Singer_ID) FROM singer",
        "question": "How many singers are there?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "singer"
    },
    {
        "query": "SELECT s1.Name, AVG(s2.Sales) FROM singer s1 JOIN song s2 ON s1.Singer_ID = s2.Singer_ID WHERE s2.Sales > 10000 OR s1.Citizenship = 'USA' OR NOT EXISTS (SELECT 1 FROM singer s3 WHERE s3.Singer_ID = s1.Singer_ID AND s3.Net_Worth_Millions < 10) ORDER BY s1.Name ASC",
        "question": "What are the names of singers from the USA or with a net worth of at least 10 million dollars or with average song sales greater than 10,000, along with their average song sales, listed in ascending order by singer name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "singer"
    },
    {
        "query": "SELECT Singer_ID FROM singer WHERE Birth_Year BETWEEN 1980 AND 1990 AND Citizenship = 'USA' AND Net_Worth_Millions > 10",
        "question": "What are the IDs of singers born in the USA between 1980 and 1990 with a net worth of more than 10 million?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "singer"
    },
    {
        "query": "SELECT Singer_ID FROM singer ORDER BY Singer_ID DESC LIMIT 10",
        "question": "What are the last 10 singer ids in descending order, excluding the first 10?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "singer"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Title), SUM(T3.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN song AS T3 ON T2.Singer_ID = T3.Singer_ID WHERE T1.Net_Worth_Millions > 50 GROUP BY T1.Name ORDER BY T1.Name ASC",
        "question": "What are the names of singers who are worth more than $50 million, along with the number of unique song titles and total sales for each singer, listed in ascending order by singer name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "singer"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Title), T1.Sales FROM song AS T1 WHERE T1.Highest_Position BETWEEN 1 AND 10 AND T1.Sales > 1000000 AND NOT EXISTS (SELECT 1 FROM singer AS T2 WHERE T2.Singer_ID = T1.Singer_ID AND T2.Net_Worth_Millions < 10) ORDER BY T1.Sales ASC",
        "question": "How many unique song titles and what are the sales figures of the songs that reached a highest position between 1 and 10, have sales over 1 million, and are by singers with a net worth of 10 million or more, listed in ascending order of sales?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "singer"
    },
    {
        "query": "SELECT Singer_ID FROM singer WHERE Citizenship = 'USA' OR Birth_Year > 1980 OR Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 1000000)",
        "question": "What are the singer IDs of the singers from the USA or born after 1980 or singers of the songs that sold more than 1 million copies?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "singer"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.Song_ID) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Highest_Position = 1 GROUP BY T1.Name ORDER BY T1.Name ASC",
        "question": "Which singers have had a number one song, and how many number one songs has each singer had, listed in alphabetical order by singer name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "singer"
    },
    {
        "query": "SELECT COUNT(DISTINCT Singer_ID), COUNT(Singer_ID) FROM singer WHERE Net_Worth_Millions > 100 LIMIT 10",
        "question": "What are the counts of distinct singer IDs and total singer IDs of the top 10 richest singers with a net worth of more than 100 million?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "singer"
    },
    {
        "query": "SELECT T1.Name FROM singer AS T1 WHERE T1.Citizenship = 'USA' AND EXISTS (SELECT 1 FROM song AS T2 WHERE T2.Title = 'Hello' AND T2.Singer_ID = T1.Singer_ID) ORDER BY T1.Net_Worth_Millions DESC",
        "question": "Which USA singers who have sung the song 'Hello' are listed in order of their net worth from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "singer"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Net_Worth_Millions <= 50 ORDER BY SUM(T2.Sales) DESC",
        "question": "What are the names of singers with a net worth of 50 million or less, along with their total song sales, listed in descending order of total sales?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "singer"
    },
    {
        "query": "SELECT Singer_ID FROM singer ORDER BY Singer_ID DESC",
        "question": "What are the singer IDs in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "singer"
    },
    {
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions > 10 OR EXISTS (SELECT Singer_ID FROM song WHERE singer.Singer_ID = song.Singer_ID AND Sales > 1000000)",
        "question": "Which singers have a net worth of more than 10 million or have at least one song with over 1 million sales?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "singer"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Net_Worth_Millions >= 10 ORDER BY T1.Name ASC",
        "question": "What are the names of singers with a net worth of at least 10 million and their total song sales, listed in ascending order by singer name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "singer"
    },
    {
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 50 AND so.Sales BETWEEN 100000 AND 200000 AND so.Highest_Position < 10",
        "question": "What are the names of singers with a net worth over 50 million and the titles of their songs that sold between 100,000 and 200,000 copies and reached a position of less than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "singer"
    },
    {
        "query": "SELECT T1.Name FROM singer AS T1 WHERE T1.Name != 'Adele' ORDER BY T1.Name ASC",
        "question": "What are the names of singers other than Adele, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "singer"
    },
    {
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Net_Worth_Millions > 10",
        "question": "What are the names of singers with a net worth of more than 10 million?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "singer"
    },
    {
        "query": "SELECT T1.Title FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Net_Worth_Millions > 50 AND T2.Citizenship = 'USA' ORDER BY T1.Title ASC LIMIT 10",
        "question": "What are the next 10 song titles, in ascending order, by singers from the USA with a net worth over 50 million dollars?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "singer"
    },
    {
        "query": "SELECT DISTINCT T1.Official_Name FROM city AS T1 WHERE NOT EXISTS (SELECT 1 FROM farm_competition AS T2 WHERE T2.Host_city_ID = T1.City_ID AND T2.Hosts = 'official') ORDER BY T1.City_ID DESC",
        "question": "What are the names of the cities that have never officially hosted a farm competition, listed in descending order by city ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "farm"
    },
    {
        "query": "SELECT MAX(Total_Horses) FROM farm WHERE Year <= 2010 ORDER BY Total_Horses ASC LIMIT 5",
        "question": "What is the fifth lowest maximum total number of horses in farms from years before or equal to 2010?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "farm"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Farm_ID) FROM competition_record AS T1 JOIN competition_record AS T2 ON T1.Competition_ID = T2.Competition_ID WHERE T1.Rank > 10 OR T2.Rank = 5 AND T1.Farm_ID BETWEEN 100 AND 200 LIMIT 100",
        "question": "What is the number of distinct farms with ids between 100 and 200 that either participated in a competition where they ranked above 10 or participated in the same competition as a farm that ranked 5?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "farm"
    },
    {
        "query": "SELECT T1.City_ID, COUNT(T2.Competition_ID) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T2.Year IN (SELECT Year FROM farm_competition WHERE Theme = 'Farm Competition') GROUP BY T1.City_ID ORDER BY T1.City_ID ASC",
        "question": "What are the cities and their respective counts of farm competitions that are hosted in the same year as other farm competitions with the theme 'Farm Competition', listed in ascending order of city ID?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "farm"
    },
    {
        "query": "SELECT T1.City_ID, COUNT(T2.Competition_ID) FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 100000 AND T2.Year BETWEEN 2010 AND 2020 AND T1.Census_Ranking = 'Capital' LIMIT 10",
        "question": "What are the city IDs and the number of farm competitions they hosted between 2010 and 2020, for cities with a population over 100,000 and a census ranking of 'Capital', listed from the 11th to the 20th result?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "farm"
    },
    {
        "query": "SELECT T1.City_ID, MIN(T1.Population) FROM city AS T1 JOIN city AS T2 ON T1.City_ID = T2.City_ID WHERE T1.Population BETWEEN 10000 AND 100000 GROUP BY T1.City_ID ORDER BY T1.City_ID ASC LIMIT 10",
        "question": "What are the city IDs and the minimum population for the 11th to 20th cities when ordered by city ID in ascending order, where the population is between 10,000 and 100,000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "farm"
    },
    {
        "query": "SELECT Farm_ID FROM farm WHERE Total_Horses > 100 AND Working_Horses > 50",
        "question": "Which farm IDs have more than 100 total horses and more than 50 working horses?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "farm"
    },
    {
        "query": "SELECT T1.Official_Name, T2.Theme, T3.Rank FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID JOIN competition_record AS T3 ON T2.Competition_ID = T3.Competition_ID",
        "question": "What are the official names of cities, themes of farm competitions, and ranks of competition records for cities that host farm competitions?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "farm"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Farm_ID) FROM competition_record AS T1 JOIN competition_record AS T2 ON T1.Farm_ID = T2.Farm_ID WHERE T1.Rank > 1 AND T2.Rank BETWEEN 2 AND 5 AND T1.Competition_ID = 10 ORDER BY COUNT(DISTINCT T1.Farm_ID) DESC",
        "question": "How many farms participated in competition ID 10 with a rank above 1 and also participated in the same competition with a rank between 2 and 5?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "farm"
    },
    {
        "query": "SELECT Host_city_ID, AVG(Rank) FROM farm_competition JOIN competition_record ON farm_competition.Competition_ID = competition_record.Competition_ID GROUP BY Host_city_ID HAVING AVG(Rank) = 1",
        "question": "What are the host city IDs of the farm competitions where the average ranking of participating farms is 1?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "farm"
    },
    {
        "query": "SELECT T1.City_ID FROM city AS T1 JOIN city AS T2 ON T1.City_ID = T2.City_ID WHERE T1.Population > (SELECT AVG(Population) FROM city)",
        "question": "What city ids have a population higher than the average population of all cities?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "farm"
    },
    {
        "query": "SELECT Farm_ID FROM farm WHERE Oxen != 1 LIMIT 10",
        "question": "What are the IDs of the next 10 farms that have more or less than 1 oxen, starting from the 11th farm?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "farm"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.City_ID) FROM farm_competition AS T1 JOIN city AS T2 ON T1.Host_city_ID = T2.City_ID",
        "question": "How many distinct cities have hosted the farm competition?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "farm"
    },
    {
        "query": "SELECT COUNT(DISTINCT farm_competition.Host_city_ID), farm_competition.Theme FROM farm_competition WHERE farm_competition.Year = 2010",
        "question": "What is the number of distinct host cities and the corresponding themes of the 2010 farm competitions?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "farm"
    },
    {
        "query": "SELECT T1.City_ID FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 500000 OR T2.Year = 2010 OR NOT EXISTS (SELECT 1 FROM competition_record AS T3 WHERE T2.Competition_ID = T3.Competition_ID) ORDER BY T1.City_ID DESC LIMIT 10",
        "question": "What are the city ids of the top 10 cities with a population over 500000, or hosting a farm competition in 2010, or with no competition record, ordered by city id in descending order, from the 11th city onwards?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "farm"
    },
    {
        "query": "SELECT T1.investor_id, T1.Investor_details FROM Investors AS T1 WHERE EXISTS (SELECT 1 FROM Transactions AS T2 WHERE T2.investor_id = T1.investor_id AND T2.transaction_type_code = 'BUY' LIMIT 1)",
        "question": "What are the details of investors who have made at least one 'BUY' transaction?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT investor_id, Investor_details FROM Investors AS T1 WHERE investor_id = 1 AND Investor_details = 'Details' ORDER BY investor_id DESC",
        "question": "What is the investor details of the investor with investor id 1 and investor details 'Details', listed in descending order of investor id?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT COUNT(transaction_id) FROM Transactions WHERE date_of_transaction > '2020-01-01' OR investor_id IN (SELECT investor_id FROM Investors WHERE Investor_details LIKE '%abc%')",
        "question": "How many transactions occurred after January 1, 2020, or involved investors with details containing 'abc'?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT MIN(date_of_transaction) FROM Transactions WHERE amount_of_transaction >= 1000 ORDER BY date_of_transaction ASC",
        "question": "What is the earliest date of a transaction where the amount of transaction is greater than or equal to 1000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT T1.investor_id, SUM(T2.amount_of_transaction) FROM Transactions AS T1 JOIN Transactions AS T2 ON T1.transaction_id = T2.transaction_id WHERE T2.date_of_transaction <= '2020-01-01' GROUP BY T1.investor_id ORDER BY SUM(T2.amount_of_transaction) DESC",
        "question": "What are the total transaction amounts for each investor up to January 1, 2020, listed in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT T1.investor_id FROM Transactions AS T1 JOIN Investors AS T2 ON T1.investor_id = T2.investor_id WHERE T1.amount_of_transaction < 10000 ORDER BY T1.transaction_id DESC",
        "question": "What are the investor ids for transactions with an amount less than 10000, listed in descending order of transaction id?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT share_count, COUNT(transaction_id), SUM(amount_of_transaction) FROM Transactions WHERE transaction_type_code != 'S' GROUP BY share_count ORDER BY COUNT(transaction_id) DESC LIMIT 10",
        "question": "What are the top 10 transaction share counts with the most transactions, excluding sales, along with the total number of transactions and the total transaction amount for each share count?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT T1.investor_id, COUNT(DISTINCT T2.lot_id) FROM Investors AS T1 JOIN Lots AS T2 ON T1.investor_id = T2.investor_id WHERE T1.investor_id = 1 GROUP BY T1.investor_id HAVING COUNT(T2.lot_id) > 2 ORDER BY T1.investor_id DESC",
        "question": "What is the investor id and number of distinct lots owned by an investor with more than 2 lots, ordered by investor id in descending order, for the investor with id 1?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT investor_id FROM Investors WHERE investor_id <= 100",
        "question": "What are the investor ids of the investors with an investor id less than or equal to 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT Investor_details FROM Investors WHERE investor_id <= 500 ORDER BY investor_id DESC",
        "question": "What are the investor details for investors with an investor id of 500 or less, listed in descending order by investor id?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT T1.investor_id, T2.lot_details FROM Investors AS T1 JOIN Lots AS T2 ON T1.investor_id = T2.investor_id WHERE T2.lot_id <= 10",
        "question": "What are the investor ids and corresponding lot details for lots with id less than or equal to 10?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT investor_id, Investor_details FROM Investors WHERE investor_id >= 100 ORDER BY investor_id ASC",
        "question": "What are the investor ids and their corresponding details of investors with an investor id of 100 or higher, listed in ascending order by investor id?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT T1.investor_id, COUNT(T3.transaction_id) FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id JOIN Transactions_Lots AS T3 ON T2.transaction_id = T3.transaction_id",
        "question": "What are the investor ids and their corresponding total number of transactions lots?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_share_transactions"
    },
    {
        "query": "SELECT T1.name, COUNT(DISTINCT T2.station_id) FROM train AS T1 JOIN route AS T2 ON T1.id = T2.train_id WHERE T1.id IN (SELECT train_id FROM route WHERE station_id = 1) ORDER BY T1.name ASC",
        "question": "What are the names of the trains that stop at station 1 and how many distinct stations do they stop at, listed in ascending order by train name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT T1.train_number, COUNT(T2.station_id) FROM train AS T1 JOIN route AS T2 ON T1.id = T2.train_id JOIN station AS T3 ON T3.id = T2.station_id GROUP BY T1.train_number",
        "question": "What is the train number and how many stations does each train have in its route?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT name, origin FROM train WHERE origin = 'London' AND destination = 'Birmingham' ORDER BY name DESC",
        "question": "What are the names and origins of the trains going from London to Birmingham, listed in descending order by name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT name FROM train WHERE EXISTS (SELECT 1 FROM route WHERE train.id = route.train_id AND route.station_id = (SELECT id FROM station WHERE network_name = 'London'))",
        "question": "What are the names of the trains that stop at the London station?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT T1.train_number, T1.name FROM train AS T1 JOIN route AS T2 ON T1.id = T2.train_id JOIN station AS T3 ON T2.station_id = T3.id WHERE T3.network_name IN (SELECT T4.network_name FROM station AS T4 WHERE T4.local_authority = 'London')",
        "question": "What are the numbers and names of the trains that pass through the stations in the same network as those in London?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT train_number FROM train WHERE train_number > 50 ORDER BY train_number DESC",
        "question": "What are the train numbers greater than 50, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT train_number, name FROM train WHERE id > 10 AND origin = 'London'",
        "question": "What are the names and train numbers of trains originating from London with id greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT train_number FROM train WHERE name = 'Express' OR origin = 'London' OR destination NOT IN (SELECT local_authority FROM station)",
        "question": "What are the train numbers of the trains that are named 'Express', start in London, or do not end in any local authority covered by a station?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT T1.train_number, T2.network_name FROM train AS T1 JOIN route AS T3 ON T1.id = T3.train_id JOIN station AS T2 ON T3.station_id = T2.id WHERE T1.origin = 'London'",
        "question": "What are the train numbers and network names for trains originating from London?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT train_number FROM train WHERE id > (SELECT MAX(train_id) FROM route) ORDER BY train_number DESC",
        "question": "What are the train numbers of trains with IDs greater than the maximum train ID in the route table, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT T1.name, COUNT(T2.station_id) FROM train AS T1 JOIN route AS T2 ON T1.id = T2.train_id GROUP BY T1.name HAVING COUNT(T2.station_id) > 10 LIMIT 5",
        "question": "What are the names of the 5 trains with the most stops after the first 5, where each train has more than 10 stops?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT train_number AS changed_name, COUNT(id) FROM train WHERE time = '08:00' GROUP BY train_number ORDER BY train_number DESC",
        "question": "What are the train numbers with the count of trains that depart at 08:00, listed in descending order by train number?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "station_weather"
    },
    {
        "query": "SELECT T1.LName, SUM(T3.weight) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex != 'M' GROUP BY T1.LName",
        "question": "What are the total weights of pets owned by female students, grouped by the last name of the students?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT Fname, LName FROM Student WHERE Age < 20 LIMIT 5",
        "question": "What are the first and last names of students under the age of 20, listed from the 6th to the 10th student?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT T1.LName FROM Student AS T1 WHERE T1.Age BETWEEN 18 AND 25 ORDER BY T1.LName DESC",
        "question": "What are the last names of students between the ages of 18 and 25 listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT LName, SUM(Age) FROM Student WHERE Sex = 'M' GROUP BY LName ORDER BY SUM(Age) DESC",
        "question": "What are the total ages of male students grouped by their last names, listed in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.PetID) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.pet_age BETWEEN 2 AND 5 AND T3.Age > 20 ORDER BY T1.PetID DESC",
        "question": "How many distinct pets that are between the age of 2 and 5 belong to students who are older than 20?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT T1.StuID, T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.weight > (SELECT AVG(weight) FROM Pets)",
        "question": "What are the IDs and last names of students who have pets that are heavier than the average weight of all pets?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT Fname FROM Student WHERE Age > 20",
        "question": "What are the first names of the students who are older than 20?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT S1.StuID FROM Student S1 JOIN Has_Pet S2 ON S1.StuID = S2.StuID JOIN Pets S3 ON S2.PetID = S3.PetID WHERE S1.Age > 20 OR S3.PetType = 'dog' OR S3.pet_age < (SELECT AVG(pet_age) FROM Pets)",
        "question": "What are the student IDs of students who are over 20 years old, or have a dog, or have a pet that is younger than the average age of all pets?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT Fname FROM Student WHERE Age >= 20",
        "question": "What are the first names of the students who are 20 years old or older?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.StuID), SUM(T1.Age) FROM Student AS T1 WHERE T1.Age <= 20 LIMIT 5",
        "question": "What is the count of distinct student IDs and the sum of ages of the students aged 20 or younger for the 6th to 10th rows of the result?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT COUNT(PetID) FROM Pets WHERE weight BETWEEN 20 AND 50 AND pet_age > 10 LIMIT 10",
        "question": "What is the number of pets that weigh between 20 and 50 and are older than 10, for the 11th to 20th records?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT T1.LName FROM Student AS T1 WHERE T1.Sex != 'Male'",
        "question": "What are the last names of the female students?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT S.LName, S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.pet_age > 5 ORDER BY S.LName ASC LIMIT 10",
        "question": "What are the last and first names of the students, in ascending order by last name, whose pets are more than 5 years old, excluding the first 10 results?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "pets_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.pilot_name), T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.age < 30 GROUP BY T1.location ORDER BY COUNT(DISTINCT T2.pilot_name) DESC",
        "question": "For each location, how many unique pilots under the age of 30 are there, listed in descending order by the number of unique pilots?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.plane_name), COUNT(T3.location) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name JOIN Hangar AS T3 ON T1.plane_name = T3.plane_name WHERE T1.age > 30 OR T2.location IN (SELECT location FROM Hangar WHERE location = 'New York')",
        "question": "How many unique planes can pilots over 30 fly and how many hangar locations in total are there for these planes or the planes located in New York?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT COUNT(plane_name) FROM PilotSkills WHERE age <= 30",
        "question": "How many planes can pilots aged 30 or younger fly?",
        "iter": 6,
        "flag": true,
        "hardness": "easy",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT T1.plane_name, MIN(T1.age) FROM PilotSkills AS T1 WHERE T1.pilot_name = 'John' AND EXISTS (SELECT 1 FROM Hangar AS T2 WHERE T1.plane_name = T2.plane_name AND T2.location = 'New York') GROUP BY T1.plane_name",
        "question": "What is the minimum age for pilot John to fly each plane that is currently located in New York?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT pilot_name FROM PilotSkills WHERE age > 30 GROUP BY age",
        "question": "What are the names of pilots who are older than 30, grouped by their age?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT T1.plane_name, SUM(T1.age) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.plane_name HAVING SUM(T1.age) > 50",
        "question": "What planes have a total pilot age greater than 50?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age > (SELECT AVG(age) FROM PilotSkills)",
        "question": "What are the names of pilots older than the average age of pilots?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT T1.pilot_name, COUNT(DISTINCT T2.location) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age > 40 OR T1.plane_name NOT IN (SELECT plane_name FROM Hangar WHERE location = 'New York') ORDER BY T1.pilot_name DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th oldest pilots older than 40 and the number of different locations of their planes excluding New York, listed in descending order of pilot name?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.plane_name) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location < 'New York' ORDER BY T1.age DESC",
        "question": "How many distinct planes are located in a city alphabetically before New York, listed in descending order of pilot age?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age > 30 OR T2.location = 'New York' ORDER BY T1.age DESC",
        "question": "What are the names of pilots older than 30 years or flying planes located in New York, listed in descending order of age?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT T1.pilot_name, T2.location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.age ASC",
        "question": "What are the names and locations of the planes flown by each pilot, sorted by the pilot's age from youngest to oldest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT T1.pilot_name, AVG(T1.age) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age <= 40 GROUP BY T1.pilot_name LIMIT 5",
        "question": "What are the names of pilots along with their average age, for pilots aged 40 or younger, for the 6th to 10th results?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "pilot_1"
    },
    {
        "query": "SELECT T1.Name FROM Track AS T1 JOIN MediaType AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.UnitPrice <= 1.99",
        "question": "What are the names of the tracks with a unit price of 1.99 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT Title FROM Album WHERE AlbumId >= 1 ORDER BY Title DESC LIMIT 10",
        "question": "What are the next 10 album titles after the first 10, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT FirstName, LastName, Email FROM Customer WHERE Country = 'USA' AND City = 'New York' AND State NOT IN (SELECT State FROM Employee)",
        "question": "What are the names and email addresses of customers from New York, USA, who are from a state where there are no employees?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT Title FROM Album WHERE ArtistId = 1 AND AlbumId BETWEEN 1 AND 10 AND Title = 'Test' ORDER BY Title ASC",
        "question": "What is the title of the album with artist id 1 and album id between 1 and 10 that is named 'Test', listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT COUNT(T1.Name) FROM Track AS T1 WHERE T1.Name = 'song' AND T1.TrackId BETWEEN 1 AND 100 AND T1.TrackId IN (SELECT T2.TrackId FROM InvoiceLine AS T2 WHERE T2.UnitPrice > 0.99)",
        "question": "How many tracks are there, with a name of 'song', and an id between 1 and 100, and have been bought at least once at a price higher than $0.99?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.GenreId), COUNT(DISTINCT T1.MediaTypeId), T2.Name FROM Track AS T1 JOIN MediaType AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.UnitPrice < 1",
        "question": "What is the number of unique genres and media types of tracks, along with the name of the media type, for tracks with a unit price less than 1 dollar?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT T1.Title FROM (SELECT AlbumId, Title FROM Album) AS T1 WHERE T1.AlbumId = 1 OR T1.AlbumId = (SELECT AlbumId FROM Album WHERE AlbumId = 2) ORDER BY T1.Title DESC",
        "question": "What are the titles of the albums with id 1 or 2, listed in descending order by title?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT DISTINCT T1.Name FROM Genre AS T1 JOIN Track AS T2 ON T1.GenreId = T2.GenreId WHERE T1.GenreId < 10 OR T2.Name = 'song' ORDER BY T1.Name ASC",
        "question": "What are the distinct names of genres with a genre id less than 10, or genres of tracks with the name 'song', listed in ascending order by genre name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT T1.Name FROM Track AS T1 JOIN Track AS T2 ON T1.TrackId = T2.TrackId WHERE T1.Name NOT IN (SELECT Name FROM Track WHERE AlbumId = 1) ORDER BY T1.Name DESC",
        "question": "What are the names of the tracks that are not in the album with id 1, ordered by name in descending order?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Title) FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'Coldplay' AND NOT EXISTS (SELECT * FROM Track AS T3 WHERE T3.AlbumId = T1.AlbumId AND T3.Name = 'Yellow')",
        "question": "How many distinct albums by Coldplay do not have a track called Yellow?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.UnitPrice) FROM InvoiceLine AS T1",
        "question": "How many distinct prices are there for the items in the invoices?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "chinook_1"
    },
    {
        "query": "SELECT Name FROM roller_coaster WHERE Length BETWEEN 100 AND 200 ORDER BY Length ASC LIMIT 5",
        "question": "What are the names of the 6th to 10th roller coasters with a length between 100 and 200, ordered from shortest to longest?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT T1.Name FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Length > 100 AND T1.Height > 50 AND T1.Country_ID IN ( SELECT Country_ID FROM country WHERE Area > 100000 )",
        "question": "What are the names of the roller coasters in countries with an area greater than 100,000 that are taller than 50 meters and longer than 100 meters?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT Name FROM roller_coaster WHERE Country_ID != 1",
        "question": "What are the names of roller coasters not located in country with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT * FROM roller_coaster WHERE Length >= 500",
        "question": "What are the details of roller coasters that are 500 meters or longer?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT MIN(Length) FROM roller_coaster WHERE Height BETWEEN 10 AND 20 ORDER BY Length ASC",
        "question": "What is the shortest length of roller coasters with a height between 10 and 20?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT Name FROM roller_coaster WHERE Length != 100 AND Speed != '25'",
        "question": "What are the names of the roller coasters that are neither 100 units in length nor 25 units in speed?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT Name FROM roller_coaster WHERE Length = 100",
        "question": "What are the names of the roller coasters that are 100 units in length?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT Name FROM roller_coaster WHERE Length < 500 ORDER BY Name DESC",
        "question": "What are the names of all roller coasters shorter than 500 meters, listed in descending alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT T1.Name, T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Length > 500 AND T2.Population > 50000000 LIMIT 10",
        "question": "What are the names and countries' populations of the 11th to 20th roller coasters that are longer than 500 and locate in countries with population more than 50 million?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT T1.Name FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.Population < 1000000 OR T1.Height > 50 OR T1.Country_ID NOT IN (SELECT Country_ID FROM country WHERE Area < 100000) ORDER BY T1.Length ASC",
        "question": "What are the names of the roller coasters from countries with a population less than 1 million, or a height greater than 50, or not from countries with an area less than 100000 square kilometers, listed in ascending order of length?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT T1.Name, AVG(T1.Length) FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Height >= 50 ORDER BY T1.Name ASC LIMIT 10",
        "question": "What are the names and average lengths of the next 10 roller coasters, ordered alphabetically by name, that are at least 50 units in height?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT Name FROM roller_coaster WHERE Length > 1000 OR Speed = 'Fast' ORDER BY Height DESC",
        "question": "What are the names of the roller coasters that are either longer than 1000 units or have a speed of 'Fast', listed in descending order of their heights?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT T1.Name, AVG(T1.Height) FROM roller_coaster AS T1 WHERE T1.Country_ID IN (SELECT Country_ID FROM country WHERE Name = 'USA') GROUP BY T1.Name",
        "question": "What are the names of roller coasters in the USA and their average height?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT T2.Name, COUNT(T1.Roller_Coaster_ID) FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Length > 100 AND T1.Height < 50 AND T1.Speed LIKE '%mph' AND EXISTS (SELECT * FROM country WHERE T2.Country_ID = T1.Country_ID) GROUP BY T2.Name",
        "question": "What are the names of countries and the number of roller coasters with length over 100, height under 50, and speed measured in mph in each country?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID JOIN country AS T3 ON T2.Country_ID = T3.Country_ID WHERE T1.Length <= 100",
        "question": "What are the names of the roller coasters and the countries where the length of the roller coaster is less than or equal to 100 meters?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "roller_coaster"
    },
    {
        "query": "SELECT Name FROM author WHERE EXISTS (SELECT 1 FROM book WHERE book.Author_ID = author.Author_ID AND Sale_Amount = 'High' AND EXISTS (SELECT 1 FROM press WHERE press.Press_ID = book.Press_ID AND Month_Profits_billion > Year_Profits_billion))",
        "question": "What are the names of authors who have written books for presses that have higher monthly profits than yearly profits and the books have high sales?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_press"
    },
    {
        "query": "SELECT T1.Title FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID WHERE T2.Name = 'ABC Press' ORDER BY T1.Title ASC",
        "question": "What are the titles of the books published by 'ABC Press' in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_press"
    },
    {
        "query": "SELECT T1.Name, T2.Title FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Sale_Amount <= 10000 LIMIT 10",
        "question": "What are the names of the authors and their books that have sold 10,000 copies or less, listing 10 items starting from the 11th item?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_press"
    },
    {
        "query": "SELECT Sale_Amount FROM book ORDER BY Sale_Amount DESC",
        "question": "What are the sale amounts of books in the order from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "book_press"
    },
    {
        "query": "SELECT MAX(COUNT(DISTINCT T1.Press_ID)) FROM book AS T1 GROUP BY T1.Author_ID",
        "question": "What is the maximum number of different presses an author has published with?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "book_press"
    },
    {
        "query": "SELECT T1.Title, COUNT(T2.Press_ID) FROM book AS T1 JOIN press AS T2 ON T1.Press_ID = T2.Press_ID WHERE T2.Year_Profits_billion BETWEEN 1 AND 10 OR T1.Sale_Amount = 'High' OR T1.Author_ID IN ( SELECT Author_ID FROM author WHERE Age > 60 ) GROUP BY T1.Title HAVING COUNT(T2.Press_ID) > 1",
        "question": "Which book titles are published by more than one press with yearly profits between 1 and 10 billion dollars, or have high sales, or are written by authors over 60 years old?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_press"
    },
    {
        "query": "SELECT * FROM press WHERE NOT EXISTS (SELECT 1 FROM book WHERE press.Press_ID = book.Press_ID AND book.Sale_Amount = '10000')",
        "question": "What are the details of presses which do not have a book that has sold 10000 copies?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_press"
    },
    {
        "query": "SELECT SUM(Sale_Amount) FROM book WHERE Press_ID < 10",
        "question": "What is the total sale amount of books published by presses with IDs less than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "book_press"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Sale_Amount) FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name HAVING SUM(T2.Sale_Amount) > 10000 ORDER BY SUM(T2.Sale_Amount) DESC LIMIT 5",
        "question": "What are the names of the 6th to 10th top-selling authors with total sales exceeding 10,000, ranked by their total sales in descending order?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_press"
    },
    {
        "query": "SELECT SUM(Sale_Amount) FROM book WHERE Press_ID != 1",
        "question": "What is the total sale amount of books published by presses other than press 1?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "book_press"
    },
    {
        "query": "SELECT COUNT(DISTINCT Author_ID), COUNT(Author_ID), MAX(Age) FROM author WHERE Gender != 'Male'",
        "question": "What are the number of distinct female authors, the total number of female authors, and the maximum age of female authors?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "book_press"
    },
    {
        "query": "SELECT T1.Name, T2.Title FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Sale_Amount > 100 ORDER BY T2.Title ASC",
        "question": "What are the names of authors and titles of books that sold more than 100 copies, listed in ascending order by title?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_press"
    },
    {
        "query": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline JOIN airports AS T3 ON T3.AirportCode = T2.DestAirport WHERE NOT EXISTS (SELECT 1 FROM airports AS T4 WHERE T4.AirportCode = T3.AirportCode AND T4.Country = T1.Country)",
        "question": "What airlines operate flights to airports in foreign countries?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT T1.Airline, T2.AirportName FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.FlightNo <= 100 ORDER BY T1.Airline DESC LIMIT 10",
        "question": "What are the airlines and corresponding destination airport names for flights with numbers less than or equal to 100, listed in descending order of airline, from the 11th to the 20th result?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT AVG(Airline) FROM airlines WHERE uid < 100 LIMIT 5",
        "question": "What is the average airline name for airlines with id less than 100, starting from the 6th airline?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT FlightNo FROM flights WHERE SourceAirport = 'JFK' OR DestAirport = 'LAX' OR FlightNo BETWEEN 1 AND 100 LIMIT 10",
        "question": "What are the next 10 flight numbers of flights that depart from JFK or arrive at LAX or have flight numbers between 1 and 100?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT Airline, AVG(FlightNo) FROM flights GROUP BY Airline",
        "question": "What are the average flight numbers for each airline?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT Airline FROM airlines WHERE Country = 'USA' OR Abbreviation LIKE 'A%' OR uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'JFK')",
        "question": "What are the names of US airlines, airlines with abbreviations starting with 'A', or airlines that have flights departing from JFK airport?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT COUNT(DestAirport) FROM flights WHERE Airline = 101",
        "question": "How many destination airports are served by airline 101?",
        "iter": 4,
        "flag": true,
        "hardness": "easy",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT AirportName FROM airports AS T1 WHERE City BETWEEN 'New York' AND 'Los Angeles' ORDER BY AirportName ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th airports in alphabetical order, located in cities between New York and Los Angeles?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Country = 'USA' AND T2.DestAirport = 'JFK'",
        "question": "What are the names of airlines from the USA that have flights to JFK?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT T1.Airline, T2.AirportName FROM airlines AS T1 JOIN flights AS T3 ON T1.uid = T3.Airline JOIN airports AS T2 ON T3.SourceAirport = T2.AirportCode WHERE T1.uid >= 2 ORDER BY T1.Airline DESC",
        "question": "What are the airline names and airport names of the source airports for airlines with id 2 or more, listed in descending order of airline name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT AirportName FROM airports WHERE CountryAbbrev BETWEEN 'A' AND 'M'",
        "question": "What are the names of the airports located in countries with abbreviations from A to M?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.SourceAirport), MIN(T1.FlightNo) FROM flights AS T1 WHERE T1.Airline = 101 OR T1.FlightNo BETWEEN 100 AND 200 OR EXISTS (SELECT 1 FROM airports AS T2 WHERE T2.AirportCode = T1.DestAirport) GROUP BY T1.DestAirport",
        "question": "For each destination airport, what are the number of unique source airports and the smallest flight number of flights operated by airline 101 or having flight numbers between 100 and 200, or having a destination airport that exists in the airports table?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT Airline) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports)",
        "question": "How many different airlines operate to airports that are in the list of known airports?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Abbreviation), COUNT(DISTINCT T1.Country), COUNT(T2.FlightNo) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport > 'ABC' ORDER BY T2.FlightNo ASC LIMIT 10",
        "question": "What are the counts of distinct airline abbreviations, distinct airline countries, and flight numbers for flights with destination airport codes greater than 'ABC', ordered by flight number in ascending order and limited to 10 results after the first 10?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "flight_2"
    },
    {
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE NOT EXISTS ( SELECT 1 FROM Albums AS T2 WHERE T1.SongId = T2.AId AND T2.Title = 'Album1' GROUP BY T2.Title HAVING MAX(T2.Year) = 2020 ) GROUP BY T1.Title HAVING MAX(T1.SongId) = 10",
        "question": "What is the title of the song with the song id of 10, that does not appear in the album titled 'Album1' that was released in 2020?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_2"
    },
    {
        "query": "SELECT * FROM Songs WHERE SongId NOT IN (SELECT SongId FROM Vocals WHERE Type = 'lead') LIMIT 1",
        "question": "What is the next song that does not have a lead vocal?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_2"
    },
    {
        "query": "SELECT AId FROM Albums WHERE Label IN (SELECT Label FROM Albums WHERE Type = 'LP') AND Year BETWEEN 2000 AND 2010 LIMIT 5",
        "question": "What are the next 5 album ids of albums released between 2000 and 2010 by labels that have also released LPs?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_2"
    },
    {
        "query": "SELECT MAX(T1.Title) FROM Songs AS T1 JOIN Vocals AS T2 ON T1.SongId = T2.SongId WHERE T2.Type != 'lead'",
        "question": "What is the title of the song with the highest title that does not have a lead vocal?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_2"
    },
    {
        "query": "SELECT MIN(T1.Year) FROM Albums AS T1 WHERE T1.Year >= 2010 ORDER BY T1.Year ASC",
        "question": "What is the earliest year for an album released in 2010 or later?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_2"
    },
    {
        "query": "SELECT COUNT(SongId) FROM Songs WHERE Title = 'Song Title'",
        "question": "How many songs have the title 'Song Title'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "music_2"
    },
    {
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE EXISTS ( SELECT T2.Title FROM Albums AS T2 WHERE T2.Title = T1.Title ) ORDER BY T1.Title ASC",
        "question": "What song titles are found in both the songs and albums tables, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_2"
    },
    {
        "query": "SELECT SongId, Title FROM Songs WHERE SongId BETWEEN 1 AND 100",
        "question": "What are the song ids and titles of songs with song ids between 1 and 100?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_2"
    },
    {
        "query": "SELECT Title FROM Songs WHERE SongId BETWEEN 1 AND 10 AND SongId > 5",
        "question": "What are the titles of songs with song id between 6 and 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_2"
    },
    {
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Vocals AS T2 ON T1.SongId = T2.SongId WHERE T2.Type = (SELECT Type FROM Vocals WHERE SongId = 1)",
        "question": "What are the titles of the songs that have the same type of vocals as the song with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT SongId) FROM Songs WHERE SongId >= 1 LIMIT 10",
        "question": "What are the total number of distinct song ids from the 10th to the 20th in the songs table?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_2"
    },
    {
        "query": "SELECT Title, SongId FROM Songs ORDER BY SongId ASC",
        "question": "What are the titles and song ids of all songs in ascending order of song id?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "music_2"
    },
    {
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Vocals AS T2 ON T1.SongId = T2.SongId WHERE NOT EXISTS (SELECT 1 FROM Band AS T3 WHERE T3.Id = T2.Bandmate)",
        "question": "What are the titles of the songs that are sung by vocalists who are not band members?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_2"
    },
    {
        "query": "SELECT Title FROM Songs WHERE Title = 'Lose Yourself' OR Title = 'Hotel California' AND SongId > 100 ORDER BY Title DESC",
        "question": "What are the titles of the songs with titles either 'Lose Yourself' or 'Hotel California' with a song id greater than 100, ordered by title in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "music_2"
    },
    {
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Vocals AS T2 ON T1.SongId = T2.SongId WHERE T2.Type = 'Lead' AND T2.Bandmate = 1 AND T1.Title IN (SELECT Title FROM Songs WHERE SongId > 10)",
        "question": "Which song titles, with a song id greater than 10, have lead vocals performed by bandmate 1?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "music_2"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 JOIN Mailshot_Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'John Doe' AND T2.mailshot_id = (SELECT T3.mailshot_id FROM Mailshot_Campaigns AS T3 WHERE T3.mailshot_name = 'Campaign 1') ORDER BY T1.customer_id ASC",
        "question": "How many distinct customers named 'John Doe' are targeted by 'Campaign 1' mailshot?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT T1.customer_name, T2.mailshot_name FROM Customers AS T1 JOIN Mailshot_Customers AS T3 ON T1.customer_id = T3.customer_id JOIN Mailshot_Campaigns AS T2 ON T3.mailshot_id = T2.mailshot_id WHERE T1.customer_id = 100 AND T2.mailshot_start_date > '2020-01-01' AND T2.mailshot_name NOT IN (SELECT mailshot_name FROM Mailshot_Campaigns WHERE mailshot_end_date < '2020-01-01')",
        "question": "What are the names of the customers and the mailshot campaigns they were part of, for customer with id 100, where the campaign started after '2020-01-01' and the campaign name was not part of any campaign that ended before '2020-01-01'?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT * FROM Customers WHERE customer_id BETWEEN 100 AND 200 AND EXISTS (SELECT 1 FROM Customer_Addresses WHERE Customers.customer_id = Customer_Addresses.customer_id)",
        "question": "What information is available for customers with an ID between 100 and 200 who have at least one address?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.customer_id) FROM Customer_Addresses AS T1 JOIN Customer_Addresses AS T2 ON T1.premise_id = T2.premise_id",
        "question": "How many customers share the same premise with at least one other customer?",
        "iter": 4,
        "flag": true,
        "hardness": "easy",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT T2.customer_name FROM Customer_Addresses AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
        "question": "What are the names of the customers who have addresses recorded in the customer addresses table?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT T1.product_name, T2.mailshot_name FROM Products AS T1 JOIN Mailshot_Campaigns AS T2 ON T1.product_category = T2.product_category",
        "question": "What are the names of products and corresponding mailshot campaigns that are categorized together?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT customer_name FROM Customers WHERE customer_phone = '1234567890' OR customer_email = 'example@example.com' OR customer_id BETWEEN 100 AND 200",
        "question": "What are the names of the customers with phone number '1234567890', email 'example@example.com', or customer ID between 100 and 200?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT T1.customer_name, COUNT(DISTINCT T1.customer_id), COUNT(T2.order_id) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_name HAVING COUNT(T2.order_id) > 1 ORDER BY T1.customer_name ASC",
        "question": "What are the names of customers who have placed more than one order, along with the number of unique customers and the total number of orders they have placed, listed in ascending order by customer name?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Addresses AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_address_from >= '2020-01-01' ORDER BY T1.customer_name ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th customer who has an address that started from January 1st, 2020 onwards, listed alphabetically?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.customer_id), COUNT(DISTINCT T2.mailshot_id) FROM Customers AS T1 JOIN Mailshot_Customers AS T2 ON T1.customer_id = T2.customer_id LIMIT 10",
        "question": "What are the counts of distinct customer ids and distinct mailshot ids from the first 10 rows of joined customers and mailshot customers tables?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT product_name AS NewProduct, MIN(product_category) FROM Products GROUP BY product_name ORDER BY NewProduct ASC",
        "question": "What are the product names along with their lowest product category, listed in ascending order of product name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT T1.customer_name, T2.mailshot_name FROM Customers AS T1 INNER JOIN Mailshot_Customers AS T3 ON T1.customer_id = T3.customer_id INNER JOIN Mailshot_Campaigns AS T2 ON T3.mailshot_id = T2.mailshot_id WHERE T2.mailshot_start_date >= T3.mailshot_customer_date",
        "question": "What are the names of the customers and the corresponding mailshot campaigns where the mailshot start date is later than or equal to the customer's mailshot date?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Mailshot_Customers AS T2 ON T1.customer_id = T2.customer_id JOIN Mailshot_Campaigns AS T3 ON T2.mailshot_id = T3.mailshot_id WHERE T3.mailshot_start_date > '2022-01-01' ORDER BY T1.customer_name ASC LIMIT 10",
        "question": "What are the names of the 11th to 20th customers in alphabetical order who received a mailshot campaign that started after January 1, 2022?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT T3.mailshot_name FROM Mailshot_Customers AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id JOIN Mailshot_Campaigns AS T3 ON T1.mailshot_id = T3.mailshot_id WHERE T1.outcome_code = 'success' ORDER BY T3.mailshot_start_date ASC",
        "question": "List all the mailshot names of successful mailshot customers ordered by the start date of the mailshot campaign in ascending order.",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_campaigns_ecommerce"
    },
    {
        "query": "SELECT T1.name FROM business AS T1 WHERE T1.rating > 4 AND T1.review_count > ( SELECT AVG(review_count) FROM business ) AND NOT EXISTS ( SELECT 1 FROM review AS T2 WHERE T2.business_id = T1.business_id AND T2.rating < 4 ) ORDER BY T1.review_count DESC LIMIT 10",
        "question": "What are the names of the top 10 businesses with more reviews than the average business, a rating of more than 4, and no reviews with a rating less than 4, ordered by review count in descending order starting from the 11th?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "yelp"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name), T2.category_name FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T2.category_name != 'Fast Food' ORDER BY T2.category_name ASC",
        "question": "What is the number of unique business names for each category, excluding 'Fast Food', listed in ascending order by category?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "yelp"
    },
    {
        "query": "SELECT T1.name, T2.business_id FROM business AS T1 JOIN category AS T2 ON T1.bid = T2.business_id WHERE T1.review_count <= 100 ORDER BY T1.rating ASC LIMIT 10",
        "question": "What are the names and business ids of the 10 lowest rated businesses with 100 reviews or less, starting from the 11th business?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "yelp"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.category_name), COUNT(DISTINCT T3.neighbourhood_name), COUNT(DISTINCT T1.business_id) FROM business AS T1 LEFT JOIN category AS T2 ON T1.business_id = T2.business_id LEFT JOIN neighbourhood AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Food' OR T3.neighbourhood_name = 'Downtown' OR T1.business_id IN (SELECT T4.business_id FROM category AS T4 WHERE T4.category_name = 'Food')",
        "question": "How many distinct food categories, downtown neighborhoods, and business ids are there for businesses that are either categorized as food or located in downtown or both?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "yelp"
    },
    {
        "query": "SELECT name FROM business WHERE review_count > 100 ORDER BY rating DESC",
        "question": "What are the names of businesses with more than 100 reviews, listed in descending order of rating?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "yelp"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.business_id), COUNT(T2.category_name) FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Toronto' OR T2.category_name = 'Food' OR NOT EXISTS (SELECT 1 FROM review WHERE review.business_id = T1.business_id)",
        "question": "How many unique businesses and total categories are there in Toronto or in the 'Food' category or have no reviews?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "yelp"
    },
    {
        "query": "SELECT COUNT(bid) FROM business WHERE rating != 0",
        "question": "How many businesses have a rating other than 0?",
        "iter": 6,
        "flag": true,
        "hardness": "easy",
        "db_name": "yelp"
    },
    {
        "query": "SELECT T1.name FROM (SELECT business_id , name FROM business) AS T1 WHERE T1.business_id = 'business_id'",
        "question": "What is the name of the business with the business_id 'business_id'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "yelp"
    },
    {
        "query": "SELECT T1.name AS business_name, T2.category_name FROM business AS T1 INNER JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.rating != 0",
        "question": "What are the names of the businesses and their respective categories where the business rating is not zero?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "yelp"
    },
    {
        "query": "SELECT name FROM business WHERE review_count BETWEEN 10 AND 20 AND city = 'New York' LIMIT 10",
        "question": "What are the names of the next 10 businesses in New York with review counts between 10 and 20?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "yelp"
    },
    {
        "query": "SELECT T1.rating, T2.likes FROM review AS T1 JOIN tip AS T2 ON T1.business_id = T2.business_id",
        "question": "What are the ratings and corresponding likes for each business that has both a review and a tip?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "yelp"
    },
    {
        "query": "SELECT COUNT(*) AS count FROM business WHERE rating = 5",
        "question": "How many businesses have a rating of 5?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "yelp"
    },
    {
        "query": "SELECT T1.name, T2.category_name FROM business AS T1 JOIN category AS T2 ON T1.business_id = T2.business_id WHERE T1.review_count > 100 ORDER BY T1.rating ASC LIMIT 10",
        "question": "What are the names and categories of the next 10 lowest rated businesses with more than 100 reviews?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "yelp"
    },
    {
        "query": "SELECT T1.name FROM business AS T1 WHERE T1.review_count BETWEEN 100 AND 500 AND T1.rating > 3 AND T1.city = 'Toronto' LIMIT 10",
        "question": "What are the names of the next 10 businesses in Toronto with a rating above 3 and a review count between 100 and 500?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "yelp"
    },
    {
        "query": "SELECT category_name FROM category AS T1 WHERE business_id = 'some_business_id'",
        "question": "What are the categories of the business with the given business id?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "yelp"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.business_id), T1.name FROM business AS T1 WHERE T1.business_id NOT IN (SELECT T2.business_id FROM category AS T2)",
        "question": "How many unique businesses are there that are not associated with any category and what are their names?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "yelp"
    },
    {
        "query": "SELECT T1.name FROM Customers AS T1 WHERE T1.age BETWEEN 20 AND 30 AND NOT EXISTS (SELECT 1 FROM Renting_history AS T2 WHERE T2.customer_id = T1.id AND T2.total_hours > 10) ORDER BY T1.age DESC",
        "question": "What are the names of the customers aged between 20 and 30 who have never rented a vehicle for more than 10 hours, listed in descending order of age?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_rent"
    },
    {
        "query": "SELECT T1.name FROM Customers AS T1 JOIN Customers AS T2 ON T1.id = T2.id WHERE T1.membership_credit = (SELECT membership_credit FROM Discount WHERE id = T2.id)",
        "question": "What are the names of customers who have the same membership credit as their corresponding discount?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_rent"
    },
    {
        "query": "SELECT name FROM Customers ORDER BY name ASC",
        "question": "What are the names of the customers listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "vehicle_rent"
    },
    {
        "query": "SELECT MIN(T1.membership_credit), MIN(T2.membership_credit) FROM Customers AS T1 JOIN Discount AS T2 ON T1.membership_credit = T2.membership_credit WHERE T1.age < 25 ORDER BY T1.age ASC",
        "question": "What are the minimum membership credits for customers under 25 and the corresponding minimum membership credits for discounts, listed in ascending order by customer age?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "vehicle_rent"
    },
    {
        "query": "SELECT T1.name FROM Customers AS T1 INNER JOIN Customers AS T2 ON T1.id = T2.id WHERE T1.age > 25 OR T1.membership_credit BETWEEN 5 AND 10 OR EXISTS (SELECT 1 FROM Discount AS T3 WHERE T3.membership_credit = T1.membership_credit)",
        "question": "What are the names of the customers who are either older than 25, have a membership credit between 5 and 10, or have a membership credit that exists in the discount table?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_rent"
    },
    {
        "query": "SELECT T1.name, COUNT(T2.id) FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id = T2.customer_id WHERE T2.total_hours > 100 OR T1.age < 50 OR NOT EXISTS (SELECT 1 FROM Discount AS T3 WHERE T3.id = T2.discount_id AND T3.membership_credit > 10) LIMIT 10",
        "question": "What are the names of customers under 50 years old, or who have rented vehicles for more than 100 hours, or who have not used a discount with more than 10 membership credits, along with the number of times they have rented, listed from the 11th to the 20th result?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_rent"
    },
    {
        "query": "SELECT * FROM Customers WHERE age BETWEEN 20 AND 30 LIMIT 10",
        "question": "What are the details of the 11th to 20th customers who are between 20 and 30 years old?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "vehicle_rent"
    },
    {
        "query": "SELECT T1.name FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id = T2.customer_id JOIN Vehicles AS T3 ON T2.vehicles_id = T3.id JOIN Discount AS T4 ON T2.discount_id = T4.id WHERE T3.Annual_fuel_cost > 2000",
        "question": "What are the names of customers who rented vehicles with an annual fuel cost of more than $2000?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "vehicle_rent"
    },
    {
        "query": "SELECT COUNT(id) FROM Customers WHERE membership_credit > 10 LIMIT 10",
        "question": "What is the number of the 11th to 20th customer(s) with a membership credit more than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "vehicle_rent"
    },
    {
        "query": "SELECT MIN(Vehicles.Cost_per_25_miles) FROM Vehicles",
        "question": "What is the lowest cost per 25 miles among all vehicles?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "vehicle_rent"
    },
    {
        "query": "SELECT T1.name FROM medicine AS T1 WHERE T1.Trade_Name = 'Acetaminophen' OR EXISTS ( SELECT 1 FROM medicine_enzyme_interaction AS T2 JOIN enzyme AS T3 ON T2.enzyme_id = T3.id WHERE T3.name = 'CYP2D6' AND T2.medicine_id = T1.id ) ORDER BY T1.name DESC",
        "question": "What are the names of medicines with trade name 'Acetaminophen' or interacting with enzyme 'CYP2D6', listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "medicine_enzyme_interaction"
    },
    {
        "query": "SELECT T1.name, T1.Trade_Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id WHERE T1.id <= 10 AND T2.interaction_type <= 5",
        "question": "What are the names and trade names of medicines with IDs less than or equal to 10 that have enzyme interactions of types less than or equal to 5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "medicine_enzyme_interaction"
    },
    {
        "query": "SELECT T1.name, T2.name FROM medicine AS T1 JOIN medicine AS T2 ON T1.id = T2.id WHERE T1.name <= T2.Trade_Name ORDER BY T1.name DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th pairs of medicine with the same id and the generic name not later than the trade name when sorted in descending order by generic name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "medicine_enzyme_interaction"
    },
    {
        "query": "SELECT COUNT(T1.id), SUM(T1.OMIM) FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.OMIM > 100",
        "question": "What is the count of enzymes with OMIM greater than 100 and the sum of their OMIM values?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "medicine_enzyme_interaction"
    },
    {
        "query": "SELECT T1.id FROM medicine AS T1 JOIN medicine AS T2 ON T1.id = T2.id WHERE NOT EXISTS (SELECT 1 FROM medicine_enzyme_interaction AS T3 WHERE T3.medicine_id = T1.id AND T3.interaction_type = 'inhibitor')",
        "question": "What are the ids of the medicines that do not have an inhibitor interaction type in the medicine enzyme interaction table?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "medicine_enzyme_interaction"
    },
    {
        "query": "SELECT T1.id, T2.id FROM medicine AS T1 JOIN medicine AS T2 ON T1.id = T2.id WHERE T1.id = 1 AND T1.id BETWEEN 1 AND 10 AND T1.id NOT IN (SELECT T3.id FROM medicine AS T3 WHERE T3.name = 'test') ORDER BY T1.id ASC",
        "question": "What is the id of medicine with id 1 that is not named 'test', ordered in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "medicine_enzyme_interaction"
    },
    {
        "query": "SELECT T1.name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id JOIN enzyme AS T3 ON T2.enzyme_id = T3.id WHERE T1.id IN (SELECT medicine_id FROM medicine_enzyme_interaction WHERE enzyme_id = 1)",
        "question": "What are the names of the medicines interacting with the enzyme with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "medicine_enzyme_interaction"
    },
    {
        "query": "SELECT * FROM basketball_match WHERE All_Games_Percent >= 0.5 ORDER BY All_Games_Percent DESC",
        "question": "What are the basketball match statistics for teams that have won at least 50 percent of all games, listed in descending order of winning percentage?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT T1.School FROM university AS T1 JOIN basketball_match AS T2 ON T1.School_ID = T2.School_ID WHERE T2.Team_Name != 'Team1' ORDER BY T1.Enrollment DESC",
        "question": "What schools, excluding Team1, have basketball teams, listed in order of their enrollment from highest to lowest?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT T1.Team_Name, T2.School FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID JOIN basketball_match AS T3 ON T2.School_ID = T3.School_ID WHERE T1.Team_ID != T3.Team_ID GROUP BY T1.Team_Name ORDER BY T1.Team_Name ASC LIMIT 10",
        "question": "What are the names of the top 11th to 20th teams in alphabetical order that have played against another team from the same school in a basketball match?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT School_ID, School FROM university WHERE Enrollment < 10000 LIMIT 5",
        "question": "What are the school IDs and names of the next 5 universities with an enrollment of less than 10,000 students?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Team_Name) FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.All_Games_Percent BETWEEN 50 AND 70",
        "question": "How many unique team names are there for basketball teams that have an overall winning percentage between 50% and 70%?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT T2.School, T1.Team_Name FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID JOIN basketball_match AS T3 ON T2.School_ID = T3.School_ID WHERE (T1.All_Games_Percent BETWEEN 0.5 AND 0.7) OR (T3.All_Games_Percent > 0.8) ORDER BY T2.School ASC",
        "question": "What are the school names and team names of the basketball matches where the team's all games percentage is between 0.5 and 0.7 or another team from the same school has a higher than 0.8 all games percentage, listed in ascending order by school name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT T1.School, T2.Team_Name FROM university AS T1 INNER JOIN basketball_match AS T2 ON T1.School_ID = T2.School_ID WHERE T2.All_Games_Percent BETWEEN 50 AND 100",
        "question": "What are the schools and corresponding team names of the basketball teams that have a winning percentage of 50 to 100 in all games?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT T1.School_ID, T2.All_Games_Percent FROM university AS T1 JOIN basketball_match AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Location = 'North Carolina' OR T2.All_Games_Percent < 0.5 ORDER BY T2.All_Games_Percent DESC",
        "question": "What are the school IDs and their corresponding all games win percentages of the universities located in North Carolina or with an all games win percentage less than 0.5, listed in descending order of the all games win percentages?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT Team_Name FROM basketball_match WHERE All_Games_Percent != 0 LIMIT 10",
        "question": "What are the names of the next 10 basketball teams that have a non-zero all games percentage?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT T1.Team_Name FROM basketball_match AS T1 WHERE T1.All_Games_Percent > (SELECT AVG(b.All_Games_Percent) FROM basketball_match b) AND T1.School_ID = (SELECT T2.School_ID FROM university AS T2 WHERE T2.Enrollment > 20000)",
        "question": "What is the name of the basketball team from a university with more than 20,000 enrollments, with a higher all games percentage than the average?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT T1.Team_Name FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_ID != 10 LIMIT 10",
        "question": "What are the names of the next 10 basketball teams, excluding the team with ID 10, that participated in a match from a specific school?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT School_ID FROM basketball_match WHERE All_Games_Percent = (SELECT MAX(All_Games_Percent) FROM basketball_match) LIMIT 1",
        "question": "What is the school ID of the second school with the highest all games percentage?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT T1.School, T2.Team_Name FROM university AS T1 JOIN basketball_match AS T2 ON T1.School_ID = T2.School_ID JOIN basketball_match AS T3 ON T2.School_ID = T3.School_ID WHERE T1.Location = 'North Carolina' AND T2.ACC_Percent BETWEEN 0.5 AND 0.7 AND T3.All_Games_Percent > 0.6",
        "question": "Which schools from North Carolina have teams that have an ACC winning percentage between 0.5 and 0.7 and have another team with an overall winning percentage greater than 0.6?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT COUNT(T1.Team_ID), COUNT(T1.Team_Name), COUNT(T2.School) FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = 'Team Name'",
        "question": "How many Team IDs, Team Names, and Schools are there where the Team Name is 'Team Name'?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT T1.School, T2.Team_Name FROM university AS T1 JOIN basketball_match AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Enrollment > 15000 OR T2.All_Games_Percent BETWEEN 0.5 AND 0.8 OR T2.ACC_Percent = '0.571'",
        "question": "What are the schools and corresponding team names of universities with enrollments greater than 15000, or teams with overall win percentages between 0.5 and 0.8, or teams with ACC win percentages of 0.571?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT Team_Name FROM basketball_match WHERE All_Games_Percent < 0.5",
        "question": "What are the names of the basketball teams that have a winning percentage of less than 0.5 in all games?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "university_basketball"
    },
    {
        "query": "SELECT T1.Name, T2.Star_Rating_Description FROM Tourist_Attractions AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.Attraction_Type_Code = T2.Star_Rating_Code WHERE T1.Tourist_Attraction_ID = 100",
        "question": "What is the name and star rating of the tourist attraction with id 100?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Theme_park"
    },
    {
        "query": "SELECT * FROM Hotels WHERE price_range BETWEEN 10 AND 100 ORDER BY star_rating_code ASC LIMIT 5",
        "question": "What are the details of the next 5 hotels with a price range between 10 and 100, ordered by their star rating in ascending order, starting from the 6th hotel?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Theme_park"
    },
    {
        "query": "SELECT * FROM Tourist_Attractions WHERE Location_ID BETWEEN 1 AND 100 ORDER BY Tourist_Attraction_ID ASC",
        "question": "What are the details of all tourist attractions located between Location ID 1 and 100, listed in ascending order by tourist attraction ID?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Theme_park"
    },
    {
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Locations AS T2 ON T1.Location_ID = T2.Location_ID WHERE NOT EXISTS (SELECT T3.Tourist_ID FROM Visitors AS T3 JOIN Visits AS T4 ON T3.Tourist_ID = T4.Tourist_ID WHERE T4.Tourist_Attraction_ID = T1.Tourist_Attraction_ID) ORDER BY T1.Name DESC",
        "question": "What are the names of the tourist attractions that have not been visited by any tourists, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Theme_park"
    },
    {
        "query": "SELECT MIN(T1.price_range) FROM Hotels AS T1 WHERE T1.star_rating_code BETWEEN '1' AND '5' OR T1.pets_allowed_yn = 'Y' AND NOT EXISTS (SELECT T2.Tourist_ID FROM Visitors AS T2 WHERE T2.Tourist_ID > 1000)",
        "question": "What is the lowest price range of hotels with a rating from 1 to 5 or allowing pets where there are no tourists with ID greater than 1000?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Theme_park"
    },
    {
        "query": "SELECT MIN(h.price_range) FROM Hotels h WHERE h.star_rating_code != '2'",
        "question": "What is the minimum price range of hotels with a star rating other than 2?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Theme_park"
    },
    {
        "query": "SELECT COUNT(hotel_id) FROM Hotels WHERE price_range > 100",
        "question": "How many hotels have a price range greater than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "cre_Theme_park"
    },
    {
        "query": "SELECT * FROM Hotels WHERE price_range > 100 OR price_range BETWEEN 50 AND 150 OR price_range < 50 AND NOT EXISTS ( SELECT 1 FROM Ref_Hotel_Star_Ratings WHERE Ref_Hotel_Star_Ratings.star_rating_code = Hotels.star_rating_code ) ORDER BY price_range DESC",
        "question": "What are all the details of the hotels that either have a price range greater than 100 or have a price range between 50 and 150, or have a price range less than 50 and do not have a star rating code that exists in the Ref_Hotel_Star_Ratings table, ordered by price range in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Theme_park"
    },
    {
        "query": "SELECT COUNT(T1.Tourist_ID) FROM Visitors AS T1 WHERE T1.Tourist_ID NOT IN (SELECT T2.Tourist_ID FROM Visits AS T2)",
        "question": "How many tourists have never visited any tourist attractions?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Theme_park"
    },
    {
        "query": "SELECT Title FROM book WHERE Pages <= 500 ORDER BY Title DESC",
        "question": "What are the titles of books with 500 pages or less, listed in descending order by title?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "book_review"
    },
    {
        "query": "SELECT MAX(T1.Pages), COUNT(DISTINCT T1.Title), COUNT(DISTINCT T1.Chapters) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Rating > 4",
        "question": "What is the maximum number of pages, and the number of unique titles and chapters in the books that have a rating greater than 4?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Type = 'novel' AND T2.Rating > 4 AND T1.Book_ID IN (SELECT Book_ID FROM review WHERE Readers_in_Million > 10) ORDER BY T1.Title DESC",
        "question": "What are the titles of novels with a rating above 4 and more than 10 million readers, sorted in descending order by title?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT T1.Title, T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Pages BETWEEN 200 AND 400 AND T2.Rating > 4 AND T2.Readers_in_Million = 1",
        "question": "What are the titles and ratings of books with between 200 and 400 pages, more than 4 stars, and 1 million readers?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT T1.Title, T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Release <= '2020' ORDER BY T2.Rating ASC",
        "question": "What are the titles of books released in or before 2020, along with their corresponding ratings, listed in ascending order of rating?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_review"
    },
    {
        "query": "SELECT T1.Title, T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Pages > 500 OR T2.Rating > (SELECT AVG(Rating) FROM review) ORDER BY T2.Rating ASC",
        "question": "What are the titles and ratings of books with more than 500 pages or ratings higher than the average rating, listed from lowest to highest rating?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT b.Title, r.Rating FROM book b JOIN review r ON b.Book_ID = r.Book_ID WHERE b.Pages BETWEEN 100 AND 200 AND r.Rating > 4 AND r.Readers_in_Million < 10 LIMIT 10",
        "question": "What are the titles and ratings of the next 10 books with a rating over 4, less than 10 million readers, and a page count between 100 and 200?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_review"
    },
    {
        "query": "SELECT T2.Title, AVG(T1.Rating) FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID GROUP BY T2.Title ORDER BY AVG(T1.Rating) ASC",
        "question": "What are the book titles along with their average ratings in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "book_review"
    },
    {
        "query": "SELECT b.Title, r.Rating FROM book AS b JOIN review AS r ON b.Book_ID = r.Book_ID WHERE r.Rating BETWEEN 3 AND 5 OR r.Readers_in_Million IN (SELECT MAX(Readers_in_Million) FROM review) OR b.Chapters = 10 ORDER BY r.Rating ASC",
        "question": "What are the titles and ratings of books that have ratings between 3 and 5, or have the most readers in millions, or have 10 chapters, sorted by rating in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT Title FROM book WHERE EXISTS (SELECT 1 FROM review WHERE review.Book_ID = book.Book_ID AND Rating > 4) ORDER BY Title DESC",
        "question": "What are the titles of the books with a rating greater than 4, listed in descending order by title?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT Title, Pages FROM book WHERE Type = 'Fiction' AND Pages BETWEEN 200 AND 400 AND Book_ID NOT IN (SELECT Book_ID FROM review WHERE Rating < 4) LIMIT 10",
        "question": "What are the titles and number of pages of the next 10 fiction books with between 200 and 400 pages that have not received a rating below 4?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Book_ID), COUNT(T2.Review_ID) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Rating = 5",
        "question": "How many unique books have a 5-star review and how many 5-star reviews are there in total?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Book_ID) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Pages BETWEEN 100 AND 200 OR T2.Rating > 4 OR T2.Book_ID NOT IN (SELECT Book_ID FROM review WHERE Rating < 3)",
        "question": "How many distinct books have between 100 and 200 pages, or have a rating higher than 4, or do not have a rating lower than 3 in any of the reviews?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT * FROM review WHERE Rating BETWEEN 1 AND 5 AND Readers_in_Million > 0 AND Book_ID IN (SELECT Book_ID FROM book WHERE Pages > 100) LIMIT 10",
        "question": "What are the details of the 11th to 20th reviews of books with more than 100 pages, rated between 1 and 5 and read by more than 0 million readers?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Review_ID), T1.Pages FROM book AS T1 JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Type = 'Fiction' AND T1.Chapters BETWEEN 20 AND 50 AND T2.Rating > 4",
        "question": "What is the number of distinct reviews and the number of pages in fiction books with chapters between 20 and 50 that have a rating higher than 4?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "book_review"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name), T2.name FROM buildings AS T1 JOIN Office_locations AS T3 ON T1.id = T3.building_id JOIN Companies AS T2 ON T3.company_id = T2.id WHERE T1.Height < 100",
        "question": "What is the number of distinct building names and the company names that are located in buildings with a height of less than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "company_office"
    },
    {
        "query": "SELECT MIN(Height) FROM buildings WHERE Height < 100 ORDER BY Height DESC LIMIT 5",
        "question": "What are the next five lowest heights among buildings that are under 100 units tall?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "company_office"
    },
    {
        "query": "SELECT T1.name, T2.Sales_billion FROM buildings AS T1 JOIN Office_locations AS T3 ON T1.id = T3.building_id JOIN Companies AS T2 ON T3.company_id = T2.id WHERE T2.Sales_billion >= 10 ORDER BY T2.Sales_billion DESC LIMIT 10",
        "question": "What are the names of the buildings and sales in billions of the companies located in them, for the 11th to 20th largest companies by sales in billions?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_office"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name) FROM buildings AS T1 WHERE T1.Height > 100 AND T1.Stories > 20 OR EXISTS (SELECT T2.building_id FROM Office_locations AS T2 WHERE T2.building_id = T1.id)",
        "question": "How many unique buildings have a height over 100 and more than 20 stories, or have an office location?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_office"
    },
    {
        "query": "SELECT T1.name FROM buildings AS T1 WHERE T1.Height > ( SELECT AVG(T2.Height) FROM buildings AS T2 ) LIMIT 1",
        "question": "What is the name of the second-tallest building?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_office"
    },
    {
        "query": "SELECT T1.name FROM Companies AS T1 WHERE T1.name = 'CompanyA'",
        "question": "What is the name of the company named 'CompanyA'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "company_office"
    },
    {
        "query": "SELECT T1.name, COUNT(DISTINCT T2.company_id) FROM buildings AS T1 JOIN Office_locations AS T2 ON T1.id = T2.building_id WHERE EXISTS (SELECT 1 FROM Companies AS T3 WHERE T3.id = T2.company_id AND T3.Sales_billion > 10)",
        "question": "What are the names of the buildings where at least one company with more than 10 billion in sales has an office, and how many such companies are located in each of these buildings?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_office"
    },
    {
        "query": "SELECT AVG(Height) FROM buildings WHERE City > 'New York'",
        "question": "What is the average height of buildings in cities that come alphabetically after New York?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "company_office"
    },
    {
        "query": "SELECT T1.name FROM buildings AS T1 WHERE T1.Stories > 50",
        "question": "What are the names of the buildings that have more than 50 stories?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "company_office"
    },
    {
        "query": "SELECT T1.name FROM buildings AS T1 WHERE T1.City = 'New York' AND T1.Height > 100 AND T1.id NOT IN (SELECT T2.building_id FROM Office_locations AS T2) ORDER BY T1.name DESC",
        "question": "What are the names of the buildings in New York that are taller than 100 and do not have any offices, listed in descending order by name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_office"
    },
    {
        "query": "SELECT T1.name FROM buildings AS T1 JOIN Office_locations AS T2 ON T1.id = T2.building_id WHERE T1.name NOT IN (SELECT T3.name FROM Companies AS T3 JOIN Office_locations AS T4 ON T3.id = T4.company_id)",
        "question": "What are the names of the buildings that are not occupied by any company?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "company_office"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name), COUNT(T1.id) FROM buildings AS T1 JOIN Office_locations AS T2 ON T1.id = T2.building_id",
        "question": "How many unique building names and total buildings are there that have office locations?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "company_office"
    },
    {
        "query": "SELECT COUNT(DISTINCT T3.state) FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number JOIN AREA_CODE_STATE AS T3 ON T3.state = T1.state WHERE T3.area_code BETWEEN 200 AND 300 AND T1.created > T1.created - 30",
        "question": "How many distinct states have votes with area codes between 200 and 300, made in the last 30 days?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "voter_1"
    },
    {
        "query": "SELECT contestant_number, COUNT(vote_id), SUM(1) FROM VOTES GROUP BY contestant_number ORDER BY COUNT(vote_id) DESC LIMIT 10",
        "question": "What are the contestant numbers and the number of votes for the 11th to 20th most voted contestants?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "voter_1"
    },
    {
        "query": "SELECT area_code FROM AREA_CODE_STATE WHERE area_code >= 500 LIMIT 5",
        "question": "What are the next 5 area codes (after the first 5) that are 500 or higher?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "voter_1"
    },
    {
        "query": "SELECT T1.state FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_number <= 10",
        "question": "What states have cast votes for contestants numbered 10 or less?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "voter_1"
    },
    {
        "query": "SELECT T2.state FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state WHERE T1.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'John') ORDER BY T2.state ASC",
        "question": "What states did people from the same states as area codes vote for John, listed in ascending order of state?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "voter_1"
    },
    {
        "query": "SELECT T1.Grape FROM grapes AS T1 WHERE T1.ID NOT IN (SELECT T2.Grape FROM wine AS T2 WHERE T2.Year = 2015) LIMIT 10",
        "question": "Which grapes, excluding those used in 2015 wines, are listed 11th to 20th in the grapes table?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "wine_1"
    },
    {
        "query": "SELECT T1.Appelation FROM appellations AS T1 WHERE T1.No = ( SELECT COUNT(T2.No) FROM wine AS T2 WHERE T2.Appelation = T1.Appelation GROUP BY T2.Appelation ORDER BY COUNT(T2.No) ASC LIMIT 5 )",
        "question": "What is the appelation with the fifth lowest number of wines?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "wine_1"
    },
    {
        "query": "SELECT MAX(Year) FROM wine WHERE Price <= 100",
        "question": "What is the latest year of production for wines that cost $100 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "wine_1"
    },
    {
        "query": "SELECT Name FROM wine WHERE Year BETWEEN 2010 AND 2015 OR Price > 10 OR EXISTS (SELECT Grape FROM grapes WHERE grapes.Grape = wine.Grape AND grapes.Color = 'red')",
        "question": "What are the names of wines made from 2010 to 2015, or priced above 10, or made from red grapes?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "wine_1"
    },
    {
        "query": "SELECT T1.Grape FROM grapes AS T1 JOIN wine AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'red' AND T2.Year = 2010 AND T1.ID NOT IN (SELECT T3.ID FROM grapes AS T3 WHERE T3.Color = 'white') LIMIT 10",
        "question": "What are the distinct red grapes that were used to make wine in 2010, excluding grapes that are also white, listed 11th to 20th?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "wine_1"
    },
    {
        "query": "SELECT T1.Grape, T2.Appelation FROM grapes AS T1 JOIN wine AS T2 ON T1.Grape = T2.Grape JOIN appellations AS T3 ON T2.Appelation = T3.Appelation ORDER BY T1.Grape ASC LIMIT 10",
        "question": "What are the grapes and their corresponding appellations for the 11th to 20th grape in alphabetical order?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "wine_1"
    },
    {
        "query": "SELECT Name FROM wine WHERE State NOT IN ( SELECT State FROM wine WHERE Score > 90 ) ORDER BY Year DESC",
        "question": "What are the names of the wines from states that do not have any wines with a score above 90, listed in descending order of year?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "wine_1"
    },
    {
        "query": "SELECT T1.Grape FROM grapes AS T1 WHERE EXISTS (SELECT 1 FROM wine AS T2 WHERE T1.Grape = T2.Grape GROUP BY T1.Grape HAVING COUNT(DISTINCT T2.Winery) > 1)",
        "question": "What are the grapes used by more than one winery?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "wine_1"
    },
    {
        "query": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id JOIN Business_Processes AS T3 ON T2.process_id = T3.process_id WHERE T3.process_id <= 10 LIMIT 5",
        "question": "What are the document ids of the documents that are involved in business processes with process ids less than or equal to 10, excluding the first 5 results?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Workflow"
    },
    {
        "query": "SELECT COUNT(staff_id), COUNT(staff_details), COUNT(staff_details) FROM Staff WHERE staff_id = 100",
        "question": "How many staff members with the id of 100 have staff details and how many staff details do these staff members have in total?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Workflow"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.staff_role_code) FROM Ref_Staff_Roles AS T1 WHERE EXISTS (SELECT 1 FROM Staff_in_Processes AS T2 WHERE T1.staff_role_code = T2.staff_role_code AND T2.staff_id = 1)",
        "question": "How many distinct staff roles are involved in the processes of staff member with id 1?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_Workflow"
    },
    {
        "query": "SELECT document_id FROM Documents_Processes WHERE process_status_code != 'P' ORDER BY document_id ASC LIMIT 5",
        "question": "What are the next 5 document IDs, excluding those with a process status code of 'P', when ordered from lowest to highest document ID?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "cre_Doc_Workflow"
    },
    {
        "query": "SELECT COUNT(T2.process_outcome_code) FROM Documents AS T1 JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id WHERE T2.process_outcome_code = 'outcome1' OR T2.process_outcome_code = 'outcome2' OR T2.process_outcome_code NOT IN (SELECT process_outcome_code FROM Process_Outcomes)",
        "question": "How many documents have a process outcome of either 'outcome1' or 'outcome2', or do not have a valid process outcome?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Workflow"
    },
    {
        "query": "SELECT T1.staff_id, COUNT(DISTINCT T1.staff_details) FROM Staff AS T1 GROUP BY T1.staff_id HAVING MIN(T1.staff_id) > 100 ORDER BY staff_id ASC",
        "question": "What are the staff IDs and the number of distinct staff details for staff IDs greater than 100, listed in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Workflow"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.document_name) FROM Documents AS T1 WHERE T1.document_id = 101 AND T1.author_name BETWEEN 'A' AND 'Z' OR T1.document_description = 'test'",
        "question": "How many unique document names have a document id of 101 and an author name starting with any letter from A to Z, or a document description of 'test'?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "cre_Doc_Workflow"
    },
    {
        "query": "SELECT author_name FROM Documents WHERE NOT EXISTS ( SELECT 1 FROM Staff_in_Processes WHERE Staff_in_Processes.staff_id = 100 AND Staff_in_Processes.document_id = Documents.document_id ) LIMIT 10",
        "question": "What are the names of the next 10 authors whose documents are not processed by staff member 100?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "cre_Doc_Workflow"
    },
    {
        "query": "SELECT COUNT(problem_category_code) FROM Problem_Category_Codes WHERE problem_category_code != 'NA'",
        "question": "How many problem categories are not 'NA'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT problem_category_description FROM Problem_Category_Codes WHERE problem_category_code < 'code1'",
        "question": "What problem category descriptions have codes less than 'code1'?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT problem_category_description FROM Problem_Category_Codes WHERE problem_category_code BETWEEN 'code1' AND 'code2' ORDER BY problem_category_code ASC",
        "question": "What are the problem category descriptions for codes ranging from 'code1' to 'code2', listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT COUNT(problem_log_id) FROM Problem_Log AS T1 WHERE T1.problem_status_code != 'closed'",
        "question": "How many problem logs are not closed?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT T1.problem_log_id FROM Problem_Log AS T1 WHERE T1.problem_category_code = 'code1' OR T1.problem_id IN (SELECT T2.problem_id FROM Problems AS T2 WHERE T2.product_id = 1)",
        "question": "What are the problem log IDs for problems in category 'code1' or problems reported for product ID 1?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.problem_category_code), COUNT(DISTINCT T1.problem_category_description), T1.problem_category_description FROM Problem_Category_Codes AS T1 WHERE T1.problem_category_code = 'Code1' OR T1.problem_category_description = 'Description1' OR T1.problem_category_code NOT IN (SELECT T2.problem_category_code FROM Problem_Log AS T2)",
        "question": "What is the number of distinct problem category codes, distinct problem category descriptions, and descriptions of the problem category codes that are 'Code1', the problem category descriptions that are 'Description1', and the problem category codes that do not exist in the problem log?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT T1.problem_category_description, COUNT(T2.problem_log_id), SUM(T2.problem_log_id) FROM Problem_Category_Codes AS T1 JOIN Problem_Log AS T2 ON T1.problem_category_code = T2.problem_category_code WHERE T2.log_entry_date > '2020-01-01'",
        "question": "What are the problem categories, the number of problems, and the total problem log IDs for problems logged after January 1, 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT T1.staff_first_name FROM Staff AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.staff_id > 10 ORDER BY T1.staff_id ASC",
        "question": "What are the first names of staff with staff id greater than 10, listed in ascending order of staff id?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT problem_id FROM Problems WHERE problem_id BETWEEN 1 AND 100 AND product_id = 5",
        "question": "What are the problem IDs of the product with ID 5 where the problem IDs range from 1 to 100?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT T1.problem_category_code FROM Problem_Category_Codes AS T1 JOIN Problem_Log AS T2 ON T1.problem_category_code = T2.problem_category_code WHERE T2.problem_log_id NOT IN (SELECT problem_log_id FROM Problem_Log WHERE problem_log_id = 10 OR problem_log_id = 11 OR problem_log_id = 12)",
        "question": "What are the problem category codes of problems not related to problem log IDs 10, 11, or 12?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT COUNT(DISTINCT problem_category_code) FROM Problem_Log WHERE log_entry_date BETWEEN '2005-01-01' AND '2005-12-31' ORDER BY problem_log_id DESC",
        "question": "How many distinct problem categories were logged in the year 2005?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT problem_category_description FROM Problem_Category_Codes AS T1 WHERE EXISTS (SELECT 1 FROM Problem_Log AS T2 WHERE T2.problem_category_code = T1.problem_category_code AND T2.log_entry_description = 'details')",
        "question": "What are the problem category descriptions for which there are problem log entries with the description 'details'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT P.product_name, S.staff_first_name FROM Product AS P JOIN Problems AS Pr ON P.product_id = Pr.product_id JOIN Staff AS S ON S.staff_id = Pr.reported_by_staff_id WHERE Pr.product_id = 1 AND Pr.reported_by_staff_id = 1",
        "question": "What is the name of the product with ID 1 and the first name of the staff member who reported a problem for that product and also has a staff ID of 1?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.problem_category_code) FROM Problem_Log AS T1 JOIN Problem_Category_Codes AS T2 ON T1.problem_category_code = T2.problem_category_code WHERE T2.problem_category_description BETWEEN 'abc' AND 'xyz' ORDER BY COUNT(DISTINCT T1.problem_category_code) DESC LIMIT 5",
        "question": "What are the next 5 most frequent problem categories with descriptions between 'abc' and 'xyz', excluding the top 4?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT problem_category_description FROM Problem_Category_Codes WHERE problem_category_code IN (SELECT problem_category_code FROM Problem_Log WHERE problem_id < 10)",
        "question": "What are the descriptions of the problem categories for problems with an ID less than 10?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "tracking_software_problems"
    },
    {
        "query": "SELECT COUNT(T1.EmployeeID), SUM(T2.Weight) FROM Employee AS T1 JOIN Package AS T2 ON T1.EmployeeID = T2.Sender LIMIT 5",
        "question": "What are the count of employees and the total weight of packages sent by the employees with employee ids 6 to 10?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT Name FROM Employee AS MyTable WHERE Position = 'Manager' OR Salary BETWEEN 50000 AND 100000 OR NOT EXISTS (SELECT 1 FROM Package WHERE Sender = EmployeeID) LIMIT 10",
        "question": "What are the names of the next 10 employees who are managers, or have a salary between 50,000 and 100,000, or have not sent any packages?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT T1.Name, SUM(T2.Weight) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient WHERE T1.AccountNumber = 100 AND T2.Weight BETWEEN 10 AND 20 ORDER BY T1.Name ASC",
        "question": "What is the total weight of packages with a weight between 10 and 20 destined for client 100, and what is the name of the client, sorted alphabetically by client name?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT T1.Name FROM Employee AS T1 JOIN Employee AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Salary > 10000 OR T1.Salary BETWEEN 5000 AND 10000 OR T1.Salary > (SELECT AVG(Salary) FROM Employee) LIMIT 10",
        "question": "What are the names of the 11th to 20th employees with a salary above 10000, between 5000 and 10000, or above the average salary?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT T1.Name, T2.Manager FROM Employee AS T1 JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager WHERE T1.Salary BETWEEN 50000 AND 100000 OR T1.Position = 'Manager' OR NOT EXISTS (SELECT 1 FROM Has_Clearance AS T3 WHERE T3.Employee = T1.EmployeeID)",
        "question": "What are the names of employees earning between 50000 and 100000 dollars or holding a managerial position or not having any clearance, along with their managers' names?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T3.Name) FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Coordinates = 100 LIMIT 10",
        "question": "What are the number of distinct names of planets with coordinates 100, listed 11th to 20th?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT AVG(Salary) AS average_salary, SUM(Salary) AS total_salary FROM Employee AS New_Employee WHERE EmployeeID BETWEEN 1 AND 10 AND Salary > 1000 GROUP BY Name ORDER BY average_salary DESC",
        "question": "What are the names of employees with IDs between 1 and 10 and salaries greater than 1000, ordered by their average salaries in descending order along with the total salary for each employee?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT AVG(Salary) FROM Employee WHERE Salary > 50000",
        "question": "What is the average salary of employees who earn more than $50,000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT Salary, EmployeeID FROM Employee",
        "question": "What are the salaries of all employees along with their employee IDs?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT EmployeeID, Salary FROM Employee WHERE Salary >= 50000 ORDER BY Salary ASC",
        "question": "What are the employee ids and salaries of employees with a salary of at least $50,000, listed in order from lowest to highest salary?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT MAX(Salary) FROM Employee WHERE EmployeeID < 100",
        "question": "What is the maximum salary of employees with an employee ID less than 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.Employee) FROM Planet AS T1 JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet WHERE T2.Level BETWEEN 1 AND 5 OR T2.Level > 10 OR NOT EXISTS (SELECT * FROM Shipment AS T3 WHERE T3.Planet = T1.PlanetID) LIMIT 100",
        "question": "What is the number of unique employees with clearance levels between 1 and 5 or above 10, who are not on a planet with any shipment records, limited to 100 records after offsetting by 100?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT Name FROM Employee WHERE Salary BETWEEN 50000 AND 100000",
        "question": "What are the names of the employees whose salary is between 50000 and 100000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT T1.Name FROM Employee AS T1 WHERE T1.Position = 'Manager' OR T1.Salary > 50000 OR T1.EmployeeID NOT IN (SELECT T2.Manager FROM Shipment AS T2)",
        "question": "What are the names of employees who are either managers, earn more than 50000, or are not managers of any shipments?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT Name FROM Employee WHERE EmployeeID > (SELECT Employee FROM Has_Clearance WHERE Level = 1)",
        "question": "What are the names of employees with an ID higher than the employees with level 1 clearance?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT Name FROM Employee WHERE EXISTS (SELECT 1 FROM Has_Clearance WHERE Level = 3 AND Has_Clearance.Employee = Employee.EmployeeID) ORDER BY EmployeeID ASC",
        "question": "What are the names of employees who have a level 3 clearance, listed in ascending order of their employee IDs?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Name) FROM Employee AS T1 WHERE T1.Position = 'Manager' OR EXISTS (SELECT 1 FROM Package AS T2 WHERE T2.Sender = T1.EmployeeID)",
        "question": "How many distinct employee names are either managers or have sent a package?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "planet_1"
    },
    {
        "query": "SELECT Fname FROM Student WHERE Age > 18 ORDER BY Fname ASC",
        "question": "What are the first names of all students older than 18 years, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "club_1"
    },
    {
        "query": "SELECT COUNT(ClubName) FROM Club WHERE ClubLocation = 'New York' AND EXISTS (SELECT ClubName FROM Club AS T1 JOIN Member_of_club AS T2 ON T1.ClubID = T2.ClubID WHERE T2.Position = 'President' AND T1.ClubDesc = 'Sports')",
        "question": "How many clubs located in 'New York' have a 'President' member and are described as 'Sports'?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_1"
    },
    {
        "query": "SELECT T1.ClubName, T2.Position FROM Club AS T1 JOIN Member_of_club AS T2 ON T1.ClubID = T2.ClubID JOIN Student AS T3 ON T3.StuID = T2.StuID ORDER BY T1.ClubName ASC",
        "question": "What are the names of the clubs and the positions of members within them, listed in ascending order by club name?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "club_1"
    },
    {
        "query": "SELECT T1.LName FROM Student AS T1 JOIN Member_of_club AS T2 ON T1.StuID = T2.StuID WHERE T2.Position = 'President' AND T1.Major = 100 AND T1.city_code = (SELECT ClubLocation FROM Club)",
        "question": "What are the last names of students who are majoring in 100, from the same city as the club location and are the president of some club?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_1"
    },
    {
        "query": "SELECT T2.ClubName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T2.ClubID = T3.ClubID WHERE T1.Age > 20 AND T1.Sex = 'M' ORDER BY T2.ClubName ASC",
        "question": "What are the names of the clubs joined by male students older than 20, listed in ascending order by club name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_1"
    },
    {
        "query": "SELECT S.LName, COUNT(DISTINCT M.StuID) FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID WHERE S.Age > 20 AND M.Position = 'President' ORDER BY S.LName ASC",
        "question": "How many different students who serve as President and are older than 20 is each student with the last name associated with, listed in ascending order by last name?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "club_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.ClubID), COUNT(T2.ClubID) FROM Club AS T1 JOIN Member_of_club AS T2 ON T1.ClubID = T2.ClubID WHERE T2.Position = 'President' ORDER BY T1.ClubName ASC",
        "question": "What is the number of distinct clubs with a president and the total number of presidents, listed in ascending order by club name?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "club_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T2.ClubID) FROM Student AS T1 JOIN Member_of_club AS T2 ON T1.StuID = T2.StuID WHERE T1.Sex = 'M'",
        "question": "How many different clubs are male students members of?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "club_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT ClubID) FROM Member_of_club",
        "question": "How many different clubs are there? ",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "club_1"
    },
    {
        "query": "SELECT DISTINCT T1.ClubName, COUNT(DISTINCT T3.StuID) FROM Club AS T1 JOIN Member_of_club AS T2 ON T1.ClubID = T2.ClubID JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE NOT EXISTS (SELECT 1 FROM Club AS T4 JOIN Member_of_club AS T5 ON T4.ClubID = T5.ClubID JOIN Student AS T6 ON T6.StuID = T5.StuID WHERE T4.ClubName = T1.ClubName AND T6.Age > 20) ORDER BY T1.ClubName DESC",
        "question": "What are the names of the clubs that only have members who are 20 years old or less, along with the number of these members in each club, listed in descending order of club name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_1"
    },
    {
        "query": "SELECT T1.LName, T2.ClubName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T1.Age BETWEEN 20 AND 25 OR T1.LName = 'Smith' OR T1.Sex = 'F'",
        "question": "What are the last names of students and the clubs they belong to, for students who are between 20 and 25 years old, or whose last name is 'Smith', or who are female?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_1"
    },
    {
        "query": "SELECT T1.StuID, T2.ClubName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T2.ClubID = T3.ClubID WHERE T1.Major != 10",
        "question": "What are the student IDs and club names of students who are members of clubs and major in something other than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "club_1"
    },
    {
        "query": "SELECT SUM(StuID), COUNT(LName), MAX(Age) FROM Student",
        "question": "What is the sum of student IDs, the count of last names, and the maximum age of students?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "club_1"
    },
    {
        "query": "SELECT T2.ClubName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T1.Sex != 'F'",
        "question": "What are the club names that male students are members of?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "club_1"
    },
    {
        "query": "SELECT COUNT(T1.StuID), T2.ClubName FROM Student AS T1 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID JOIN Club AS T2 ON T3.ClubID = T2.ClubID WHERE T1.Age BETWEEN 20 AND 30 AND T1.Sex = 'M' GROUP BY T2.ClubName LIMIT 10",
        "question": "What are the counts of male students aged 20 to 30 in each club, listed 11th to 20th?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "club_1"
    },
    {
        "query": "SELECT Height_feet FROM building WHERE Floors = 50",
        "question": "What is the height in feet of buildings with 50 floors?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT T1.Institution, T2.Name FROM Institution AS T1 JOIN building AS T2 ON T1.building_id = T2.building_id WHERE T1.Enrollment > 10000",
        "question": "What are the institutions and building names with an enrollment of more than 10,000 students?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT T1.Name, MIN(T1.Height_feet) FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id WHERE NOT EXISTS ( SELECT 1 FROM protein AS T3 WHERE T3.Institution_id = T2.Institution_id ) GROUP BY T1.Name ORDER BY T1.Name ASC",
        "question": "What are the names and minimum heights of buildings that belong to institutions with no proteins, listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT Name FROM building WHERE Height_feet <= 1000",
        "question": "What are the names of buildings with a height of 1000 feet or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT MAX(T1.Height_feet), MIN(T1.Floors) FROM building AS T1 WHERE T1.Name != 'Building'",
        "question": "What is the maximum height in feet and the minimum number of floors of buildings that are not named 'Building'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Institution_id) FROM Institution AS T1 WHERE T1.Institution_id NOT IN ( SELECT T2.Institution_id FROM protein AS T2 ) ORDER BY T1.Enrollment DESC LIMIT 10",
        "question": "What are the next 10 institution IDs with the highest enrollment that have not submitted any proteins, excluding the first 10 results?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT COUNT(DISTINCT building_id), COUNT(*) FROM Institution WHERE building_id = 'B001' AND Enrollment BETWEEN 1000 AND 2000 AND Founded > 1800",
        "question": "How many distinct buildings and total institutions are there that were founded after 1800, have an enrollment between 1000 and 2000, and have the building id 'B001'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT Name FROM building WHERE Height_feet BETWEEN 500 AND 1000 AND Floors NOT IN (SELECT Floors FROM building WHERE Street_address = 'Main St') LIMIT 10",
        "question": "What are the names of the next 10 buildings, excluding those with the same number of floors as buildings on Main St, with heights between 500 and 1000 feet?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT T1.Height_feet FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id ORDER BY T1.Height_feet ASC LIMIT 1",
        "question": "What is the second shortest building height in feet among all the buildings?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT MAX Floors FROM building WHERE Height_feet < 500 ORDER BY Floors DESC LIMIT 10",
        "question": "What are the 11th to 20th highest numbers of floors in buildings that are less than 500 feet tall?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT Name FROM building WHERE Height_feet > 1000 ORDER BY Height_feet DESC",
        "question": "What are the names of the buildings taller than 1000 feet, listed in order from tallest to shortest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT MIN(Height_feet), MIN(Floors) FROM building WHERE Height_feet <= 1000 ORDER BY Height_feet ASC LIMIT 10",
        "question": "What are the minimum height in feet and minimum number of floors of the buildings ranked 11th to 20th by height in ascending order with a height of 1000 feet or less?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT building_id FROM building WHERE EXISTS (SELECT 1 FROM Institution WHERE Institution.building_id = building.building_id AND Institution.Enrollment > 10000 AND Institution.Founded > 1900)",
        "question": "What are the building ids of buildings that house institutions with more than 10,000 enrollment and were founded after 1900?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT Name, Street_address FROM building WHERE Height_feet >= 500 AND Floors >= 50",
        "question": "What are the names and street addresses of buildings that are at least 500 feet tall and have at least 50 floors?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT Height_feet FROM building WHERE Height_feet < 1000 ORDER BY Height_feet DESC",
        "question": "What are the heights in feet of buildings that are less than 1000 feet tall, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT MAX(Height_feet) FROM building WHERE Height_feet > 500 ORDER BY Height_feet DESC",
        "question": "What is the maximum height of buildings having height greater than 500 feet?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT SUM(Height_feet), SUM(Floors) FROM building AS T WHERE Height_feet > 100",
        "question": "What is the total height and total number of floors of all buildings that are taller than 100 feet?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT T2.Institution, T1.Height_feet FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id JOIN protein AS T3 ON T2.Institution_id = T3.Institution_id WHERE T3.divergence_from_human_lineage > 0.5 ORDER BY T1.Height_feet DESC",
        "question": "What are the names of the institutions and their corresponding building heights, in descending order of height, for institutions that have proteins with a divergence from human lineage of more than 0.5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT T1.Name FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id WHERE T1.Height_feet > 10 AND T2.Enrollment > 10000 AND EXISTS (SELECT T3.sequence_length FROM protein AS T3 WHERE T3.Institution_id = T2.Institution_id)",
        "question": "What are the names of buildings taller than 10 feet that are affiliated with institutions having enrollment over 10,000 and at least one associated protein?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "protein_institute"
    },
    {
        "query": "SELECT id, name FROM countries",
        "question": "What are the IDs and names of all countries?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T1.name FROM countries AS T1 WHERE T1.overall_score BETWEEN 70 AND 90 OR T1.justice_score > 80 OR T1.politics_score = 95 LIMIT 5",
        "question": "What are the names of the next 5 countries with an overall score between 70 and 90, or a justice score above 80, or a politics score of 95?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "country_language"
    },
    {
        "query": "SELECT name FROM languages WHERE id > 10",
        "question": "What are the names of the languages with an id greater than 10?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id = T2.country_id WHERE T1.overall_score > 50 AND T1.economics_score BETWEEN 60 AND 80 AND T2.language_id = 1 ORDER BY T1.overall_score ASC",
        "question": "What are the names of countries with an overall score greater than 50, economics score between 60 and 80, and English as an official language, sorted by overall score in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "country_language"
    },
    {
        "query": "SELECT COUNT(T1.id), T2.name FROM countries AS T1 JOIN official_languages AS T3 ON T1.id = T3.country_id JOIN languages AS T2 ON T2.id = T3.language_id WHERE T1.overall_score = 80",
        "question": "What is the count of countries with an overall score of 80 and what is the name of their official languages?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score < (SELECT AVG(overall_score) FROM countries)",
        "question": "What are the names of the official languages in countries with an overall score below the average overall score?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score > 80 ORDER BY T1.name DESC",
        "question": "What are the names of official languages spoken in countries with an overall score greater than 80, listed in descending alphabetical order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T1.name FROM languages AS T1 WHERE EXISTS (SELECT 1 FROM official_languages AS T2 WHERE T2.language_id = T1.id AND T2.country_id = 1)",
        "question": "What are the names of languages that are official languages in country with id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "country_language"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.name), SUM(T2.overall_score) FROM languages AS T1 JOIN official_languages AS T3 ON T1.id = T3.language_id JOIN countries AS T2 ON T2.id = T3.country_id WHERE T2.overall_score < 70",
        "question": "What are the number of distinct languages and total overall score of countries with an overall score less than 70 where the language is official?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T1.name, AVG(T2.overall_score) FROM languages AS T1 JOIN official_languages AS T3 ON T1.id = T3.language_id JOIN countries AS T2 ON T2.id = T3.country_id WHERE T1.name = 'English' AND T2.overall_score BETWEEN 80 AND 100 GROUP BY T1.name HAVING COUNT(DISTINCT T2.id) > 5 ORDER BY T1.name DESC",
        "question": "What is the average overall score of countries with English as an official language and an overall score between 80 and 100, considering only languages spoken in more than 5 countries?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T1.name AS language_name FROM countries AS T1 ORDER BY T1.name DESC",
        "question": "What are the names of the countries in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id WHERE NOT EXISTS (SELECT T3.name FROM countries AS T3 WHERE T3.id = T2.country_id) GROUP BY T1.name HAVING MAX(T3.overall_score) IS NULL ORDER BY T1.name DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th languages that are not official languages in any country with an overall score, sorted in descending order by language name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T1.name, SUM(T2.overall_score) FROM languages AS T1 JOIN official_languages AS T3 ON T1.id = T3.language_id JOIN countries AS T2 ON T2.id = T3.country_id GROUP BY T1.name ORDER BY SUM(T2.overall_score) DESC",
        "question": "What are the names of languages and the sum of the overall scores of the countries in which they are officially spoken, ranked in descending order by the sum of overall scores?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id = T2.id JOIN countries AS T3 ON T3.id = T1.country_id WHERE T3.overall_score <= 50 ORDER BY T2.name DESC",
        "question": "What are the names of official languages in countries with an overall score of 50 or less, listed in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "country_language"
    },
    {
        "query": "SELECT T1.Institution_Name FROM institution AS T1 WHERE T1.Institution_ID BETWEEN 100 AND 200 AND NOT EXISTS (SELECT 1 FROM staff AS T2 WHERE T2.Institution_ID = T1.Institution_ID AND T2.Age > 50) ORDER BY T1.Institution_Name ASC LIMIT 10",
        "question": "What are the names of the next 10 institutions with IDs between 100 and 200 that do not have any staff members over the age of 50, sorted in ascending order by institution name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "conference"
    },
    {
        "query": "SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID WHERE T1.Year <= 2015",
        "question": "What are the names of conferences that took place in or before 2015?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "conference"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Conference_ID), T2.Role FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID WHERE T1.Year < 2010 GROUP BY T2.Role ORDER BY T1.Conference_ID ASC LIMIT 10",
        "question": "What are the counts of distinct conferences held before 2010, grouped by the roles of participants, listed in ascending order of conference ID starting from the 11th result?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "conference"
    },
    {
        "query": "SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID JOIN staff AS T3 ON T3.staff_ID = T2.staff_ID WHERE T3.Age > (SELECT AVG(Age) FROM staff) OR T1.Year > 2000",
        "question": "What are the names of the conferences that either took place after 2000 or were attended by staff members who are older than the average age of all staff?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "conference"
    },
    {
        "query": "SELECT DISTINCT T1.staff_ID FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T1.Age <= 30 AND T2.role = 'presenter'",
        "question": "What are the staff IDs of the staff members who are 30 years old or younger and have presented at a conference?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "conference"
    },
    {
        "query": "SELECT AVG(Conference_ID) FROM conference AS instit WHERE Year BETWEEN 2000 AND 2010",
        "question": "What is the average conference ID of conferences held between 2000 and 2010?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "conference"
    },
    {
        "query": "SELECT name, Nationality FROM staff WHERE Age >= 40 ORDER BY Age DESC",
        "question": "What is the name and nationality of staff members who are at least 40 years old, listed in order of age from oldest to youngest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "conference"
    },
    {
        "query": "SELECT T1.name FROM staff AS T1 WHERE T1.Institution_ID = 1 OR T1.Institution_ID = 2 ORDER BY T1.name ASC LIMIT 5",
        "question": "What are the names of the next 5 staff members from institution 1 or 2, listed alphabetically?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "conference"
    },
    {
        "query": "SELECT T1.Institution_Name, SUM(T2.Age) FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID GROUP BY T1.Institution_Name HAVING SUM(T2.Age) < 100 LIMIT 10",
        "question": "What are the names of the next 10 institutions with total staff age less than 100, starting from the 11th institution?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "conference"
    },
    {
        "query": "SELECT T1.Conference_Name, T2.Institution_Name FROM conference AS T1 JOIN institution AS T2 ON T1.Location = T2.Location WHERE T1.Year BETWEEN 2000 AND 2010",
        "question": "What are the names of conferences held between 2000 and 2010 and the names of institutions located at the same location as these conferences?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "conference"
    },
    {
        "query": "SELECT T1.Institution_Name, COUNT(T2.staff_ID) FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID JOIN conference_participation AS T3 ON T2.staff_ID = T3.staff_ID WHERE T1.Founded < 1950 AND T3.role = 'chair' GROUP BY T1.Institution_Name ORDER BY COUNT(T2.staff_ID) DESC",
        "question": "What are the names of institutions founded before 1950 with the number of staff who have chaired a conference, listed in descending order of the number of staff?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "conference"
    },
    {
        "query": "SELECT T1.Institution_Name FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Age > 30 AND T2.Nationality = 'USA' AND T2.staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE role = 'Speaker')",
        "question": "What are the names of institutions that have staff members who are older than 30, are from the USA and have never participated as speakers in any conference?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "conference"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.staff_ID) FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.Institution_ID = 1 ORDER BY T1.staff_ID ASC",
        "question": "How many unique staff members from institution 1 have participated in conferences?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "conference"
    },
    {
        "query": "SELECT T1.Institution_Name FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Institution_Name = 'University of California' AND T2.Age > 30 AND T2.staff_ID NOT IN ( SELECT staff_ID FROM conference_participation WHERE role = 'Chair' ) ORDER BY T1.Institution_Name DESC",
        "question": "What are the institution names of staff members over 30 years old from the University of California who have never been a conference chair, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "conference"
    },
    {
        "query": "SELECT Name FROM race WHERE Class != 'Small' ORDER BY Date DESC",
        "question": "What are the names of the non-small class races in the most recent order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "race_track"
    },
    {
        "query": "SELECT Name FROM race WHERE Class > 'A' ORDER BY Date DESC LIMIT 5",
        "question": "What are the names of the 6th to 10th most recent races with a class higher than 'A'?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "race_track"
    },
    {
        "query": "SELECT Name FROM race WHERE Track_ID NOT IN (SELECT Track_ID FROM track WHERE Seating > 10000)",
        "question": "What are the names of the races held on tracks with a seating capacity of 10000 or less?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "race_track"
    },
    {
        "query": "SELECT Name FROM race WHERE Class = 'G1' AND Date <= '2022-01-01' ORDER BY Name ASC",
        "question": "What are the names of all G1 races that took place on or before January 1, 2022, listed in alphabetical order? ",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "race_track"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), COUNT(DISTINCT Class), COUNT(Track_ID) FROM race WHERE Date < '2000-01-01' GROUP BY Date HAVING COUNT(Track_ID) > 1",
        "question": "What are the counts of distinct race names, classes, and track IDs for each date before 2000-01-01, but only if the track ID count is more than one?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "race_track"
    },
    {
        "query": "SELECT T1.Name, T1.Class, T2.Name FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T2.Seating >= 50000 AND T1.Date = '2020-01-01'",
        "question": "What are the names and classes of the races held on tracks with a seating capacity of 50,000 or more on '2020-01-01' along with the track names?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "race_track"
    },
    {
        "query": "SELECT T1.Name, T1.Date FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Class != 'Class1' ORDER BY T1.Name ASC",
        "question": "What are the names and dates of all races, excluding Class1, sorted by name in ascending order?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "race_track"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Track_ID) FROM track AS T1 JOIN race AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Location != 'USA' ORDER BY COUNT(T2.Track_ID) DESC LIMIT 10",
        "question": "What are the names of the top 10 tracks with the most races outside of the USA, excluding the top 10 tracks?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "race_track"
    },
    {
        "query": "SELECT T1.Track_ID, AVG(T1.Seating), COUNT(T2.Race_ID) FROM track AS T1 JOIN race AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Track_ID NOT IN (SELECT T2.Track_ID FROM track AS T1 JOIN race AS T2 ON T1.Track_ID = T2.Track_ID WHERE T2.Class = 'Formula 1') GROUP BY T1.Track_ID ORDER BY T1.Track_ID ASC",
        "question": "What are the track IDs, average seating capacities, and number of races for tracks that do not host Formula 1 races, listed in ascending order by track ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "race_track"
    },
    {
        "query": "SELECT MIN(r.Seating) FROM track AS r ORDER BY r.Name ASC",
        "question": "What is the minimum seating capacity of the tracks listed in ascending order by name?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "race_track"
    },
    {
        "query": "SELECT T1.Name, T2.Seating FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Race_ID BETWEEN 100 AND 200 OR T2.Seating IN (SELECT MAX(Seating) FROM track) OR (T2.Year_Opened > 1950 AND T2.Year_Opened < 1960)",
        "question": "What are the names of the races and their corresponding track seating capacities for races with an id between 100 and 200 or the largest seating capacity or tracks opened between 1950 and 1960?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "race_track"
    },
    {
        "query": "SELECT COUNT(DISTINCT Race_ID) FROM race WHERE Date = '2022-01-01' OR Track_ID IN (SELECT Track_ID FROM track WHERE Seating > 50000) ORDER BY Race_ID DESC",
        "question": "How many distinct races occurred on '2022-01-01' or on tracks with a seating capacity of more than 50000, ordered by the race ID in descending order?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "race_track"
    },
    {
        "query": "SELECT COUNT(product_id), COUNT(DISTINCT order_id) FROM Order_Items",
        "question": "What is the total number of products and the number of distinct orders in the order items?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT * FROM Products WHERE product_id <= 10",
        "question": "What are the details of all products with a product id less than or equal to 10?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT customer_name, payment_method FROM Customers LIMIT 10",
        "question": "What are the payment methods and names of customers 11 through 20?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT T1.customer_name, T2.order_date FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.date_became_customer >= '2020-01-01' ORDER BY T2.order_date ASC",
        "question": "What are the customer names and corresponding order dates for customers who became customers on or after January 1st, 2020, listed in chronological order by order date?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT SUM(T1.order_quantity) FROM Order_Items AS T1 JOIN Customer_Orders AS T2 ON T1.order_id = T2.order_id WHERE T2.order_status > 'pending'",
        "question": "What is the total quantity of items in orders that are no longer pending?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.date_became_customer BETWEEN '2020-01-01' AND '2021-01-01' OR T2.customer_name = 'John Doe' OR EXISTS (SELECT * FROM Customer_Addresses WHERE customer_id = T1.customer_id) GROUP BY T1.customer_name HAVING COUNT(T1.customer_id) > 1 ORDER BY T1.customer_name ASC",
        "question": "What are the names of customers who either became a customer between 2020 and 2021, have the name John Doe, or have at least one recorded address, listed in ascending order, and appear more than once in the customer records?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT T1.customer_name, T2.product_details FROM Customers AS T1 JOIN Order_Items AS T3 ON T1.customer_id = T3.order_id JOIN Products AS T2 ON T3.product_id = T2.product_id ORDER BY T1.customer_name ASC",
        "question": "What are the names of customers along with the details of the products they ordered, listed in ascending order of customer names?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.customer_id), COUNT(DISTINCT T2.customer_id), COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_id < 100",
        "question": "For customers with customer id less than 100, what are the counts of distinct customers with orders and distinct customers with orders, and the total count of distinct customers with orders?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT COUNT(order_id) FROM Customer_Orders WHERE order_status != 'cancelled' ORDER BY order_id DESC",
        "question": "What is the number of customer orders that are not cancelled, listed in descending order by order id?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT * FROM Customers WHERE customer_name != 'John Doe' AND date_became_customer != '2020-01-01'",
        "question": "What information is available for customers that are not 'John Doe' and did not become customers on '2020-01-01'?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Addresses AS T2 ON T1.customer_id = T2.customer_id JOIN Addresses AS T3 ON T3.address_id = T2.address_id WHERE T3.country = 'USA' AND T1.payment_method = 'Cash'",
        "question": "What are the names of the customers from the USA who use the cash payment method?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders WHERE order_status = 'delivered')",
        "question": "What are the names of the customers who have placed delivered orders?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_addresses"
    },
    {
        "query": "SELECT * FROM tweets WHERE uid < 100 AND createdate < 1643723400 LIMIT 10",
        "question": "What are the details of the 11th to 20th tweets created before 1643723400 by users with an id less than 100?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT T1.uid, COUNT(T1.uid) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid WHERE T1.followers < (SELECT AVG(followers) FROM user_profiles) LIMIT 10",
        "question": "What are the user ids and their respective counts of users with fewer followers than the average, returned in the second set of 10 results?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT T1.name, COUNT(T2.text) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid WHERE T1.followers > 1000 AND T2.createdate BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY T1.name HAVING COUNT(T2.text) > 10",
        "question": "What are the names of users with more than 1000 followers who posted more than 10 tweets in the year 2020?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT T1.name, COUNT(T2.uid) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid WHERE T1.followers = 1000",
        "question": "What are the names of users with exactly 1000 followers and how many tweets do they have?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT T1.uid FROM user_profiles AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid WHERE T1.followers > (SELECT AVG(followers) FROM user_profiles) ORDER BY T1.uid ASC",
        "question": "What are the user ids of users who have more followers than the average number of followers, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT uid FROM user_profiles WHERE followers < 100 LIMIT 5",
        "question": "What are the user ids of the 5th to 9th users with the fewest followers?",
        "iter": 6,
        "flag": true,
        "hardness": "medium",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT * FROM tweets WHERE id > 1000 ORDER BY uid DESC LIMIT 10",
        "question": "What are the details of the 11th to 20th tweets with ids greater than 1000, listed in descending order of user id?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T3.uid) FROM follows AS T1 JOIN user_profiles AS T2 ON T1.f1 = T2.uid JOIN tweets AS T3 ON T2.uid = T3.uid WHERE T3.createdate BETWEEN '2020-01-01' AND '2020-12-31'",
        "question": "How many unique users posted at least one tweet in the year 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT MAX(T1.followers) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid WHERE T2.createdate BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY T1.followers ORDER BY MAX(T1.followers) DESC",
        "question": "What is the maximum number of followers of users who tweeted in the year 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT AVG(T2.followers), T1.text FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid WHERE T1.uid = 100 GROUP BY T1.text HAVING AVG(T2.followers) > 10",
        "question": "What are the tweets by user 100 that have an average follower count greater than 10? Along with the average follower count for each tweet?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT uid FROM user_profiles WHERE uid IN (SELECT uid FROM tweets WHERE id > 1000) ORDER BY followers DESC",
        "question": "What are the user ids of users who have posted a tweet with an id greater than 1000, listed in order of the number of followers in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "twitter_1"
    },
    {
        "query": "SELECT Name FROM host WHERE Nationality = 'American' AND Age BETWEEN '20' AND '30' AND Host_ID IN (SELECT Host_ID FROM party_host WHERE Party_ID = 1) ORDER BY Name DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th American hosts between the age of 20 and 30, who hosted party 1, listed in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_host"
    },
    {
        "query": "SELECT Name FROM host WHERE Nationality != 'American'",
        "question": "What are the names of the hosts who are not American?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "party_host"
    },
    {
        "query": "SELECT Name FROM host WHERE Host_ID = 1 ORDER BY Name ASC",
        "question": "What is the name of the host with id 1, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "party_host"
    },
    {
        "query": "SELECT Party_Theme FROM party WHERE NOT EXISTS (SELECT 1 FROM host WHERE host.Host_ID = party.Party_ID) AND Number_of_hosts BETWEEN 5 AND 10 ORDER BY Party_Theme DESC LIMIT 10",
        "question": "What are the top 10 party themes with between 5 and 10 hosts, excluding parties hosted by a host with a host id, listed in descending order by party theme, starting from the 11th?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_host"
    },
    {
        "query": "SELECT Name FROM host WHERE Nationality = 'American' LIMIT 10",
        "question": "What are the names of the 11th to 20th American hosts?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "party_host"
    },
    {
        "query": "SELECT T1.Party_Theme, T2.Name FROM party AS T1 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID JOIN host AS T2 ON T3.Host_ID = T2.Host_ID WHERE T1.Location = T2.Nationality ORDER BY T1.Number_of_hosts DESC",
        "question": "What are the party themes and corresponding host names where the party location matches the host nationality, sorted by the number of hosts in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_host"
    },
    {
        "query": "SELECT COUNT(DISTINCT party.Party_ID) FROM party WHERE party.Party_ID NOT IN ( SELECT COUNT(DISTINCT T1.Party_ID) FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID JOIN host AS T3 ON T2.Host_ID = T3.Host_ID GROUP BY T1.Party_ID, T2.Party_ID, T3.Host_ID ) ORDER BY party.Party_ID DESC",
        "question": "How many parties do not have any hosts?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_host"
    },
    {
        "query": "SELECT T1.Party_Theme, COUNT(T2.Host_ID) FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID WHERE T1.Number_of_hosts <= 5 GROUP BY T1.Party_Theme ORDER BY T1.Party_Theme ASC",
        "question": "For each party theme with 5 or fewer hosts, how many hosts are there, listed in ascending order by party theme?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_host"
    },
    {
        "query": "SELECT T1.Name FROM host AS T1 WHERE T1.Age < '30'",
        "question": "What are the names of the hosts who are less than 30 years old?",
        "iter": 4,
        "flag": true,
        "hardness": "easy",
        "db_name": "party_host"
    },
    {
        "query": "SELECT T1.Party_Theme, COUNT(T3.Host_ID) FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID JOIN host AS T3 ON T3.Host_ID = T2.Host_ID WHERE T1.Location = 'Paris' OR T3.Name = 'John Smith' OR T3.Age BETWEEN 20 AND 30 GROUP BY T1.Party_Theme LIMIT 5",
        "question": "What are the party themes in Paris, or hosted by John Smith, or by hosts aged between 20 and 30, along with the number of hosts for each theme, limited to 5 results after the first 5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_host"
    },
    {
        "query": "SELECT T1.Party_Theme, T3.Name FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID JOIN host AS T3 ON T2.Host_ID = T3.Host_ID WHERE T1.First_year BETWEEN '1990' AND '2000' AND T3.Age > 30 GROUP BY T1.Party_Theme ORDER BY T1.Party_Theme DESC",
        "question": "What are the party themes and corresponding host names for parties that started between 1990 and 2000, hosted by hosts older than 30, listed in descending order by party theme?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "party_host"
    },
    {
        "query": "SELECT T1.Name FROM (SELECT T1.Name, T2.Party_ID FROM host AS T1 JOIN party_host AS T2 ON T1.Host_ID = T2.Host_ID) AS T1 WHERE T1.Party_ID >= 1",
        "question": "What are the names of hosts associated with parties having a party id of 1 or more?",
        "iter": 3,
        "flag": true,
        "hardness": "easy",
        "db_name": "party_host"
    },
    {
        "query": "SELECT SUM(T1.product_price) AS sum, MAX(T1.product_price) FROM Products AS T1 WHERE T1.product_price BETWEEN 100 AND 200 AND T1.product_description = 'Product Description' AND T1.product_name = 'Product Name' ORDER BY T1.product_price DESC",
        "question": "What is the sum and maximum of product prices for products with the description 'Product Description' and name 'Product Name' that cost between 100 and 200?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Actual_Order_Products AS T2 ON T1.product_id = T2.product_id WHERE T2.actual_order_id = ( SELECT actual_order_id FROM Actual_Orders WHERE actual_order_date > '2022-01-01' ) AND T1.product_price > 10",
        "question": "What products, priced over 10, were in orders placed after January 1, 2022?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT COUNT(T1.product_id), T1.product_name FROM Products AS T1 WHERE T1.product_price = 10 GROUP BY T1.product_name ORDER BY T1.product_name ASC LIMIT 5",
        "question": "What are the names of the 5th to 9th most expensive products that cost $10, along with the count of each product?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_price IN (SELECT product_price FROM Products) ORDER BY product_price DESC",
        "question": "What are the product names in descending order of price?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT T1.product_name FROM Products AS T1 WHERE T1.product_name NOT IN (SELECT T2.product_name FROM Products AS T2 WHERE T2.product_price > 10) LIMIT 5",
        "question": "What are the names of the 5 cheapest products after the first 5?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.product_name) FROM Products AS T1 WHERE NOT EXISTS (SELECT T2.product_id FROM Actual_Order_Products AS T2 WHERE T1.product_id = T2.product_id)",
        "question": "How many products have never been ordered?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT T1.product_name FROM Products AS T1 WHERE T1.product_price > 10 OR NOT EXISTS ( SELECT 1 FROM Regular_Order_Products AS T2 WHERE T2.product_id = T1.product_id ) GROUP BY T1.product_name HAVING SUM(T1.product_price) > 100",
        "question": "What are the names of the products whose price is more than 10 dollars or are not included in any regular order, and whose total price exceeds 100 dollars?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT T1.product_name FROM Products AS T1 WHERE T1.product_id = 1 OR T1.product_price BETWEEN 10 AND 20 OR NOT EXISTS (SELECT 1 FROM Actual_Order_Products AS T2 WHERE T2.product_id = T1.product_id) ORDER BY T1.product_id DESC",
        "question": "What are the names of the products with id 1, or with a price between 10 and 20, or that have not been ordered, listed in descending order of product id?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT AVG(T1.product_price) FROM Products AS T1 JOIN Regular_Order_Products AS T2 ON T1.product_id = T2.product_id JOIN Regular_Orders AS T3 ON T2.regular_order_id = T3.regular_order_id WHERE T3.distributer_id = 1 AND EXISTS (SELECT 1 FROM Actual_Orders AS T4 WHERE T4.regular_order_id = T3.regular_order_id AND T4.order_status_code = 'DELIVERED')",
        "question": "What is the average price of products in regular orders from distributer 1 that have been successfully delivered?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT COUNT(T1.product_id) FROM Products AS T1 WHERE T1.product_price > 10 OR T1.product_price BETWEEN 5 AND 15 OR T1.product_name = 'Product A'",
        "question": "How many products have a price greater than 10, or between 5 and 15, or are named 'Product A'?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.product_id) FROM Products AS T1 JOIN Actual_Order_Products AS T2 ON T1.product_id = T2.product_id WHERE T1.product_price = 10 ORDER BY T1.product_price DESC",
        "question": "How many distinct products priced at 10 dollars have been ordered?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.product_id) FROM Products AS T1 JOIN Regular_Order_Products AS T2 ON T1.product_id = T2.product_id JOIN Regular_Orders AS T3 ON T2.regular_order_id = T3.regular_order_id WHERE T3.distributer_id != 1",
        "question": "What is the number of distinct products ordered by regular orders from distributers other than distributer 1?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.product_name) FROM Products AS T1 JOIN Regular_Order_Products AS T2 ON T1.product_id = T2.product_id WHERE T1.product_price BETWEEN 10 AND 20 OR T1.product_price > 50",
        "question": "How many unique products with prices between 10 and 20 or greater than 50 have been ordered in a regular order?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "customer_deliveries"
    },
    {
        "query": "SELECT T1.customer_id FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Invoices AS T3 ON T2.order_id = T3.order_id",
        "question": "What are the customer ids of the customers who have placed orders for which an invoice has been generated?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 WHERE T1.customer_id >= 100",
        "question": "How many unique customers have a customer ID greater than or equal to 100?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT * FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders WHERE date_order_placed > '2020-01-01') AND customer_first_name = 'John' LIMIT 10",
        "question": "What information is available for the next ten customers named John who have placed orders after January 1, 2020?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT SUM(T1.order_id) FROM Orders AS T1 WHERE T1.customer_id = 101 OR T1.order_id BETWEEN 1000 AND 2000 OR EXISTS (SELECT T2.order_item_id FROM Order_Items AS T2 WHERE T2.order_id = T1.order_id)",
        "question": "What is the sum of order IDs of all orders placed by the customer with ID 101 or with order ID between 1000 and 2000 or of orders that have at least one order item?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT T1.customer_first_name FROM Customers AS T1 WHERE T1.customer_first_name = 'John' AND T1.customer_id BETWEEN 1 AND 10 AND T1.gender = 'Male' LIMIT 5",
        "question": "What are the first names of the first 5 male customers with customer ids between 1 and 10 whose first name is John?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT T1.date_order_placed FROM Orders AS T1 WHERE T1.order_id = 102 OR T1.order_id BETWEEN 100 AND 105 OR T1.customer_id > 500",
        "question": "What are the dates of orders with order id 102 or order id between 100 and 105 or customer id greater than 500?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT T1.customer_id FROM Customers AS T1 WHERE T1.customer_id > 100 AND T1.customer_id IN (SELECT T2.customer_id FROM Accounts AS T2 WHERE T2.account_id < 50) ORDER BY T1.customer_id DESC",
        "question": "What are the customer id's of customers with id greater than 100 who have an account with id less than 50, listed in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT T1.customer_first_name FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Orders AS T2 WHERE T2.date_order_placed > '2020-01-01')",
        "question": "What are the first names of the customers who placed orders after January 1, 2020?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT T1.customer_id, T1.customer_first_name FROM Customers AS T1 WHERE T1.customer_id > 1000 OR T1.customer_id BETWEEN 2000 AND 3000 OR T1.customer_middle_initial = 'A' ORDER BY T1.customer_id ASC LIMIT 10",
        "question": "What are the customer IDs and first names for the next 10 customers, whose IDs are greater than 1000 or between 2000 and 3000, or whose middle initial is 'A', listed in ascending order of customer ID?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT * FROM Products WHERE product_id BETWEEN 100 AND 200 AND unit_price < 50 AND EXISTS (SELECT * FROM Order_Items WHERE product_id = Products.product_id) ORDER BY product_id ASC",
        "question": "What are the details of all products with IDs between 100 and 200, prices less than 50, that have been ordered, listed in ascending order by product ID?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT T1.product_name, T2.product_quantity FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.unit_price BETWEEN 10 AND 20 AND T2.product_quantity IN (SELECT product_quantity FROM Order_Items WHERE product_quantity > 5) ORDER BY T1.product_name ASC",
        "question": "What are the names and quantities of products with unit prices between 10 and 20, ordered quantities greater than 5, listed in ascending order by product name?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_invoices"
    },
    {
        "query": "SELECT CRS_CODE FROM COURSE WHERE CRS_DESCRIPTION = (SELECT CRS_DESCRIPTION FROM COURSE WHERE CRS_CODE = 'CS101') GROUP BY CRS_CODE HAVING COUNT(CRS_CREDIT) > 1 LIMIT 5",
        "question": "What are the course codes of the next 5 courses with the same description as 'CS101' that have more than one credit option?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.CLASS_SECTION), COUNT(T1.CLASS_CODE) FROM CLASS AS T1 WHERE T1.CLASS_CODE > '1000' LIMIT 5",
        "question": "What are the counts of distinct class sections and total class codes for classes with codes greater than '1000', excluding the first 5 results?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_1"
    },
    {
        "query": "SELECT T1.STU_LNAME, COUNT(DISTINCT T2.CLASS_CODE) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE EXISTS (SELECT 1 FROM CLASS AS T3 WHERE T3.CLASS_CODE = T2.CLASS_CODE AND T3.CLASS_TIME = '10:00') GROUP BY T1.STU_LNAME ORDER BY COUNT(DISTINCT T2.CLASS_CODE) DESC LIMIT 10",
        "question": "What are the last names of the top 11th to 20th students with the most distinct class codes they are enrolled in, provided those classes have a scheduled time of 10:00?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT CLASS_SECTION), COUNT(CLASS_TIME) FROM CLASS WHERE CLASS_ROOM != 'Old Building'",
        "question": "What are the counts of distinct class sections and total class times for classes not held in the Old Building?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_1"
    },
    {
        "query": "SELECT COUNT(CRS_CODE), MAX(CRS_CREDIT) FROM COURSE WHERE CRS_CREDIT BETWEEN 1 AND 3 OR CRS_CREDIT > 5 OR EXISTS (SELECT CRS_CODE FROM CLASS WHERE CRS_CODE = COURSE.CRS_CODE)",
        "question": "What is the number of courses with credits between 1 and 3, or more than 5, or with at least one class, along with the maximum credits of these courses?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_1"
    },
    {
        "query": "SELECT EMP_LNAME, EMP_FNAME FROM EMPLOYEE WHERE EMP_NUM = 101 ORDER BY EMP_LNAME ASC",
        "question": "What is the last name and first name of the employee number 101, listed in ascending order by last name?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_1"
    },
    {
        "query": "SELECT PROF_NUM FROM CLASS WHERE CLASS_SECTION >= 'A01'",
        "question": "What are the professor employee numbers for classes in section A01 or later?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "college_1"
    },
    {
        "query": "SELECT STU_HRS, STU_GPA, STU_TRANSFER FROM STUDENT WHERE STU_HRS > 50 AND STU_GPA > 2.5 AND STU_TRANSFER > 10 ORDER BY STU_HRS ASC",
        "question": "What are the student hours, GPA, and transfer hours for students who have taken more than 50 hours, have a GPA greater than 2.5, and have transferred more than 10 hours, listed in ascending order of student hours?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_1"
    },
    {
        "query": "SELECT T1.STU_NUM, T1.STU_HRS FROM STUDENT AS T1 WHERE T1.STU_HRS BETWEEN 50 AND 100 AND EXISTS (SELECT T2.CLASS_SECTION FROM CLASS AS T2 WHERE T2.CLASS_CODE = T1.STU_CLASS) ORDER BY T1.STU_HRS ASC",
        "question": "What are the student numbers and class hours of students who took between 50 and 100 hours and are enrolled in some class, listed in ascending order of class hours?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "college_1"
    },
    {
        "query": "SELECT T1.CLASS_CODE FROM CLASS AS T1 JOIN COURSE AS T2 ON T1.CRS_CODE = T2.CRS_CODE JOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE",
        "question": "What are the class codes that are associated with a department through a course?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_1"
    },
    {
        "query": "SELECT * FROM CLASS WHERE CLASS_SECTION < 2 ORDER BY CLASS_CODE DESC",
        "question": "What are the details of classes with a section number less than 2, listed in descending order of class code?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "college_1"
    },
    {
        "query": "SELECT E.EMP_NUM FROM EMPLOYEE E WHERE NOT EXISTS (SELECT 1 FROM PROFESSOR P WHERE P.EMP_NUM = E.EMP_NUM)",
        "question": "Which employees are not professors?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "college_1"
    },
    {
        "query": "SELECT T1.Name, COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Population > 1000000 OR T1.Continent = 'Asia' OR EXISTS (SELECT * FROM city WHERE Population > 1000000 AND CountryCode = T1.Code) ORDER BY T1.Name DESC",
        "question": "What are the names of countries with a population of more than 1 million, or located in Asia, or having a city with a population of more than 1 million, along with the count of languages spoken in each country, listed in descending order by country name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "world_1"
    },
    {
        "query": "SELECT COUNT(Name) , COUNT(DISTINCT Population) ,  MAX(Population) FROM city AS c ORDER BY Population DESC",
        "question": "What are the count of city names, count of unique city populations, and the maximum city population in descending order of population?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "world_1"
    },
    {
        "query": "SELECT Name FROM city ORDER BY Name ASC",
        "question": "What are the names of all cities listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "world_1"
    },
    {
        "query": "SELECT Name FROM city AS T1 WHERE Population < 10000 LIMIT 10",
        "question": "What are the names of the next 10 cities with a population of less than 10000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "world_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), COUNT(DISTINCT ID), Population FROM city WHERE Population > 100000 OR District = 'New York' AND Population BETWEEN 50000 AND 100000 ORDER BY ID DESC",
        "question": "What are the number of distinct city names and city ids, and the population of cities with a population of more than 100,000 or in the district of New York and with a population between 50,000 and 100,000, listed in descending order of city id?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "world_1"
    },
    {
        "query": "SELECT T1.CountryCode, SUM(T1.Population) FROM city AS T1 WHERE T1.Population > 10000 AND T1.District = 'district1' AND EXISTS (SELECT T2.Code FROM country AS T2 WHERE T2.Code = T1.CountryCode) GROUP BY T1.CountryCode ORDER BY T1.CountryCode ASC",
        "question": "What is the total population of cities in each country where the city population is more than 10,000 and the district is 'district1', listed in ascending order by country code?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "world_1"
    },
    {
        "query": "SELECT MAX(Population) FROM city WHERE Population < 1000000",
        "question": "What is the highest population of a city with less than 1,000,000 residents?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "world_1"
    },
    {
        "query": "SELECT SUM(ID) FROM city AS T1 WHERE T1.Population <= 100000",
        "question": "What is the sum of the IDs of cities with a population less than or equal to 100,000?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "world_1"
    },
    {
        "query": "SELECT Name, Population FROM city WHERE Population > (SELECT AVG(Population) FROM city) ORDER BY Population ASC",
        "question": "What are the names and populations of cities with a population greater than the average city population, listed in order from smallest to largest?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "world_1"
    },
    {
        "query": "SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE SurfaceArea > 1000000) LIMIT 10",
        "question": "What are the names of cities in countries with a surface area greater than 1,000,000 square kilometers, listed from the 11th to the 20th?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "world_1"
    },
    {
        "query": "SELECT Name, Population FROM city WHERE Population < 10000",
        "question": "What are the names and populations of cities with a population of less than 10000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "world_1"
    },
    {
        "query": "SELECT Name FROM city AS T1 WHERE Population <= 100000",
        "question": "What are the names of cities with a population of 100,000 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "world_1"
    },
    {
        "query": "SELECT MIN(Population) FROM city WHERE Population <= 800000 ORDER BY Population ASC",
        "question": "What is the smallest population of a city with a population of less than or equal to 800,000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "world_1"
    },
    {
        "query": "SELECT Name FROM city WHERE Population BETWEEN 10000 AND 50000 OR Population > 100000 OR EXISTS (SELECT CountryCode FROM country WHERE city.CountryCode = country.Code AND country.Population > 1000000)",
        "question": "What are the names of cities with a population between 10,000 and 50,000 or more than 100,000, or cities located in countries with a population of more than 1,000,000?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "world_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), COUNT(DISTINCT CountryCode) FROM city WHERE ID > 100 AND EXISTS (SELECT 1 FROM country WHERE country.Code = city.CountryCode) ORDER BY ID ASC",
        "question": "How many unique city names and unique country codes are there for cities with an ID greater than 100 that belong to a valid country, listed in ascending order by city ID?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "world_1"
    },
    {
        "query": "SELECT T1.Name, T2.Name, T3.Language FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T1.Name != 'New York'",
        "question": "What are the names of cities, their countries, and the languages spoken in those countries, excluding New York?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "world_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name), CountryCode FROM city WHERE Population > 1000 AND CountryCode = 'USA' AND ID NOT IN (SELECT Capital FROM country)",
        "question": "How many distinct city names are there in the USA with a population over 1000 that are not capitals?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "world_1"
    },
    {
        "query": "SELECT product_name FROM Products WHERE product_price <= 1000",
        "question": "What are the names of the products that cost 1000 or less?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT * FROM Products WHERE product_price BETWEEN 100 AND 200 OR product_price > (SELECT AVG(product_price) FROM Products)",
        "question": "What are all the products with a price between 100 and 200 or a price higher than the average price of all products?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT COUNT(customer_id) FROM Customers WHERE payment_method_code = 'Credit Card'",
        "question": "How many customers paid with a credit card?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT product_price FROM Products WHERE product_price > 100 ORDER BY product_price DESC",
        "question": "What are the product prices over 100 dollars, listed from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT MAX(T1.product_price) FROM Products AS T1 WHERE T1.product_type_code = 'A'",
        "question": "What is the maximum price of a product of type A?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT T.product_name, AVG(T.product_price) FROM ( SELECT product_name, product_price FROM Products WHERE product_price <= 10000 ) T GROUP BY T.product_name",
        "question": "What is the average price of each product with a price less than or equal to 10000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT AVG(T1.product_price), SUM(T2.order_quantity) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name != 'Product_1'",
        "question": "What is the average price of all products except 'Product_1' and the total quantity of these products ordered?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT T1.product_name, T2.order_quantity FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_price BETWEEN 10 AND 100 AND T2.order_quantity > 5 ORDER BY T1.product_price DESC",
        "question": "What are the names and order quantities of products priced between 10 and 100, ordered in more than 5 units, listed in descending order of price?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT T1.customer_name FROM Customers AS T1 WHERE T1.customer_id NOT IN (SELECT T2.customer_id FROM Customer_Address_History AS T2)",
        "question": "What are the names of the customers who have no address history?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT product_id FROM Products WHERE product_price = 100 AND product_type_code = 1 AND product_name = 'Product 1'",
        "question": "What is the product id of Product 1 with a price of 100 and product type code 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT T1.line_1_number_building FROM Addresses AS T1 WHERE T1.city != 'New York' ORDER BY T1.zip_postcode DESC LIMIT 10",
        "question": "What are the line 1 number buildings of the addresses in cities other than New York, listed in descending order of zip postcode, starting from the 11th?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Customer_Orders AS T3 ON T2.order_id = T3.order_id WHERE T3.order_date > (SELECT order_date FROM Customer_Orders ORDER BY order_date DESC LIMIT 1)",
        "question": "What are the names of the products ordered after the most recent order date?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "customers_and_products_contacts"
    },
    {
        "query": "SELECT MAX(Age), Name FROM driver WHERE Age BETWEEN 40 AND 60 GROUP BY Name ORDER BY MAX(Age) DESC LIMIT 1",
        "question": "What is the name of the second oldest driver aged 40 to 60?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT Name FROM driver WHERE Name NOT IN (SELECT Name FROM driver WHERE Party = 'Democrat') ORDER BY Name ASC",
        "question": "What are the names of the drivers who are not Democrats, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM driver AS T1 JOIN driver AS T2 ON T1.Driver_ID != T2.Driver_ID ORDER BY T1.Name ASC",
        "question": "What are the names of all possible pairs of different drivers listed in ascending order by the first driver's name?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT T1.Name, T2.School FROM driver AS T1 JOIN school_bus AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN school AS T3 ON T2.School_ID = T3.School_ID WHERE T2.Years_Working BETWEEN 10 AND 20 ORDER BY T2.Years_Working DESC",
        "question": "What are the names of the drivers and the schools they work with, for drivers who have worked between 10 and 20 years, listed in descending order by years of experience?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT COUNT(Driver_ID) FROM driver WHERE Age = 30 OR Home_city = 'Barcelona' OR Party IN (SELECT Party FROM driver WHERE Age > 20)",
        "question": "How many drivers are either 30 years old, from Barcelona, or affiliated with a party that has at least one driver older than 20?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT COUNT(DISTINCT Name) FROM driver WHERE Age > 40 OR Party = 'Democrat' AND NOT EXISTS (SELECT 1 FROM school_bus WHERE driver.Driver_ID = school_bus.Driver_ID) ORDER BY Name ASC",
        "question": "What is the number of distinct names of drivers who are either over 40 years old and a Democrat, or not assigned to any school bus, listed in ascending order by name?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT T1.Name, COUNT(DISTINCT T2.School) FROM driver AS T1 JOIN school_bus AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN school AS T3 ON T2.School_ID = T3.School_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.School) > 1 ORDER BY T1.Name ASC LIMIT 10",
        "question": "Which 10 drivers, listed in alphabetical order, are assigned to work with more than one distinct school, starting from the 11th driver?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT T1.Name, T3.Grade FROM driver AS T1 JOIN school_bus AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN school AS T3 ON T2.School_ID = T3.School_ID WHERE T1.Party = 'Democrat' OR T2.Years_Working BETWEEN 5 AND 10 OR NOT EXISTS (SELECT 1 FROM school WHERE school.School_ID = T3.School_ID)",
        "question": "What are the names of the democrat bus drivers and the grades of the schools they work at, or those who have been working between 5 to 10 years, or those who work at schools that do not exist?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT T1.Name, T2.Location FROM driver AS T1 JOIN school AS T2 ON T1.Home_city = T2.Location WHERE T1.Age < T2.Grade LIMIT 10",
        "question": "What are the names of the drivers and their corresponding school locations where the driver's age is less than the school grade for the 11th to 20th matching records?",
        "iter": 6,
        "flag": true,
        "hardness": "hard",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT Name FROM driver WHERE Age = 40 LIMIT 10",
        "question": "What are the names of the 11th to 20th drivers who are 40 years old?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT T1.Name, MIN(T1.Age) FROM driver AS T1 WHERE NOT EXISTS (SELECT T2.School_ID FROM school AS T2 WHERE T2.School_ID = T1.Driver_ID) GROUP BY T1.Name ORDER BY T1.Age ASC",
        "question": "What are the names of the drivers not associated with any school, listed in ascending order of their age, along with their minimum age?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT T1.Grade, T1.School, T1.Location FROM school AS T1 WHERE NOT EXISTS (SELECT 1 FROM school_bus AS T2 JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T2.School_ID = T1.School_ID AND T3.Party = 'Democrat' AND T3.Age > 50)",
        "question": "What are the grades, schools, and locations of schools that do not have a school bus driven by a Democrat driver over 50 years old?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT T1.Name FROM driver AS T1 JOIN school_bus AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN school AS T3 ON T2.School_ID = T3.School_ID WHERE T1.Home_city NOT IN (SELECT T4.Location FROM school AS T4) ORDER BY T1.Age DESC LIMIT 5",
        "question": "What are the names of the 6th to 10th oldest drivers whose home city does not match the location of any school?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "school_bus"
    },
    {
        "query": "SELECT T1.affiliation_id FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T2.author_id != 1 LIMIT 10",
        "question": "What are the ids of the next 10 affiliations that have authors other than the one with id 1?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT T1.paper_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.year <= 2010",
        "question": "What are the IDs of the papers published in or before 2010?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id WHERE T1.year < 2000 ORDER BY T1.year DESC",
        "question": "What are the titles of papers published before the year 2000 that have been cited, ordered by the most recent year first?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT T1.name AS affiliation_name, T2.name AS author_name FROM Affiliation AS T1, Author AS T2, Author_list AS T3 WHERE T1.affiliation_id = T3.affiliation_id AND T2.author_id = T3.author_id",
        "question": "What are the names of affiliations and authors that are associated with each other?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT paper_id FROM Paper WHERE year != 2020 ORDER BY year DESC",
        "question": "What are the paper ids of papers published in years other than 2020, listed in descending order by year?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.author_id) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year > 2010",
        "question": "How many distinct authors have published papers after 2010?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T2.author_id = 10 OR T3.name = 'John' OR T1.year BETWEEN 2000 AND 2010 ORDER BY T1.title DESC",
        "question": "What are the titles of papers written by author with ID 10 or author named John or published between 2000 and 2010, listed in descending order by title?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.affiliation_id = 1",
        "question": "What are the names of the authors affiliated with affiliation id 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.author_id) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year BETWEEN 2000 AND 2010 OR T1.name = 'John' OR T3.venue = 'SIGMOD'",
        "question": "How many distinct authors either published a paper between 2000 and 2010, or are named John, or published at SIGMOD?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT T1.title, COUNT(DISTINCT T2.affiliation_id), SUM(T2.affiliation_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE NOT EXISTS (SELECT T3.paper_id FROM Citation AS T3 WHERE T3.paper_id = T1.paper_id) GROUP BY T1.title",
        "question": "What are the titles of papers with no citations, along with the number of distinct affiliations and the sum of affiliation ids?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT title FROM Paper WHERE year >= 2000 ORDER BY title ASC",
        "question": "What are the titles of papers published since 2000, listed in alphabetical order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT COUNT(T1.paper_id), T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T1.author_id = 10 AND T2.year BETWEEN 2000 AND 2010 AND T1.affiliation_id NOT IN (SELECT affiliation_id FROM Affiliation WHERE name = 'University of California')",
        "question": "How many papers were published by the author with ID 10, excluding those affiliated with the University of California, between 2000 and 2010, and what are their titles?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.author_id) FROM Author_list AS T1 WHERE T1.paper_id = 'paper_1'",
        "question": "How many distinct authors are there in the paper with id 'paper_1'?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "aan_1"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Name) FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T2.Festival_ID = T3.Festival_ID ORDER BY T1.Name DESC LIMIT 10",
        "question": "What are the names of the 11th to 20th distinct artworks with the most nominations, in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT T1.Festival_Name FROM festival_detail AS T1 WHERE T1.Num_of_Audience >= 20000 LIMIT 10",
        "question": "What are the names of the 11th to 20th festivals in the list of festivals that have had 20,000 or more audience members?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT T1.Festival_Name FROM festival_detail AS T1 WHERE T1.Location = 'Melbourne' AND T1.Year = 2020 AND NOT EXISTS ( SELECT 1 FROM nomination AS T2 WHERE T2.Festival_ID = T1.Festival_ID AND T2.Result = 'Winner' )",
        "question": "What are the names of the festivals in Melbourne in 2020 that did not have a winner?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Festival_ID), COUNT(T1.Festival_ID) FROM festival_detail AS T1 WHERE T1.Festival_ID = (SELECT T2.Festival_ID FROM nomination AS T2 WHERE T2.Result = 'Winner') OR T1.Year > 2010",
        "question": "How many distinct and total festival IDs are there for either award-winning festivals or festivals held after 2010?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT DISTINCT T1.Festival_Name FROM festival_detail AS T1 JOIN nomination AS T2 ON T1.Festival_ID = T2.Festival_ID WHERE T1.Year BETWEEN 2000 AND 2010 LIMIT 10",
        "question": "What are the names of the 11th to 20th distinct festivals between 2000 and 2010 that received nominations?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT Num_of_Audience FROM festival_detail WHERE Year = 2000 OR Location = 'New York' ORDER BY Num_of_Audience DESC",
        "question": "What are the numbers of audience in festivals that either took place in New York or in the year 2000, listed in descending order?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT Festival_Name FROM festival_detail WHERE Year = 2000 AND Festival_ID IN (SELECT Festival_ID FROM nomination WHERE Result = 'Winner') LIMIT 10",
        "question": "What are the 11th to 20th festival names in 2000 that had a winner?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT COUNT(Festival_ID) FROM festival_detail AS T1",
        "question": "How many festival IDs are there?",
        "iter": 2,
        "flag": true,
        "hardness": "easy",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT Num_of_Audience FROM festival_detail WHERE Year <= 2000 ORDER BY Num_of_Audience ASC",
        "question": "What are the numbers of audiences at the festivals before or in the year 2000, listed from the smallest to the largest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT T1.Festival_Name FROM festival_detail AS T1 JOIN nomination AS T2 ON T1.Festival_ID = T2.Festival_ID JOIN artwork AS T3 ON T2.Artwork_ID = T3.Artwork_ID WHERE T3.Name > 'Artwork1' LIMIT 1",
        "question": "What is the name of the second festival where an artwork with a name greater than 'Artwork1' was nominated?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT T2.Festival_Name FROM artwork AS T1 JOIN nomination AS T3 ON T1.Artwork_ID = T3.Artwork_ID JOIN festival_detail AS T2 ON T3.Festival_ID = T2.Festival_ID WHERE T1.Type = 'Painting' OR T2.Year > 2010 OR NOT EXISTS (SELECT 1 FROM festival_detail WHERE festival_detail.Festival_ID = T2.Festival_ID AND festival_detail.Location = 'New York') GROUP BY T2.Festival_Name HAVING COUNT(T2.Festival_Name) > 1",
        "question": "What are the names of the festivals that either feature paintings, took place after 2010, or do not take place in New York, and have more than one festival with the same name?",
        "iter": 6,
        "flag": true,
        "hardness": "extra",
        "db_name": "entertainment_awards"
    },
    {
        "query": "SELECT Name FROM manufacturer WHERE Num_of_Factories < Num_of_Shops ORDER BY Open_Year ASC LIMIT 10",
        "question": "What are the names of the next 10 manufacturers that opened earliest and have fewer factories than shops?",
        "iter": 3,
        "flag": true,
        "hardness": "hard",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Manufacturer_ID) , T1.Num_of_Factories FROM manufacturer AS T1 JOIN furniture_manufacte AS T2 ON T1.Manufacturer_ID = T2.Manufacturer_ID WHERE T2.Price_in_Dollar BETWEEN 100 AND 500",
        "question": "What is the count of distinct manufacturers and their number of factories that produce furniture priced between $100 and $500?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT T2.Name, AVG(T1.Price_in_Dollar) FROM furniture_manufacte AS T1 JOIN manufacturer AS T2 ON T1.Manufacturer_ID = T2.Manufacturer_ID WHERE T1.Manufacturer_ID = 1 AND T2.Open_Year > 2000 AND T2.Name IN (SELECT Name FROM manufacturer WHERE Num_of_Factories = 1) GROUP BY T2.Name ORDER BY T2.Name ASC",
        "question": "What is the average price in dollars of furniture manufactured by each single-factory manufacturer that opened after 2000, specifically the manufacturer with ID 1, ordered alphabetically by the manufacturer name?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT Manufacturer_ID, Name FROM manufacturer WHERE Open_Year BETWEEN 1990 AND 2000 OR Num_of_Factories > 10 OR Name = 'IKEA'",
        "question": "What are the names and ids of manufacturers that either opened between 1990 and 2000, have more than 10 factories, or are named IKEA?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT T1.Manufacturer_ID FROM manufacturer AS T1 JOIN furniture_manufacte AS T2 ON T1.Manufacturer_ID = T2.Manufacturer_ID WHERE T2.Price_in_Dollar <= 500",
        "question": "Which manufacturer IDs are associated with furniture products that cost 500 dollars or less?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.Manufacturer_ID) FROM furniture_manufacte AS T1 JOIN manufacturer AS T2 ON T1.Manufacturer_ID = T2.Manufacturer_ID JOIN furniture AS T3 ON T1.Furniture_ID = T3.Furniture_ID WHERE T2.Open_Year <= 2010",
        "question": "How many distinct manufacturers that opened before or in 2010 produce furniture?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT Name FROM manufacturer WHERE Num_of_Factories > 10 AND EXISTS (SELECT 1 FROM furniture_manufacte WHERE furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID AND furniture_manufacte.Price_in_Dollar < 1000)",
        "question": "What are the names of manufacturers with more than 10 factories that produce furniture priced below 1000 dollars?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT Furniture_ID FROM furniture_manufacte WHERE Price_in_Dollar <= 100 AND Furniture_ID = 1",
        "question": "What is the ID of the furniture with a price of 100 dollars or less that has a furniture ID of 1?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT T2.Name FROM furniture_manufacte AS T1 INNER JOIN manufacturer AS T2 ON T1.Manufacturer_ID = T2.Manufacturer_ID WHERE T2.Open_Year = 1990 LIMIT 10",
        "question": "What are the names of the 11th to 20th manufacturers that were opened in 1990?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT T1.Name FROM manufacturer AS T1 WHERE NOT EXISTS (SELECT T2.Furniture_ID FROM furniture_manufacte AS T2 WHERE T2.Manufacturer_ID = T1.Manufacturer_ID AND T2.Price_in_Dollar > 5000 AND T2.Furniture_ID = 10)",
        "question": "What are the names of the manufacturers that do not sell furniture item 10 at a price above 5000 dollars?",
        "iter": 2,
        "flag": true,
        "hardness": "hard",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT MAX(Num_of_Shops) FROM manufacturer WHERE Open_Year = 2000 ORDER BY Name DESC",
        "question": "What is the maximum number of shops among the manufacturers that opened in 2000, listed in descending order of their names?",
        "iter": 4,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT COUNT(Manufacturer_ID) , SUM(Num_of_Factories) FROM manufacturer WHERE Num_of_Shops != 0 ORDER BY COUNT(Manufacturer_ID) DESC",
        "question": "How many manufacturers with at least one shop are there, and what is their total number of factories, listed in descending order by the number of manufacturers?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT f.Name FROM manufacturer AS m JOIN furniture_manufacte AS fm ON m.Manufacturer_ID = fm.Manufacturer_ID JOIN furniture AS f ON fm.Furniture_ID = f.Furniture_ID WHERE f.Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte WHERE Price_in_Dollar > 100) ORDER BY f.Name ASC LIMIT 10",
        "question": "What are the names of the next 10 furniture items that are manufactured at prices not exceeding $100, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT COUNT(Name), COUNT(Open_Year), Name FROM manufacturer WHERE Open_Year = 2000",
        "question": "What are the counts of names and open years, and what are the names of the manufacturers that opened in 2000?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT T1.Name, T2.Name FROM manufacturer AS T1 JOIN manufacturer AS T2 ON T1.Manufacturer_ID = T2.Manufacturer_ID WHERE T1.Open_Year != T2.Open_Year",
        "question": "What are the names of manufacturer pairs with the same manufacturer ID but different opening years?",
        "iter": 5,
        "flag": true,
        "hardness": "medium",
        "db_name": "manufacturer"
    },
    {
        "query": "SELECT T1.title FROM movie AS T1 WHERE T1.mid NOT IN ( SELECT T2.msid FROM written_by AS T2 WHERE T2.wid = 10 ) ORDER BY T1.title ASC LIMIT 10",
        "question": "What are the titles of the next 10 movies that were not written by writer with id 10, listed in ascending order?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "imdb"
    },
    {
        "query": "SELECT T1.title FROM movie AS T1 JOIN directed_by AS T2 ON T1.mid = T2.msid JOIN director AS T3 ON T3.did = T2.did WHERE T3.birth_year > (SELECT AVG(birth_year) FROM director) ORDER BY T1.release_year DESC LIMIT 10",
        "question": "What are the titles of the next 10 movies released in descending order of release year, directed by directors born after the average birth year of all directors?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "imdb"
    },
    {
        "query": "SELECT T1.title FROM movie AS T1 JOIN directed_by AS T2 ON T1.mid = T2.msid JOIN director AS T3 ON T2.did = T3.did WHERE T1.budget > 10000000 AND T1.release_year BETWEEN 1990 AND 2000 AND T3.gender = 'male' ORDER BY T1.title ASC LIMIT 10",
        "question": "What are the next 10 movie titles, ordered alphabetically, that were released between 1990 and 2000 with a budget over 10 million dollars and directed by a male director?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "imdb"
    },
    {
        "query": "SELECT T1.title, T2.role FROM movie AS T1 JOIN cast AS T2 ON T1.mid = T2.msid JOIN actor AS T3 ON T3.aid = T2.aid WHERE T3.birth_year <= 1990",
        "question": "What are the titles of movies and the corresponding roles played by actors born in or before 1990?",
        "iter": 4,
        "flag": true,
        "hardness": "hard",
        "db_name": "imdb"
    },
    {
        "query": "SELECT T1.title FROM movie AS T1 JOIN written_by AS T2 ON T1.mid = T2.msid WHERE T1.release_year >= 2000 AND T2.wid >= 1000",
        "question": "What are the titles of movies released in 2000 or later and written by writers with a writer id of 1000 or higher?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "imdb"
    },
    {
        "query": "SELECT SUM(T1.title_aka), COUNT(T1.release_year) FROM movie AS T1",
        "question": "What is the total sum of also known titles and how many movies are there in the movie database?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "imdb"
    },
    {
        "query": "SELECT T1.name, AVG(T1.birth_year) FROM director AS T1 JOIN directed_by AS T2 ON T1.did = T2.did WHERE T2.msid != 10 GROUP BY T1.name LIMIT 5",
        "question": "What are the names of the next 5 directors and their average birth years excluding those who directed movie with msid 10?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "imdb"
    },
    {
        "query": "SELECT T1.name FROM actor AS T1 JOIN actor AS T2 ON T1.aid = T2.aid WHERE EXISTS (SELECT 1 FROM cast AS T3 WHERE T3.aid = T1.aid AND T3.role = 1)",
        "question": "What are the names of actors who have a role as 1 in the cast list?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "imdb"
    },
    {
        "query": "SELECT COUNT(wid) FROM writer WHERE birth_year > 1970 OR nationality = 'American' OR EXISTS (SELECT 1 FROM written_by WHERE msid = 100)",
        "question": "How many writers were born after 1970, or are American, or have written a manuscript with msid 100?",
        "iter": 2,
        "flag": true,
        "hardness": "extra",
        "db_name": "imdb"
    },
    {
        "query": "SELECT T1.release_year FROM movie AS T1 JOIN directed_by AS T2 ON T1.mid = T2.msid WHERE T2.did IN (SELECT did FROM director WHERE birth_year > 1900) ORDER BY T1.release_year ASC",
        "question": "What are the release years of movies directed by directors born after 1900, listed in ascending order?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "imdb"
    },
    {
        "query": "SELECT T1.City_ID FROM city AS T1 WHERE T1.City_ID = 100 OR T1.City_ID = 200 OR NOT EXISTS (SELECT 1 FROM hosting_city AS T2 WHERE T2.Host_City = T1.City_ID)",
        "question": "What are the city ids of cities with ids 100 or 200 or cities that have never hosted any match?",
        "iter": 3,
        "flag": true,
        "hardness": "extra",
        "db_name": "city_record"
    },
    {
        "query": "SELECT AVG(T1.Regional_Population) FROM city AS T1 WHERE T1.City != 'Beijing' ORDER BY T1.GDP DESC LIMIT 10",
        "question": "What are the average regional populations of the top 11-20 cities by GDP excluding Beijing?",
        "iter": 5,
        "flag": true,
        "hardness": "hard",
        "db_name": "city_record"
    },
    {
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City",
        "question": "What are the cities that host some events?",
        "iter": 5,
        "flag": true,
        "hardness": "easy",
        "db_name": "city_record"
    },
    {
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.Regional_Population > 10000 ORDER BY T1.GDP DESC",
        "question": "What are the cities with a regional population of more than 10,000, listed in order of their GDP from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "city_record"
    },
    {
        "query": "SELECT COUNT(DISTINCT T1.City_ID), COUNT(T1.City_ID) FROM city AS T1 WHERE T1.Regional_Population BETWEEN 10000 AND 50000 ORDER BY T1.City_ID ASC",
        "question": "In the city table, what are the counts of distinct city IDs and total city IDs for cities with a regional population between 10000 and 50000, listed in ascending order by city ID?",
        "iter": 5,
        "flag": true,
        "hardness": "extra",
        "db_name": "city_record"
    },
    {
        "query": "SELECT T2.City FROM hosting_city AS T1 JOIN city AS T2 ON T1.Host_City = T2.City_ID WHERE T2.GDP >= 1000000",
        "question": "Which cities have a GDP of at least 1,000,000 and have hosted a match?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "city_record"
    },
    {
        "query": "SELECT City FROM city WHERE Regional_Population >= 1000 ORDER BY Regional_Population DESC",
        "question": "What are the cities with a regional population of 1000 or more, listed in order of population from highest to lowest?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "city_record"
    },
    {
        "query": "SELECT City, Hanzi FROM city AS hosting_city ORDER BY City ASC",
        "question": "What are the cities and their corresponding hanzi in ascending order of city names?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "city_record"
    },
    {
        "query": "SELECT City FROM city WHERE City_ID != 1 LIMIT 10",
        "question": "What are the cities with id other than 1, listed 11th to 20th in the city table?",
        "iter": 3,
        "flag": true,
        "hardness": "medium",
        "db_name": "city_record"
    },
    {
        "query": "SELECT COUNT(DISTINCT City), COUNT(DISTINCT Regional_Population), COUNT(DISTINCT GDP) FROM city ORDER BY City_ID DESC",
        "question": "How many unique cities, regional populations, and GDPs are there in the list of cities when ordered by city ID in descending order?",
        "iter": 2,
        "flag": true,
        "hardness": "medium",
        "db_name": "city_record"
    },
    {
        "query": "SELECT T1.City, COUNT(T1.City_ID) FROM city AS T1 WHERE T1.City != 'Beijing' GROUP BY T1.City HAVING COUNT(T1.City_ID) > 1",
        "question": "Which cities, excluding Beijing, appear more than once in the city list?",
        "iter": 4,
        "flag": true,
        "hardness": "extra",
        "db_name": "city_record"
    }
]