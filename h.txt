False
dbname:  llm_based
Evaluating predictions
P_SQL:  {'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_description__', False), None))]), 'where': [(False, 3, (0, (0, '__ref_template_types.template_type_code__', False), None), '"A"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code > 'A';
{'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_description__', False), None))]), 'where': [(False, 3, (0, (0, '__ref_template_types.template_type_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__templates__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__templates.template_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__templates.version_number__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Template_ID FROM Templates ORDER BY Version_Number DESC;
{'from': {'table_units': [('table_unit', '__templates__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__templates.template_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__templates.version_number__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__templates__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__templates.template_type_code__', False), None)), (2, (0, (0, '__templates.template_id__', False), None))]), 'where': [], 'groupBy': [(0, '__templates.template_type_code__', False)], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Template_Type_Code, MIN(Template_ID) AS Smallest_Template_ID FROM Templates GROUP BY Template_Type_Code;
{'from': {'table_units': [('table_unit', '__ref_template_types__'), ('table_unit', '__templates__')], 'conds': [(False, 2, (0, (0, '__ref_template_types.template_type_code__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_code__', False), None)), (2, (0, (0, '__templates.template_id__', False), None))]), 'where': [], 'groupBy': [(0, '__ref_template_types.template_type_code__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__ref_template_types.template_type_code__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_code__', False), None))]), 'where': [(False, 4, (0, (0, '__ref_template_types.template_type_code__', False), None), '"A"', None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__ref_template_types.template_type_code__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code < 'A' ORDER BY Template_Type_Code ASC;
Both are empty
GT:  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code < 'A' ORDER BY Template_Type_Code ASC
Pred:  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code < 'A' ORDER BY Template_Type_Code ASC;
{'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_code__', False), None))]), 'where': [(False, 4, (0, (0, '__ref_template_types.template_type_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__ref_template_types.template_type_code__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__templates__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__templates.template_id__', False), None))]), 'where': [(False, 2, (0, (0, '__templates.template_type_code__', False), None), '"Type1"', None), 'and', (False, 3, (0, (0, '__templates.version_number__', False), None), 1.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__templates.template_id__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Type1' AND Version_Number > 1 ORDER BY Template_ID LIMIT 5;
Both are empty
GT:  SELECT T1.Template_ID FROM Templates AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Version_Number > 1 AND T1.Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Type1') ORDER BY T1.Template_ID ASC LIMIT 5
Pred:  SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Type1' AND Version_Number > 1 ORDER BY Template_ID LIMIT 5;
{'from': {'table_units': [('table_unit', '__templates__'), ('table_unit', '__templates__')], 'conds': [(False, 2, (0, (0, '__templates.template_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__templates.template_id__', False), None))]), 'where': [(False, 3, (0, (0, '__templates.version_number__', False), None), None, None), 'and', (False, 2, (0, (0, '__templates.template_type_code__', False), None), {'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__templates.template_type_code__', False), None))]), 'where': [(False, 2, (0, (0, '__ref_template_types.template_type_description__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__templates.template_id__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__ref_template_types__'), ('table_unit', '__templates__')], 'conds': [(False, 2, (0, (0, '__ref_template_types.template_type_code__', False), None), (0, '__templates.template_type_code__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_description__', False), None)), (3, (0, (0, '__all__', False), None))]), 'where': [(False, 12, (0, (0, '__ref_template_types.template_type_code__', False), None), '"XXX"', None)], 'groupBy': [(0, '__ref_template_types.template_type_description__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__all__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT RTT.Template_Type_Description, COUNT(*) AS Template_Count FROM Ref_Template_Types RTT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code WHERE RTT.Template_Type_Code <> 'XXX' GROUP BY RTT.Template_Type_Description ORDER BY Template_Count DESC LIMIT 5;
Execution error medium
Predicted SQL:  SELECT RTT.Template_Type_Description, COUNT(*) AS Template_Count FROM Ref_Template_Types RTT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code WHERE RTT.Template_Type_Code <> 'XXX' GROUP BY RTT.Template_Type_Description ORDER BY Template_Count DESC LIMIT 5;
Gold SQL:  SELECT Template_Type_Description, COUNT(Template_Type_Code) FROM Ref_Template_Types AS T1 GROUP BY Template_Type_Description HAVING Template_Type_Code != 'XXX' LIMIT 5
{'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_description__', False), None)), (3, (0, (0, '__ref_template_types.template_type_code__', False), None))]), 'where': [], 'groupBy': [(0, '__ref_template_types.template_type_description__', False)], 'having': [(False, 7, (0, (0, '__ref_template_types.template_type_code__', False), None), None, None)], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__templates__'), ('table_unit', '__ref_template_types__')], 'conds': [(False, 2, (0, (0, '__templates.template_type_code__', False), None), (0, '__ref_template_types.template_type_code__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__templates.template_id__', False), None))]), 'where': [(False, 3, (0, (0, '__templates.version_number__', False), None), 1.0, None), 'and', (False, 2, (0, (0, '__templates.template_type_code__', False), None), '"TYPE1"', None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__templates.template_id__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE T.Version_Number > 1 AND T.Template_Type_Code = 'TYPE1' ORDER BY T.Template_ID DESC LIMIT 10;
Both are empty
GT:  SELECT Template_ID FROM Templates WHERE Version_Number > 1 AND Template_Type_Code = 'TYPE1' AND EXISTS (SELECT 1 FROM Ref_Template_Types WHERE Template_Type_Code = 'TYPE1') ORDER BY Template_ID DESC LIMIT 10
Pred:  SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE T.Version_Number > 1 AND T.Template_Type_Code = 'TYPE1' ORDER BY T.Template_ID DESC LIMIT 10;
{'from': {'table_units': [('table_unit', '__templates__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__templates.template_id__', False), None))]), 'where': [(False, 3, (0, (0, '__templates.version_number__', False), None), None, None), 'and', (False, 2, (0, (0, '__templates.template_type_code__', False), None), None, None), 'and', (False, 11, None, {'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__templates.template_type_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__templates.template_id__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__templates__'), ('table_unit', '__templates__')], 'conds': [(False, 3, (0, (0, '__templates.template_id__', False), None), (0, '__templates.template_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__templates.template_id__', False), None)), (0, (0, (0, '__templates.template_details__', False), None)), (0, (0, (0, '__templates.template_id__', False), None)), (0, (0, (0, '__templates.template_details__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__templates.template_id__', False), None), (0, (0, '__templates.template_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT T1.Template_ID AS TemplateID1, T1.Template_Details AS TemplateDetails1, T2.Template_ID AS TemplateID2, T2.Template_Details AS TemplateDetails2 FROM Templates T1 JOIN Templates T2 ON T1.Template_ID > T2.Template_ID ORDER BY T1.Template_ID DESC, T2.Template_ID DESC;
Partial answer True
Not equal but Partially Correct:
SELECT T1.Template_Details, T2.Template_Details FROM Templates AS T1 JOIN Templates AS T2 ON T1.Template_ID != T2.Template_ID ORDER BY T1.Template_ID DESC
SELECT T1.Template_ID AS TemplateID1, T1.Template_Details AS TemplateDetails1, T2.Template_ID AS TemplateID2, T2.Template_Details AS TemplateDetails2 FROM Templates T1 JOIN Templates T2 ON T1.Template_ID > T2.Template_ID ORDER BY T1.Template_ID DESC, T2.Template_ID DESC;
---------------------
Execution error medium
Predicted SQL:  SELECT T1.Template_ID AS TemplateID1, T1.Template_Details AS TemplateDetails1, T2.Template_ID AS TemplateID2, T2.Template_Details AS TemplateDetails2 FROM Templates T1 JOIN Templates T2 ON T1.Template_ID > T2.Template_ID ORDER BY T1.Template_ID DESC, T2.Template_ID DESC;
Gold SQL:  SELECT T1.Template_Details, T2.Template_Details FROM Templates AS T1 JOIN Templates AS T2 ON T1.Template_ID != T2.Template_ID ORDER BY T1.Template_ID DESC
{'from': {'table_units': [('table_unit', '__templates__'), ('table_unit', '__templates__')], 'conds': [(False, 7, (0, (0, '__templates.template_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__templates.template_details__', False), None)), (0, (0, (0, '__templates.template_details__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__templates.template_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__templates__')], 'conds': [], 'join_types': []}, 'select': (True, [(0, (0, (0, '__templates.template_type_code__', False), None))]), 'where': [(False, 12, (0, (0, '__templates.template_type_code__', False), None), '"T001"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_Type_Code <> 'T001';
{'from': {'table_units': [('table_unit', '__templates__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__templates.template_type_code__', False), None))]), 'where': [(True, 8, (0, (0, '__templates.template_type_code__', False), None), {'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__templates.template_type_code__', False), None))]), 'where': [(False, 2, (0, (0, '__templates.template_type_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_description__', False), None))]), 'where': [(False, 3, (0, (0, '__ref_template_types.template_type_code__', False), None), '"A"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code > 'A';
{'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_description__', False), None))]), 'where': [(False, 3, (0, (0, '__ref_template_types.template_type_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__templates__'), ('table_unit', '__ref_template_types__')], 'conds': [(False, 2, (0, (0, '__templates.template_type_code__', False), None), (0, '__ref_template_types.template_type_code__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_description__', False), None)), (3, (0, (0, '__templates.template_id__', True), None))]), 'where': [(False, 3, (0, (0, '__templates.version_number__', False), None), 1.0, None)], 'groupBy': [(0, '__ref_template_types.template_type_description__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__templates.template_id__', True), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT RTT.Template_Type_Description, COUNT(DISTINCT T.Template_ID) AS NumberOfTemplates FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE T.Version_Number > 1 GROUP BY RTT.Template_Type_Description ORDER BY NumberOfTemplates ASC;
{'from': {'table_units': [('table_unit', '__templates__'), ('table_unit', '__ref_template_types__')], 'conds': [(False, 2, (0, (0, '__templates.template_type_code__', False), None), None, None)], 'join_types': [1]}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_description__', False), None)), (3, (0, (0, '__templates.template_id__', True), None))]), 'where': [(False, 3, (0, (0, '__templates.version_number__', False), None), None, None)], 'groupBy': [(0, '__ref_template_types.template_type_description__', False)], 'having': [], 'orderBy': ('asc', [(3, (0, '__templates.template_id__', True), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__documents__'), ('table_unit', '__templates__')], 'conds': [(False, 2, (0, (0, '__documents.template_id__', False), None), (0, '__templates.template_id__', False), None)], 'join_types': [0]}, 'select': (True, [(0, (0, (0, '__documents.template_id__', False), None))]), 'where': [(False, 2, (0, (0, '__templates.template_type_code__', False), None), '"A"', None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__documents.document_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT d.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'A' ORDER BY d.Document_ID ASC;
Execution error extra
Predicted SQL:  SELECT DISTINCT d.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'A' ORDER BY d.Document_ID ASC;
Gold SQL:  SELECT COUNT(DISTINCT Template_ID) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'A') ORDER BY Document_ID ASC
{'from': {'table_units': [('table_unit', '__documents__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__documents.template_id__', True), None))]), 'where': [(False, 8, (0, (0, '__documents.template_id__', False), None), {'from': {'table_units': [('table_unit', '__templates__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__documents.template_id__', False), None))]), 'where': [(False, 2, (0, (0, '__templates.template_type_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__documents.document_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
gold query SELECT COUNT( Documents.Document_Name) , COUNT( Documents.Document_Description) , COUNT(Templates.Template_ID) FROM Documents AS T1 LEFT JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'type1' OR T1.Document_ID BETWEEN 10 AND 20 OR T2.Version_Number > 5 LIMIT 10 has error on database file test-suite-sql-eval-master/database/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error hard
Predicted SQL:  SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code BETWEEN 'A' AND 'Z' ORDER BY Template_Type_Code DESC LIMIT 10 OFFSET 10;
Gold SQL:  SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code BETWEEN 'A' AND 'Z' ORDER BY Template_Type_Description DESC LIMIT 10
{'from': {'table_units': [('table_unit', '__ref_template_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_template_types.template_type_description__', False), None))]), 'where': [(False, 1, (0, (0, '__ref_template_types.template_type_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__ref_template_types.template_type_description__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__paragraphs__'), ('table_unit', '__documents__'), ('table_unit', '__templates__')], 'conds': [(False, 2, (0, (0, '__paragraphs.document_id__', False), None), (0, '__documents.document_id__', False), None), 'and', (False, 2, (0, (0, '__documents.template_id__', False), None), (0, '__templates.template_id__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__templates.version_number__', False), None))]), 'where': [(False, 2, (0, (0, '__paragraphs.paragraph_text__', False), None), '"Sample Text"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT T.Version_Number FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID JOIN Templates T ON D.Template_ID = T.Template_ID WHERE P.Paragraph_Text = 'Sample Text';
Both are empty
GT:  SELECT Version_Number FROM Templates WHERE Template_ID = ( SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Sample Text' )
Pred:  SELECT T.Version_Number FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID JOIN Templates T ON D.Template_ID = T.Template_ID WHERE P.Paragraph_Text = 'Sample Text';
{'from': {'table_units': [('table_unit', '__templates__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__templates.version_number__', False), None))]), 'where': [(False, 2, (0, (0, '__templates.template_id__', False), None), {'from': {'table_units': [('table_unit', '__paragraphs__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__paragraphs.document_id__', False), None))]), 'where': [(False, 2, (0, (0, '__paragraphs.paragraph_text__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__employee__'), ('table_unit', '__hiring__'), ('table_unit', '__shop__')], 'conds': [(False, 2, (0, (0, '__employee.employee_id__', False), None), (0, '__hiring.employee_id__', False), None), 'and', (False, 2, (0, (0, '__hiring.shop_id__', False), None), (0, '__shop.shop_id__', False), None)], 'join_types': [2, 0]}, 'select': (True, [(0, (0, (0, '__employee.name__', False), None))]), 'where': [(False, 1, (0, (0, '__employee.age__', False), None), 20.0, 30.0), 'or', (False, 2, (0, (0, '__shop.district__', False), None), '"North"', None), 'and', (False, 2, (0, (0, '__employee.city__', False), None), (0, '__shop.location__', False), None), 'or', (False, 2, (0, (0, '__employee.name__', False), None), '"John"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT e.Name FROM employee e LEFT JOIN hiring h ON e.Employee_ID = h.Employee_ID LEFT JOIN shop s ON h.Shop_ID = s.Shop_ID WHERE e.Age BETWEEN 20 AND 30 OR s.District = 'North' AND e.City = s.Location OR e.Name = 'John';
{'from': {'table_units': [('table_unit', '__employee__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__employee.name__', False), None))]), 'where': [(False, 1, (0, (0, '__employee.age__', False), None), None, None), 'or', (False, 8, (0, (0, '__employee.city__', False), None), {'from': {'table_units': [('table_unit', '__shop__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__shop.location__', False), None))]), 'where': [(False, 2, (0, (0, '__shop.district__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None), 'or', (False, 2, (0, (0, '__employee.name__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
{'from': {'table_units': [('table_unit', '__employee__'), ('table_unit', '__hiring__'), ('table_unit', '__shop__')], 'conds': [(False, 2, (0, (0, '__employee.employee_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__hiring.shop_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(3, (0, (0, '__employee.name__', True), None))]), 'where': [(False, 2, (0, (0, '__hiring.is_full_time__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__employee__'), ('table_unit', '__evaluation__')], 'conds': [(False, 2, (0, (0, '__employee.employee_id__', False), None), (0, '__evaluation.employee_id__', False), None)], 'join_types': [1]}, 'select': (False, [(0, (0, (0, '__employee.employee_id__', False), None)), (0, (0, (0, '__employee.name__', False), None)), (0, (0, (0, '__employee.age__', False), None)), (0, (0, (0, '__employee.city__', False), None))]), 'where': [(False, 3, (0, (0, '__evaluation.bonus__', False), None), {'from': {'table_units': [('table_unit', '__evaluation__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__evaluation.bonus__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [(0, '__employee.employee_id__', False), (0, '__employee.name__', False), (0, '__employee.age__', False), (0, '__employee.city__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__employee.employee_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT e.Employee_ID, e.Name, e.Age, e.City FROM employee e INNER JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus > (SELECT AVG(Bonus) FROM evaluation) GROUP BY e.Employee_ID, e.Name, e.Age, e.City ORDER BY e.Employee_ID ASC;
{'from': {'table_units': [('table_unit', '__employee__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__all__', False), None))]), 'where': [(False, 11, None, {'from': {'table_units': [('table_unit', '__evaluation__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__evaluation.employee_id__', False), None), None, None), 'and', (False, 3, (0, (0, '__evaluation.bonus__', False), None), {'from': {'table_units': [('table_unit', '__evaluation__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__evaluation.bonus__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__employee.employee_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error hard
Predicted SQL:  SELECT Name FROM employee WHERE Age <= 30 ORDER BY Age DESC, Employee_ID LIMIT 10 OFFSET 10
Gold SQL:  SELECT Name FROM employee WHERE Age <= 30 ORDER BY Age DESC LIMIT 10
{'from': {'table_units': [('table_unit', '__employee__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__employee.name__', False), None))]), 'where': [(False, 6, (0, (0, '__employee.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__employee.age__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error medium
Predicted SQL:  SELECT e.Name, COUNT(h.Employee_ID) AS num_hires_before_2020 FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID WHERE strftime('%Y', h.Start_from) < '2020' GROUP BY e.Name;
Gold SQL:  SELECT T1.Name, COUNT(T2.Employee_ID) FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Start_from < '2020-01-01'
{'from': {'table_units': [('table_unit', '__employee__'), ('table_unit', '__hiring__')], 'conds': [(False, 2, (0, (0, '__employee.employee_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__employee.name__', False), None)), (3, (0, (0, '__hiring.employee_id__', False), None))]), 'where': [(False, 4, (0, (0, '__hiring.start_from__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__employee__'), ('table_unit', '__hiring__')], 'conds': [(False, 2, (0, (0, '__employee.employee_id__', False), None), (0, '__hiring.employee_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__employee.name__', False), None)), (3, (0, (0, '__hiring.shop_id__', True), None))]), 'where': [], 'groupBy': [(0, '__employee.employee_id__', False)], 'having': [(False, 3, (3, (0, '__hiring.shop_id__', True), None), 1.0, None)], 'orderBy': ('asc', [(0, (0, '__employee.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT e.Name, COUNT(DISTINCT h.Shop_ID) AS NumberOfShops FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID GROUP BY e.Employee_ID HAVING COUNT(DISTINCT h.Shop_ID) > 1 ORDER BY e.Name ASC;
Both are empty
GT:  SELECT T1.Name, COUNT( T2.Shop_ID) FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name HAVING COUNT( T2.Shop_ID) > 1 ORDER BY T1.Name ASC
Pred:  SELECT e.Name, COUNT( h.Shop_ID) AS NumberOfShops FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID GROUP BY e.Employee_ID HAVING COUNT( h.Shop_ID) > 1 ORDER BY e.Name ASC;
{'from': {'table_units': [('table_unit', '__employee__'), ('table_unit', '__hiring__')], 'conds': [(False, 2, (0, (0, '__employee.employee_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__employee.name__', False), None)), (3, (0, (0, '__hiring.shop_id__', True), None))]), 'where': [], 'groupBy': [(0, '__employee.name__', False)], 'having': [(False, 3, (3, (0, '__hiring.shop_id__', True), None), None, None)], 'orderBy': ('asc', [(0, (0, '__employee.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT T2.Name, SUM(T1.Age) FROM employee AS T1 JOIN shop AS T2 ON T1.City = T2.Location GROUP BY T2.Name HAVING SUM(T1.Age) > 50 LIMIT 10
Pred:  SELECT s.Name FROM shop s WHERE s.Location IN ( SELECT e.City FROM employee e GROUP BY e.City HAVING SUM(e.Age) > 50 ) ORDER BY s.Name LIMIT 10 OFFSET 10;
{'from': {'table_units': [('table_unit', '__employee__'), ('table_unit', '__shop__')], 'conds': [(False, 2, (0, (0, '__employee.city__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__shop.name__', False), None)), (4, (0, (0, '__employee.age__', False), None))]), 'where': [], 'groupBy': [(0, '__shop.name__', False)], 'having': [(False, 3, (4, (0, '__employee.age__', False), None), None, None)], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__employee__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__all__', False), None))]), 'where': [(False, 7, (0, (0, '__employee.city__', False), None), '"New York"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(*) AS Not_From_New_York FROM employee WHERE City != 'New York';
{'from': {'table_units': [('table_unit', '__employee__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__employee.age__', False), None))]), 'where': [(False, 7, (0, (0, '__employee.city__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__evaluation__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__evaluation.employee_id__', False), None)), (4, (0, (0, '__evaluation.bonus__', False), None))]), 'where': [], 'groupBy': [(0, '__evaluation.employee_id__', False)], 'having': [(False, 3, (0, (0, '__evaluation.bonus__', False), None), 10000.0, None), 'or', (False, 1, (0, (0, '__evaluation.employee_id__', False), None), 1.0, 10.0), 'or', (False, 2, (0, (0, '__evaluation.employee_id__', False), None), 5.0, None)], 'orderBy': ('asc', [(0, (0, '__evaluation.employee_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT e.Employee_ID, SUM(e.Bonus) as Total_Bonus FROM evaluation e GROUP BY e.Employee_ID HAVING Total_Bonus > 10000 OR e.Employee_ID BETWEEN 1 AND 10 OR e.Employee_ID = 5 ORDER BY e.Employee_ID ASC;
{'from': {'table_units': [('table_unit', '__evaluation__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__evaluation.employee_id__', False), None)), (4, (0, (0, '__evaluation.bonus__', False), None))]), 'where': [], 'groupBy': [(0, '__evaluation.employee_id__', False)], 'having': [(False, 3, (4, (0, '__evaluation.bonus__', False), None), None, None), 'or', (False, 1, (0, (0, '__evaluation.employee_id__', False), None), None, None), 'or', (False, 2, (0, (0, '__evaluation.employee_id__', False), None), None, None)], 'orderBy': ('asc', [(0, (0, '__evaluation.employee_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error hard
Predicted SQL:  SELECT Name FROM employee WHERE Age != 25 ORDER BY Age LIMIT 10 OFFSET 10;
Gold SQL:  SELECT Name FROM employee WHERE Age != 25 ORDER BY Age ASC LIMIT 10
{'from': {'table_units': [('table_unit', '__employee__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__employee.name__', False), None))]), 'where': [(False, 7, (0, (0, '__employee.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__employee.age__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__employee__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__employee.name__', False), None))]), 'where': [(False, 6, (0, (0, '__employee.age__', False), None), 25.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name FROM employee WHERE Age <= 25;
{'from': {'table_units': [('table_unit', '__employee__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__employee.name__', False), None))]), 'where': [(False, 6, (0, (0, '__employee.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__employee__'), ('table_unit', '__hiring__'), ('table_unit', '__shop__')], 'conds': [(False, 2, (0, (0, '__employee.employee_id__', False), None), (0, '__hiring.employee_id__', False), None), 'and', (False, 2, (0, (0, '__shop.shop_id__', False), None), (0, '__hiring.shop_id__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__employee.name__', False), None)), (4, (0, (0, '__shop.number_products__', False), None))]), 'where': [(False, 4, (0, (0, '__employee.age__', False), None), 30.0, None)], 'groupBy': [(0, '__employee.employee_id__', False), (0, '__employee.name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__employee.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT e.Name AS Employee_Name, SUM(s.Number_products) AS Total_Products FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID JOIN shop s ON s.Shop_ID = h.Shop_ID WHERE e.Age < 30 GROUP BY e.Employee_ID, e.Name ORDER BY e.Name ASC;
Execution error extra
Predicted SQL:  SELECT e.Name AS Employee_Name, SUM(s.Number_products) AS Total_Products FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID JOIN shop s ON s.Shop_ID = h.Shop_ID WHERE e.Age < 30 GROUP BY e.Employee_ID, e.Name ORDER BY e.Name ASC;
Gold SQL:  SELECT T1.Name, SUM(T2.Number_products) FROM employee AS T1 JOIN hiring AS T3 ON T1.Employee_ID = T3.Employee_ID JOIN shop AS T2 ON T3.Shop_ID = T2.Shop_ID WHERE T1.Age < 30 ORDER BY T1.Name ASC
{'from': {'table_units': [('table_unit', '__employee__'), ('table_unit', '__hiring__'), ('table_unit', '__shop__')], 'conds': [(False, 2, (0, (0, '__employee.employee_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__hiring.shop_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__employee.name__', False), None)), (4, (0, (0, '__shop.number_products__', False), None))]), 'where': [(False, 4, (0, (0, '__employee.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__employee.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__properties__')], 'conds': [], 'join_types': []}, 'select': (False, [(4, (0, (0, '__properties.vendor_requested_price__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT SUM(vendor_requested_price) AS TotalVendorRequestedPrice FROM Properties;
{'from': {'table_units': [('table_unit', '__properties__')], 'conds': [], 'join_types': []}, 'select': (False, [(4, (0, (0, '__properties.vendor_requested_price__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__ref_feature_types__'), ('table_unit', '__other_available_features__')], 'conds': [(False, 2, (0, (0, '__ref_feature_types.feature_type_code__', False), None), (0, '__other_available_features.feature_type_code__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__ref_feature_types.feature_type_name__', False), None))]), 'where': [(False, 2, (0, (0, '__other_available_features.feature_id__', False), None), 1.0, None), 'or', (False, 2, (0, (0, '__other_available_features.feature_name__', False), None), '"feature"', None), 'or', (True, 8, (0, (0, '__other_available_features.feature_id__', False), None), {'from': {'table_units': [('table_unit', '__other_property_features__')], 'conds': [], 'join_types': []}, 'select': (True, [(0, (0, (0, '__other_property_features.feature_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT ft.feature_type_name FROM Ref_Feature_Types ft JOIN Other_Available_Features oaf ON ft.feature_type_code = oaf.feature_type_code WHERE oaf.feature_id = 1 OR oaf.feature_name = 'feature' OR oaf.feature_id NOT IN ( SELECT DISTINCT opf.feature_id FROM Other_Property_Features opf )
Both are empty
GT:  SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_id = 1 OR T2.feature_name = 'feature' OR NOT EXISTS (SELECT 1 FROM Other_Property_Features AS T3 WHERE T3.feature_id = T2.feature_id)
Pred:  SELECT ft.feature_type_name FROM Ref_Feature_Types ft JOIN Other_Available_Features oaf ON ft.feature_type_code = oaf.feature_type_code WHERE oaf.feature_id = 1 OR oaf.feature_name = 'feature' OR oaf.feature_id NOT IN ( SELECT  opf.feature_id FROM Other_Property_Features opf )
{'from': {'table_units': [('table_unit', '__ref_feature_types__'), ('table_unit', '__other_available_features__')], 'conds': [(False, 2, (0, (0, '__ref_feature_types.feature_type_code__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__ref_feature_types.feature_type_name__', False), None))]), 'where': [(False, 2, (0, (0, '__other_available_features.feature_id__', False), None), None, None), 'or', (False, 2, (0, (0, '__other_available_features.feature_name__', False), None), None, None), 'or', (True, 11, None, {'from': {'table_units': [('table_unit', '__other_property_features__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__other_property_features.feature_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__ref_feature_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_feature_types.feature_type_name__', False), None))]), 'where': [(False, 5, (0, (0, '__ref_feature_types.feature_type_code__', False), None), '"type_code"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code >= 'type_code';
Both are empty
GT:  SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code >= 'type_code'
Pred:  SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code >= 'type_code';
{'from': {'table_units': [('table_unit', '__ref_feature_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_feature_types.feature_type_name__', False), None))]), 'where': [(False, 5, (0, (0, '__ref_feature_types.feature_type_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__other_available_features__'), ('table_unit', '__ref_feature_types__')], 'conds': [(False, 2, (0, (0, '__other_available_features.feature_type_code__', False), None), (0, '__ref_feature_types.feature_type_code__', False), None)], 'join_types': [2]}, 'select': (False, [(0, (0, (0, '__other_available_features.feature_id__', False), None))]), 'where': [(False, 10, (0, (0, '__ref_feature_types.feature_type_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__other_available_features.feature_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT oaf.feature_id FROM Other_Available_Features oaf LEFT JOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code WHERE rft.feature_type_code IS NULL ORDER BY oaf.feature_id ASC;
Both are empty
GT:  SELECT feature_id FROM Other_Available_Features WHERE feature_type_code NOT IN (SELECT feature_type_code FROM Ref_Feature_Types) ORDER BY feature_id ASC
Pred:  SELECT oaf.feature_id FROM Other_Available_Features oaf LEFT JOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code WHERE rft.feature_type_code IS NULL ORDER BY oaf.feature_id ASC;
{'from': {'table_units': [('table_unit', '__other_available_features__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__other_available_features.feature_id__', False), None))]), 'where': [(True, 8, (0, (0, '__other_available_features.feature_type_code__', False), None), {'from': {'table_units': [('table_unit', '__ref_feature_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__other_available_features.feature_type_code__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__other_available_features.feature_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__properties__')], 'conds': [], 'join_types': []}, 'select': (False, [(4, (0, (0, '__properties.vendor_requested_price__', False), None))]), 'where': [(False, 3, (0, (0, '__properties.agreed_selling_price__', False), None), (0, '__properties.vendor_requested_price__', False), None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT SUM(vendor_requested_price) AS total_requested_price FROM Properties WHERE agreed_selling_price > vendor_requested_price;
Execution error medium
Predicted SQL:  SELECT SUM(vendor_requested_price) AS total_requested_price FROM Properties WHERE agreed_selling_price > vendor_requested_price;
Gold SQL:  SELECT SUM(T1.vendor_requested_price) FROM Properties AS T1 JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id WHERE T1.agreed_selling_price > T1.vendor_requested_price
{'from': {'table_units': [('table_unit', '__properties__'), ('table_unit', '__other_property_features__')], 'conds': [(False, 2, (0, (0, '__properties.property_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(4, (0, (0, '__properties.vendor_requested_price__', False), None))]), 'where': [(False, 3, (0, (0, '__properties.agreed_selling_price__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__ref_feature_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_feature_types.feature_type_name__', False), None))]), 'where': [(False, 5, (0, (0, '__ref_feature_types.feature_type_code__', False), None), '"P"', None), 'and', (False, 5, (0, (0, '__ref_feature_types.feature_type_name__', False), None), '"A"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code >= 'P' AND feature_type_name >= 'A'
{'from': {'table_units': [('table_unit', '__ref_feature_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_feature_types.feature_type_name__', False), None))]), 'where': [(False, 5, (0, (0, '__ref_feature_types.feature_type_code__', False), None), None, None), 'and', (False, 5, (0, (0, '__ref_feature_types.feature_type_name__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__ref_feature_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_feature_types.feature_type_name__', False), None))]), 'where': [(False, 6, (0, (0, '__ref_feature_types.feature_type_code__', False), None), '"10"', None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__ref_feature_types.feature_type_code__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code <= '10' ORDER BY feature_type_code DESC;
Both are empty
GT:  SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code <= 10 ORDER BY feature_type_name DESC
Pred:  SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code <= '10' ORDER BY feature_type_code DESC;
{'from': {'table_units': [('table_unit', '__ref_feature_types__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ref_feature_types.feature_type_name__', False), None))]), 'where': [(False, 6, (0, (0, '__ref_feature_types.feature_type_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__ref_feature_types.feature_type_name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__other_available_features__'), ('table_unit', '__ref_feature_types__')], 'conds': [(False, 2, (0, (0, '__other_available_features.feature_type_code__', False), None), (0, '__ref_feature_types.feature_type_code__', False), None)], 'join_types': [0]}, 'select': (True, [(0, (0, (0, '__ref_feature_types.feature_type_name__', False), None))]), 'where': [(False, 4, (0, (0, '__other_available_features.feature_id__', False), None), 100.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT rft.feature_type_name FROM Other_Available_Features oaf JOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code WHERE oaf.feature_id < 100;
{'from': {'table_units': [('table_unit', '__ref_feature_types__'), ('table_unit', '__other_available_features__')], 'conds': [(False, 2, (0, (0, '__ref_feature_types.feature_type_code__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__ref_feature_types.feature_type_name__', False), None))]), 'where': [(False, 4, (0, (0, '__other_available_features.feature_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT T1.breed_name FROM Breeds AS T1 WHERE T1.breed_code NOT IN ( SELECT T2.breed_code FROM Dogs AS T2 GROUP BY T2.breed_code HAVING SUM(T2.age) > 10)
Pred:  SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name HAVING SUM(CAST(d.age AS INTEGER)) <= 10;
{'from': {'table_units': [('table_unit', '__breeds__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__breeds.breed_name__', False), None))]), 'where': [(True, 8, (0, (0, '__breeds.breed_code__', False), None), {'from': {'table_units': [('table_unit', '__dogs__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__dogs.breed_code__', False), None))]), 'where': [], 'groupBy': [(0, '__dogs.breed_code__', False)], 'having': [(False, 3, (4, (0, '__dogs.age__', False), None), None, None)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__treatments__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__treatments.treatment_type_code__', True), None))]), 'where': [(False, 3, (0, (0, '__treatments.date_of_treatment__', False), None), '"2020-01-01"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT treatment_type_code) AS num_treatment_types FROM Treatments WHERE date_of_treatment > '2020-01-01';
{'from': {'table_units': [('table_unit', '__treatments__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__treatments.treatment_type_code__', True), None))]), 'where': [(False, 3, (0, (0, '__treatments.date_of_treatment__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__dogs__'), ('table_unit', '__treatments__')], 'conds': [(False, 2, (0, (0, '__dogs.dog_id__', False), None), (0, '__treatments.dog_id__', False), None)], 'join_types': [2]}, 'select': (False, [(0, (0, (0, '__dogs.dog_id__', False), None))]), 'where': [(False, 10, (0, (0, '__treatments.treatment_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Dogs.dog_id FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL;
{'from': {'table_units': [('table_unit', '__dogs__'), ('table_unit', '__dogs__')], 'conds': [(False, 2, (0, (0, '__dogs.dog_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__dogs.dog_id__', False), None))]), 'where': [(True, 11, None, {'from': {'table_units': [('table_unit', '__treatments__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__treatments.dog_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__breeds__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__breeds.breed_code__', False), None)), (0, (0, (0, '__breeds.breed_name__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__breeds.breed_code__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT breed_code, breed_name FROM Breeds ORDER BY breed_code DESC;
{'from': {'table_units': [('table_unit', '__breeds__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__breeds.breed_name__', False), None)), (0, (0, (0, '__breeds.breed_code__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__breeds.breed_code__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__dogs__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__dogs.dog_id__', False), None))]), 'where': [(False, 2, (0, (0, '__dogs.breed_code__', False), None), {'from': {'table_units': [('table_unit', '__breeds__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__dogs.breed_code__', False), None))]), 'where': [(False, 2, (0, (0, '__breeds.breed_name__', False), None), '"Labrador"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT dog_id FROM Dogs WHERE breed_code = ( SELECT breed_code FROM Breeds WHERE breed_name = 'Labrador' );
Both are empty
GT:  SELECT T1.dog_id FROM Dogs AS T1 WHERE T1.breed_code IN (SELECT T2.breed_code FROM Breeds AS T2 WHERE T2.breed_name = 'Labrador')
Pred:  SELECT dog_id FROM Dogs WHERE breed_code = ( SELECT breed_code FROM Breeds WHERE breed_name = 'Labrador' );
{'from': {'table_units': [('table_unit', '__dogs__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__dogs.dog_id__', False), None))]), 'where': [(False, 8, (0, (0, '__dogs.breed_code__', False), None), {'from': {'table_units': [('table_unit', '__breeds__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__breeds.breed_code__', False), None))]), 'where': [(False, 2, (0, (0, '__breeds.breed_name__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error extra
Predicted SQL:  SELECT treatment_type_code, treatment_type_description FROM Treatment_Types WHERE treatment_type_description <= 'some description' ORDER BY treatment_type_code ASC LIMIT 10 OFFSET 10;
Gold SQL:  SELECT COUNT(DISTINCT T1.treatment_type_code) FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code WHERE T2.treatment_type_description <= 'some description' ORDER BY T1.treatment_type_code ASC LIMIT 10
{'from': {'table_units': [('table_unit', '__treatments__'), ('table_unit', '__treatment_types__')], 'conds': [(False, 2, (0, (0, '__treatments.treatment_type_code__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__treatments.treatment_type_code__', True), None))]), 'where': [(False, 6, (0, (0, '__treatment_types.treatment_type_description__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__treatments.treatment_type_code__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__breeds__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__breeds.breed_name__', False), None))]), 'where': [(False, 12, (0, (0, '__breeds.breed_name__', False), None), '"Mixed"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT breed_name FROM Breeds WHERE breed_name <> 'Mixed';
{'from': {'table_units': [('table_unit', '__breeds__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__breeds.breed_name__', False), None))]), 'where': [(False, 7, (0, (0, '__breeds.breed_name__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__dogs__'), ('table_unit', '__breeds__'), ('table_unit', '__treatments__')], 'conds': [(False, 2, (0, (0, '__dogs.breed_code__', False), None), (0, '__breeds.breed_code__', False), None), 'and', (False, 2, (0, (0, '__dogs.dog_id__', False), None), (0, '__treatments.dog_id__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__breeds.breed_name__', False), None)), (3, (0, (0, '__treatments.dog_id__', True), None))]), 'where': [], 'groupBy': [(0, '__breeds.breed_name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__breeds.breed_name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT b.breed_name, COUNT(DISTINCT t.dog_id) AS num_dogs FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY b.breed_name ORDER BY b.breed_name;
Execution error extra
Predicted SQL:  SELECT b.breed_name, COUNT(DISTINCT t.dog_id) AS num_dogs FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY b.breed_name ORDER BY b.breed_name;
Gold SQL:  SELECT COUNT(T1.dog_id), T2.breed_name FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code WHERE EXISTS (SELECT T3.treatment_id FROM Treatments AS T3 WHERE T3.dog_id = T1.dog_id)
{'from': {'table_units': [('table_unit', '__dogs__'), ('table_unit', '__breeds__')], 'conds': [(False, 2, (0, (0, '__dogs.breed_code__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__dogs.dog_id__', False), None)), (0, (0, (0, '__breeds.breed_name__', False), None))]), 'where': [(False, 11, None, {'from': {'table_units': [('table_unit', '__treatments__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__treatments.treatment_id__', False), None))]), 'where': [(False, 2, (0, (0, '__treatments.dog_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__tv_channel__'), ('table_unit', '__tv_series__'), ('table_unit', '__cartoon__')], 'conds': [(False, 2, (0, (0, '__tv_channel.id__', False), None), (0, '__tv_series.channel__', False), None), 'and', (False, 2, (0, (0, '__tv_channel.id__', False), None), (0, '__cartoon.channel__', False), None)], 'join_types': [2, 0]}, 'select': (True, [(0, (0, (0, '__tv_channel.id__', False), None)), (0, (0, (0, '__tv_channel.series_name__', False), None)), (0, (0, (0, '__tv_channel.country__', False), None)), (0, (0, (0, '__cartoon.title__', False), None))]), 'where': [(False, 2, (0, (0, '__tv_channel.series_name__', False), None), '"ABC"', None), 'and', (False, 2, (0, (0, '__tv_channel.country__', False), None), '"USA"', None), 'or', (False, 1, (0, (0, '__cartoon.title__', False), None), '"A"', '"Z"'), 'or', (False, 9, (0, (0, '__cartoon.title__', False), None), '"Z%"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, Cartoon.Title AS Cartoon_Title FROM TV_Channel LEFT JOIN TV_series ON TV_Channel.id = TV_series.Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE (TV_Channel.series_name = 'ABC' AND TV_Channel.Country = 'USA') OR (Cartoon.Title BETWEEN 'A' AND 'Z' OR Cartoon.Title LIKE 'Z%')
Execution error extra
Predicted SQL:  SELECT DISTINCT TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, Cartoon.Title AS Cartoon_Title FROM TV_Channel LEFT JOIN TV_series ON TV_Channel.id = TV_series.Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE (TV_Channel.series_name = 'ABC' AND TV_Channel.Country = 'USA') OR (Cartoon.Title BETWEEN 'A' AND 'Z' OR Cartoon.Title LIKE 'Z%')
Gold SQL:  SELECT COUNT(T1.id) AS count_id, T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'ABC' OR T2.Title BETWEEN 'A' AND 'Z' OR T1.Country = 'USA'
{'from': {'table_units': [('table_unit', '__tv_channel__'), ('table_unit', '__cartoon__')], 'conds': [(False, 2, (0, (0, '__tv_channel.id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__tv_channel.id__', False), None)), (0, (0, (0, '__cartoon.title__', False), None))]), 'where': [(False, 2, (0, (0, '__tv_channel.series_name__', False), None), None, None), 'or', (False, 1, (0, (0, '__cartoon.title__', False), None), None, None), 'or', (False, 2, (0, (0, '__tv_channel.country__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__tv_channel__'), ('table_unit', '__tv_series__')], 'conds': [(False, 2, (0, (0, '__tv_channel.id__', False), None), (0, '__tv_series.channel__', False), None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__tv_channel.id__', True), None))]), 'where': [(False, 1, (0, (0, '__tv_series.viewers_m__', False), None), '"1"', '"1000"')], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT tc.id) AS NumberOfChannels FROM TV_Channel tc JOIN TV_series ts ON tc.id = ts.Channel WHERE ts.Viewers_m BETWEEN '1' AND '1000';
{'from': {'table_units': [('table_unit', '__tv_channel__'), ('table_unit', '__tv_series__')], 'conds': [(False, 2, (0, (0, '__tv_channel.id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__tv_channel.id__', False), None))]), 'where': [(False, 1, (0, (0, '__tv_series.viewers_m__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
{'from': {'table_units': [('table_unit', '__tv_channel__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__tv_channel.id__', False), None))]), 'where': [(False, 3, (0, (0, '__tv_channel.id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__tv_channel__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__tv_channel.series_name__', False), None)), (1, (0, (0, '__tv_channel.country__', False), None))]), 'where': [], 'groupBy': [(0, '__tv_channel.series_name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__tv_channel.series_name__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT series_name, MAX(Country) AS max_country FROM TV_Channel GROUP BY series_name ORDER BY series_name ASC LIMIT 5;
{'from': {'table_units': [('table_unit', '__tv_channel__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__tv_channel.series_name__', False), None)), (1, (0, (0, '__tv_channel.country__', False), None))]), 'where': [], 'groupBy': [(0, '__tv_channel.series_name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__tv_channel.series_name__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__tv_channel__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__tv_channel.series_name__', True), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT series_name) FROM TV_Channel;
Execution error extra
Predicted SQL:  SELECT COUNT(DISTINCT series_name) FROM TV_Channel;
Gold SQL:  SELECT COUNT(DISTINCT T1.series_name), COUNT(T2.id), COUNT(T3.id) FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel
{'from': {'table_units': [('table_unit', '__tv_channel__'), ('table_unit', '__tv_series__'), ('table_unit', '__cartoon__')], 'conds': [(False, 2, (0, (0, '__tv_channel.id__', False), None), None, None), 'and', (False, 2, (0, (0, '__tv_channel.id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(3, (0, (0, '__tv_channel.series_name__', True), None)), (3, (0, (0, '__tv_series.id__', False), None)), (3, (0, (0, '__cartoon.id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__cartoon__'), ('table_unit', '__tv_channel__')], 'conds': [(False, 2, (0, (0, '__cartoon.channel__', False), None), (0, '__tv_channel.id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__cartoon.title__', False), None))]), 'where': [(False, 2, (0, (0, '__tv_channel.id__', False), None), '"CN"', None), 'or', (False, 2, (0, (0, '__cartoon.title__', False), None), '"The Amazing World of Gumball"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.id = 'CN' OR Cartoon.Title = 'The Amazing World of Gumball';
Both are empty
GT:  SELECT Title FROM Cartoon WHERE Channel = 'CN' OR Title = 'The Amazing World of Gumball'
Pred:  SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.id = 'CN' OR Cartoon.Title = 'The Amazing World of Gumball';
{'from': {'table_units': [('table_unit', '__cartoon__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__cartoon.title__', False), None))]), 'where': [(False, 2, (0, (0, '__cartoon.channel__', False), None), None, None), 'or', (False, 2, (0, (0, '__cartoon.title__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__tv_channel__')], 'conds': [], 'join_types': []}, 'select': (True, [(0, (0, (0, '__tv_channel.id__', False), None))]), 'where': [(True, 11, None, {'from': {'table_units': [('table_unit', '__tv_series__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__tv_series.channel__', False), None), (0, '__tv_channel.id__', False), None), 'and', (False, 2, (0, (0, '__tv_series.episode__', False), None), '"2"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__tv_channel.id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT TV_Channel.id FROM TV_Channel WHERE NOT EXISTS ( SELECT 1 FROM TV_series WHERE TV_series.Channel = TV_Channel.id AND TV_series.Episode = '2' ) ORDER BY TV_Channel.id DESC;
{'from': {'table_units': [('table_unit', '__tv_channel__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__tv_channel.id__', False), None))]), 'where': [(True, 8, (0, (0, '__tv_channel.id__', False), None), {'from': {'table_units': [('table_unit', '__tv_series__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__tv_series.channel__', False), None))]), 'where': [(False, 2, (0, (0, '__tv_series.episode__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__tv_channel.id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Partial answer True
Not equal but Partially Correct:
SELECT AVG(T1.Viewers_m) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T2.id = T1.Channel WHERE T1.Channel != 'BBC' GROUP BY T2.series_name
SELECT TC.series_name, AVG(CAST(TVS.Viewers_m AS REAL)) AS average_viewers FROM TV_Channel AS TC JOIN TV_series AS TVS ON TC.id = TVS.Channel WHERE TC.Country <> 'BBC' GROUP BY TC.series_name;
---------------------
Execution error hard
Predicted SQL:  SELECT TC.series_name, AVG(CAST(TVS.Viewers_m AS REAL)) AS average_viewers FROM TV_Channel AS TC JOIN TV_series AS TVS ON TC.id = TVS.Channel WHERE TC.Country <> 'BBC' GROUP BY TC.series_name;
Gold SQL:  SELECT AVG(T1.Viewers_m) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T2.id = T1.Channel WHERE T1.Channel != 'BBC' GROUP BY T2.series_name
{'from': {'table_units': [('table_unit', '__tv_series__'), ('table_unit', '__tv_channel__')], 'conds': [(False, 2, (0, (0, '__tv_channel.id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(5, (0, (0, '__tv_series.viewers_m__', False), None))]), 'where': [(False, 7, (0, (0, '__tv_series.channel__', False), None), None, None)], 'groupBy': [(0, '__tv_channel.series_name__', False)], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__tv_channel__'), ('table_unit', '__tv_series__')], 'conds': [(False, 2, (0, (0, '__tv_channel.id__', False), None), (0, '__tv_series.channel__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__tv_channel.series_name__', False), None)), (0, (0, (0, '__tv_channel.country__', False), None)), (0, (0, (0, '__tv_channel.language__', False), None))]), 'where': [(False, 5, (8, (0, '__tv_channel.series_name__', False), None), '"A"', None), 'and', (False, 5, (8, (0, '__tv_channel.country__', False), None), '"A"', None), 'and', (False, 5, (8, (0, '__tv_channel.language__', False), None), '"A"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE UPPER(TV_Channel.series_name) >= 'A' AND UPPER(TV_Channel.Country) >= 'A' AND UPPER(TV_Channel.Language) >= 'A';
Execution error medium
Predicted SQL:  SELECT TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE UPPER(TV_Channel.series_name) >= 'A' AND UPPER(TV_Channel.Country) >= 'A' AND UPPER(TV_Channel.Language) >= 'A';
Gold SQL:  SELECT series_name, Country, Language FROM TV_Channel WHERE series_name >= 'A' AND Language >= 'A' AND Country >= 'A'
{'from': {'table_units': [('table_unit', '__tv_channel__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__tv_channel.series_name__', False), None)), (0, (0, (0, '__tv_channel.country__', False), None)), (0, (0, (0, '__tv_channel.language__', False), None))]), 'where': [(False, 5, (0, (0, '__tv_channel.series_name__', False), None), None, None), 'and', (False, 5, (0, (0, '__tv_channel.language__', False), None), None, None), 'and', (False, 5, (0, (0, '__tv_channel.country__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__tv_series__'), ('table_unit', '__tv_channel__')], 'conds': [(False, 2, (0, (0, '__tv_series.channel__', False), None), (0, '__tv_channel.id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__tv_channel.series_name__', False), None)), (0, (0, (0, '__tv_series.episode__', False), None))]), 'where': [(False, 6, (0, (0, '__tv_series.share__', False), None), 10.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT TV_Channel.series_name, TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Share <= 10;
{'from': {'table_units': [('table_unit', '__tv_channel__'), ('table_unit', '__tv_series__')], 'conds': [(False, 2, (0, (0, '__tv_channel.id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__tv_channel.series_name__', False), None)), (0, (0, (0, '__tv_series.episode__', False), None))]), 'where': [(False, 6, (0, (0, '__tv_series.share__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__likes__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), (0, '__likes.student_id__', False), None)], 'join_types': [2]}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None)), (3, (0, (0, '__likes.liked_id__', True), None))]), 'where': [(False, 1, (0, (0, '__highschooler.grade__', False), None), 9.0, 12.0)], 'groupBy': [(0, '__highschooler.id__', False), (0, '__highschooler.name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__highschooler.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT H.name, COUNT(DISTINCT L.liked_id) AS UniqueLikes FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.student_id WHERE H.grade BETWEEN 9 AND 12 GROUP BY H.ID, H.name ORDER BY H.name;
Execution error hard
Predicted SQL:  SELECT H.name, COUNT(DISTINCT L.liked_id) AS UniqueLikes FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.student_id WHERE H.grade BETWEEN 9 AND 12 GROUP BY H.ID, H.name ORDER BY H.name;
Gold SQL:  SELECT T1.name, COUNT(DISTINCT T3.liked_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T2.student_id = T3.student_id WHERE T1.grade BETWEEN 9 AND 12
{'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__friend__'), ('table_unit', '__likes__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), None, None), 'and', (False, 2, (0, (0, '__friend.student_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None)), (3, (0, (0, '__likes.liked_id__', True), None))]), 'where': [(False, 1, (0, (0, '__highschooler.grade__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__highschooler__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None))]), 'where': [(False, 3, (0, (0, '__highschooler.grade__', False), None), 9.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__highschooler.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT name FROM Highschooler WHERE grade > 9 ORDER BY name ASC;
{'from': {'table_units': [('table_unit', '__highschooler__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None))]), 'where': [(False, 3, (0, (0, '__highschooler.grade__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__highschooler.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error hard
Predicted SQL:  SELECT h.name, f.friend_id FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade = 9 ORDER BY h.name LIMIT 5 OFFSET 5
Gold SQL:  SELECT T1.name, T2.friend_id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade = 9 LIMIT 5
{'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__friend__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None)), (0, (0, (0, '__friend.friend_id__', False), None))]), 'where': [(False, 2, (0, (0, '__highschooler.grade__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error hard
Predicted SQL:  SELECT name FROM Highschooler ORDER BY name ASC LIMIT -1 OFFSET 5;
Gold SQL:  SELECT name FROM Highschooler WHERE ID = 1000 ORDER BY name ASC LIMIT 5
{'from': {'table_units': [('table_unit', '__highschooler__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None))]), 'where': [(False, 2, (0, (0, '__highschooler.id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__highschooler.name__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__friend__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), (0, '__friend.friend_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None))]), 'where': [(False, 2, (0, (0, '__friend.student_id__', False), None), 100.0, None), 'and', (False, 1, (0, (0, '__highschooler.id__', False), None), 6.0, 10.0)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT hs.name FROM Highschooler hs JOIN Friend f ON hs.ID = f.friend_id WHERE f.student_id = 100 AND hs.ID BETWEEN 6 AND 10;
Both are empty
GT:  SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.friend_id = 100 LIMIT 5
Pred:  SELECT hs.name FROM Highschooler hs JOIN Friend f ON hs.ID = f.friend_id WHERE f.student_id = 100 AND hs.ID BETWEEN 6 AND 10;
{'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__friend__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None))]), 'where': [(False, 2, (0, (0, '__friend.friend_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__friend__'), ('table_unit', '__likes__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), (0, '__friend.student_id__', False), None), 'and', (False, 2, (0, (0, '__highschooler.id__', False), None), (0, '__likes.student_id__', False), None), 'and', (False, 2, (0, (0, '__likes.liked_id__', False), None), 100.0, None)], 'join_types': [0, 0]}, 'select': (True, [(0, (0, (0, '__highschooler.name__', False), None))]), 'where': [(False, 2, (0, (0, '__highschooler.grade__', False), None), 11.0, None), 'and', (False, 10, (0, (0, '__likes.liked_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id LEFT JOIN Likes l ON h.ID = l.student_id AND l.liked_id = 100 WHERE h.grade = 11 AND l.liked_id IS NULL;
{'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__friend__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None))]), 'where': [(False, 2, (0, (0, '__highschooler.grade__', False), None), None, None), 'and', (True, 8, (0, (0, '__friend.friend_id__', False), None), {'from': {'table_units': [('table_unit', '__likes__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__friend.student_id__', False), None))]), 'where': [(False, 2, (0, (0, '__likes.liked_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
gold query SELECT name FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend WHERE friend_id IN ( SELECT liked_id FROM Likes WHERE student_id = 1501 ) ) GROUP BY name HAVING COUNT( liked_id) = 1 AND COUNT( friend_id) = 1 has error on database file test-suite-sql-eval-master/database/network_1/network_1.sqlite
P_SQL:  {'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__friend__'), ('table_unit', '__likes__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), (0, '__friend.student_id__', False), None), 'and', (False, 2, (0, (0, '__friend.friend_id__', False), None), (0, '__likes.student_id__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None)), (3, (0, (0, '__likes.liked_id__', True), None))]), 'where': [(False, 5, (0, (0, '__highschooler.grade__', False), None), 10.0, None)], 'groupBy': [(0, '__highschooler.id__', False), (0, '__highschooler.name__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__highschooler.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT h.name, COUNT(DISTINCT l.liked_id) AS NumLikedFriends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON f.friend_id = l.student_id WHERE h.grade >= 10 GROUP BY h.ID, h.name ORDER BY h.name DESC;
Execution error extra
Predicted SQL:  SELECT h.name, COUNT(DISTINCT l.liked_id) AS NumLikedFriends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON f.friend_id = l.student_id WHERE h.grade >= 10 GROUP BY h.ID, h.name ORDER BY h.name DESC;
Gold SQL:  SELECT T1.name, COUNT(DISTINCT T3.liked_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T2.friend_id = T3.student_id WHERE T1.grade > 9 ORDER BY T1.name DESC
{'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__friend__'), ('table_unit', '__likes__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), None, None), 'and', (False, 2, (0, (0, '__friend.friend_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None)), (3, (0, (0, '__likes.liked_id__', True), None))]), 'where': [(False, 3, (0, (0, '__highschooler.grade__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__highschooler.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__friend__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), (0, '__friend.student_id__', False), None)], 'join_types': [2]}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None)), (3, (0, (0, '__friend.friend_id__', True), None)), (0, (0, (0, '__highschooler.grade__', False), None))]), 'where': [(False, 5, (0, (0, '__highschooler.grade__', False), None), 10.0, None)], 'groupBy': [(0, '__highschooler.id__', False), (0, '__highschooler.name__', False), (0, '__highschooler.grade__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__highschooler.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT hs.name, COUNT(DISTINCT f.friend_id) as num_friends, hs.grade FROM Highschooler hs LEFT JOIN Friend f ON hs.ID = f.student_id WHERE hs.grade >= 10 GROUP BY hs.ID, hs.name, hs.grade ORDER BY hs.name;
Execution error medium
Predicted SQL:  SELECT hs.name, COUNT(DISTINCT f.friend_id) as num_friends, hs.grade FROM Highschooler hs LEFT JOIN Friend f ON hs.ID = f.student_id WHERE hs.grade >= 10 GROUP BY hs.ID, hs.name, hs.grade ORDER BY hs.name;
Gold SQL:  SELECT T1.name, COUNT(DISTINCT T2.friend_id), T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade >= 10
{'from': {'table_units': [('table_unit', '__highschooler__'), ('table_unit', '__friend__')], 'conds': [(False, 2, (0, (0, '__highschooler.id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__highschooler.name__', False), None)), (3, (0, (0, '__friend.friend_id__', True), None)), (0, (0, (0, '__highschooler.grade__', False), None))]), 'where': [(False, 5, (0, (0, '__highschooler.grade__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT T1.Course_ID, T2.Course_ID FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T2.Grade = 80 LIMIT 10
Pred:  SELECT c.Course_ID FROM course c JOIN course_arrange ca ON c.Course_ID = ca.Course_ID WHERE ca.Grade = 80 LIMIT 10 OFFSET 10;
{'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__course.course_id__', False), None)), (0, (0, (0, '__course_arrange.course_id__', False), None))]), 'where': [(False, 2, (0, (0, '__course_arrange.grade__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__teacher__'), ('table_unit', '__course_arrange__'), ('table_unit', '__course__')], 'conds': [(False, 2, (0, (0, '__teacher.teacher_id__', False), None), (0, '__course_arrange.teacher_id__', False), None), 'and', (False, 2, (0, (0, '__course_arrange.course_id__', False), None), (0, '__course.course_id__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__teacher.name__', False), None)), (0, (0, (0, '__course.course__', False), None))]), 'where': [(False, 2, (0, (0, '__teacher.hometown__', False), None), '"New York"', None), 'and', (False, 5, (0, (0, '__course.course_id__', False), None), 100.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE t.Hometown = 'New York' AND c.Course_ID >= 100;
Both are empty
GT:  SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course_ID >= 100 AND T1.Hometown = 'New York'
Pred:  SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE t.Hometown = 'New York' AND c.Course_ID >= 100;
{'from': {'table_units': [('table_unit', '__teacher__'), ('table_unit', '__course_arrange__'), ('table_unit', '__course__')], 'conds': [(False, 2, (0, (0, '__teacher.teacher_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__course_arrange.course_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__teacher.name__', False), None)), (0, (0, (0, '__course.course__', False), None))]), 'where': [(False, 5, (0, (0, '__course.course_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__teacher.hometown__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), (0, '__course_arrange.course_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__course.course__', False), None))]), 'where': [(False, 4, (0, (0, '__course_arrange.grade__', False), None), 60.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__course.course__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT c.Course FROM course c JOIN course_arrange ca ON c.Course_ID = ca.Course_ID WHERE ca.Grade < 60 ORDER BY c.Course ASC;
{'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__course.course__', False), None))]), 'where': [(False, 4, (0, (0, '__course_arrange.grade__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__course.course__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__'), ('table_unit', '__teacher__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), (0, '__course_arrange.course_id__', False), None), 'and', (False, 2, (0, (0, '__teacher.teacher_id__', False), None), (0, '__course_arrange.teacher_id__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__course.course__', False), None)), (0, (0, (0, '__teacher.name__', False), None)), (0, (0, (0, '__course_arrange.grade__', False), None))]), 'where': [(False, 12, (0, (0, '__teacher.teacher_id__', False), None), 2.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__course_arrange.grade__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT c.Course, t.Name, ca.Grade FROM course c JOIN course_arrange ca ON c.Course_ID = ca.Course_ID JOIN teacher t ON t.Teacher_ID = ca.Teacher_ID WHERE t.Teacher_ID <> 2 ORDER BY ca.Grade DESC;
{'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__'), ('table_unit', '__teacher__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__teacher.teacher_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__course.course__', False), None)), (0, (0, (0, '__teacher.name__', False), None)), (0, (0, (0, '__course_arrange.grade__', False), None))]), 'where': [(False, 7, (0, (0, '__course_arrange.teacher_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__course_arrange.grade__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), (0, '__course_arrange.course_id__', False), None)], 'join_types': [2]}, 'select': (False, [(0, (0, (0, '__course.course_id__', False), None)), (0, (0, (0, '__course.course__', False), None))]), 'where': [], 'groupBy': [(0, '__course.course_id__', False), (0, '__course.course__', False)], 'having': [(False, 3, (4, (0, '__course_arrange.grade__', False), None), 100.0, None), 'and', (False, 10, (2, (0, '__course_arrange.teacher_id__', False), None), None, None), 'or', (False, 3, (1, (0, '__course_arrange.grade__', False), None), 80.0, None)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT c.Course_ID, c.Course FROM course c LEFT JOIN course_arrange ca ON c.Course_ID = ca.Course_ID GROUP BY c.Course_ID, c.Course HAVING SUM(ca.Grade) > 100 AND MIN(ca.Teacher_ID) IS NULL OR MAX(ca.Grade) > 80;
Both are empty
GT:  SELECT T1.Course, SUM(T2.Grade) FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T1.Course_ID NOT IN (SELECT Course_ID FROM course_arrange) OR T2.Grade > 80 GROUP BY T1.Course HAVING SUM(T2.Grade) > 100
Pred:  SELECT c.Course_ID, c.Course FROM course c LEFT JOIN course_arrange ca ON c.Course_ID = ca.Course_ID GROUP BY c.Course_ID, c.Course HAVING SUM(ca.Grade) > 100 AND MIN(ca.Teacher_ID) IS NULL OR MAX(ca.Grade) > 80;
{'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__course.course__', False), None)), (4, (0, (0, '__course_arrange.grade__', False), None))]), 'where': [(True, 8, (0, (0, '__course.course_id__', False), None), {'from': {'table_units': [('table_unit', '__course_arrange__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__course.course_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None), 'or', (False, 3, (0, (0, '__course_arrange.grade__', False), None), None, None)], 'groupBy': [(0, '__course.course__', False)], 'having': [(False, 3, (4, (0, '__course_arrange.grade__', False), None), None, None)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__course__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__course.course_id__', False), None)), (0, (0, (0, '__course.course__', False), None))]), 'where': [(True, 11, None, {'from': {'table_units': [('table_unit', '__course_arrange__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__course_arrange.course_id__', False), None), (0, '__course.course_id__', False), None), 'and', (False, 2, (0, (0, '__course_arrange.teacher_id__', False), None), 1.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT c.Course_ID, c.Course FROM course c WHERE NOT EXISTS ( SELECT 1 FROM course_arrange ca WHERE ca.Course_ID = c.Course_ID AND ca.Teacher_ID = 1 );
Partial answer True
Not equal but Partially Correct:
SELECT T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T2.Teacher_ID != 1
SELECT c.Course_ID, c.Course FROM course c WHERE NOT EXISTS ( SELECT 1 FROM course_arrange ca WHERE ca.Course_ID = c.Course_ID AND ca.Teacher_ID = 1 );
---------------------
Execution error medium
Predicted SQL:  SELECT c.Course_ID, c.Course FROM course c WHERE NOT EXISTS ( SELECT 1 FROM course_arrange ca WHERE ca.Course_ID = c.Course_ID AND ca.Teacher_ID = 1 );
Gold SQL:  SELECT T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T2.Teacher_ID != 1
{'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__course.course__', False), None))]), 'where': [(False, 7, (0, (0, '__course_arrange.teacher_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), (0, '__course_arrange.course_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__course.course_id__', False), None)), (0, (0, (0, '__course.course__', False), None)), (3, (0, (0, '__course_arrange.teacher_id__', True), None))]), 'where': [(False, 6, (0, (0, '__course_arrange.grade__', False), None), 80.0, None)], 'groupBy': [(0, '__course.course_id__', False), (0, '__course.course__', False)], 'having': [(False, 3, (5, (0, '__course_arrange.grade__', False), None), 75.0, None)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT c.Course_ID, c.Course, COUNT(DISTINCT ca.Teacher_ID) AS NumberOfTeachers FROM course c JOIN course_arrange ca ON c.Course_ID = ca.Course_ID WHERE ca.Grade <= 80 GROUP BY c.Course_ID, c.Course HAVING AVG(ca.Grade) > 75;
Both are empty
GT:  SELECT T1.Course, COUNT( T2.Teacher_ID) FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID WHERE T2.Grade <= 80 GROUP BY T1.Course HAVING AVG(T2.Grade) > 75
Pred:  SELECT c.Course_ID, c.Course, COUNT( ca.Teacher_ID) AS NumberOfTeachers FROM course c JOIN course_arrange ca ON c.Course_ID = ca.Course_ID WHERE ca.Grade <= 80 GROUP BY c.Course_ID, c.Course HAVING AVG(ca.Grade) > 75;
{'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__course.course__', False), None)), (3, (0, (0, '__course_arrange.teacher_id__', True), None))]), 'where': [(False, 6, (0, (0, '__course_arrange.grade__', False), None), None, None)], 'groupBy': [(0, '__course.course__', False)], 'having': [(False, 3, (5, (0, '__course_arrange.grade__', False), None), None, None)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error extra
Predicted SQL:  SELECT COUNT(DISTINCT c.Course_ID) AS NumberOfDistinctCourses, t.Name, t.Hometown FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE t.Hometown = 'New York' AND CAST(t.Age AS INTEGER) > 35 AND NOT EXISTS ( SELECT 1 FROM course_arrange ca2 WHERE ca2.Teacher_ID = t.Teacher_ID AND ca2.Grade < 80 ) GROUP BY t.Name, t.Hometown;
Gold SQL:  SELECT COUNT(DISTINCT T1.Course_ID), T2.Name, T2.Hometown FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T2.Teacher_ID = T3.Teacher_ID WHERE T2.Age > 35 AND T2.Hometown = 'New York' AND T1.Course_ID NOT IN (SELECT Course_ID FROM course_arrange WHERE Grade < 80)
{'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__'), ('table_unit', '__teacher__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__teacher.teacher_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(3, (0, (0, '__course.course_id__', True), None)), (0, (0, (0, '__teacher.name__', False), None)), (0, (0, (0, '__teacher.hometown__', False), None))]), 'where': [(False, 3, (0, (0, '__teacher.age__', False), None), None, None), 'and', (False, 2, (0, (0, '__teacher.hometown__', False), None), None, None), 'and', (True, 8, (0, (0, '__course.course_id__', False), None), {'from': {'table_units': [('table_unit', '__course_arrange__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__course.course_id__', False), None))]), 'where': [(False, 4, (0, (0, '__course_arrange.grade__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T3.Teacher_ID = T2.Teacher_ID WHERE T1.Course_ID NOT IN (SELECT Course_ID FROM course_arrange WHERE Grade < 60) AND T2.Grade = 90 LIMIT 10
Pred:  SELECT c.Course_ID, c.Course, c.Staring_Date FROM course c JOIN ( SELECT ca.Course_ID FROM course_arrange ca GROUP BY ca.Course_ID HAVING MIN(ca.Grade) >= 60 AND MAX(ca.Grade) = 90 ) filtered_courses ON c.Course_ID = filtered_courses.Course_ID ORDER BY c.Staring_Date LIMIT 10;
{'from': {'table_units': [('table_unit', '__course__'), ('table_unit', '__course_arrange__'), ('table_unit', '__teacher__')], 'conds': [(False, 2, (0, (0, '__course.course_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__teacher.teacher_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__course.course__', False), None))]), 'where': [(True, 8, (0, (0, '__course.course_id__', False), None), {'from': {'table_units': [('table_unit', '__course_arrange__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__course.course_id__', False), None))]), 'where': [(False, 4, (0, (0, '__course_arrange.grade__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None), 'and', (False, 2, (0, (0, '__course_arrange.grade__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__teacher__'), ('table_unit', '__course_arrange__')], 'conds': [(False, 2, (0, (0, '__teacher.teacher_id__', False), None), (0, '__course_arrange.teacher_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__teacher.name__', False), None)), (4, (0, (0, '__course_arrange.grade__', False), None))]), 'where': [(False, 7, (0, (0, '__teacher.teacher_id__', False), None), 1.0, None)], 'groupBy': [(0, '__teacher.teacher_id__', False), (0, '__teacher.name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__teacher.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT t.Name, SUM(ca.Grade) AS Total_Grade FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE t.Teacher_ID != 1 GROUP BY t.Teacher_ID, t.Name ORDER BY t.Name ASC;
{'from': {'table_units': [('table_unit', '__teacher__'), ('table_unit', '__course_arrange__')], 'conds': [(False, 2, (0, (0, '__teacher.teacher_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__teacher.name__', False), None)), (4, (0, (0, '__course_arrange.grade__', False), None))]), 'where': [(False, 7, (0, (0, '__teacher.teacher_id__', False), None), None, None)], 'groupBy': [(0, '__teacher.name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__teacher.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error medium
Predicted SQL:  SELECT Name FROM conductor WHERE Age BETWEEN 40 AND 50 ORDER BY Conductor_ID LIMIT 10 OFFSET 10;
Gold SQL:  SELECT Name FROM conductor WHERE Age BETWEEN 40 AND 50 LIMIT 10
{'from': {'table_units': [('table_unit', '__conductor__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__conductor.name__', False), None))]), 'where': [(False, 1, (0, (0, '__conductor.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Partial answer True
Not equal but Partially Correct:
SELECT AVG(Age) FROM conductor WHERE Age <= 50 ORDER BY Age DESC
SELECT Name, Age, AVG(Age) OVER () AS Avg_Age FROM conductor WHERE Age <= 50 ORDER BY Age DESC;
---------------------
Execution error medium
Predicted SQL:  SELECT Name, Age, AVG(Age) OVER () AS Avg_Age FROM conductor WHERE Age <= 50 ORDER BY Age DESC;
Gold SQL:  SELECT AVG(Age) FROM conductor WHERE Age <= 50 ORDER BY Age DESC
{'from': {'table_units': [('table_unit', '__conductor__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__conductor.age__', False), None))]), 'where': [(False, 6, (0, (0, '__conductor.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__conductor.age__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__conductor__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__conductor.name__', False), None))]), 'where': [(False, 5, (0, (0, '__conductor.age__', False), None), 50.0, None), 'and', (False, 5, (0, (0, '__conductor.year_of_work__', False), None), 20.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name FROM conductor WHERE Age >= 50 AND Year_of_Work >= 20;
{'from': {'table_units': [('table_unit', '__conductor__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__conductor.name__', False), None))]), 'where': [(False, 5, (0, (0, '__conductor.age__', False), None), None, None), 'and', (False, 5, (0, (0, '__conductor.year_of_work__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__orchestra__'), ('table_unit', '__conductor__'), ('table_unit', '__performance__')], 'conds': [(False, 2, (0, (0, '__orchestra.conductor_id__', False), None), (0, '__conductor.conductor_id__', False), None), 'and', (False, 2, (0, (0, '__orchestra.orchestra_id__', False), None), (0, '__performance.orchestra_id__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__orchestra.orchestra__', False), None)), (0, (0, (0, '__conductor.name__', False), None))]), 'where': [(False, 2, (0, (0, '__performance.type__', False), None), '"classical"', None), 'and', (False, 7, (0, (0, '__orchestra.major_record_format__', False), None), '"vinyl"', None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__conductor.age__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT o.Orchestra, c.Name AS Conductor_Name FROM orchestra o JOIN conductor c ON o.Conductor_ID = c.Conductor_ID JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Type = 'classical' AND o.Major_Record_Format != 'vinyl' ORDER BY c.Age DESC;
Both are empty
GT:  SELECT T1.Orchestra, T3.Name FROM orchestra AS T1 JOIN conductor AS T3 ON T1.Conductor_ID = T3.Conductor_ID JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Major_Record_Format != 'Vinyl' AND T2.Type = 'Classical' ORDER BY T3.Age DESC
Pred:  SELECT o.Orchestra, c.Name AS Conductor_Name FROM orchestra o JOIN conductor c ON o.Conductor_ID = c.Conductor_ID JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Type = 'classical' AND o.Major_Record_Format != 'vinyl' ORDER BY c.Age DESC;
{'from': {'table_units': [('table_unit', '__orchestra__'), ('table_unit', '__conductor__'), ('table_unit', '__performance__')], 'conds': [(False, 2, (0, (0, '__orchestra.conductor_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__orchestra.orchestra_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__orchestra.orchestra__', False), None)), (0, (0, (0, '__conductor.name__', False), None))]), 'where': [(False, 7, (0, (0, '__orchestra.major_record_format__', False), None), None, None), 'and', (False, 2, (0, (0, '__performance.type__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__conductor.age__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error extra
Predicted SQL:  SELECT Orchestra FROM orchestra ORDER BY Orchestra ASC LIMIT 1 OFFSET 1;
Gold SQL:  SELECT T1.Orchestra FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Orchestra ORDER BY T1.Orchestra ASC LIMIT 1
{'from': {'table_units': [('table_unit', '__orchestra__'), ('table_unit', '__conductor__')], 'conds': [(False, 2, (0, (0, '__orchestra.conductor_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__orchestra.orchestra__', False), None))]), 'where': [], 'groupBy': [(0, '__orchestra.orchestra__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__orchestra.orchestra__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error extra
Predicted SQL:  SELECT AVG(c.Age) AS AverageAge, COUNT(c.Conductor_ID) AS NumberOfConductors FROM conductor c WHERE c.Year_of_Work > 1950 ORDER BY c.Conductor_ID LIMIT 10 OFFSET 9;
Gold SQL:  SELECT AVG(T1.Age) , COUNT(T1.Conductor_ID) FROM conductor AS T1 WHERE T1.Year_of_Work > 1950 LIMIT 10
{'from': {'table_units': [('table_unit', '__conductor__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__conductor.age__', False), None)), (3, (0, (0, '__conductor.conductor_id__', False), None))]), 'where': [(False, 3, (0, (0, '__conductor.year_of_work__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__conductor__'), ('table_unit', '__orchestra__')], 'conds': [(False, 2, (0, (0, '__conductor.conductor_id__', False), None), (0, '__orchestra.conductor_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__conductor.name__', False), None)), (0, (0, (0, '__orchestra.orchestra__', False), None))]), 'where': [(False, 3, (0, (0, '__conductor.age__', False), None), 50.0, None), 'or', (False, 2, (0, (0, '__conductor.nationality__', False), None), '"American"', None), 'or', (False, 5, (0, (0, '__orchestra.year_of_founded__', False), None), 1800.0, None), 'and', (False, 6, (0, (0, '__orchestra.year_of_founded__', False), None), 1850.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__conductor.conductor_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE c.Age > 50 OR c.Nationality = 'American' OR (o.Year_of_Founded >= 1800 AND o.Year_of_Founded <= 1850) ORDER BY c.Conductor_ID DESC;
{'from': {'table_units': [('table_unit', '__conductor__'), ('table_unit', '__orchestra__')], 'conds': [(False, 2, (0, (0, '__conductor.conductor_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__conductor.name__', False), None)), (0, (0, (0, '__orchestra.orchestra__', False), None))]), 'where': [(False, 3, (0, (0, '__conductor.age__', False), None), None, None), 'or', (False, 2, (0, (0, '__conductor.nationality__', False), None), None, None), 'or', (False, 1, (0, (0, '__orchestra.year_of_founded__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__conductor.conductor_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__conductor__'), ('table_unit', '__orchestra__')], 'conds': [(False, 2, (0, (0, '__conductor.conductor_id__', False), None), (0, '__orchestra.conductor_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__conductor.name__', False), None))]), 'where': [], 'groupBy': [(0, '__conductor.conductor_id__', False), (0, '__conductor.name__', False)], 'having': [(False, 2, (3, (0, '__orchestra.orchestra_id__', False), None), 1.0, None)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(o.Orchestra_ID) = 1;
{'from': {'table_units': [('table_unit', '__conductor__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__conductor.name__', False), None))]), 'where': [(False, 8, (0, (0, '__conductor.conductor_id__', False), None), {'from': {'table_units': [('table_unit', '__orchestra__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__conductor.conductor_id__', False), None))]), 'where': [], 'groupBy': [(0, '__conductor.conductor_id__', False)], 'having': [(False, 2, (3, (0, '__conductor.conductor_id__', False), None), None, None)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT T1.Name FROM conductor AS T1 INNER JOIN conductor AS T2 ON T1.Name = T2.Name WHERE EXISTS (SELECT 1 FROM orchestra AS T3 WHERE T3.Conductor_ID = T1.Conductor_ID AND EXISTS (SELECT 1 FROM performance AS T4 WHERE T4.Orchestra_ID = T3.Orchestra_ID AND T4.Type = 'Classical')) ORDER BY T1.Age DESC LIMIT 10
Pred:  SELECT  c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Type = 'Classical' ORDER BY c.Age DESC LIMIT 10 OFFSET 10;
{'from': {'table_units': [('table_unit', '__conductor__'), ('table_unit', '__conductor__')], 'conds': [(False, 2, (0, (0, '__conductor.name__', False), None), None, None)], 'join_types': [1]}, 'select': (False, [(0, (0, (0, '__conductor.name__', False), None))]), 'where': [(False, 11, None, {'from': {'table_units': [('table_unit', '__orchestra__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__orchestra.conductor_id__', False), None), None, None), 'and', (False, 11, None, {'from': {'table_units': [('table_unit', '__performance__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__performance.orchestra_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__performance.type__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__conductor.age__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__conductor__')], 'conds': [], 'join_types': []}, 'select': (False, [(2, (0, (0, '__conductor.age__', False), None)), (1, (0, (0, '__conductor.age__', False), None))]), 'where': [(False, 4, (0, (0, '__conductor.age__', False), None), 100.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT MIN(Age) AS YoungestAge, MAX(Age) AS OldestAge FROM conductor WHERE Age < 100;
{'from': {'table_units': [('sql', {'from': {'table_units': [('table_unit', '__conductor__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__conductor.age__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None})], 'conds': [], 'join_types': []}, 'select': (False, [(2, (0, (0, 't1.age', False), None)), (1, (0, (0, 't1.age', False), None))]), 'where': [(False, 4, (0, (0, 't1.age', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__conductor__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__conductor.nationality__', False), None)), (4, (0, (0, '__conductor.age__', False), None))]), 'where': [(False, 6, (0, (0, '__conductor.age__', False), None), 60.0, None)], 'groupBy': [(0, '__conductor.nationality__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__conductor.age__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Nationality, SUM(Age) AS Total_Age FROM conductor WHERE Age <= 60 GROUP BY Nationality ORDER BY Total_Age ASC;
Execution error medium
Predicted SQL:  SELECT Nationality, SUM(Age) AS Total_Age FROM conductor WHERE Age <= 60 GROUP BY Nationality ORDER BY Total_Age ASC;
Gold SQL:  SELECT T1.Nationality, SUM(T1.Age) AS sum FROM conductor AS T1 WHERE T1.Age <= 60 ORDER BY sum ASC
{'from': {'table_units': [('table_unit', '__conductor__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__conductor.nationality__', False), None)), (4, (0, (0, '__conductor.age__', False), None))]), 'where': [(False, 6, (0, (0, '__conductor.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__conductor.age__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__departments__'), ('table_unit', '__degree_programs__')], 'conds': [(False, 2, (0, (0, '__departments.department_id__', False), None), (0, '__degree_programs.department_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__departments.department_name__', False), None)), (3, (0, (0, '__degree_programs.degree_program_id__', True), None))]), 'where': [], 'groupBy': [(0, '__departments.department_id__', False), (0, '__departments.department_name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__departments.department_name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT d.department_name, COUNT(DISTINCT dp.degree_program_id) AS number_of_programs FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY d.department_name ASC;
{'from': {'table_units': [('table_unit', '__degree_programs__'), ('table_unit', '__departments__')], 'conds': [(False, 2, (0, (0, '__degree_programs.department_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__degree_programs.degree_program_id__', True), None)), (0, (0, (0, '__departments.department_name__', False), None))]), 'where': [], 'groupBy': [(0, '__departments.department_name__', False)], 'having': [(False, 5, (4, (0, '__degree_programs.degree_program_id__', False), None), None, None)], 'orderBy': ('asc', [(0, (0, '__departments.department_name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__degree_programs__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__degree_programs.degree_program_id__', True), None))]), 'where': [(False, 1, (0, (0, '__degree_programs.degree_program_id__', False), None), 1.0, 100.0)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT degree_program_id) AS number_of_unique_degree_programs FROM Degree_Programs WHERE degree_program_id BETWEEN 1 AND 100;
{'from': {'table_units': [('table_unit', '__degree_programs__'), ('table_unit', '__departments__')], 'conds': [(False, 2, (0, (0, '__degree_programs.department_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__degree_programs.degree_program_id__', True), None))]), 'where': [(False, 1, (0, (0, '__degree_programs.degree_program_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__students__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__students.student_id__', False), None))]), 'where': [(False, 5, (0, (0, '__students.date_first_registered__', False), None), '"2020-01-01"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT student_id FROM Students WHERE date_first_registered >= '2020-01-01';
Both are empty
GT:  SELECT student_id FROM Students WHERE date_first_registered >= '2020-01-01'
Pred:  SELECT student_id FROM Students WHERE date_first_registered >= '2020-01-01';
{'from': {'table_units': [('table_unit', '__students__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__students.student_id__', False), None))]), 'where': [(False, 5, (0, (0, '__students.date_first_registered__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__departments__'), ('table_unit', '__degree_programs__')], 'conds': [(False, 2, (0, (0, '__departments.department_id__', False), None), (0, '__degree_programs.department_id__', False), None)], 'join_types': [1]}, 'select': (False, [(0, (0, (0, '__departments.department_name__', False), None)), (5, (0, (0, '__degree_programs.degree_program_id__', False), None))]), 'where': [], 'groupBy': [(0, '__departments.department_id__', False), (0, '__departments.department_name__', False)], 'having': [(False, 1, (5, (0, '__degree_programs.degree_program_id__', False), None), 10.0, 20.0)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT d.department_name, AVG(dp.degree_program_id) AS avg_degree_program_id FROM Departments d INNER JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name HAVING AVG(dp.degree_program_id) BETWEEN 10 AND 20;
{'from': {'table_units': [('table_unit', '__degree_programs__'), ('table_unit', '__departments__')], 'conds': [(False, 2, (0, (0, '__degree_programs.department_id__', False), None), None, None)], 'join_types': [1]}, 'select': (False, [(5, (0, (0, '__degree_programs.degree_program_id__', False), None)), (0, (0, (0, '__departments.department_name__', False), None))]), 'where': [], 'groupBy': [(0, '__departments.department_name__', False)], 'having': [(False, 1, (5, (0, '__degree_programs.degree_program_id__', False), None), None, None)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT email_address FROM Students WHERE date_first_registered > '2020-01-01' ORDER BY date_first_registered DESC LIMIT 10
Pred:  SELECT email_address FROM ( SELECT email_address, date_first_registered, ROW_NUMBER() OVER (ORDER BY date_first_registered DESC) as rn FROM Students WHERE date_first_registered > '2020-01-01' ) AS ordered_students WHERE rn BETWEEN 11 AND 20;
{'from': {'table_units': [('table_unit', '__students__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__students.email_address__', False), None))]), 'where': [(False, 3, (0, (0, '__students.date_first_registered__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__students.date_first_registered__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__departments__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__departments.department_name__', False), None))]), 'where': [(False, 3, (0, (0, '__departments.department_id__', False), None), 5.0, None)], 'groupBy': [(0, '__departments.department_name__', False)], 'having': [(False, 3, (3, (0, '__all__', False), None), 1.0, None)], 'orderBy': ('desc', [(0, (0, '__departments.department_name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT department_name FROM Departments WHERE department_id > 5 GROUP BY department_name HAVING COUNT(*) > 1 ORDER BY department_name DESC;
Both are empty
GT:  SELECT department_name FROM Departments WHERE department_id > 5 GROUP BY department_name HAVING COUNT(department_id) > 1 ORDER BY department_name DESC
Pred:  SELECT department_name FROM Departments WHERE department_id > 5 GROUP BY department_name HAVING COUNT(*) > 1 ORDER BY department_name DESC;
{'from': {'table_units': [('table_unit', '__departments__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__departments.department_name__', False), None))]), 'where': [(False, 3, (0, (0, '__departments.department_id__', False), None), None, None)], 'groupBy': [(0, '__departments.department_name__', False)], 'having': [(False, 3, (3, (0, '__departments.department_id__', False), None), None, None)], 'orderBy': ('desc', [(0, (0, '__departments.department_name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__students__'), ('table_unit', '__students__')], 'conds': [(False, 2, (0, (0, '__students.student_id__', False), None), (0, '__students.student_id__', False), None)], 'join_types': [0]}, 'select': (True, [(0, (0, (0, '__students.first_name__', False), None))]), 'where': [(False, 2, (0, (0, '__students.first_name__', False), None), '"John"', None), 'and', (False, 2, (0, (0, '__students.first_name__', False), None), '"Alice"', None), 'and', (False, 1, (0, (0, '__students.student_id__', False), None), 1.0, 10.0)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT John.first_name FROM Students AS John JOIN Students AS Alice ON John.student_id = Alice.student_id WHERE John.first_name = 'John' AND Alice.first_name = 'Alice' AND John.student_id BETWEEN 1 AND 10;
Both are empty
GT:  SELECT T1.first_name FROM Students AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = 'John' AND T2.first_name = 'Alice' AND T1.student_id BETWEEN 1 AND 10 AND EXISTS (SELECT 1 FROM Students AS T3 WHERE T3.student_id = T1.student_id)
Pred:  SELECT  John.first_name FROM Students AS John JOIN Students AS Alice ON John.student_id = Alice.student_id WHERE John.first_name = 'John' AND Alice.first_name = 'Alice' AND John.student_id BETWEEN 1 AND 10;
{'from': {'table_units': [('table_unit', '__students__'), ('table_unit', '__students__')], 'conds': [(False, 2, (0, (0, '__students.student_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__students.first_name__', False), None))]), 'where': [(False, 2, (0, (0, '__students.first_name__', False), None), None, None), 'and', (False, 2, (0, (0, '__students.first_name__', False), None), None, None), 'and', (False, 1, (0, (0, '__students.student_id__', False), None), None, None), 'and', (False, 11, None, {'from': {'table_units': [('table_unit', '__students__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__students.student_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__degree_programs__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__degree_programs.department_id__', False), None)), (1, (0, (0, '__degree_programs.degree_program_id__', False), None))]), 'where': [(False, 6, (0, (0, '__degree_programs.department_id__', False), None), 10.0, None)], 'groupBy': [(0, '__degree_programs.department_id__', False)], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT department_id, MAX(degree_program_id) AS highest_degree_program_id FROM Degree_Programs WHERE department_id <= 10 GROUP BY department_id;
Execution error medium
Predicted SQL:  SELECT department_id, MAX(degree_program_id) AS highest_degree_program_id FROM Degree_Programs WHERE department_id <= 10 GROUP BY department_id;
Gold SQL:  SELECT department_id, MAX(degree_program_id) FROM Degree_Programs WHERE department_id <= 10
{'from': {'table_units': [('table_unit', '__degree_programs__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__degree_programs.department_id__', False), None)), (1, (0, (0, '__degree_programs.degree_program_id__', False), None))]), 'where': [(False, 6, (0, (0, '__degree_programs.department_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__degree_programs__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__all__', False), None))]), 'where': [(False, 2, (0, (0, '__degree_programs.department_id__', False), None), 1.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(*) AS number_of_degree_programs FROM Degree_Programs WHERE department_id = 1;
{'from': {'table_units': [('table_unit', '__degree_programs__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__degree_programs.degree_program_id__', False), None))]), 'where': [(False, 2, (0, (0, '__degree_programs.department_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__students__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__students.student_id__', False), None))]), 'where': [(False, 4, (0, (0, '__students.date_first_registered__', False), None), '"1990-01-01"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT student_id FROM Students WHERE date_first_registered < '1990-01-01';
{'from': {'table_units': [('table_unit', '__students__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__students.student_id__', False), None))]), 'where': [(False, 4, (0, (0, '__students.date_first_registered__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__semesters__'), ('table_unit', '__student_enrolment__'), ('table_unit', '__students__')], 'conds': [(False, 2, (0, (0, '__semesters.semester_id__', False), None), (0, '__semesters.semester_id__', False), None), 'and', (False, 2, (0, (0, '__student_enrolment.student_id__', False), None), (0, '__students.student_id__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(5, (0, (0, '__semesters.semester_id__', False), None))]), 'where': [(False, 7, (0, (0, '__students.first_name__', False), None), '"John"', None)], 'groupBy': [(0, '__semesters.semester_id__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__semesters.semester_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT AVG(Se.semester_id) AS average_semester_id FROM Semesters Se JOIN Student_Enrolment SE ON Se.semester_id = SE.semester_id JOIN Students S ON SE.student_id = S.student_id WHERE S.first_name != 'John' GROUP BY Se.semester_id ORDER BY average_semester_id DESC;
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__players__'), ('table_unit', '__rankings__')], 'conds': [(False, 2, (0, (0, '__players.player_id__', False), None), (0, '__rankings.player_id__', False), None)], 'join_types': [2]}, 'select': (True, [(0, (0, (0, '__players.hand__', False), None)), (0, (0, (0, '__players.last_name__', False), None))]), 'where': [(False, 2, (0, (0, '__players.country_code__', False), None), '"RUS"', None), 'or', (False, 2, (0, (0, '__players.hand__', False), None), '"R"', None), 'or', (True, 10, (0, (0, '__rankings.player_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT p.hand, p.last_name FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id WHERE p.country_code = 'RUS' OR p.hand = 'R' OR r.player_id IS NOT NULL;
Execution error extra
Predicted SQL:  SELECT DISTINCT p.hand, p.last_name FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id WHERE p.country_code = 'RUS' OR p.hand = 'R' OR r.player_id IS NOT NULL;
Gold SQL:  SELECT COUNT(DISTINCT T1.hand), T1.last_name FROM players AS T1 WHERE T1.country_code = 'rus' OR T1.hand = 'right' OR T1.player_id IN (SELECT player_id FROM rankings)
{'from': {'table_units': [('table_unit', '__players__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__players.hand__', True), None)), (0, (0, (0, '__players.last_name__', False), None))]), 'where': [(False, 2, (0, (0, '__players.country_code__', False), None), None, None), 'or', (False, 2, (0, (0, '__players.hand__', False), None), None, None), 'or', (False, 8, (0, (0, '__players.player_id__', False), None), {'from': {'table_units': [('table_unit', '__rankings__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__players.player_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__players__'), ('table_unit', '__matches__')], 'conds': [(False, 2, (0, (0, '__players.player_id__', False), None), (0, '__matches.winner_id__', False), None)], 'join_types': [0]}, 'select': (True, [(0, (0, (0, '__players.first_name__', False), None)), (0, (0, (0, '__matches.winner_rank__', False), None))]), 'where': [(False, 1, (0, (0, '__matches.year__', False), None), 2000.0, 2010.0)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__players.first_name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT p.first_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year BETWEEN 2000 AND 2010 ORDER BY p.first_name;
Both are empty
GT:  SELECT T1.first_name, T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year BETWEEN 2000 AND 2010
Pred:  SELECT  p.first_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year BETWEEN 2000 AND 2010 ORDER BY p.first_name;
{'from': {'table_units': [('table_unit', '__players__'), ('table_unit', '__matches__')], 'conds': [(False, 2, (0, (0, '__players.player_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__players.first_name__', False), None)), (0, (0, (0, '__matches.winner_rank__', False), None))]), 'where': [(False, 1, (0, (0, '__matches.year__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__rankings__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__rankings.player_id__', True), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT player_id) AS num_ranked_players FROM rankings;
Execution error easy
Predicted SQL:  SELECT COUNT(DISTINCT player_id) AS num_ranked_players FROM rankings;
Gold SQL:  SELECT COUNT(T1.player_id) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id
{'from': {'table_units': [('table_unit', '__players__'), ('table_unit', '__rankings__')], 'conds': [(False, 2, (0, (0, '__players.player_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__players.player_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error medium
Predicted SQL:  SELECT COUNT(*) FROM ( SELECT * FROM matches WHERE winner_id >= 10 ORDER BY match_num LIMIT -1 OFFSET 9 ) AS filtered_matches;
Gold SQL:  SELECT COUNT(MATCHES.winner_id) FROM MATCHES WHERE MATCHES.winner_id >= 10 LIMIT 10
{'from': {'table_units': [('table_unit', '__matches__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__matches.winner_id__', False), None))]), 'where': [(False, 5, (0, (0, '__matches.winner_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__players__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__all__', False), None))]), 'where': [(False, 3, (0, (0, '__players.player_id__', False), None), {'from': {'table_units': [('table_unit', '__rankings__')], 'conds': [], 'join_types': []}, 'select': (False, [(2, (0, (0, '__players.player_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT * FROM players WHERE player_id > (SELECT MIN(player_id) FROM rankings);
{'from': {'table_units': [('table_unit', '__players__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__all__', False), None))]), 'where': [(False, 3, (0, (0, '__players.player_id__', False), None), {'from': {'table_units': [('table_unit', '__rankings__')], 'conds': [], 'join_types': []}, 'select': (False, [(2, (0, (0, '__players.player_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__players__'), ('table_unit', '__rankings__')], 'conds': [(False, 2, (0, (0, '__players.player_id__', False), None), (0, '__rankings.player_id__', False), None)], 'join_types': [0]}, 'select': (True, [(0, (0, (0, '__players.first_name__', False), None))]), 'where': [(False, 4, (0, (0, '__rankings.ranking__', False), None), 10.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__players.first_name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT p.first_name FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking < 10 ORDER BY p.first_name ASC;
Execution error extra
Predicted SQL:  SELECT DISTINCT p.first_name FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking < 10 ORDER BY p.first_name ASC;
Gold SQL:  SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id JOIN rankings AS T3 ON T1.player_id = T3.player_id WHERE T3.ranking < 10 ORDER BY T1.first_name ASC
{'from': {'table_units': [('table_unit', '__players__'), ('table_unit', '__matches__'), ('table_unit', '__rankings__')], 'conds': [(False, 2, (0, (0, '__players.player_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__players.player_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__players.first_name__', False), None))]), 'where': [(False, 4, (0, (0, '__rankings.ranking__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__players.first_name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__museum__')], 'conds': [(False, 4, (0, (0, '__museum.museum_id__', False), None), (0, '__museum.museum_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None)), (0, (0, (0, '__museum.name__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__museum.museum_id__', False), None), (0, (0, '__museum.museum_id__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT m1.Name AS Museum1_Name, m2.Name AS Museum2_Name FROM museum AS m1 JOIN museum AS m2 ON m1.Museum_ID < m2.Museum_ID ORDER BY m1.Museum_ID, m2.Museum_ID LIMIT 10;
{'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__museum__')], 'conds': [(False, 4, (0, (0, '__museum.museum_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None)), (0, (0, (0, '__museum.name__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error medium
Predicted SQL:  WITH RankedMuseums AS ( SELECT Museum_ID, Name, Num_of_Staff, Open_Year, ROW_NUMBER() OVER (ORDER BY Museum_ID) AS Rank FROM museum ) SELECT COUNT(*) AS TotalMuseums, SUM(Num_of_Staff) AS TotalStaff FROM RankedMuseums WHERE Rank BETWEEN 11 AND 20;
Gold SQL:  SELECT COUNT(Museum_ID), SUM(Num_of_Staff) FROM museum LIMIT 10
{'from': {'table_units': [('table_unit', '__museum__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__museum.museum_id__', False), None)), (4, (0, (0, '__museum.num_of_staff__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__visit__')], 'conds': [(False, 2, (0, (0, '__museum.museum_id__', False), None), (0, '__visit.museum_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None)), (4, (0, (0, '__visit.num_of_ticket__', False), None))]), 'where': [(False, 4, (0, (0, '__museum.num_of_staff__', False), None), 50.0, None)], 'groupBy': [(0, '__museum.museum_id__', False), (0, '__museum.name__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__visit.num_of_ticket__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT m.Name AS Museum_Name, SUM(v.Num_of_Ticket) AS Total_Tickets_Sold FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE m.Num_of_Staff < 50 GROUP BY m.Museum_ID, m.Name ORDER BY Total_Tickets_Sold DESC LIMIT 10;
{'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__visit__')], 'conds': [(False, 2, (0, (0, '__museum.museum_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None)), (4, (0, (0, '__visit.num_of_ticket__', False), None))]), 'where': [(False, 4, (0, (0, '__museum.num_of_staff__', False), None), None, None)], 'groupBy': [(0, '__museum.name__', False)], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__visit__')], 'conds': [(False, 2, (0, (0, '__museum.museum_id__', False), None), (0, '__visit.museum_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None)), (2, (0, (0, '__visit.total_spent__', False), None))]), 'where': [], 'groupBy': [(0, '__museum.name__', False)], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT m.Name, MIN(v.Total_spent) AS Min_Spent FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Name;
{'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__visit__')], 'conds': [(False, 2, (0, (0, '__museum.museum_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None)), (2, (0, (0, '__visit.total_spent__', False), None))]), 'where': [], 'groupBy': [(0, '__museum.name__', False)], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__visit__')], 'conds': [(False, 2, (0, (0, '__museum.museum_id__', False), None), (0, '__visit.museum_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None)), (4, (0, (0, '__visit.num_of_ticket__', False), None))]), 'where': [], 'groupBy': [(0, '__museum.museum_id__', False), (0, '__museum.name__', False)], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT m.Name, SUM(v.Num_of_Ticket) AS Total_Tickets_Sold FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name;
Execution error medium
Predicted SQL:  SELECT m.Name, SUM(v.Num_of_Ticket) AS Total_Tickets_Sold FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name;
Gold SQL:  SELECT T1.Name, SUM(T2.Num_of_Ticket) FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID
{'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__visit__')], 'conds': [(False, 2, (0, (0, '__museum.museum_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None)), (4, (0, (0, '__visit.num_of_ticket__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__visit__')], 'conds': [(False, 2, (0, (0, '__museum.museum_id__', False), None), (0, '__visit.museum_id__', False), None)], 'join_types': [2]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None)), (2, (0, (0, '__museum.num_of_staff__', False), None))]), 'where': [(False, 10, (0, (0, '__visit.visitor_id__', False), None), None, None)], 'groupBy': [(0, '__museum.name__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__museum.num_of_staff__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT m.Name, MIN(m.Num_of_Staff) as Min_Staff FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.visitor_ID IS NULL GROUP BY m.Name ORDER BY m.Num_of_Staff DESC;
{'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__museum__')], 'conds': [(False, 2, (0, (0, '__museum.museum_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None)), (2, (0, (0, '__museum.num_of_staff__', False), None))]), 'where': [(True, 11, None, {'from': {'table_units': [('table_unit', '__visit__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__visit.museum_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [(0, '__museum.name__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__museum.num_of_staff__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__visit__')], 'conds': [(False, 2, (0, (0, '__museum.museum_id__', False), None), (0, '__visit.museum_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None))]), 'where': [], 'groupBy': [(0, '__museum.museum_id__', False), (0, '__museum.name__', False)], 'having': [(False, 3, (4, (0, '__visit.total_spent__', False), None), 10000.0, None)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name HAVING SUM(v.Total_spent) > 10000;
Both are empty
GT:  SELECT T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Museum_ID IN (SELECT T2.Museum_ID FROM visit AS T2 GROUP BY T2.Museum_ID HAVING SUM(T2.Total_spent) > 10000)
Pred:  SELECT m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name HAVING SUM(v.Total_spent) > 10000;
{'from': {'table_units': [('table_unit', '__museum__'), ('table_unit', '__visit__')], 'conds': [(False, 2, (0, (0, '__museum.museum_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__museum.name__', False), None))]), 'where': [(False, 8, (0, (0, '__museum.museum_id__', False), None), {'from': {'table_units': [('table_unit', '__visit__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__visit.museum_id__', False), None))]), 'where': [], 'groupBy': [(0, '__visit.museum_id__', False)], 'having': [(False, 3, (4, (0, '__visit.total_spent__', False), None), None, None)], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__museum__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__museum.museum_id__', False), None)), (4, (0, (0, '__museum.num_of_staff__', False), None)), (3, (0, (0, '__museum.open_year__', False), None))]), 'where': [(True, 10, (0, (0, '__museum.open_year__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(Museum_ID) AS Total_Museums, SUM(Num_of_Staff) AS Total_Staff, COUNT(Open_Year) AS Museums_With_Opening_Year FROM museum WHERE Open_Year IS NOT NULL;
{'from': {'table_units': [('table_unit', '__museum__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__museum.museum_id__', False), None)), (4, (0, (0, '__museum.num_of_staff__', False), None)), (3, (0, (0, '__museum.open_year__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__visit__')], 'conds': [], 'join_types': []}, 'select': (True, [(0, (0, (0, '__visit.museum_id__', False), None))]), 'where': [(False, 3, (0, (0, '__visit.total_spent__', False), None), 100.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT Museum_ID FROM visit WHERE Total_spent > 100;
{'from': {'table_units': [('table_unit', '__museum__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__museum.museum_id__', False), None))]), 'where': [(False, 11, None, {'from': {'table_units': [('table_unit', '__visit__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__museum.museum_id__', False), None), None, None), 'and', (False, 3, (0, (0, '__visit.total_spent__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None))]), 'where': [(False, 5, (0, (0, '__stadium.capacity__', False), None), 10000.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT s.Name FROM stadium s WHERE s.Capacity >= 10000;
Execution error medium
Predicted SQL:  SELECT s.Name FROM stadium s WHERE s.Capacity >= 10000;
Gold SQL:  SELECT T1.Name, T2.Name FROM stadium AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Capacity >= 10000
{'from': {'table_units': [('table_unit', '__stadium__'), ('table_unit', '__stadium__')], 'conds': [(False, 2, (0, (0, '__stadium.stadium_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None)), (0, (0, (0, '__stadium.name__', False), None))]), 'where': [(False, 5, (0, (0, '__stadium.capacity__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__stadium__'), ('table_unit', '__concert__')], 'conds': [(False, 2, (0, (0, '__stadium.stadium_id__', False), None), (0, '__concert.stadium_id__', False), None), 'and', (False, 2, (0, (0, '__concert.year__', False), None), '"2020"', None)], 'join_types': [2]}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None))]), 'where': [(False, 10, (0, (0, '__concert.concert_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = '2020' WHERE c.concert_ID IS NULL;
{'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None))]), 'where': [(True, 8, (0, (0, '__stadium.stadium_id__', False), None), {'from': {'table_units': [('table_unit', '__concert__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.stadium_id__', False), None))]), 'where': [(False, 2, (0, (0, '__concert.year__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__stadium__'), ('table_unit', '__concert__')], 'conds': [(False, 2, (0, (0, '__stadium.stadium_id__', False), None), (0, '__concert.stadium_id__', False), None)], 'join_types': [1]}, 'select': (False, [(3, (0, (0, '__concert.concert_name__', True), None)), (5, (0, (0, '__stadium.capacity__', False), None))]), 'where': [(False, 1, (0, (0, '__stadium.average__', False), None), 1000.0, 10000.0), 'or', (False, 3, (0, (0, '__stadium.capacity__', False), None), 50000.0, None), 'or', (False, 2, (0, (0, '__stadium.location__', False), None), '"New York"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT concert.concert_Name) AS Unique_Concert_Names, AVG(stadium.Capacity) AS Average_Capacity FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE (stadium.Average BETWEEN 1000 AND 10000 OR stadium.Capacity > 50000 OR stadium.Location = 'New York')
{'from': {'table_units': [('table_unit', '__stadium__'), ('table_unit', '__concert__')], 'conds': [(False, 2, (0, (0, '__stadium.stadium_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__concert.concert_name__', True), None)), (5, (0, (0, '__stadium.capacity__', False), None))]), 'where': [(False, 1, (0, (0, '__stadium.average__', False), None), None, None), 'or', (False, 3, (0, (0, '__stadium.capacity__', False), None), None, None), 'or', (False, 2, (0, (0, '__stadium.location__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None))]), 'where': [(False, 5, (0, (0, '__stadium.capacity__', False), None), 50000.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__stadium.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name FROM stadium WHERE Capacity >= 50000 ORDER BY Name ASC;
{'from': {'table_units': [('sql', {'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None)), (0, (0, (0, '__stadium.capacity__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None})], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, 't1.name', False), None))]), 'where': [(False, 5, (0, (0, 't1.capacity', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, 't1.name', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__stadium__'), ('table_unit', '__concert__')], 'conds': [(False, 2, (0, (0, '__stadium.stadium_id__', False), None), (0, '__concert.stadium_id__', False), None)], 'join_types': [2]}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None)), (3, (0, (0, '__concert.concert_id__', False), None))]), 'where': [(False, 7, (0, (0, '__stadium.name__', False), None), '"Stadium1"', None)], 'groupBy': [(0, '__stadium.name__', False)], 'having': [], 'orderBy': ('desc', [(3, (0, '__concert.concert_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE s.Name != 'Stadium1' GROUP BY s.Name ORDER BY COUNT(c.concert_ID) DESC;
Execution error extra
Predicted SQL:  SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE s.Name != 'Stadium1' GROUP BY s.Name ORDER BY COUNT(c.concert_ID) DESC;
Gold SQL:  SELECT T2.Name, COUNT(T1.concert_ID) AS count_concert_ID FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Name != 'Stadium1' GROUP BY T2.Name ORDER BY count_concert_ID DESC
{'from': {'table_units': [('table_unit', '__concert__'), ('table_unit', '__stadium__')], 'conds': [(False, 2, (0, (0, '__concert.stadium_id__', False), None), None, None)], 'join_types': [1]}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None)), (3, (0, (0, '__concert.concert_id__', False), None))]), 'where': [(False, 7, (0, (0, '__stadium.name__', False), None), None, None)], 'groupBy': [(0, '__stadium.name__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__concert.concert_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name FROM stadium;
{'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__concert__'), ('table_unit', '__singer_in_concert__'), ('table_unit', '__singer__')], 'conds': [(False, 2, (0, (0, '__concert.concert_id__', False), None), (0, '__singer_in_concert.concert_id__', False), None), 'and', (False, 2, (0, (0, '__singer_in_concert.singer_id__', False), None), (0, '__singer.singer_id__', False), None)], 'join_types': [0, 0]}, 'select': (True, [(0, (0, (0, '__concert.concert_name__', False), None))]), 'where': [(False, 3, (0, (0, '__singer.age__', False), None), 25.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT c.concert_Name FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE s.Age > 25;
{'from': {'table_units': [('table_unit', '__concert__'), ('table_unit', '__singer_in_concert__')], 'conds': [(False, 2, (0, (0, '__concert.concert_id__', False), None), None, None)], 'join_types': [0]}, 'select': (True, [(0, (0, (0, '__concert.concert_name__', False), None))]), 'where': [(False, 8, (0, (0, '__singer_in_concert.singer_id__', False), None), {'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer_in_concert.singer_id__', False), None))]), 'where': [(False, 3, (0, (0, '__singer.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.location__', False), None))]), 'where': [(False, 1, (0, (0, '__stadium.capacity__', False), None), 10000.0, 50000.0), 'or', (False, 3, (0, (0, '__stadium.average__', False), None), 30000.0, None), 'or', (False, 2, (0, (0, '__stadium.name__', False), None), '"Stadium1"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Location FROM stadium WHERE (Capacity BETWEEN 10000 AND 50000) OR (Average > 30000) OR (Name = 'Stadium1');
{'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.location__', False), None))]), 'where': [(False, 1, (0, (0, '__stadium.capacity__', False), None), None, None), 'or', (False, 3, (0, (0, '__stadium.average__', False), None), None, None), 'or', (False, 2, (0, (0, '__stadium.name__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None)), (0, (0, (0, '__stadium.location__', False), None)), (0, (0, (0, '__stadium.capacity__', False), None))]), 'where': [(False, 12, (0, (0, '__stadium.location__', False), None), '"USA"', None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__stadium.capacity__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name, Location, Capacity FROM stadium WHERE Location <> 'USA' ORDER BY Capacity DESC;
Partial answer True
Not equal but Partially Correct:
SELECT Name FROM stadium WHERE Location != 'USA' ORDER BY Capacity DESC
SELECT Name, Location, Capacity FROM stadium WHERE Location <> 'USA' ORDER BY Capacity DESC;
---------------------
Execution error medium
Predicted SQL:  SELECT Name, Location, Capacity FROM stadium WHERE Location <> 'USA' ORDER BY Capacity DESC;
Gold SQL:  SELECT Name FROM stadium WHERE Location != 'USA' ORDER BY Capacity DESC
{'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.name__', False), None))]), 'where': [(False, 7, (0, (0, '__stadium.location__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__stadium.capacity__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__stadium__'), ('table_unit', '__concert__')], 'conds': [(False, 2, (0, (0, '__stadium.stadium_id__', False), None), (0, '__concert.stadium_id__', False), None)], 'join_types': [2]}, 'select': (True, [(0, (0, (0, '__stadium.location__', False), None)), (0, (0, (0, '__stadium.name__', False), None))]), 'where': [(False, 1, (0, (0, '__stadium.capacity__', False), None), 50000.0, 100000.0), 'or', (False, 2, (0, (0, '__stadium.name__', False), None), '"Stadium 1"', None), 'or', (False, 2, (0, (0, '__concert.concert_name__', False), None), '"Concert 1"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT s.Location, s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE (s.Capacity BETWEEN 50000 AND 100000) OR s.Name = 'Stadium 1' OR c.concert_Name = 'Concert 1' LIMIT 10;
{'from': {'table_units': [('table_unit', '__stadium__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__stadium.location__', False), None)), (0, (0, (0, '__stadium.name__', False), None))]), 'where': [(False, 1, (0, (0, '__stadium.capacity__', False), None), None, None), 'or', (False, 2, (0, (0, '__stadium.name__', False), None), None, None), 'or', (False, 11, None, {'from': {'table_units': [('table_unit', '__concert__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__concert.concert_name__', False), None), None, None), 'and', (False, 2, (0, (0, '__concert.stadium_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__people__'), ('table_unit', '__poker_player__')], 'conds': [(False, 2, (0, (0, '__people.people_id__', False), None), (0, '__poker_player.people_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.name__', False), None)), (4, (0, (0, '__poker_player.earnings__', False), None))]), 'where': [(False, 6, (0, (0, '__people.height__', False), None), 180.0, None)], 'groupBy': [(0, '__people.name__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__people.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT p.Name, SUM(pp.Earnings) AS Total_Earnings FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE p.Height <= 180 GROUP BY p.Name ORDER BY p.Name DESC;
Both are empty
GT:  SELECT T1.Name, SUM(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID JOIN poker_player AS T3 ON T2.People_ID = T3.People_ID WHERE T1.Height <= 180 GROUP BY T1.Name ORDER BY T1.Name DESC
Pred:  SELECT p.Name, SUM(pp.Earnings) AS Total_Earnings FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE p.Height <= 180 GROUP BY p.Name ORDER BY p.Name DESC;
{'from': {'table_units': [('table_unit', '__people__'), ('table_unit', '__poker_player__'), ('table_unit', '__poker_player__')], 'conds': [(False, 2, (0, (0, '__people.people_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__poker_player.people_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__people.name__', False), None)), (4, (0, (0, '__poker_player.earnings__', False), None))]), 'where': [(False, 6, (0, (0, '__people.height__', False), None), None, None)], 'groupBy': [(0, '__people.name__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__people.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__poker_player__'), ('table_unit', '__people__')], 'conds': [(False, 2, (0, (0, '__poker_player.people_id__', False), None), (0, '__people.people_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.name__', False), None)), (0, (0, (0, '__poker_player.poker_player_id__', False), None)), (4, (0, (0, '__poker_player.earnings__', False), None))]), 'where': [], 'groupBy': [(0, '__poker_player.poker_player_id__', False), (0, '__people.name__', False)], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT p.Name, pp.Poker_Player_ID, SUM(pp.Earnings) AS Total_Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY pp.Poker_Player_ID, p.Name;
Partial answer True
Not equal but Partially Correct:
SELECT T1.Name, SUM(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Name
SELECT p.Name, pp.Poker_Player_ID, SUM(pp.Earnings) AS Total_Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY pp.Poker_Player_ID, p.Name;
---------------------
Execution error medium
Predicted SQL:  SELECT p.Name, pp.Poker_Player_ID, SUM(pp.Earnings) AS Total_Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY pp.Poker_Player_ID, p.Name;
Gold SQL:  SELECT T1.Name, SUM(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Name
{'from': {'table_units': [('table_unit', '__people__'), ('table_unit', '__poker_player__')], 'conds': [(False, 2, (0, (0, '__people.people_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.name__', False), None)), (4, (0, (0, '__poker_player.earnings__', False), None))]), 'where': [], 'groupBy': [(0, '__people.name__', False)], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error extra
Predicted SQL:  SELECT p.Name AS Player_Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE p.Height >= 180 ORDER BY pp.Earnings DESC LIMIT 10 OFFSET 10;
Gold SQL:  SELECT MAX(T1.Earnings) AS max_earning, T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height >= 180 ORDER BY T1.Earnings DESC LIMIT 10
{'from': {'table_units': [('table_unit', '__poker_player__'), ('table_unit', '__people__')], 'conds': [(False, 2, (0, (0, '__poker_player.people_id__', False), None), None, None)], 'join_types': [1]}, 'select': (False, [(1, (0, (0, '__poker_player.earnings__', False), None)), (0, (0, (0, '__people.name__', False), None))]), 'where': [(False, 5, (0, (0, '__people.height__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__poker_player.earnings__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__people__'), ('table_unit', '__poker_player__')], 'conds': [(False, 2, (0, (0, '__people.people_id__', False), None), (0, '__poker_player.people_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.people_id__', False), None)), (0, (0, (0, '__people.height__', False), None))]), 'where': [(False, 12, (0, (0, '__people.height__', False), None), 180.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT p.People_ID, p.Height FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE p.Height <> 180;
{'from': {'table_units': [('table_unit', '__poker_player__'), ('table_unit', '__people__')], 'conds': [(False, 2, (0, (0, '__poker_player.people_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__poker_player.people_id__', False), None)), (0, (0, (0, '__people.height__', False), None))]), 'where': [(False, 7, (0, (0, '__people.height__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__poker_player__'), ('table_unit', '__people__')], 'conds': [(False, 2, (0, (0, '__poker_player.people_id__', False), None), (0, '__people.people_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.name__', False), None)), (0, (0, (0, '__poker_player.earnings__', False), None))]), 'where': [(False, 3, (0, (0, '__poker_player.best_finish__', False), None), 10.0, None), 'and', (False, 1, (0, (0, '__poker_player.final_table_made__', False), None), 1.0, 5.0), 'and', (False, 5, (0, (0, '__poker_player.earnings__', False), None), 10000.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__people.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT p.Name, pp.Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Best_Finish > 10 AND pp.Final_Table_Made BETWEEN 1 AND 5 AND pp.Earnings >= 10000 ORDER BY p.Name DESC;
Both are empty
GT:  SELECT T1.Name, T2.Earnings FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Final_Table_Made BETWEEN 1 AND 5 AND T2.Best_Finish > 10 AND T2.People_ID NOT IN (SELECT People_ID FROM poker_player WHERE Earnings < 10000) ORDER BY T1.Name DESC
Pred:  SELECT p.Name, pp.Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Best_Finish > 10 AND pp.Final_Table_Made BETWEEN 1 AND 5 AND pp.Earnings >= 10000 ORDER BY p.Name DESC;
{'from': {'table_units': [('table_unit', '__people__'), ('table_unit', '__poker_player__')], 'conds': [(False, 2, (0, (0, '__people.people_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.name__', False), None)), (0, (0, (0, '__poker_player.earnings__', False), None))]), 'where': [(False, 1, (0, (0, '__poker_player.final_table_made__', False), None), None, None), 'and', (False, 3, (0, (0, '__poker_player.best_finish__', False), None), None, None), 'and', (True, 8, (0, (0, '__poker_player.people_id__', False), None), {'from': {'table_units': [('table_unit', '__poker_player__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__people.people_id__', False), None))]), 'where': [(False, 4, (0, (0, '__poker_player.earnings__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__people.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__poker_player__'), ('table_unit', '__people__')], 'conds': [(False, 2, (0, (0, '__poker_player.people_id__', False), None), (0, '__people.people_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__poker_player.poker_player_id__', False), None)), (0, (0, (0, '__people.name__', False), None))]), 'where': [(False, 3, (0, (0, '__poker_player.final_table_made__', False), None), 10.0, None), 'or', (False, 2, (0, (0, '__people.nationality__', False), None), '"American"', None), 'or', (False, 5, (0, (0, '__people.height__', False), None), 170.0, None), 'and', (False, 6, (0, (0, '__people.height__', False), None), 180.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__poker_player.poker_player_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT pp.Poker_Player_ID, pe.Name FROM poker_player pp JOIN people pe ON pp.People_ID = pe.People_ID WHERE pp.Final_Table_Made > 10 OR pe.Nationality = 'American' OR (pe.Height >= 170 AND pe.Height <= 180) ORDER BY pp.Poker_Player_ID ASC;
Execution error extra
Predicted SQL:  SELECT pp.Poker_Player_ID, pe.Name FROM poker_player pp JOIN people pe ON pp.People_ID = pe.People_ID WHERE pp.Final_Table_Made > 10 OR pe.Nationality = 'American' OR (pe.Height >= 170 AND pe.Height <= 180) ORDER BY pp.Poker_Player_ID ASC;
Gold SQL:  SELECT T1.People_ID, T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Final_Table_Made > 10 OR T2.Nationality = 'American' OR EXISTS (SELECT 1 FROM people WHERE Height BETWEEN 170 AND 180) ORDER BY T1.People_ID ASC
{'from': {'table_units': [('table_unit', '__poker_player__'), ('table_unit', '__people__')], 'conds': [(False, 2, (0, (0, '__poker_player.people_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__poker_player.people_id__', False), None)), (0, (0, (0, '__people.name__', False), None))]), 'where': [(False, 3, (0, (0, '__poker_player.final_table_made__', False), None), None, None), 'or', (False, 2, (0, (0, '__people.nationality__', False), None), None, None), 'or', (False, 11, None, {'from': {'table_units': [('table_unit', '__people__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 1, (0, (0, '__people.height__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__poker_player.people_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT P1.Name, P2.Final_Table_Made FROM poker_player AS P2 JOIN people AS P1 ON P2.People_ID = P1.People_ID WHERE P2.Best_Finish = 1 AND P1.Height = 175 LIMIT 1
Pred:  SELECT p.Name, pp.Final_Table_Made FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height = 175 AND pp.Best_Finish = 1 ORDER BY pp.Poker_Player_ID LIMIT 1 OFFSET 1;
{'from': {'table_units': [('table_unit', '__poker_player__'), ('table_unit', '__people__')], 'conds': [(False, 2, (0, (0, '__poker_player.people_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.name__', False), None)), (0, (0, (0, '__poker_player.final_table_made__', False), None))]), 'where': [(False, 2, (0, (0, '__poker_player.best_finish__', False), None), None, None), 'and', (False, 2, (0, (0, '__people.height__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__people__'), ('table_unit', '__poker_player__')], 'conds': [(False, 2, (0, (0, '__people.people_id__', False), None), (0, '__poker_player.people_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.name__', False), None))]), 'where': [(False, 5, (0, (0, '__poker_player.earnings__', False), None), 1000000.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__people.height__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings >= 1000000 ORDER BY p.Height DESC;
Both are empty
GT:  SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings >= 1000000 ORDER BY T1.Height DESC
Pred:  SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings >= 1000000 ORDER BY p.Height DESC;
{'from': {'table_units': [('table_unit', '__people__'), ('table_unit', '__poker_player__')], 'conds': [(False, 2, (0, (0, '__people.people_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.name__', False), None))]), 'where': [(False, 5, (0, (0, '__poker_player.earnings__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__people.height__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__people__'), ('table_unit', '__poker_player__')], 'conds': [(False, 2, (0, (0, '__people.people_id__', False), None), (0, '__poker_player.people_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.nationality__', False), None)), (3, (0, (0, '__poker_player.poker_player_id__', True), None))]), 'where': [(False, 2, (0, (0, '__people.height__', False), None), 175.0, None)], 'groupBy': [(0, '__people.nationality__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__people.nationality__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT p.Nationality, COUNT(DISTINCT pp.Poker_Player_ID) AS NumberOfPlayers FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE p.Height = 175 GROUP BY p.Nationality ORDER BY p.Nationality ASC;
Execution error hard
Predicted SQL:  SELECT p.Nationality, COUNT(DISTINCT pp.Poker_Player_ID) AS NumberOfPlayers FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE p.Height = 175 GROUP BY p.Nationality ORDER BY p.Nationality ASC;
Gold SQL:  SELECT T2.Nationality, COUNT(DISTINCT T1.Poker_Player_ID) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = 175 ORDER BY T2.Nationality ASC
{'from': {'table_units': [('table_unit', '__poker_player__'), ('table_unit', '__people__')], 'conds': [(False, 2, (0, (0, '__poker_player.people_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__people.nationality__', False), None)), (3, (0, (0, '__poker_player.poker_player_id__', True), None))]), 'where': [(False, 2, (0, (0, '__people.height__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__people.nationality__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__poker_player__'), ('table_unit', '__people__')], 'conds': [(False, 2, (0, (0, '__poker_player.people_id__', False), None), (0, '__people.people_id__', False), None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__people.people_id__', True), None)), (2, (0, (0, '__poker_player.earnings__', False), None)), (1, (0, (0, '__poker_player.earnings__', False), None))]), 'where': [(False, 3, (0, (0, '__poker_player.money_rank__', False), None), 10.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__poker_player.earnings__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT p.People_ID) AS Number_of_People, MIN(pp.Earnings) AS Min_Earnings, MAX(pp.Earnings) AS Max_Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Money_Rank > 10 ORDER BY pp.Earnings;
{'from': {'table_units': [('table_unit', '__poker_player__'), ('table_unit', '__people__')], 'conds': [(False, 2, (0, (0, '__poker_player.people_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__people.people_id__', False), None)), (2, (0, (0, '__poker_player.earnings__', False), None)), (1, (0, (0, '__poker_player.earnings__', False), None))]), 'where': [(False, 3, (0, (0, '__poker_player.money_rank__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__poker_player.earnings__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__cars_data__')], 'conds': [], 'join_types': []}, 'select': (False, [(1, (0, (0, '__cars_data.cylinders__', False), None))]), 'where': [(False, 5, (0, (0, '__cars_data.cylinders__', False), None), 4.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT MAX(Cylinders) AS max_cylinders FROM cars_data WHERE Cylinders >= 4;
Execution error medium
Predicted SQL:  SELECT MAX(Cylinders) AS max_cylinders FROM cars_data WHERE Cylinders >= 4;
Gold SQL:  SELECT MAX(T1.Cylinders) FROM cars_data AS T1 GROUP BY T1.Cylinders HAVING T1.Cylinders >= 4 ORDER BY T1.Cylinders DESC
{'from': {'table_units': [('table_unit', '__cars_data__')], 'conds': [], 'join_types': []}, 'select': (False, [(1, (0, (0, '__cars_data.cylinders__', False), None))]), 'where': [], 'groupBy': [(0, '__cars_data.cylinders__', False)], 'having': [(False, 5, (0, (0, '__cars_data.cylinders__', False), None), None, None)], 'orderBy': ('desc', [(0, (0, '__cars_data.cylinders__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__car_makers__'), ('table_unit', '__model_list__')], 'conds': [(False, 2, (0, (0, '__car_makers.id__', False), None), (0, '__model_list.maker__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__car_makers.maker__', False), None)), (0, (0, (0, '__model_list.model__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__car_makers.maker__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT cm.Maker, ml.Model FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker ORDER BY cm.Maker DESC;
{'from': {'table_units': [('table_unit', '__car_makers__'), ('table_unit', '__model_list__')], 'conds': [(False, 2, (0, (0, '__car_makers.id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__car_makers.maker__', False), None)), (0, (0, (0, '__model_list.model__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__car_makers.maker__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__car_makers__'), ('table_unit', '__model_list__')], 'conds': [(False, 2, (0, (0, '__car_makers.id__', False), None), (0, '__model_list.maker__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__car_makers.maker__', False), None))]), 'where': [(False, 2, (0, (0, '__model_list.modelid__', False), None), 1.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker WHERE ml.ModelId = 1;
{'from': {'table_units': [('table_unit', '__car_makers__'), ('table_unit', '__model_list__')], 'conds': [(False, 2, (0, (0, '__car_makers.id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__car_makers.maker__', False), None))]), 'where': [(False, 11, None, {'from': {'table_units': [('table_unit', '__model_list__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__model_list.model__', False), None))]), 'where': [(False, 2, (0, (0, '__model_list.maker__', False), None), None, None), 'and', (False, 2, (0, (0, '__model_list.modelid__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT Id FROM cars_data WHERE Year > 2000 ORDER BY Weight ASC LIMIT 10
Pred:  SELECT cd.Id FROM cars_data cd INNER JOIN car_names cn ON cd.Id = cn.MakeId INNER JOIN model_list ml ON cn.Model = ml.Model INNER JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Year > 2000 ORDER BY cd.Weight ASC LIMIT 10 OFFSET 10;
{'from': {'table_units': [('table_unit', '__cars_data__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__cars_data.id__', False), None))]), 'where': [(False, 3, (0, (0, '__cars_data.year__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__cars_data.weight__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__car_makers__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__car_makers.maker__', False), None)), (0, (0, (0, '__car_makers.fullname__', False), None))]), 'where': [(False, 6, (0, (0, '__car_makers.maker__', False), None), '"Toyota"', None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__car_makers.maker__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Maker, FullName FROM car_makers WHERE Maker <= 'Toyota' ORDER BY Maker;
Both are empty
GT:  SELECT Maker FROM car_makers WHERE Maker <= 'Toyota'
Pred:  SELECT Maker, FullName FROM car_makers WHERE Maker <= 'Toyota' ORDER BY Maker;
{'from': {'table_units': [('table_unit', '__car_makers__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__car_makers.maker__', False), None))]), 'where': [(False, 6, (0, (0, '__car_makers.maker__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__car_makers__'), ('table_unit', '__model_list__')], 'conds': [(False, 2, (0, (0, '__car_makers.id__', False), None), (0, '__model_list.maker__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__model_list.model__', False), None))]), 'where': [(False, 5, (0, (0, '__car_makers.maker__', False), None), '"Toyota"', None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__model_list.model__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.Maker >= 'Toyota' ORDER BY ml.Model ASC;
{'from': {'table_units': [('table_unit', '__model_list__'), ('table_unit', '__car_makers__')], 'conds': [(False, 2, (0, (0, '__model_list.maker__', False), None), None, None)], 'join_types': [1]}, 'select': (False, [(0, (0, (0, '__model_list.model__', False), None))]), 'where': [(False, 5, (0, (0, '__car_makers.maker__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__model_list.model__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__cars_data__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__cars_data.id__', False), None)), (0, (0, (0, '__cars_data.horsepower__', False), None))]), 'where': [(False, 3, (0, (0, '__cars_data.cylinders__', False), None), 3.0, None), 'or', (False, 1, (0, (0, '__cars_data.edispl__', False), None), 2.0, 5.0), 'or', (False, 4, (0, (0, '__cars_data.weight__', False), None), 3000.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__cars_data.id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Id, Horsepower FROM cars_data WHERE Cylinders > 3 OR Edispl BETWEEN 2 AND 5 OR Weight < 3000 ORDER BY Id DESC;
{'from': {'table_units': [('table_unit', '__cars_data__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__cars_data.id__', False), None)), (0, (0, (0, '__cars_data.horsepower__', False), None))]), 'where': [(False, 3, (0, (0, '__cars_data.cylinders__', False), None), None, None), 'or', (False, 1, (0, (0, '__cars_data.edispl__', False), None), None, None), 'or', (False, 4, (0, (0, '__cars_data.weight__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__cars_data.id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__battle.id__', True), None))]), 'where': [(False, 5, (0, (0, '__battle.date__', False), None), '"1800-01-01"', None), 'and', (False, 6, (0, (0, '__battle.date__', False), None), '"1900-12-31"', None), 'and', (False, 2, (0, (0, '__battle.result__', False), None), '"win"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT id) AS total_victories FROM battle WHERE date >= '1800-01-01' AND date <= '1900-12-31' AND result = 'win';
{'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__battle.name__', True), None))]), 'where': [(False, 1, (0, (0, '__battle.date__', False), None), None, None), 'and', (False, 2, (0, (0, '__battle.result__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__battle.id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__battle.name__', False), None))]), 'where': [(False, 6, (0, (0, '__battle.date__', False), None), '"1500-12-31"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT name FROM battle WHERE date <= '1500-12-31';
{'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__battle.name__', False), None))]), 'where': [(False, 6, (0, (0, '__battle.date__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__battle.date__', False), None)), (1, (0, (0, '__battle.id__', False), None))]), 'where': [(False, 1, (0, (0, '__battle.id__', False), None), 1.0, 10.0)], 'groupBy': [(0, '__battle.date__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__battle.date__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT date, MAX(id) AS highest_battle_id FROM battle WHERE id BETWEEN 1 AND 10 GROUP BY date ORDER BY date ASC;
{'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__battle.date__', False), None)), (1, (0, (0, '__battle.id__', False), None))]), 'where': [(False, 1, (0, (0, '__battle.id__', False), None), None, None)], 'groupBy': [(0, '__battle.date__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__battle.date__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
{'from': {'table_units': [('table_unit', '__ship__'), ('table_unit', '__battle__')], 'conds': [(False, 2, (0, (0, '__ship.lost_in_battle__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(4, (0, (0, '__ship.tonnage__', False), None))]), 'where': [(False, 3, (0, (0, '__ship.id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__battle__'), ('table_unit', '__ship__')], 'conds': [(False, 2, (0, (0, '__battle.id__', False), None), (0, '__ship.lost_in_battle__', False), None)], 'join_types': [2]}, 'select': (True, [(0, (0, (0, '__battle.id__', False), None))]), 'where': [(False, 1, (0, (0, '__battle.date__', False), None), '"1000-01-01"', '"1500-12-31"'), 'or', (False, 2, (0, (0, '__battle.result__', False), None), '"victory"', None), 'or', (False, 10, (0, (0, '__ship.id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT b.id FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE (b.date BETWEEN '1000-01-01' AND '1500-12-31') OR b.result = 'victory' OR s.id IS NULL;
Execution error extra
Predicted SQL:  SELECT DISTINCT b.id FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE (b.date BETWEEN '1000-01-01' AND '1500-12-31') OR b.result = 'victory' OR s.id IS NULL;
Gold SQL:  SELECT id FROM battle WHERE date BETWEEN '1000' AND '1500' OR result = 'Victory' OR id NOT IN (SELECT lost_in_battle FROM ship)
{'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__battle.id__', False), None))]), 'where': [(False, 1, (0, (0, '__battle.date__', False), None), None, None), 'or', (False, 2, (0, (0, '__battle.result__', False), None), None, None), 'or', (True, 8, (0, (0, '__battle.id__', False), None), {'from': {'table_units': [('table_unit', '__ship__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__ship.lost_in_battle__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__battle.name__', False), None))]), 'where': [(False, 3, (0, (0, '__battle.date__', False), None), '"1945-12-31"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT name FROM battle WHERE date > '1945-12-31';
{'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__battle.name__', False), None))]), 'where': [(False, 3, (0, (0, '__battle.date__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__battle__'), ('table_unit', '__ship__'), ('table_unit', '__death__')], 'conds': [(False, 2, (0, (0, '__battle.id__', False), None), (0, '__ship.lost_in_battle__', False), None), 'and', (False, 2, (0, (0, '__ship.id__', False), None), (0, '__death.caused_by_ship_id__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__battle.name__', False), None)), (0, (0, (0, '__ship.name__', False), None)), (0, (0, (0, '__death.note__', False), None))]), 'where': [(False, 1, (0, (0, '__battle.date__', False), None), '"2000"', '"2020"'), 'and', (False, 2, (0, (0, '__ship.disposition_of_ship__', False), None), '"sunk"', None), 'and', (False, 3, (0, (0, '__death.killed__', False), None), 10.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT b.name AS battle_name, s.name AS ship_name, d.note AS death_note FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id WHERE b.date BETWEEN '2000' AND '2020' AND s.disposition_of_ship = 'sunk' AND d.killed > 10;
Both are empty
GT:  SELECT T1.name, T2.name, T3.note FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id WHERE T1.date BETWEEN '2000-01-01' AND '2020-12-31' AND T2.disposition_of_ship = 'sunk' AND T3.killed > 10
Pred:  SELECT b.name AS battle_name, s.name AS ship_name, d.note AS death_note FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id WHERE b.date BETWEEN '2000' AND '2020' AND s.disposition_of_ship = 'sunk' AND d.killed > 10;
{'from': {'table_units': [('table_unit', '__battle__'), ('table_unit', '__ship__'), ('table_unit', '__death__')], 'conds': [(False, 2, (0, (0, '__battle.id__', False), None), None, None), 'and', (False, 2, (0, (0, '__ship.id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__battle.name__', False), None)), (0, (0, (0, '__ship.name__', False), None)), (0, (0, (0, '__death.note__', False), None))]), 'where': [(False, 1, (0, (0, '__battle.date__', False), None), None, None), 'and', (False, 2, (0, (0, '__ship.disposition_of_ship__', False), None), None, None), 'and', (False, 3, (0, (0, '__death.killed__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__battle.name__', True), None)), (3, (0, (0, '__battle.latin_commander__', True), None)), (3, (0, (0, '__all__', False), None))]), 'where': [(False, 1, (0, (0, '__battle.id__', False), None), 6.0, 10.0)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT name) AS distinct_battle_names, COUNT(DISTINCT latin_commander) AS distinct_latin_commanders, COUNT(*) AS total_battles FROM battle WHERE id BETWEEN 6 AND 10;
Execution error medium
Predicted SQL:  SELECT COUNT(DISTINCT name) AS distinct_battle_names, COUNT(DISTINCT latin_commander) AS distinct_latin_commanders, COUNT(*) AS total_battles FROM battle WHERE id BETWEEN 6 AND 10;
Gold SQL:  SELECT COUNT(DISTINCT name), COUNT(DISTINCT latin_commander), COUNT(id) FROM battle LIMIT 5
{'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__battle.name__', True), None)), (3, (0, (0, '__battle.latin_commander__', True), None)), (3, (0, (0, '__battle.id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT name FROM battle WHERE date BETWEEN 1800 AND 1900 OR latin_commander = 'John' ORDER BY date DESC LIMIT 10
Pred:  SELECT name FROM battle WHERE (date BETWEEN '1800-01-01' AND '1900-12-31' OR latin_commander = 'John') ORDER BY date DESC LIMIT 10 OFFSET 10;
{'from': {'table_units': [('table_unit', '__battle__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__battle.name__', False), None))]), 'where': [(False, 1, (0, (0, '__battle.date__', False), None), None, None), 'or', (False, 2, (0, (0, '__battle.latin_commander__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__battle.date__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__all__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(*) FROM singer;
{'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__singer.singer_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), (0, '__song.singer_id__', False), None)], 'join_types': [2]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (5, (0, (0, '__song.sales__', False), None))]), 'where': [], 'groupBy': [(0, '__singer.singer_id__', False), (0, '__singer.name__', False)], 'having': [(False, 2, (0, (0, '__singer.citizenship__', False), None), '"USA"', None), 'or', (False, 5, (0, (0, '__singer.net_worth_millions__', False), None), 10.0, None), 'or', (False, 3, (5, (0, '__song.sales__', False), None), 10000.0, None)], 'orderBy': ('asc', [(0, (0, '__singer.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT s.Name, AVG(so.Sales) AS Avg_Sales FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING s.Citizenship = 'USA' OR s.Net_Worth_Millions >= 10 OR AVG(so.Sales) > 10000 ORDER BY s.Name ASC;
Execution error extra
Predicted SQL:  SELECT s.Name, AVG(so.Sales) AS Avg_Sales FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING s.Citizenship = 'USA' OR s.Net_Worth_Millions >= 10 OR AVG(so.Sales) > 10000 ORDER BY s.Name ASC;
Gold SQL:  SELECT s1.Name, AVG(s2.Sales) FROM singer s1 JOIN song s2 ON s1.Singer_ID = s2.Singer_ID WHERE s2.Sales > 10000 OR s1.Citizenship = 'USA' OR NOT EXISTS (SELECT 1 FROM singer s3 WHERE s3.Singer_ID = s1.Singer_ID AND s3.Net_Worth_Millions < 10) ORDER BY s1.Name ASC
{'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (5, (0, (0, '__song.sales__', False), None))]), 'where': [(False, 3, (0, (0, '__song.sales__', False), None), None, None), 'or', (False, 2, (0, (0, '__singer.citizenship__', False), None), None, None), 'or', (True, 11, None, {'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__singer.singer_id__', False), None), None, None), 'and', (False, 4, (0, (0, '__singer.net_worth_millions__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__singer.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.singer_id__', False), None))]), 'where': [(False, 2, (0, (0, '__singer.citizenship__', False), None), '"USA"', None), 'and', (False, 1, (0, (0, '__singer.birth_year__', False), None), 1980.0, 1990.0), 'and', (False, 3, (0, (0, '__singer.net_worth_millions__', False), None), 10.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Singer_ID FROM singer WHERE Citizenship = 'USA' AND Birth_Year BETWEEN 1980 AND 1990 AND Net_Worth_Millions > 10;
Both are empty
GT:  SELECT Singer_ID FROM singer WHERE Birth_Year BETWEEN 1980 AND 1990 AND Citizenship = 'USA' AND Net_Worth_Millions > 10
Pred:  SELECT Singer_ID FROM singer WHERE Citizenship = 'USA' AND Birth_Year BETWEEN 1980 AND 1990 AND Net_Worth_Millions > 10;
{'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.singer_id__', False), None))]), 'where': [(False, 1, (0, (0, '__singer.birth_year__', False), None), None, None), 'and', (False, 2, (0, (0, '__singer.citizenship__', False), None), None, None), 'and', (False, 3, (0, (0, '__singer.net_worth_millions__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT T1.Name, COUNT( T2.Title), SUM(T3.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN song AS T3 ON T2.Singer_ID = T3.Singer_ID WHERE T1.Net_Worth_Millions > 50 GROUP BY T1.Name ORDER BY T1.Name ASC
Pred:  SELECT s.Name, COUNT( so.Title) AS Number_of_Songs, COALESCE(SUM(so.Sales), 0) AS Total_Sales FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 50 GROUP BY s.Singer_ID ORDER BY s.Name ASC;
{'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), None, None), 'and', (False, 2, (0, (0, '__song.singer_id__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (3, (0, (0, '__song.title__', True), None)), (4, (0, (0, '__song.sales__', False), None))]), 'where': [(False, 3, (0, (0, '__singer.net_worth_millions__', False), None), None, None)], 'groupBy': [(0, '__singer.name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__singer.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__song__'), ('table_unit', '__singer__')], 'conds': [(False, 2, (0, (0, '__song.singer_id__', False), None), (0, '__singer.singer_id__', False), None)], 'join_types': [0]}, 'select': (True, [(0, (0, (0, '__song.title__', False), None)), (0, (0, (0, '__song.sales__', False), None))]), 'where': [(False, 1, (0, (0, '__song.highest_position__', False), None), 1.0, 10.0), 'and', (False, 3, (0, (0, '__song.sales__', False), None), 1000000.0, None), 'and', (False, 5, (0, (0, '__singer.net_worth_millions__', False), None), 10.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__song.sales__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT s.Title, s.Sales FROM song s JOIN singer sg ON s.Singer_ID = sg.Singer_ID WHERE s.Highest_Position BETWEEN 1 AND 10 AND s.Sales > 1000000 AND sg.Net_Worth_Millions >= 10 ORDER BY s.Sales ASC;
Execution error extra
Predicted SQL:  SELECT DISTINCT s.Title, s.Sales FROM song s JOIN singer sg ON s.Singer_ID = sg.Singer_ID WHERE s.Highest_Position BETWEEN 1 AND 10 AND s.Sales > 1000000 AND sg.Net_Worth_Millions >= 10 ORDER BY s.Sales ASC;
Gold SQL:  SELECT COUNT(DISTINCT T1.Title), T1.Sales FROM song AS T1 WHERE T1.Highest_Position BETWEEN 1 AND 10 AND T1.Sales > 1000000 AND NOT EXISTS (SELECT 1 FROM singer AS T2 WHERE T2.Singer_ID = T1.Singer_ID AND T2.Net_Worth_Millions < 10) ORDER BY T1.Sales ASC
{'from': {'table_units': [('table_unit', '__song__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__song.title__', True), None)), (0, (0, (0, '__song.sales__', False), None))]), 'where': [(False, 1, (0, (0, '__song.highest_position__', False), None), None, None), 'and', (False, 3, (0, (0, '__song.sales__', False), None), None, None), 'and', (True, 11, None, {'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__singer.singer_id__', False), None), None, None), 'and', (False, 4, (0, (0, '__singer.net_worth_millions__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__song.sales__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), (0, '__song.singer_id__', False), None)], 'join_types': [2]}, 'select': (True, [(0, (0, (0, '__singer.singer_id__', False), None))]), 'where': [(False, 2, (0, (0, '__singer.citizenship__', False), None), '"USA"', None), 'or', (False, 3, (0, (0, '__singer.birth_year__', False), None), 1980.0, None), 'or', (False, 3, (0, (0, '__song.sales__', False), None), 1000000.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT S.Singer_ID FROM singer S LEFT JOIN song SS ON S.Singer_ID = SS.Singer_ID WHERE S.Citizenship = 'USA' OR S.Birth_Year > 1980 OR SS.Sales > 1000000;
{'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.singer_id__', False), None))]), 'where': [(False, 2, (0, (0, '__singer.citizenship__', False), None), None, None), 'or', (False, 3, (0, (0, '__singer.birth_year__', False), None), None, None), 'or', (False, 8, (0, (0, '__singer.singer_id__', False), None), {'from': {'table_units': [('table_unit', '__song__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.singer_id__', False), None))]), 'where': [(False, 3, (0, (0, '__song.sales__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), (0, '__song.singer_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (3, (0, (0, '__all__', False), None))]), 'where': [(False, 2, (0, (0, '__song.highest_position__', False), None), 1.0, None)], 'groupBy': [(0, '__singer.name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__singer.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT s.Name, COUNT(*) AS Number_of_Number_One_Songs FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position = 1 GROUP BY s.Name ORDER BY s.Name ASC;
{'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (3, (0, (0, '__song.song_id__', True), None))]), 'where': [(False, 2, (0, (0, '__song.highest_position__', False), None), None, None)], 'groupBy': [(0, '__singer.name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__singer.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), (0, '__song.singer_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (0, (0, (0, '__singer.net_worth_millions__', False), None))]), 'where': [(False, 2, (0, (0, '__song.title__', False), None), '"Hello"', None), 'and', (False, 2, (0, (0, '__singer.citizenship__', False), None), '"USA"', None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__singer.net_worth_millions__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT s.Name, s.Net_Worth_Millions FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Title = 'Hello' AND s.Citizenship = 'USA' ORDER BY s.Net_Worth_Millions DESC;
Both are empty
GT:  SELECT T1.Name FROM singer AS T1 WHERE T1.Citizenship = 'USA' AND EXISTS (SELECT 1 FROM song AS T2 WHERE T2.Title = 'Hello' AND T2.Singer_ID = T1.Singer_ID) ORDER BY T1.Net_Worth_Millions DESC
Pred:  SELECT s.Name, s.Net_Worth_Millions FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Title = 'Hello' AND s.Citizenship = 'USA' ORDER BY s.Net_Worth_Millions DESC;
{'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None))]), 'where': [(False, 2, (0, (0, '__singer.citizenship__', False), None), None, None), 'and', (False, 11, None, {'from': {'table_units': [('table_unit', '__song__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__song.title__', False), None), None, None), 'and', (False, 2, (0, (0, '__song.singer_id__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__singer.net_worth_millions__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), (0, '__song.singer_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (4, (0, (0, '__song.sales__', False), None))]), 'where': [(False, 6, (0, (0, '__singer.net_worth_millions__', False), None), 50.0, None)], 'groupBy': [(0, '__singer.singer_id__', False), (0, '__singer.name__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__song.sales__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions <= 50 GROUP BY s.Singer_ID, s.Name ORDER BY Total_Sales DESC;
Execution error hard
Predicted SQL:  SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions <= 50 GROUP BY s.Singer_ID, s.Name ORDER BY Total_Sales DESC;
Gold SQL:  SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Net_Worth_Millions <= 50 ORDER BY SUM(T2.Sales) DESC
{'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (4, (0, (0, '__song.sales__', False), None))]), 'where': [(False, 6, (0, (0, '__singer.net_worth_millions__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(4, (0, '__song.sales__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.singer_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__singer.singer_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Singer_ID FROM singer ORDER BY Singer_ID DESC;
{'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.singer_id__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__singer.singer_id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), (0, '__song.singer_id__', False), None)], 'join_types': [2]}, 'select': (True, [(0, (0, (0, '__singer.singer_id__', False), None)), (0, (0, (0, '__singer.name__', False), None))]), 'where': [(False, 3, (0, (0, '__singer.net_worth_millions__', False), None), 10.0, None), 'or', (False, 3, (0, (0, '__song.sales__', False), None), 1000000.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT s.Singer_ID, s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 10 OR so.Sales > 1e6;
Partial answer True
Not equal but Partially Correct:
SELECT Singer_ID FROM singer WHERE Net_Worth_Millions > 10 OR EXISTS (SELECT Singer_ID FROM song WHERE singer.Singer_ID = song.Singer_ID AND Sales > 1000000)
SELECT  s.Singer_ID, s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 10 OR so.Sales > 1e6;
---------------------
Execution error extra
Predicted SQL:  SELECT DISTINCT s.Singer_ID, s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 10 OR so.Sales > 1e6;
Gold SQL:  SELECT Singer_ID FROM singer WHERE Net_Worth_Millions > 10 OR EXISTS (SELECT Singer_ID FROM song WHERE singer.Singer_ID = song.Singer_ID AND Sales > 1000000)
{'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.singer_id__', False), None))]), 'where': [(False, 3, (0, (0, '__singer.net_worth_millions__', False), None), None, None), 'or', (False, 11, None, {'from': {'table_units': [('table_unit', '__song__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.singer_id__', False), None))]), 'where': [(False, 2, (0, (0, '__singer.singer_id__', False), None), None, None), 'and', (False, 3, (0, (0, '__song.sales__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), (0, '__song.singer_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (4, (0, (0, '__song.sales__', False), None))]), 'where': [(False, 5, (0, (0, '__singer.net_worth_millions__', False), None), 10.0, None)], 'groupBy': [(0, '__singer.name__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__singer.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT s.Name, SUM(so.Sales) AS Total_Song_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions >= 10 GROUP BY s.Name ORDER BY s.Name ASC;
Execution error hard
Predicted SQL:  SELECT s.Name, SUM(so.Sales) AS Total_Song_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions >= 10 GROUP BY s.Name ORDER BY s.Name ASC;
Gold SQL:  SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Net_Worth_Millions >= 10 ORDER BY T1.Name ASC
{'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (4, (0, (0, '__song.sales__', False), None))]), 'where': [(False, 5, (0, (0, '__singer.net_worth_millions__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__singer.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), (0, '__song.singer_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (0, (0, (0, '__song.title__', False), None))]), 'where': [(False, 3, (0, (0, '__singer.net_worth_millions__', False), None), 50.0, None), 'and', (False, 1, (0, (0, '__song.sales__', False), None), 100000.0, 200000.0), 'and', (False, 4, (0, (0, '__song.highest_position__', False), None), 10.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 50 AND so.Sales BETWEEN 100000 AND 200000 AND so.Highest_Position < 10;
Both are empty
GT:  SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 50 AND so.Sales BETWEEN 100000 AND 200000 AND so.Highest_Position < 10
Pred:  SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 50 AND so.Sales BETWEEN 100000 AND 200000 AND so.Highest_Position < 10;
{'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None)), (0, (0, (0, '__song.title__', False), None))]), 'where': [(False, 3, (0, (0, '__singer.net_worth_millions__', False), None), None, None), 'and', (False, 1, (0, (0, '__song.sales__', False), None), None, None), 'and', (False, 4, (0, (0, '__song.highest_position__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None))]), 'where': [(False, 12, (0, (0, '__singer.name__', False), None), '"Adele"', None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__singer.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name FROM singer WHERE Name <> 'Adele' ORDER BY Name ASC;
{'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None))]), 'where': [(False, 7, (0, (0, '__singer.name__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__singer.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__singer__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None))]), 'where': [(False, 3, (0, (0, '__singer.net_worth_millions__', False), None), 10.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name FROM singer WHERE Net_Worth_Millions > 10;
Execution error medium
Predicted SQL:  SELECT Name FROM singer WHERE Net_Worth_Millions > 10;
Gold SQL:  SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Net_Worth_Millions > 10
{'from': {'table_units': [('table_unit', '__singer__'), ('table_unit', '__song__')], 'conds': [(False, 2, (0, (0, '__singer.singer_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__singer.name__', False), None))]), 'where': [(False, 3, (0, (0, '__singer.net_worth_millions__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__song__'), ('table_unit', '__singer__')], 'conds': [(False, 2, (0, (0, '__song.singer_id__', False), None), (0, '__singer.singer_id__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__song.title__', False), None))]), 'where': [(False, 2, (0, (0, '__singer.citizenship__', False), None), '"USA"', None), 'and', (False, 3, (0, (0, '__singer.net_worth_millions__', False), None), 50.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__song.title__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT s.Title FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID WHERE si.Citizenship = 'USA' AND si.Net_Worth_Millions > 50 ORDER BY s.Title ASC LIMIT 10;
Both are empty
GT:  SELECT T1.Title FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Net_Worth_Millions > 50 AND T2.Citizenship = 'USA' ORDER BY T1.Title ASC LIMIT 10
Pred:  SELECT s.Title FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID WHERE si.Citizenship = 'USA' AND si.Net_Worth_Millions > 50 ORDER BY s.Title ASC LIMIT 10;
{'from': {'table_units': [('table_unit', '__song__'), ('table_unit', '__singer__')], 'conds': [(False, 2, (0, (0, '__song.singer_id__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__song.title__', False), None))]), 'where': [(False, 3, (0, (0, '__singer.net_worth_millions__', False), None), None, None), 'and', (False, 2, (0, (0, '__singer.citizenship__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__song.title__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error medium
Predicted SQL:  SELECT Fname, LName FROM Student WHERE Age < 20 ORDER BY LName, Fname LIMIT 5 OFFSET 5;
Gold SQL:  SELECT Fname, LName FROM Student WHERE Age < 20 LIMIT 5
{'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.fname__', False), None)), (0, (0, (0, '__student.lname__', False), None))]), 'where': [(False, 4, (0, (0, '__student.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.lname__', False), None))]), 'where': [(False, 1, (0, (0, '__student.age__', False), None), 18.0, 25.0)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__student.lname__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT LName FROM Student WHERE Age BETWEEN 18 AND 25 ORDER BY LName DESC;
{'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.lname__', False), None))]), 'where': [(False, 1, (0, (0, '__student.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__student.lname__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.lname__', False), None)), (4, (0, (0, '__student.age__', False), None))]), 'where': [(False, 2, (0, (0, '__student.sex__', False), None), '"M"', None)], 'groupBy': [(0, '__student.lname__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__student.age__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT LName, SUM(Age) AS TotalAge FROM Student WHERE Sex = 'M' GROUP BY LName ORDER BY TotalAge DESC;
{'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.lname__', False), None)), (4, (0, (0, '__student.age__', False), None))]), 'where': [(False, 2, (0, (0, '__student.sex__', False), None), None, None)], 'groupBy': [(0, '__student.lname__', False)], 'having': [], 'orderBy': ('desc', [(4, (0, '__student.age__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__student__'), ('table_unit', '__has_pet__'), ('table_unit', '__pets__')], 'conds': [(False, 2, (0, (0, '__student.stuid__', False), None), (0, '__has_pet.stuid__', False), None), 'and', (False, 2, (0, (0, '__has_pet.petid__', False), None), (0, '__pets.petid__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(3, (0, (0, '__pets.petid__', True), None))]), 'where': [(False, 3, (0, (0, '__student.age__', False), None), 20.0, None), 'and', (False, 1, (0, (0, '__pets.pet_age__', False), None), 2.0, 5.0)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT Pets.PetID) AS CountOfPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20 AND Pets.pet_age BETWEEN 2 AND 5;
{'from': {'table_units': [('table_unit', '__pets__'), ('table_unit', '__has_pet__'), ('table_unit', '__student__')], 'conds': [(False, 2, (0, (0, '__pets.petid__', False), None), None, None), 'and', (False, 2, (0, (0, '__has_pet.stuid__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(3, (0, (0, '__pets.petid__', True), None))]), 'where': [(False, 1, (0, (0, '__pets.pet_age__', False), None), None, None), 'and', (False, 3, (0, (0, '__student.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__pets.petid__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__student__'), ('table_unit', '__has_pet__'), ('table_unit', '__pets__')], 'conds': [(False, 2, (0, (0, '__student.stuid__', False), None), (0, '__has_pet.stuid__', False), None), 'and', (False, 2, (0, (0, '__has_pet.petid__', False), None), (0, '__pets.petid__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__student.stuid__', False), None)), (0, (0, (0, '__student.lname__', False), None))]), 'where': [(False, 3, (0, (0, '__pets.weight__', False), None), {'from': {'table_units': [('table_unit', '__pets__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__pets.weight__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Student.StuID, Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > (SELECT AVG(weight) FROM Pets)
{'from': {'table_units': [('table_unit', '__student__'), ('table_unit', '__has_pet__'), ('table_unit', '__pets__')], 'conds': [(False, 2, (0, (0, '__student.stuid__', False), None), None, None), 'and', (False, 2, (0, (0, '__has_pet.petid__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__student.stuid__', False), None)), (0, (0, (0, '__student.lname__', False), None))]), 'where': [(False, 3, (0, (0, '__pets.weight__', False), None), {'from': {'table_units': [('table_unit', '__pets__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__pets.weight__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.fname__', False), None))]), 'where': [(False, 3, (0, (0, '__student.age__', False), None), 20.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Fname FROM Student WHERE Age > 20;
{'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.fname__', False), None))]), 'where': [(False, 3, (0, (0, '__student.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__student__'), ('table_unit', '__has_pet__'), ('table_unit', '__pets__')], 'conds': [(False, 2, (0, (0, '__student.stuid__', False), None), (0, '__has_pet.stuid__', False), None), 'and', (False, 2, (0, (0, '__has_pet.petid__', False), None), (0, '__pets.petid__', False), None)], 'join_types': [2, 0]}, 'select': (True, [(0, (0, (0, '__student.stuid__', False), None))]), 'where': [(False, 3, (0, (0, '__student.age__', False), None), 20.0, None), 'or', (False, 2, (0, (0, '__pets.pettype__', False), None), '"dog"', None), 'or', (False, 4, (0, (0, '__pets.pet_age__', False), None), {'from': {'table_units': [('table_unit', '__pets__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__pets.pet_age__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuId LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20 OR p.PetType = 'dog' OR p.pet_age < (SELECT AVG(pet_age) FROM Pets)
Execution error extra
Predicted SQL:  SELECT DISTINCT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuId LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20 OR p.PetType = 'dog' OR p.pet_age < (SELECT AVG(pet_age) FROM Pets)
Gold SQL:  SELECT S1.StuID FROM Student S1 JOIN Has_Pet S2 ON S1.StuID = S2.StuID JOIN Pets S3 ON S2.PetID = S3.PetID WHERE S1.Age > 20 OR S3.PetType = 'dog' OR S3.pet_age < (SELECT AVG(pet_age) FROM Pets)
{'from': {'table_units': [('table_unit', '__student__'), ('table_unit', '__has_pet__'), ('table_unit', '__pets__')], 'conds': [(False, 2, (0, (0, '__student.stuid__', False), None), None, None), 'and', (False, 2, (0, (0, '__has_pet.petid__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__student.stuid__', False), None))]), 'where': [(False, 3, (0, (0, '__student.age__', False), None), None, None), 'or', (False, 2, (0, (0, '__pets.pettype__', False), None), None, None), 'or', (False, 4, (0, (0, '__pets.pet_age__', False), None), {'from': {'table_units': [('table_unit', '__pets__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__pets.pet_age__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.fname__', False), None))]), 'where': [(False, 5, (0, (0, '__student.age__', False), None), 20.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Fname FROM Student WHERE Age >= 20;
{'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.fname__', False), None))]), 'where': [(False, 5, (0, (0, '__student.age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
{'from': {'table_units': [('table_unit', '__pets__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__pets.petid__', False), None))]), 'where': [(False, 1, (0, (0, '__pets.weight__', False), None), None, None), 'and', (False, 3, (0, (0, '__pets.pet_age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.lname__', False), None))]), 'where': [(False, 2, (0, (0, '__student.sex__', False), None), '"F"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT LName FROM Student WHERE Sex = 'F';
Execution error easy
Predicted SQL:  SELECT LName FROM Student WHERE Sex = 'F';
Gold SQL:  SELECT T1.LName FROM Student AS T1 WHERE T1.Sex != 'Male'
{'from': {'table_units': [('table_unit', '__student__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__student.lname__', False), None))]), 'where': [(False, 7, (0, (0, '__student.sex__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT S.LName, S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.pet_age > 5 ORDER BY S.LName ASC LIMIT 10
Pred:  SELECT s.LName, s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 5 ORDER BY s.LName ASC LIMIT -1 OFFSET 10;
{'from': {'table_units': [('table_unit', '__student__'), ('table_unit', '__has_pet__'), ('table_unit', '__pets__')], 'conds': [(False, 2, (0, (0, '__student.stuid__', False), None), None, None), 'and', (False, 2, (0, (0, '__has_pet.petid__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__student.lname__', False), None)), (0, (0, (0, '__student.fname__', False), None))]), 'where': [(False, 3, (0, (0, '__pets.pet_age__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__student.lname__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__flights__'), ('table_unit', '__airports__'), ('table_unit', '__airports__'), ('table_unit', '__airlines__')], 'conds': [(False, 2, (0, (0, '__flights.sourceairport__', False), None), (0, '__airports.airportcode__', False), None), 'and', (False, 2, (0, (0, '__flights.destairport__', False), None), (0, '__airports.airportcode__', False), None), 'and', (False, 2, (0, (0, '__flights.airline__', False), None), (0, '__airlines.uid__', False), None)], 'join_types': [0, 0, 0]}, 'select': (True, [(0, (0, (0, '__airlines.airline__', False), None))]), 'where': [(False, 7, (0, (0, '__airports.country__', False), None), (0, '__airports.country__', False), None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT al.Airline FROM flights f JOIN airports ap1 ON f.SourceAirport = ap1.AirportCode JOIN airports ap2 ON f.DestAirport = ap2.AirportCode JOIN airlines al ON f.Airline = al.uid WHERE ap1.Country != ap2.Country;
Both are empty
GT:  SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline JOIN airports AS T3 ON T3.AirportCode = T2.DestAirport WHERE NOT EXISTS (SELECT 1 FROM airports AS T4 WHERE T4.AirportCode = T3.AirportCode AND T4.Country = T1.Country)
Pred:  SELECT  al.Airline FROM flights f JOIN airports ap1 ON f.SourceAirport = ap1.AirportCode JOIN airports ap2 ON f.DestAirport = ap2.AirportCode JOIN airlines al ON f.Airline = al.uid WHERE ap1.Country != ap2.Country;
{'from': {'table_units': [('table_unit', '__airlines__'), ('table_unit', '__flights__'), ('table_unit', '__airports__')], 'conds': [(False, 2, (0, (0, '__airlines.uid__', False), None), None, None), 'and', (False, 2, (0, (0, '__airports.airportcode__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__airlines.airline__', False), None))]), 'where': [(True, 11, None, {'from': {'table_units': [('table_unit', '__airports__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__airports.airportcode__', False), None), None, None), 'and', (False, 2, (0, (0, '__airports.country__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT T1.Airline, T2.AirportName FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.FlightNo <= 100 ORDER BY T1.Airline DESC LIMIT 10
Pred:  SELECT a.Airline, ap.AirportName AS DestinationAirportName FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE f.FlightNo <= 100 ORDER BY a.Airline DESC LIMIT 10 OFFSET 10;
{'from': {'table_units': [('table_unit', '__flights__'), ('table_unit', '__airports__')], 'conds': [(False, 2, (0, (0, '__flights.destairport__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__flights.airline__', False), None)), (0, (0, (0, '__airports.airportname__', False), None))]), 'where': [(False, 6, (0, (0, '__flights.flightno__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__flights.airline__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error medium
Predicted SQL:  SELECT Airline FROM airlines WHERE uid < 100 ORDER BY uid LIMIT -1 OFFSET 5;
Gold SQL:  SELECT AVG(Airline) FROM airlines WHERE uid < 100 LIMIT 5
{'from': {'table_units': [('table_unit', '__airlines__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__airlines.airline__', False), None))]), 'where': [(False, 4, (0, (0, '__airlines.uid__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__flights__'), ('table_unit', '__airlines__')], 'conds': [(False, 2, (0, (0, '__flights.airline__', False), None), (0, '__airlines.uid__', False), None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__airlines.airline__', False), None)), (5, (0, (0, '__flights.flightno__', False), None))]), 'where': [], 'groupBy': [(0, '__flights.airline__', False), (0, '__airlines.airline__', False)], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT a.Airline, AVG(f.FlightNo) AS AverageFlightNumber FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline, a.Airline;
Execution error medium
Predicted SQL:  SELECT a.Airline, AVG(f.FlightNo) AS AverageFlightNumber FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline, a.Airline;
Gold SQL:  SELECT Airline, AVG(FlightNo) FROM flights GROUP BY Airline
{'from': {'table_units': [('table_unit', '__flights__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__flights.airline__', False), None)), (5, (0, (0, '__flights.flightno__', False), None))]), 'where': [], 'groupBy': [(0, '__flights.airline__', False)], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__airlines__')], 'conds': [], 'join_types': []}, 'select': (True, [(0, (0, (0, '__airlines.airline__', False), None))]), 'where': [(False, 2, (0, (0, '__airlines.country__', False), None), '"US"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [('table_unit', '__airlines__')], 'conds': [], 'join_types': []}, 'select': (True, [(0, (0, (0, '__airlines.airline__', False), None))]), 'where': [(False, 9, (0, (0, '__airlines.abbreviation__', False), None), '"A%"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': {'from': {'table_units': [('table_unit', '__airlines__'), ('table_unit', '__flights__')], 'conds': [(False, 2, (0, (0, '__airlines.uid__', False), None), (0, '__flights.airline__', False), None)], 'join_types': [0]}, 'select': (True, [(0, (0, (0, '__airlines.airline__', False), None))]), 'where': [(False, 2, (0, (0, '__flights.sourceairport__', False), None), '"JFK"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, 'except': None, 'union_all': None}, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT airlines.Airline FROM airlines WHERE Country = 'US' UNION  SELECT DISTINCT airlines.Airline FROM airlines WHERE Abbreviation LIKE 'A%' UNION  SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'JFK';
Execution error extra
Predicted SQL:  SELECT DISTINCT airlines.Airline FROM airlines WHERE Country = 'US' UNION  SELECT DISTINCT airlines.Airline FROM airlines WHERE Abbreviation LIKE 'A%' UNION  SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'JFK';
Gold SQL:  SELECT Airline FROM airlines WHERE Country = 'USA' OR Abbreviation LIKE 'A%' OR uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'JFK')
{'from': {'table_units': [('table_unit', '__airlines__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__airlines.airline__', False), None))]), 'where': [(False, 2, (0, (0, '__airlines.country__', False), None), None, None), 'or', (False, 9, (0, (0, '__airlines.abbreviation__', False), None), None, None), 'or', (False, 8, (0, (0, '__airlines.uid__', False), None), {'from': {'table_units': [('table_unit', '__flights__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__airlines.airline__', False), None))]), 'where': [(False, 2, (0, (0, '__flights.sourceairport__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__flights__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__flights.destairport__', True), None))]), 'where': [(False, 2, (0, (0, '__flights.airline__', False), None), 101.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT DestAirport) AS NumberOfDestinations FROM flights WHERE Airline = 101;
{'from': {'table_units': [('table_unit', '__flights__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__flights.destairport__', False), None))]), 'where': [(False, 2, (0, (0, '__flights.airline__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Both are empty
GT:  SELECT AirportName FROM airports AS T1 WHERE City BETWEEN 'New York' AND 'Los Angeles' ORDER BY AirportName ASC LIMIT 10
Pred:  SELECT AirportName FROM airports WHERE City >= 'New York' AND City <= 'Los Angeles' ORDER BY City ASC, AirportName ASC LIMIT 10 OFFSET 10;
{'from': {'table_units': [('table_unit', '__airports__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__airports.airportname__', False), None))]), 'where': [(False, 1, (0, (0, '__airports.city__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__airports.airportname__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__airlines__'), ('table_unit', '__flights__')], 'conds': [(False, 2, (0, (0, '__airlines.uid__', False), None), (0, '__flights.airline__', False), None)], 'join_types': [0]}, 'select': (True, [(0, (0, (0, '__airlines.airline__', False), None))]), 'where': [(False, 2, (0, (0, '__airlines.country__', False), None), '"USA"', None), 'and', (False, 2, (0, (0, '__flights.destairport__', False), None), '"JFK"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE a.Country = 'USA' AND f.DestAirport = 'JFK';
Both are empty
GT:  SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Country = 'USA' AND T2.DestAirport = 'JFK'
Pred:  SELECT  a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE a.Country = 'USA' AND f.DestAirport = 'JFK';
{'from': {'table_units': [('table_unit', '__airlines__'), ('table_unit', '__flights__')], 'conds': [(False, 2, (0, (0, '__airlines.uid__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__airlines.airline__', False), None))]), 'where': [(False, 2, (0, (0, '__airlines.country__', False), None), None, None), 'and', (False, 2, (0, (0, '__flights.destairport__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__airlines__'), ('table_unit', '__flights__'), ('table_unit', '__airports__')], 'conds': [(False, 2, (0, (0, '__airlines.uid__', False), None), (0, '__flights.airline__', False), None), 'and', (False, 2, (0, (0, '__flights.sourceairport__', False), None), (0, '__airports.airportcode__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__airlines.airline__', False), None)), (0, (0, (0, '__airports.airportname__', False), None))]), 'where': [(False, 5, (0, (0, '__airlines.uid__', False), None), 2.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__airlines.airline__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT a.Airline AS AirlineName, p.AirportName AS SourceAirportName FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports p ON f.SourceAirport = p.AirportCode WHERE a.uid >= 2 ORDER BY a.Airline DESC;
Both are empty
GT:  SELECT T1.Airline, T2.AirportName FROM airlines AS T1 JOIN flights AS T3 ON T1.uid = T3.Airline JOIN airports AS T2 ON T3.SourceAirport = T2.AirportCode WHERE T1.uid >= 2 ORDER BY T1.Airline DESC
Pred:  SELECT a.Airline AS AirlineName, p.AirportName AS SourceAirportName FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports p ON f.SourceAirport = p.AirportCode WHERE a.uid >= 2 ORDER BY a.Airline DESC;
{'from': {'table_units': [('table_unit', '__airlines__'), ('table_unit', '__flights__'), ('table_unit', '__airports__')], 'conds': [(False, 2, (0, (0, '__airlines.uid__', False), None), None, None), 'and', (False, 2, (0, (0, '__flights.sourceairport__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__airlines.airline__', False), None)), (0, (0, (0, '__airports.airportname__', False), None))]), 'where': [(False, 5, (0, (0, '__airlines.uid__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__airlines.airline__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__airports__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__airports.airportname__', False), None))]), 'where': [(False, 1, (0, (0, '__airports.countryabbrev__', False), None), '"A"', '"M"')], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT AirportName FROM airports WHERE CountryAbbrev BETWEEN 'A' AND 'M';
Both are empty
GT:  SELECT AirportName FROM airports WHERE CountryAbbrev BETWEEN 'A' AND 'M'
Pred:  SELECT AirportName FROM airports WHERE CountryAbbrev BETWEEN 'A' AND 'M';
{'from': {'table_units': [('table_unit', '__airports__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__airports.airportname__', False), None))]), 'where': [(False, 1, (0, (0, '__airports.countryabbrev__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__flights__'), ('table_unit', '__airports__'), ('table_unit', '__airports__')], 'conds': [(False, 2, (0, (0, '__flights.sourceairport__', False), None), (0, '__airports.airportcode__', False), None), 'and', (False, 2, (0, (0, '__flights.destairport__', False), None), (0, '__airports.airportcode__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(3, (0, (0, '__flights.airline__', True), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT f.Airline) AS NumberOfAirlines FROM flights f JOIN airports a1 ON f.SourceAirport = a1.AirportCode JOIN airports a2 ON f.DestAirport = a2.AirportCode;
{'from': {'table_units': [('table_unit', '__flights__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__flights.airline__', True), None))]), 'where': [(False, 8, (0, (0, '__flights.destairport__', False), None), {'from': {'table_units': [('table_unit', '__airports__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__airports.airportcode__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error extra
Predicted SQL:  SELECT COUNT(DISTINCT a.Abbreviation) AS distinct_airline_abbreviations, COUNT(DISTINCT a.Country) AS distinct_airline_countries, f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.DestAirport > 'ABC' GROUP BY f.FlightNo ORDER BY f.FlightNo ASC LIMIT 10 OFFSET 10;
Gold SQL:  SELECT COUNT(DISTINCT T1.Abbreviation), COUNT(DISTINCT T1.Country), COUNT(T2.FlightNo) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport > 'ABC' ORDER BY T2.FlightNo ASC LIMIT 10
{'from': {'table_units': [('table_unit', '__airlines__'), ('table_unit', '__flights__')], 'conds': [(False, 2, (0, (0, '__airlines.uid__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__airlines.abbreviation__', True), None)), (3, (0, (0, '__airlines.country__', True), None)), (3, (0, (0, '__flights.flightno__', False), None))]), 'where': [(False, 3, (0, (0, '__flights.destairport__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__flights.flightno__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error hard
Predicted SQL:  SELECT contestant_number, COUNT(*) AS vote_count FROM VOTES GROUP BY contestant_number ORDER BY vote_count DESC LIMIT 10 OFFSET 10;
Gold SQL:  SELECT contestant_number, COUNT(vote_id), SUM(1) FROM VOTES GROUP BY contestant_number ORDER BY COUNT(vote_id) DESC LIMIT 10
{'from': {'table_units': [('table_unit', '__votes__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__votes.contestant_number__', False), None)), (3, (0, (0, '__votes.vote_id__', False), None)), (4, 1.0)]), 'where': [], 'groupBy': [(0, '__votes.contestant_number__', False)], 'having': [], 'orderBy': ('desc', [(3, (0, '__votes.vote_id__', False), None)]), 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error medium
Predicted SQL:  SELECT area_code FROM AREA_CODE_STATE WHERE area_code >= 500 ORDER BY area_code ASC LIMIT 5 OFFSET 5;
Gold SQL:  SELECT area_code FROM AREA_CODE_STATE WHERE area_code >= 500 LIMIT 5
{'from': {'table_units': [('table_unit', '__area_code_state__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__area_code_state.area_code__', False), None))]), 'where': [(False, 5, (0, (0, '__area_code_state.area_code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__votes__')], 'conds': [], 'join_types': []}, 'select': (True, [(0, (0, (0, '__votes.state__', False), None))]), 'where': [(False, 6, (0, (0, '__votes.contestant_number__', False), None), 10.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT DISTINCT state FROM VOTES WHERE contestant_number <= 10;
{'from': {'table_units': [('table_unit', '__votes__'), ('table_unit', '__contestants__')], 'conds': [(False, 2, (0, (0, '__votes.contestant_number__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__votes.state__', False), None))]), 'where': [(False, 6, (0, (0, '__votes.contestant_number__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__country__'), ('table_unit', '__city__'), ('table_unit', '__countrylanguage__')], 'conds': [(False, 2, (0, (0, '__country.code__', False), None), (0, '__city.countrycode__', False), None), 'and', (False, 2, (0, (0, '__country.code__', False), None), (0, '__countrylanguage.countrycode__', False), None)], 'join_types': [2, 0]}, 'select': (False, [(0, (0, (0, '__country.name__', False), None)), (3, (0, (0, '__countrylanguage.language__', True), None))]), 'where': [(False, 3, (0, (0, '__country.population__', False), None), 1000000.0, None), 'or', (False, 2, (0, (0, '__country.continent__', False), None), '"Asia"', None), 'or', (False, 3, (0, (0, '__city.population__', False), None), 1000000.0, None)], 'groupBy': [(0, '__country.name__', False)], 'having': [], 'orderBy': ('desc', [(0, (0, '__country.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT c.Name AS CountryName, COUNT(DISTINCT cl.Language) AS NumberOfLanguages FROM country c LEFT JOIN city ct ON c.Code = ct.CountryCode LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Population > 1000000 OR c.Continent = 'Asia' OR ct.Population > 1000000 GROUP BY c.Name ORDER BY c.Name DESC;
Execution error extra
Predicted SQL:  SELECT c.Name AS CountryName, COUNT(DISTINCT cl.Language) AS NumberOfLanguages FROM country c LEFT JOIN city ct ON c.Code = ct.CountryCode LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Population > 1000000 OR c.Continent = 'Asia' OR ct.Population > 1000000 GROUP BY c.Name ORDER BY c.Name DESC;
Gold SQL:  SELECT T1.Name, COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Population > 1000000 OR T1.Continent = 'Asia' OR EXISTS (SELECT * FROM city WHERE Population > 1000000 AND CountryCode = T1.Code) ORDER BY T1.Name DESC
{'from': {'table_units': [('table_unit', '__country__'), ('table_unit', '__countrylanguage__')], 'conds': [(False, 2, (0, (0, '__country.code__', False), None), None, None)], 'join_types': [0]}, 'select': (False, [(0, (0, (0, '__country.name__', False), None)), (3, (0, (0, '__countrylanguage.language__', False), None))]), 'where': [(False, 3, (0, (0, '__country.population__', False), None), None, None), 'or', (False, 2, (0, (0, '__country.continent__', False), None), None, None), 'or', (False, 11, None, {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__all__', False), None))]), 'where': [(False, 3, (0, (0, '__country.population__', False), None), None, None), 'and', (False, 2, (0, (0, '__countrylanguage.countrycode__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('desc', [(0, (0, '__country.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__city.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name FROM city ORDER BY Name;
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__city.name__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None))]), 'where': [(False, 4, (0, (0, '__city.population__', False), None), 10000.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name FROM city WHERE Population < 10000 LIMIT 10;
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None))]), 'where': [(False, 4, (0, (0, '__city.population__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.countrycode__', False), None)), (4, (0, (0, '__city.population__', False), None))]), 'where': [(False, 3, (0, (0, '__city.population__', False), None), 10000.0, None), 'and', (False, 2, (0, (0, '__city.district__', False), None), '"district1"', None)], 'groupBy': [(0, '__city.countrycode__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__city.countrycode__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT c.CountryCode, SUM(c.Population) AS TotalPopulation FROM city c WHERE c.Population > 10000 AND c.District = 'district1' GROUP BY c.CountryCode ORDER BY c.CountryCode ASC;
Both are empty
GT:  SELECT T1.CountryCode, SUM(T1.Population) FROM city AS T1 WHERE T1.Population > 10000 AND T1.District = 'district1' AND EXISTS (SELECT T2.Code FROM country AS T2 WHERE T2.Code = T1.CountryCode) GROUP BY T1.CountryCode ORDER BY T1.CountryCode ASC
Pred:  SELECT c.CountryCode, SUM(c.Population) AS TotalPopulation FROM city c WHERE c.Population > 10000 AND c.District = 'district1' GROUP BY c.CountryCode ORDER BY c.CountryCode ASC;
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.countrycode__', False), None)), (4, (0, (0, '__city.population__', False), None))]), 'where': [(False, 3, (0, (0, '__city.population__', False), None), None, None), 'and', (False, 2, (0, (0, '__city.district__', False), None), None, None), 'and', (False, 11, None, {'from': {'table_units': [('table_unit', '__country__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__country.code__', False), None))]), 'where': [(False, 2, (0, (0, '__country.code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [(0, '__city.countrycode__', False)], 'having': [], 'orderBy': ('asc', [(0, (0, '__city.countrycode__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(1, (0, (0, '__city.population__', False), None))]), 'where': [(False, 4, (0, (0, '__city.population__', False), None), 1000000.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT MAX(Population) AS HighestPopulation FROM city WHERE Population < 1000000;
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(1, (0, (0, '__city.population__', False), None))]), 'where': [(False, 4, (0, (0, '__city.population__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(4, (0, (0, '__city.id__', False), None))]), 'where': [(False, 6, (0, (0, '__city.population__', False), None), 100000.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT SUM(ID) FROM city WHERE Population <= 100000;
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(4, (0, (0, '__city.id__', False), None))]), 'where': [(False, 6, (0, (0, '__city.population__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None)), (0, (0, (0, '__city.population__', False), None))]), 'where': [(False, 3, (0, (0, '__city.population__', False), None), {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__city.population__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__city.population__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name, Population FROM city WHERE Population > (SELECT AVG(Population) FROM city) ORDER BY Population ASC;
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None)), (0, (0, (0, '__city.population__', False), None))]), 'where': [(False, 3, (0, (0, '__city.population__', False), None), {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(5, (0, (0, '__city.population__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__city.population__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
Execution error extra
Predicted SQL:  SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.SurfaceArea > 1000000 ORDER BY city.Name LIMIT 10 OFFSET 10;
Gold SQL:  SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE SurfaceArea > 1000000) LIMIT 10
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None))]), 'where': [(False, 8, (0, (0, '__city.countrycode__', False), None), {'from': {'table_units': [('table_unit', '__country__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__country.code__', False), None))]), 'where': [(False, 3, (0, (0, '__country.surfacearea__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': 1, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None)), (0, (0, (0, '__city.population__', False), None))]), 'where': [(False, 4, (0, (0, '__city.population__', False), None), 10000.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name, Population FROM city WHERE Population < 10000;
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None)), (0, (0, (0, '__city.population__', False), None))]), 'where': [(False, 4, (0, (0, '__city.population__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None))]), 'where': [(False, 6, (0, (0, '__city.population__', False), None), 100000.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT Name FROM city WHERE Population <= 100000;
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__city.name__', False), None))]), 'where': [(False, 6, (0, (0, '__city.population__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(2, (0, (0, '__city.population__', False), None))]), 'where': [(False, 6, (0, (0, '__city.population__', False), None), 800000.0, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT MIN(Population) AS SmallestPopulation FROM city WHERE Population <= 800000;
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(2, (0, (0, '__city.population__', False), None))]), 'where': [(False, 6, (0, (0, '__city.population__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__city.population__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
************************
{'except': None, 'from': {'conds': [], 'table_units': []}, 'groupBy': [], 'having': [], 'intersect': None, 'limit': None, 'orderBy': [], 'select': [False, []], 'union': None, 'where': []}
object of type 'OperationalError' has no len()
P_SQL:  {'from': {'table_units': [('table_unit', '__city__'), ('table_unit', '__country__')], 'conds': [(False, 2, (0, (0, '__city.countrycode__', False), None), (0, '__country.code__', False), None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__city.name__', True), None)), (3, (0, (0, '__city.countrycode__', True), None))]), 'where': [(False, 3, (0, (0, '__city.id__', False), None), 100.0, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__city.id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT c.Name) AS UniqueCityNames, COUNT(DISTINCT c.CountryCode) AS UniqueCountryCodes FROM city c JOIN country co ON c.CountryCode = co.Code WHERE c.ID > 100 ORDER BY c.ID ASC;
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__city.name__', True), None)), (3, (0, (0, '__city.countrycode__', True), None))]), 'where': [(False, 3, (0, (0, '__city.id__', False), None), None, None), 'and', (False, 11, None, {'from': {'table_units': [('table_unit', '__country__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, 1.0)]), 'where': [(False, 2, (0, (0, '__country.code__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': ('asc', [(0, (0, '__city.id__', False), None)]), 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__city__'), ('table_unit', '__country__'), ('table_unit', '__countrylanguage__')], 'conds': [(False, 2, (0, (0, '__city.countrycode__', False), None), (0, '__country.code__', False), None), 'and', (False, 2, (0, (0, '__country.code__', False), None), (0, '__countrylanguage.countrycode__', False), None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__city.name__', False), None)), (0, (0, (0, '__country.name__', False), None)), (0, (0, (0, '__countrylanguage.language__', False), None))]), 'where': [(False, 12, (0, (0, '__city.name__', False), None), '"New York"', None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT c.Name AS CityName, ctr.Name AS CountryName, cl.Language AS LanguageSpoken FROM city c JOIN country ctr ON c.CountryCode = ctr.Code JOIN countrylanguage cl ON ctr.Code = cl.CountryCode WHERE c.Name <> 'New York';
{'from': {'table_units': [('table_unit', '__city__'), ('table_unit', '__country__'), ('table_unit', '__countrylanguage__')], 'conds': [(False, 2, (0, (0, '__city.countrycode__', False), None), None, None), 'and', (False, 2, (0, (0, '__country.code__', False), None), None, None)], 'join_types': [0, 0]}, 'select': (False, [(0, (0, (0, '__city.name__', False), None)), (0, (0, (0, '__country.name__', False), None)), (0, (0, (0, '__countrylanguage.language__', False), None))]), 'where': [(False, 7, (0, (0, '__city.name__', False), None), None, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_SQL:  {'from': {'table_units': [('table_unit', '__city__'), ('table_unit', '__country__')], 'conds': [(False, 2, (0, (0, '__city.countrycode__', False), None), (0, '__country.code__', False), None)], 'join_types': [0]}, 'select': (False, [(3, (0, (0, '__city.name__', True), None))]), 'where': [(False, 2, (0, (0, '__city.countrycode__', False), None), '"USA"', None), 'and', (False, 3, (0, (0, '__city.population__', False), None), 1000.0, None), 'and', (False, 12, (0, (0, '__city.id__', False), None), (0, '__country.capital__', False), None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
P_Str:  SELECT COUNT(DISTINCT c.Name) AS NonCapitalCityCount FROM city c JOIN country co ON c.CountryCode = co.Code WHERE c.CountryCode = 'USA' AND c.Population > 1000 AND c.ID <> co.Capital;
Execution error extra
Predicted SQL:  SELECT COUNT(DISTINCT c.Name) AS NonCapitalCityCount FROM city c JOIN country co ON c.CountryCode = co.Code WHERE c.CountryCode = 'USA' AND c.Population > 1000 AND c.ID <> co.Capital;
Gold SQL:  SELECT COUNT(DISTINCT Name), CountryCode FROM city WHERE Population > 1000 AND CountryCode = 'USA' AND ID NOT IN (SELECT Capital FROM country)
{'from': {'table_units': [('table_unit', '__city__')], 'conds': [], 'join_types': []}, 'select': (False, [(3, (0, (0, '__city.name__', True), None)), (0, (0, (0, '__city.countrycode__', False), None))]), 'where': [(False, 3, (0, (0, '__city.population__', False), None), None, None), 'and', (False, 2, (0, (0, '__city.countrycode__', False), None), None, None), 'and', (True, 8, (0, (0, '__city.id__', False), None), {'from': {'table_units': [('table_unit', '__country__')], 'conds': [], 'join_types': []}, 'select': (False, [(0, (0, (0, '__country.capital__', False), None))]), 'where': [], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}, None)], 'groupBy': [], 'having': [], 'orderBy': [], 'limit': None, 'intersect': None, 'union': None, 'except': None, 'union_all': None}
                     easy                 medium               hard                 extra                all                 
count                29                   60                   52                   103                  244                 
=====================   EXECUTION ACCURACY     =====================
execution            0.931                0.517                0.635                0.437                0.557               

====================== EXACT MATCHING ACCURACY =====================
exact match          0.724                0.250                0.192                0.087                0.225               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.857                0.756                0.966                0.789                0.824               
select(no AGG)       0.857                0.756                0.966                0.842                0.843               
where                0.905                0.667                0.696                0.353                0.588               
where(no OP)         1.000                0.750                0.826                0.490                0.702               
group(no Having)     0.000                0.222                0.385                0.412                0.359               
group                0.000                0.111                0.308                0.353                0.282               
order                0.750                0.533                0.786                0.848                0.758               
and/or               1.000                0.982                0.977                0.843                0.934               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.958                0.711                0.607                0.500                0.654               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.828                0.618                0.636                0.643                0.662               
select(no AGG)       0.828                0.618                0.636                0.686                0.677               
where                0.864                0.585                0.421                0.269                0.458               
where(no OP)         0.955                0.659                0.500                0.373                0.548               
group(no Having)     0.000                0.333                0.455                0.583                0.483               
group                0.000                0.167                0.364                0.500                0.379               
order                1.000                0.533                0.500                0.683                0.617               
and/or               1.000                1.000                0.977                0.937                0.974               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.920                0.604                0.386                0.406                0.524               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.842                0.680                0.767                0.709                0.734               
select(no AGG)       0.842                0.680                0.767                0.756                0.751               
where                0.884                0.623                0.525                0.305                0.515               
where(no OP)         0.977                0.701                0.623                0.424                0.615               
group(no Having)     1.000                0.267                0.417                0.483                0.412               
group                1.000                0.133                0.333                0.414                0.324               
order                0.857                0.533                0.611                0.757                0.680               
and/or               1.000                0.991                0.977                0.887                0.953               
IUEN                 1.000                1.000                1.000                1.000                1.000               
keywords             0.939                0.653                0.472                0.448                0.581               
