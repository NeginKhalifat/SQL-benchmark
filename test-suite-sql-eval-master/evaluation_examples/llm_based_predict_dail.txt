SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code > 'A';	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates ORDER BY Version_Number DESC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT Template_Type_Code, MIN(Template_ID) AS Smallest_Template_ID FROM Templates GROUP BY Template_Type_Code;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code < 'A' ORDER BY Template_Type_Code ASC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'Type1' AND Version_Number > 1 ORDER BY Template_ID LIMIT 5;	cre_Doc_Template_Mgt
SELECT RTT.Template_Type_Description, COUNT(*) AS Template_Count FROM Ref_Template_Types RTT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code WHERE RTT.Template_Type_Code <> 'XXX' GROUP BY RTT.Template_Type_Description ORDER BY Template_Count DESC LIMIT 5;	cre_Doc_Template_Mgt
SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE T.Version_Number > 1 AND T.Template_Type_Code = 'TYPE1' ORDER BY T.Template_ID DESC LIMIT 10;	cre_Doc_Template_Mgt
SELECT T1.Template_ID AS TemplateID1, T1.Template_Details AS TemplateDetails1, T2.Template_ID AS TemplateID2, T2.Template_Details AS TemplateDetails2 FROM Templates T1 JOIN Templates T2 ON T1.Template_ID > T2.Template_ID ORDER BY T1.Template_ID DESC, T2.Template_ID DESC;	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_Type_Code <> 'T001';	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code > 'A';	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT RTT.Template_Type_Description, COUNT(DISTINCT T.Template_ID) AS NumberOfTemplates FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE T.Version_Number > 1 GROUP BY RTT.Template_Type_Description ORDER BY NumberOfTemplates ASC;	cre_Doc_Template_Mgt
SELECT DISTINCT d.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'A' ORDER BY d.Document_ID ASC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code BETWEEN 'A' AND 'Z' ORDER BY Template_Type_Code DESC LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT T.Version_Number FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID JOIN Templates T ON D.Template_ID = T.Template_ID WHERE P.Paragraph_Text = 'Sample Text';	cre_Doc_Template_Mgt
SELECT DISTINCT e.Name FROM employee e LEFT JOIN hiring h ON e.Employee_ID = h.Employee_ID LEFT JOIN shop s ON h.Shop_ID = s.Shop_ID WHERE e.Age BETWEEN 20 AND 30 OR s.District = 'North' AND e.City = s.Location OR e.Name = 'John';	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT e.Name) FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID WHERE h.Is_full_time = true;	cre_Doc_Template_Mgt
SELECT e.Employee_ID, e.Name, e.Age, e.City FROM employee e INNER JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus > (SELECT AVG(Bonus) FROM evaluation) GROUP BY e.Employee_ID, e.Name, e.Age, e.City ORDER BY e.Employee_ID ASC;	cre_Doc_Template_Mgt
SELECT Name FROM employee WHERE Age <= 30 ORDER BY Age DESC, Employee_ID LIMIT 10 OFFSET 10	cre_Doc_Template_Mgt
SELECT e.Name, COUNT(h.Employee_ID) AS num_hires_before_2020 FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID WHERE strftime('%Y', h.Start_from) < '2020' GROUP BY e.Name;	cre_Doc_Template_Mgt
SELECT e.Name, COUNT(DISTINCT h.Shop_ID) AS NumberOfShops FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID GROUP BY e.Employee_ID HAVING COUNT(DISTINCT h.Shop_ID) > 1 ORDER BY e.Name ASC;	cre_Doc_Template_Mgt
SELECT s.Name FROM shop s WHERE s.Location IN ( SELECT e.City FROM employee e GROUP BY e.City HAVING SUM(e.Age) > 50 ) ORDER BY s.Name LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT COUNT(*) AS Not_From_New_York FROM employee WHERE City != 'New York';	cre_Doc_Template_Mgt
SELECT e.Employee_ID, SUM(e.Bonus) as Total_Bonus FROM evaluation e GROUP BY e.Employee_ID HAVING Total_Bonus > 10000 OR e.Employee_ID BETWEEN 1 AND 10 OR e.Employee_ID = 5 ORDER BY e.Employee_ID ASC;	cre_Doc_Template_Mgt
SELECT Name FROM employee WHERE Age != 25 ORDER BY Age LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT Name FROM employee WHERE Age <= 25;	cre_Doc_Template_Mgt
SELECT e.Name AS Employee_Name, SUM(s.Number_products) AS Total_Products FROM employee e JOIN hiring h ON e.Employee_ID = h.Employee_ID JOIN shop s ON s.Shop_ID = h.Shop_ID WHERE e.Age < 30 GROUP BY e.Employee_ID, e.Name ORDER BY e.Name ASC;	cre_Doc_Template_Mgt
SELECT SUM(vendor_requested_price) AS TotalVendorRequestedPrice FROM Properties;	cre_Doc_Template_Mgt
SELECT ft.feature_type_name FROM Ref_Feature_Types ft JOIN Other_Available_Features oaf ON ft.feature_type_code = oaf.feature_type_code WHERE oaf.feature_id = 1 OR oaf.feature_name = 'feature' OR oaf.feature_id NOT IN ( SELECT DISTINCT opf.feature_id FROM Other_Property_Features opf )	cre_Doc_Template_Mgt
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code >= 'type_code';	cre_Doc_Template_Mgt
SELECT oaf.feature_id FROM Other_Available_Features oaf LEFT JOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code WHERE rft.feature_type_code IS NULL ORDER BY oaf.feature_id ASC;	cre_Doc_Template_Mgt
SELECT SUM(vendor_requested_price) AS total_requested_price FROM Properties WHERE agreed_selling_price > vendor_requested_price;	cre_Doc_Template_Mgt
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code >= 'P' AND feature_type_name >= 'A'	cre_Doc_Template_Mgt
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code <= '10' ORDER BY feature_type_code DESC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT DISTINCT rft.feature_type_name FROM Other_Available_Features oaf JOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code WHERE oaf.feature_id < 100;	cre_Doc_Template_Mgt
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name HAVING SUM(CAST(d.age AS INTEGER)) <= 10;	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT treatment_type_code) AS num_treatment_types FROM Treatments WHERE date_of_treatment > '2020-01-01';	cre_Doc_Template_Mgt
SELECT Dogs.dog_id FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL;	cre_Doc_Template_Mgt
SELECT breed_code, breed_name FROM Breeds ORDER BY breed_code DESC;	cre_Doc_Template_Mgt
SELECT dog_id FROM Dogs WHERE breed_code = ( SELECT breed_code FROM Breeds WHERE breed_name = 'Labrador' );	cre_Doc_Template_Mgt
SELECT * FROM Owners WHERE last_name = 'Smith' OR first_name = 'John' OR email_address REGEXP '^[a-z]';	cre_Doc_Template_Mgt
SELECT treatment_type_code, treatment_type_description FROM Treatment_Types WHERE treatment_type_description <= 'some description' ORDER BY treatment_type_code ASC LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT breed_name FROM Breeds WHERE breed_name <> 'Mixed';	cre_Doc_Template_Mgt
SELECT b.breed_name, COUNT(DISTINCT t.dog_id) AS num_dogs FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY b.breed_name ORDER BY b.breed_name;	cre_Doc_Template_Mgt
SELECT DISTINCT TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, Cartoon.Title AS Cartoon_Title FROM TV_Channel LEFT JOIN TV_series ON TV_Channel.id = TV_series.Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE (TV_Channel.series_name = 'ABC' AND TV_Channel.Country = 'USA') OR (Cartoon.Title BETWEEN 'A' AND 'Z' OR Cartoon.Title LIKE 'Z%')	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT tc.id) AS NumberOfChannels FROM TV_Channel tc JOIN TV_series ts ON tc.id = ts.Channel WHERE ts.Viewers_m BETWEEN '1' AND '1000';	cre_Doc_Template_Mgt
SELECT id FROM TV_Channel WHERE CAST(id AS INTEGER) > 100;	cre_Doc_Template_Mgt
SELECT series_name, MAX(Country) AS max_country FROM TV_Channel GROUP BY series_name ORDER BY series_name ASC LIMIT 5;	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT series_name) FROM TV_Channel;	cre_Doc_Template_Mgt
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.id = 'CN' OR Cartoon.Title = 'The Amazing World of Gumball';	cre_Doc_Template_Mgt
SELECT DISTINCT TV_Channel.id FROM TV_Channel WHERE NOT EXISTS ( SELECT 1 FROM TV_series WHERE TV_series.Channel = TV_Channel.id AND TV_series.Episode = '2' ) ORDER BY TV_Channel.id DESC;	cre_Doc_Template_Mgt
SELECT TC.series_name, AVG(CAST(TVS.Viewers_m AS REAL)) AS average_viewers FROM TV_Channel AS TC JOIN TV_series AS TVS ON TC.id = TVS.Channel WHERE TC.Country <> 'BBC' GROUP BY TC.series_name;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE UPPER(TV_Channel.series_name) >= 'A' AND UPPER(TV_Channel.Country) >= 'A' AND UPPER(TV_Channel.Language) >= 'A';	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT TV_Channel.series_name, TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Share <= 10;	cre_Doc_Template_Mgt
SELECT H.name, COUNT(DISTINCT L.liked_id) AS UniqueLikes FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.student_id WHERE H.grade BETWEEN 9 AND 12 GROUP BY H.ID, H.name ORDER BY H.name;	cre_Doc_Template_Mgt
SELECT name FROM Highschooler WHERE grade > 9 ORDER BY name ASC;	cre_Doc_Template_Mgt
SELECT h.name, f.friend_id FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade = 9 ORDER BY h.name LIMIT 5 OFFSET 5	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT name FROM Highschooler ORDER BY name ASC LIMIT -1 OFFSET 5;	cre_Doc_Template_Mgt
SELECT hs.name FROM Highschooler hs JOIN Friend f ON hs.ID = f.friend_id WHERE f.student_id = 100 AND hs.ID BETWEEN 6 AND 10;	cre_Doc_Template_Mgt
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id LEFT JOIN Likes l ON h.ID = l.student_id AND l.liked_id = 100 WHERE h.grade = 11 AND l.liked_id IS NULL;	cre_Doc_Template_Mgt
SELECT h.name, COUNT(DISTINCT l.liked_id) AS NumLikedFriends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON f.friend_id = l.student_id WHERE h.grade >= 10 GROUP BY h.ID, h.name ORDER BY h.name DESC;	cre_Doc_Template_Mgt
SELECT hs.name, COUNT(DISTINCT f.friend_id) as num_friends, hs.grade FROM Highschooler hs LEFT JOIN Friend f ON hs.ID = f.student_id WHERE hs.grade >= 10 GROUP BY hs.ID, hs.name, hs.grade ORDER BY hs.name;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT c.Course_ID FROM course c JOIN course_arrange ca ON c.Course_ID = ca.Course_ID WHERE ca.Grade = 80 LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE t.Hometown = 'New York' AND c.Course_ID >= 100;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT c.Course FROM course c JOIN course_arrange ca ON c.Course_ID = ca.Course_ID WHERE ca.Grade < 60 ORDER BY c.Course ASC;	cre_Doc_Template_Mgt
SELECT c.Course, t.Name, ca.Grade FROM course c JOIN course_arrange ca ON c.Course_ID = ca.Course_ID JOIN teacher t ON t.Teacher_ID = ca.Teacher_ID WHERE t.Teacher_ID <> 2 ORDER BY ca.Grade DESC;	cre_Doc_Template_Mgt
SELECT c.Course_ID, c.Course FROM course c LEFT JOIN course_arrange ca ON c.Course_ID = ca.Course_ID GROUP BY c.Course_ID, c.Course HAVING SUM(ca.Grade) > 100 AND MIN(ca.Teacher_ID) IS NULL OR MAX(ca.Grade) > 80;	cre_Doc_Template_Mgt
SELECT c.Course_ID, c.Course FROM course c WHERE NOT EXISTS ( SELECT 1 FROM course_arrange ca WHERE ca.Course_ID = c.Course_ID AND ca.Teacher_ID = 1 );	cre_Doc_Template_Mgt
SELECT c.Course_ID, c.Course, COUNT(DISTINCT ca.Teacher_ID) AS NumberOfTeachers FROM course c JOIN course_arrange ca ON c.Course_ID = ca.Course_ID WHERE ca.Grade <= 80 GROUP BY c.Course_ID, c.Course HAVING AVG(ca.Grade) > 75;	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT c.Course_ID) AS NumberOfDistinctCourses, t.Name, t.Hometown FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE t.Hometown = 'New York' AND CAST(t.Age AS INTEGER) > 35 AND NOT EXISTS ( SELECT 1 FROM course_arrange ca2 WHERE ca2.Teacher_ID = t.Teacher_ID AND ca2.Grade < 80 ) GROUP BY t.Name, t.Hometown;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT c.Course_ID, c.Course, c.Staring_Date FROM course c JOIN ( SELECT ca.Course_ID FROM course_arrange ca GROUP BY ca.Course_ID HAVING MIN(ca.Grade) >= 60 AND MAX(ca.Grade) = 90 ) filtered_courses ON c.Course_ID = filtered_courses.Course_ID ORDER BY c.Staring_Date LIMIT 10;	cre_Doc_Template_Mgt
SELECT t.Name, SUM(ca.Grade) AS Total_Grade FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE t.Teacher_ID != 1 GROUP BY t.Teacher_ID, t.Name ORDER BY t.Name ASC;	cre_Doc_Template_Mgt
SELECT Name FROM conductor WHERE Age BETWEEN 40 AND 50 ORDER BY Conductor_ID LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT Name, Age, AVG(Age) OVER () AS Avg_Age FROM conductor WHERE Age <= 50 ORDER BY Age DESC;	cre_Doc_Template_Mgt
SELECT Name FROM conductor WHERE Age >= 50 AND Year_of_Work >= 20;	cre_Doc_Template_Mgt
SELECT o.Orchestra, c.Name AS Conductor_Name FROM orchestra o JOIN conductor c ON o.Conductor_ID = c.Conductor_ID JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Type = 'classical' AND o.Major_Record_Format != 'vinyl' ORDER BY c.Age DESC;	cre_Doc_Template_Mgt
SELECT Orchestra FROM orchestra ORDER BY Orchestra ASC LIMIT 1 OFFSET 1;	cre_Doc_Template_Mgt
SELECT AVG(c.Age) AS AverageAge, COUNT(c.Conductor_ID) AS NumberOfConductors FROM conductor c WHERE c.Year_of_Work > 1950 ORDER BY c.Conductor_ID LIMIT 10 OFFSET 9;	cre_Doc_Template_Mgt
SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE c.Age > 50 OR c.Nationality = 'American' OR (o.Year_of_Founded >= 1800 AND o.Year_of_Founded <= 1850) ORDER BY c.Conductor_ID DESC;	cre_Doc_Template_Mgt
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(o.Orchestra_ID) = 1;	cre_Doc_Template_Mgt
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Type = 'Classical' ORDER BY c.Age DESC LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT MIN(Age) AS YoungestAge, MAX(Age) AS OldestAge FROM conductor WHERE Age < 100;	cre_Doc_Template_Mgt
SELECT Nationality, SUM(Age) AS Total_Age FROM conductor WHERE Age <= 60 GROUP BY Nationality ORDER BY Total_Age ASC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT d.department_name, COUNT(DISTINCT dp.degree_program_id) AS number_of_programs FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY d.department_name ASC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT degree_program_id) AS number_of_unique_degree_programs FROM Degree_Programs WHERE degree_program_id BETWEEN 1 AND 100;	cre_Doc_Template_Mgt
SELECT student_id FROM Students WHERE date_first_registered >= '2020-01-01';	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT d.department_name, AVG(dp.degree_program_id) AS avg_degree_program_id FROM Departments d INNER JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name HAVING AVG(dp.degree_program_id) BETWEEN 10 AND 20;	cre_Doc_Template_Mgt
SELECT email_address FROM ( SELECT email_address, date_first_registered, ROW_NUMBER() OVER (ORDER BY date_first_registered DESC) as rn FROM Students WHERE date_first_registered > '2020-01-01' ) AS ordered_students WHERE rn BETWEEN 11 AND 20;	cre_Doc_Template_Mgt
SELECT department_name FROM Departments WHERE department_id > 5 GROUP BY department_name HAVING COUNT(*) > 1 ORDER BY department_name DESC;	cre_Doc_Template_Mgt
SELECT DISTINCT John.first_name FROM Students AS John JOIN Students AS Alice ON John.student_id = Alice.student_id WHERE John.first_name = 'John' AND Alice.first_name = 'Alice' AND John.student_id BETWEEN 1 AND 10;	cre_Doc_Template_Mgt
SELECT department_id, MAX(degree_program_id) AS highest_degree_program_id FROM Degree_Programs WHERE department_id <= 10 GROUP BY department_id;	cre_Doc_Template_Mgt
SELECT COUNT(*) AS number_of_degree_programs FROM Degree_Programs WHERE department_id = 1;	cre_Doc_Template_Mgt
SELECT student_id FROM Students WHERE date_first_registered < '1990-01-01';	cre_Doc_Template_Mgt
SELECT AVG(Se.semester_id) AS average_semester_id FROM Semesters Se JOIN Student_Enrolment SE ON Se.semester_id = SE.semester_id JOIN Students S ON SE.student_id = S.student_id WHERE S.first_name != 'John' GROUP BY Se.semester_id ORDER BY average_semester_id DESC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT DISTINCT p.hand, p.last_name FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id WHERE p.country_code = 'RUS' OR p.hand = 'R' OR r.player_id IS NOT NULL;	cre_Doc_Template_Mgt
SELECT DISTINCT p.first_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year BETWEEN 2000 AND 2010 ORDER BY p.first_name;	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT player_id) AS num_ranked_players FROM rankings;	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM ( SELECT * FROM matches WHERE winner_id >= 10 ORDER BY match_num LIMIT -1 OFFSET 9 ) AS filtered_matches;	cre_Doc_Template_Mgt
SELECT * FROM players WHERE player_id > (SELECT MIN(player_id) FROM rankings);	cre_Doc_Template_Mgt
SELECT DISTINCT p.first_name FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking < 10 ORDER BY p.first_name ASC;	cre_Doc_Template_Mgt
SELECT m1.Name AS Museum1_Name, m2.Name AS Museum2_Name FROM museum AS m1 JOIN museum AS m2 ON m1.Museum_ID < m2.Museum_ID ORDER BY m1.Museum_ID, m2.Museum_ID LIMIT 10;	cre_Doc_Template_Mgt
WITH RankedMuseums AS ( SELECT Museum_ID, Name, Num_of_Staff, Open_Year, ROW_NUMBER() OVER (ORDER BY Museum_ID) AS Rank FROM museum ) SELECT COUNT(*) AS TotalMuseums, SUM(Num_of_Staff) AS TotalStaff FROM RankedMuseums WHERE Rank BETWEEN 11 AND 20;	cre_Doc_Template_Mgt
SELECT m.Name AS Museum_Name, SUM(v.Num_of_Ticket) AS Total_Tickets_Sold FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE m.Num_of_Staff < 50 GROUP BY m.Museum_ID, m.Name ORDER BY Total_Tickets_Sold DESC LIMIT 10;	cre_Doc_Template_Mgt
SELECT m.Name, MIN(v.Total_spent) AS Min_Spent FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Name;	cre_Doc_Template_Mgt
SELECT m.Name, SUM(v.Num_of_Ticket) AS Total_Tickets_Sold FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name;	cre_Doc_Template_Mgt
SELECT m.Name, MIN(m.Num_of_Staff) as Min_Staff FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.visitor_ID IS NULL GROUP BY m.Name ORDER BY m.Num_of_Staff DESC;	cre_Doc_Template_Mgt
SELECT m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name HAVING SUM(v.Total_spent) > 10000;	cre_Doc_Template_Mgt
SELECT COUNT(Museum_ID) AS Total_Museums, SUM(Num_of_Staff) AS Total_Staff, COUNT(Open_Year) AS Museums_With_Opening_Year FROM museum WHERE Open_Year IS NOT NULL;	cre_Doc_Template_Mgt
SELECT DISTINCT Museum_ID FROM visit WHERE Total_spent > 100;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT s.Name FROM stadium s WHERE s.Capacity >= 10000;	cre_Doc_Template_Mgt
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = '2020' WHERE c.concert_ID IS NULL;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT concert.concert_Name) AS Unique_Concert_Names, AVG(stadium.Capacity) AS Average_Capacity FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE (stadium.Average BETWEEN 1000 AND 10000 OR stadium.Capacity > 50000 OR stadium.Location = 'New York')	cre_Doc_Template_Mgt
SELECT Name FROM stadium WHERE Capacity >= 50000 ORDER BY Name ASC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE s.Name != 'Stadium1' GROUP BY s.Name ORDER BY COUNT(c.concert_ID) DESC;	cre_Doc_Template_Mgt
SELECT Name FROM stadium;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT DISTINCT c.concert_Name FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE s.Age > 25;	cre_Doc_Template_Mgt
SELECT Location FROM stadium WHERE (Capacity BETWEEN 10000 AND 50000) OR (Average > 30000) OR (Name = 'Stadium1');	cre_Doc_Template_Mgt
SELECT Name, Location, Capacity FROM stadium WHERE Location <> 'USA' ORDER BY Capacity DESC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT DISTINCT s.Location, s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE (s.Capacity BETWEEN 50000 AND 100000) OR s.Name = 'Stadium 1' OR c.concert_Name = 'Concert 1' LIMIT 10;	cre_Doc_Template_Mgt
SELECT p.Name, SUM(pp.Earnings) AS Total_Earnings FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE p.Height <= 180 GROUP BY p.Name ORDER BY p.Name DESC;	cre_Doc_Template_Mgt
SELECT p.Name, pp.Poker_Player_ID, SUM(pp.Earnings) AS Total_Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY pp.Poker_Player_ID, p.Name;	cre_Doc_Template_Mgt
SELECT p.Height, pp.Nationality, COUNT(*) AS NumberOfPlayers FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID GROUP BY p.Height, pp.Nationality ORDER BY p.Height ASC;	cre_Doc_Template_Mgt
SELECT p.Name AS Player_Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE p.Height >= 180 ORDER BY pp.Earnings DESC LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT p.People_ID, p.Height FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE p.Height <> 180;	cre_Doc_Template_Mgt
SELECT p.Name, pp.Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Best_Finish > 10 AND pp.Final_Table_Made BETWEEN 1 AND 5 AND pp.Earnings >= 10000 ORDER BY p.Name DESC;	cre_Doc_Template_Mgt
SELECT pp.Poker_Player_ID, pe.Name FROM poker_player pp JOIN people pe ON pp.People_ID = pe.People_ID WHERE pp.Final_Table_Made > 10 OR pe.Nationality = 'American' OR (pe.Height >= 170 AND pe.Height <= 180) ORDER BY pp.Poker_Player_ID ASC;	cre_Doc_Template_Mgt
SELECT p.Name, pp.Final_Table_Made FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height = 175 AND pp.Best_Finish = 1 ORDER BY pp.Poker_Player_ID LIMIT 1 OFFSET 1;	cre_Doc_Template_Mgt
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings >= 1000000 ORDER BY p.Height DESC;	cre_Doc_Template_Mgt
SELECT p.Nationality, COUNT(DISTINCT pp.Poker_Player_ID) AS NumberOfPlayers FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE p.Height = 175 GROUP BY p.Nationality ORDER BY p.Nationality ASC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT p.People_ID) AS Number_of_People, MIN(pp.Earnings) AS Min_Earnings, MAX(pp.Earnings) AS Max_Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Money_Rank > 10 ORDER BY pp.Earnings;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT MAX(Cylinders) AS max_cylinders FROM cars_data WHERE Cylinders >= 4;	cre_Doc_Template_Mgt
SELECT cm.Maker, ml.Model FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker ORDER BY cm.Maker DESC;	cre_Doc_Template_Mgt
SELECT cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker WHERE ml.ModelId = 1;	cre_Doc_Template_Mgt
SELECT cd.Id FROM cars_data cd INNER JOIN car_names cn ON cd.Id = cn.MakeId INNER JOIN model_list ml ON cn.Model = ml.Model INNER JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Year > 2000 ORDER BY cd.Weight ASC LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT Maker, FullName FROM car_makers WHERE Maker <= 'Toyota' ORDER BY Maker;	cre_Doc_Template_Mgt
SELECT ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.Maker >= 'Toyota' ORDER BY ml.Model ASC;	cre_Doc_Template_Mgt
SELECT Id, Horsepower FROM cars_data WHERE Cylinders > 3 OR Edispl BETWEEN 2 AND 5 OR Weight < 3000 ORDER BY Id DESC;	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT id) AS total_victories FROM battle WHERE date >= '1800-01-01' AND date <= '1900-12-31' AND result = 'win';	cre_Doc_Template_Mgt
SELECT name FROM battle WHERE date <= '1500-12-31';	cre_Doc_Template_Mgt
SELECT date, MAX(id) AS highest_battle_id FROM battle WHERE id BETWEEN 1 AND 10 GROUP BY date ORDER BY date ASC;	cre_Doc_Template_Mgt
SELECT SUM(CAST(s.tonnage AS DECIMAL)) FROM ship s WHERE s.id > 10 AND s.lost_in_battle IS NOT NULL;	cre_Doc_Template_Mgt
SELECT DISTINCT b.id FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE (b.date BETWEEN '1000-01-01' AND '1500-12-31') OR b.result = 'victory' OR s.id IS NULL;	cre_Doc_Template_Mgt
SELECT name FROM battle WHERE date > '1945-12-31';	cre_Doc_Template_Mgt
SELECT b.name AS battle_name, s.name AS ship_name, d.note AS death_note FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id WHERE b.date BETWEEN '2000' AND '2020' AND s.disposition_of_ship = 'sunk' AND d.killed > 10;	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT name) AS distinct_battle_names, COUNT(DISTINCT latin_commander) AS distinct_latin_commanders, COUNT(*) AS total_battles FROM battle WHERE id BETWEEN 6 AND 10;	cre_Doc_Template_Mgt
SELECT name FROM battle WHERE (date BETWEEN '1800-01-01' AND '1900-12-31' OR latin_commander = 'John') ORDER BY date DESC LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM singer;	cre_Doc_Template_Mgt
SELECT s.Name, AVG(so.Sales) AS Avg_Sales FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING s.Citizenship = 'USA' OR s.Net_Worth_Millions >= 10 OR AVG(so.Sales) > 10000 ORDER BY s.Name ASC;	cre_Doc_Template_Mgt
SELECT Singer_ID FROM singer WHERE Citizenship = 'USA' AND Birth_Year BETWEEN 1980 AND 1990 AND Net_Worth_Millions > 10;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT s.Name, COUNT(DISTINCT so.Title) AS Number_of_Songs, COALESCE(SUM(so.Sales), 0) AS Total_Sales FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 50 GROUP BY s.Singer_ID ORDER BY s.Name ASC;	cre_Doc_Template_Mgt
SELECT DISTINCT s.Title, s.Sales FROM song s JOIN singer sg ON s.Singer_ID = sg.Singer_ID WHERE s.Highest_Position BETWEEN 1 AND 10 AND s.Sales > 1000000 AND sg.Net_Worth_Millions >= 10 ORDER BY s.Sales ASC;	cre_Doc_Template_Mgt
SELECT DISTINCT S.Singer_ID FROM singer S LEFT JOIN song SS ON S.Singer_ID = SS.Singer_ID WHERE S.Citizenship = 'USA' OR S.Birth_Year > 1980 OR SS.Sales > 1000000;	cre_Doc_Template_Mgt
SELECT s.Name, COUNT(*) AS Number_of_Number_One_Songs FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position = 1 GROUP BY s.Name ORDER BY s.Name ASC;	cre_Doc_Template_Mgt
WITH RichestSingers AS ( SELECT Singer_ID FROM singer WHERE Net_Worth_Millions > 100 ORDER BY Net_Worth_Millions DESC LIMIT 10 );  SELECT COUNT(DISTINCT Singer_ID) AS Distinct_Singer_IDs, COUNT(Singer_ID) AS Total_Singer_IDs FROM RichestSingers;	cre_Doc_Template_Mgt
SELECT s.Name, s.Net_Worth_Millions FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Title = 'Hello' AND s.Citizenship = 'USA' ORDER BY s.Net_Worth_Millions DESC;	cre_Doc_Template_Mgt
SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions <= 50 GROUP BY s.Singer_ID, s.Name ORDER BY Total_Sales DESC;	cre_Doc_Template_Mgt
SELECT Singer_ID FROM singer ORDER BY Singer_ID DESC;	cre_Doc_Template_Mgt
SELECT DISTINCT s.Singer_ID, s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 10 OR so.Sales > 1e6;	cre_Doc_Template_Mgt
SELECT s.Name, SUM(so.Sales) AS Total_Song_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions >= 10 GROUP BY s.Name ORDER BY s.Name ASC;	cre_Doc_Template_Mgt
SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE s.Net_Worth_Millions > 50 AND so.Sales BETWEEN 100000 AND 200000 AND so.Highest_Position < 10;	cre_Doc_Template_Mgt
SELECT Name FROM singer WHERE Name <> 'Adele' ORDER BY Name ASC;	cre_Doc_Template_Mgt
SELECT Name FROM singer WHERE Net_Worth_Millions > 10;	cre_Doc_Template_Mgt
SELECT s.Title FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID WHERE si.Citizenship = 'USA' AND si.Net_Worth_Millions > 50 ORDER BY s.Title ASC LIMIT 10;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT Fname, LName FROM Student WHERE Age < 20 ORDER BY LName, Fname LIMIT 5 OFFSET 5;	cre_Doc_Template_Mgt
SELECT LName FROM Student WHERE Age BETWEEN 18 AND 25 ORDER BY LName DESC;	cre_Doc_Template_Mgt
SELECT LName, SUM(Age) AS TotalAge FROM Student WHERE Sex = 'M' GROUP BY LName ORDER BY TotalAge DESC;	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT Pets.PetID) AS CountOfPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20 AND Pets.pet_age BETWEEN 2 AND 5;	cre_Doc_Template_Mgt
SELECT Student.StuID, Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > (SELECT AVG(weight) FROM Pets)	cre_Doc_Template_Mgt
SELECT Fname FROM Student WHERE Age > 20;	cre_Doc_Template_Mgt
SELECT DISTINCT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuId LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20 OR p.PetType = 'dog' OR p.pet_age < (SELECT AVG(pet_age) FROM Pets)	cre_Doc_Template_Mgt
SELECT Fname FROM Student WHERE Age >= 20;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM ( SELECT * FROM Pets WHERE weight BETWEEN 20 AND 50 AND pet_age > 10 ORDER BY PetID LIMIT 10 OFFSET 10 ) AS SelectedPets;	cre_Doc_Template_Mgt
SELECT LName FROM Student WHERE Sex = 'F';	cre_Doc_Template_Mgt
SELECT s.LName, s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.pet_age > 5 ORDER BY s.LName ASC LIMIT -1 OFFSET 10;	cre_Doc_Template_Mgt
SELECT DISTINCT al.Airline FROM flights f JOIN airports ap1 ON f.SourceAirport = ap1.AirportCode JOIN airports ap2 ON f.DestAirport = ap2.AirportCode JOIN airlines al ON f.Airline = al.uid WHERE ap1.Country != ap2.Country;	cre_Doc_Template_Mgt
SELECT a.Airline, ap.AirportName AS DestinationAirportName FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE f.FlightNo <= 100 ORDER BY a.Airline DESC LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT Airline FROM airlines WHERE uid < 100 ORDER BY uid LIMIT -1 OFFSET 5;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT a.Airline, AVG(f.FlightNo) AS AverageFlightNumber FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline, a.Airline;	cre_Doc_Template_Mgt
SELECT DISTINCT airlines.Airline FROM airlines WHERE Country = 'US' UNION  SELECT DISTINCT airlines.Airline FROM airlines WHERE Abbreviation LIKE 'A%' UNION  SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'JFK';	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT DestAirport) AS NumberOfDestinations FROM flights WHERE Airline = 101;	cre_Doc_Template_Mgt
SELECT AirportName FROM airports WHERE City >= 'New York' AND City <= 'Los Angeles' ORDER BY City ASC, AirportName ASC LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE a.Country = 'USA' AND f.DestAirport = 'JFK';	cre_Doc_Template_Mgt
SELECT a.Airline AS AirlineName, p.AirportName AS SourceAirportName FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports p ON f.SourceAirport = p.AirportCode WHERE a.uid >= 2 ORDER BY a.Airline DESC;	cre_Doc_Template_Mgt
SELECT AirportName FROM airports WHERE CountryAbbrev BETWEEN 'A' AND 'M';	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT f.Airline) AS NumberOfAirlines FROM flights f JOIN airports a1 ON f.SourceAirport = a1.AirportCode JOIN airports a2 ON f.DestAirport = a2.AirportCode;	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT a.Abbreviation) AS distinct_airline_abbreviations, COUNT(DISTINCT a.Country) AS distinct_airline_countries, f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.DestAirport > 'ABC' GROUP BY f.FlightNo ORDER BY f.FlightNo ASC LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT contestant_number, COUNT(*) AS vote_count FROM VOTES GROUP BY contestant_number ORDER BY vote_count DESC LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT area_code FROM AREA_CODE_STATE WHERE area_code >= 500 ORDER BY area_code ASC LIMIT 5 OFFSET 5;	cre_Doc_Template_Mgt
SELECT DISTINCT state FROM VOTES WHERE contestant_number <= 10;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT c.Name AS CountryName, COUNT(DISTINCT cl.Language) AS NumberOfLanguages FROM country c LEFT JOIN city ct ON c.Code = ct.CountryCode LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Population > 1000000 OR c.Continent = 'Asia' OR ct.Population > 1000000 GROUP BY c.Name ORDER BY c.Name DESC;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT Name FROM city ORDER BY Name;	cre_Doc_Template_Mgt
SELECT Name FROM city WHERE Population < 10000 LIMIT 10;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT c.CountryCode, SUM(c.Population) AS TotalPopulation FROM city c WHERE c.Population > 10000 AND c.District = 'district1' GROUP BY c.CountryCode ORDER BY c.CountryCode ASC;	cre_Doc_Template_Mgt
SELECT MAX(Population) AS HighestPopulation FROM city WHERE Population < 1000000;	cre_Doc_Template_Mgt
SELECT SUM(ID) FROM city WHERE Population <= 100000;	cre_Doc_Template_Mgt
SELECT Name, Population FROM city WHERE Population > (SELECT AVG(Population) FROM city) ORDER BY Population ASC;	cre_Doc_Template_Mgt
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.SurfaceArea > 1000000 ORDER BY city.Name LIMIT 10 OFFSET 10;	cre_Doc_Template_Mgt
SELECT Name, Population FROM city WHERE Population < 10000;	cre_Doc_Template_Mgt
SELECT Name FROM city WHERE Population <= 100000;	cre_Doc_Template_Mgt
SELECT MIN(Population) AS SmallestPopulation FROM city WHERE Population <= 800000;	cre_Doc_Template_Mgt
Not Found	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT c.Name) AS UniqueCityNames, COUNT(DISTINCT c.CountryCode) AS UniqueCountryCodes FROM city c JOIN country co ON c.CountryCode = co.Code WHERE c.ID > 100 ORDER BY c.ID ASC;	cre_Doc_Template_Mgt
SELECT c.Name AS CityName, ctr.Name AS CountryName, cl.Language AS LanguageSpoken FROM city c JOIN country ctr ON c.CountryCode = ctr.Code JOIN countrylanguage cl ON ctr.Code = cl.CountryCode WHERE c.Name <> 'New York';	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT c.Name) AS NonCapitalCityCount FROM city c JOIN country co ON c.CountryCode = co.Code WHERE c.CountryCode = 'USA' AND c.Population > 1000 AND c.ID <> co.Capital;	cre_Doc_Template_Mgt
