SELECT count(*) FROM club
SELECT count(*) FROM club
SELECT Name FROM club ORDER BY Name ASC
SELECT Name FROM club ORDER BY Name ASC
SELECT Manager, Captain FROM club;
SELECT T1.Manager, T2.Captain FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
SELECT Name FROM club WHERE Manufacturer != "Nike"
SELECT Name FROM club WHERE Manufacturer != 'Nike';
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player GROUP BY Name ORDER BY Wins_count ASC;
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000
SELECT Country FROM player WHERE Earnings > 1200000;
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1;
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1;
SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID
SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID
SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count > 2
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Name HAVING COUNT(T2.Wins_count) > 2;
SELECT Name  FROM player  JOIN club ON player.Club_ID = club.Club_ID  WHERE club.Manager = "Sam Allardyce";
SELECT Name  FROM player  WHERE Club_ID IN (SELECT Club_ID                    FROM club                    WHERE Manager = 'Sam Allardyce');
SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC;
SELECT c.Name FROM club c JOIN (   SELECT Club_ID, AVG(Earnings) AS avg_earnings   FROM player   GROUP BY Club_ID ) p ON c.Club_ID = p.Club_ID ORDER BY p.avg_earnings DESC;
SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer
SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer;
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1;
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000
SELECT COUNT(DISTINCT Country) FROM player
SELECT count(DISTINCT Country) FROM player
SELECT Earnings FROM player WHERE Country = "Australia" OR Country = "Zimbabwe";
SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe';
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(T2.order_id) > 2 INTERSECT SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Order_Items AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(T2.order_item_id) >= 3;
SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id, T2.customer_first_name, T2.customer_last_name HAVING COUNT(T2.order_id) > 2 AND COUNT(T3.order_item_id) >= 3
SELECT O.order_id, O.order_status_code, count(*)  FROM Orders AS O  JOIN Order_Items ASOI ON O.order_id = ASOI.order_id  GROUP BY O.order_id, O.order_status_code;
SELECT O.order_id, O.order_status_code, COUNT(OI.order_item_id)  FROM Orders O  JOIN Order_Items OI ON O.order_id = OI.order_id  GROUP BY O.order_id, O.order_status_code;
SELECT date_order_placed FROM Orders WHERE order_id IN (   SELECT order_id   FROM Order_Items   GROUP BY order_id   HAVING COUNT(*) > 1 ) OR order_id IN (   SELECT order_id   FROM Orders   ORDER BY date_order_placed ASC   LIMIT 1 );
SELECT MIN(date_order_placed) AS earliest_order_date,        date_order_placed FROM Orders WHERE order_id IN (   SELECT order_id   FROM Order_Items   GROUP BY order_id   HAVING COUNT(*) > 1 ) GROUP BY date_order_placed;
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders);
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders);
SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P WHERE P.product_id NOT IN (   SELECT O.product_id   FROM Order_Items O   GROUP BY O.product_id   HAVING COUNT(O.order_item_id) >= 2 )
SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P WHERE P.product_id NOT IN (   SELECT OI.product_id   FROM Order_Items OI   GROUP BY OI.product_id   HAVING COUNT(OI.order_id) >= 2 )
SELECT order_id, date_order_placed FROM Orders GROUP BY order_id, date_order_placed HAVING COUNT(DISTINCT customer_id) >= 2;
SELECT T1.order_id, T1.date_order_placed FROM Orders AS T1 GROUP BY T1.order_id HAVING COUNT(T1.order_id) >= 2;
SELECT T1.product_id, T1.product_name, T1.product_price FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id ORDER BY COUNT(T2.order_id) DESC LIMIT 1;
SELECT P.product_id, P.product_name, P.product_price FROM Products P JOIN (   SELECT product_id, COUNT(*) as order_count   FROM Order_Items   GROUP BY product_id   ORDER BY order_count DESC   LIMIT 1 ) O ON P.product_id = O.product_id;
SELECT order_id, SUM(product_price) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id ORDER BY SUM(product_price) ASC LIMIT 1;
SELECT t1.customer_name, SUM(t3.order_quantity * t2.product_price) AS total_cost FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY total_cost ASC LIMIT 1;
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT gender_code, COUNT(*)  FROM Customers  JOIN Orders ON Customers.customer_id = Orders.customer_id  JOIN Order_Items ON Orders.order_id = Order_Items.order_id  GROUP BY gender_code;
SELECT gender_code, count(*)  FROM Customers  JOIN Orders ON Customers.customer_id = Orders.customer_id  JOIN Order_Items ON Orders.order_id = Order_Items.order_id  GROUP BY gender_code;
SELECT gender_code, count(*)  FROM Customers  JOIN Orders ON Customers.customer_id = Orders.customer_id  GROUP BY gender_code;
SELECT gender_code, count(*) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code;
SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name, T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id
SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name, CMP.payment_method_code FROM Customers AS C JOIN Customer_Payment_Methods AS CMP ON C.customer_id = CMP.customer_id;
SELECT I.invoice_status_code, I.invoice_date, S.shipment_date FROM Invoices AS I JOIN Shipments AS S ON I.invoice_number = S.invoice_number;
SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices LEFT JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number;
SELECT P.product_name, S.shipment_date FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Shipments AS S ON OI.order_id = S.order_id JOIN Shipment_Items AS SI ON S.shipment_id = SI.shipment_id ORDER BY P.product_name, S.shipment_date;
SELECT P.product_name, S.shipment_date FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Shipments S ON OI.order_id = S.order_id;
SELECT oi.order_item_status_code, si.shipment_tracking_number FROM Order_Items AS oi JOIN Shipment_Items AS si ON oi.order_item_id = si.order_item_id JOIN Shipments AS s ON si.shipment_id = s.shipment_id;
SELECT oi.order_item_status_code, si.shipment_tracking_number FROM Order_Items AS oi JOIN Shipment_Items AS si ON oi.order_item_id = si.order_item_id JOIN Shipments AS s ON si.shipment_id = s.shipment_id;
SELECT P.product_name, P.product_color FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Shipment_Items AS SI ON OI.order_item_id = SI.order_item_id JOIN Shipments AS S ON SI.shipment_id = S.shipment_id WHERE S.shipment_date IS NOT NULL;
SELECT P.product_name, P.product_color FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Shipments AS S ON OI.order_id = S.order_id JOIN Shipment_Items AS SI ON S.shipment_id = SI.shipment_id
SELECT P.product_name, P.product_price, P.product_description FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female' GROUP BY P.product_name, P.product_price, P.product_description
SELECT P.product_name, P.product_price, P.product_description FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'
SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments);
SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments);
SELECT O.order_id, O.date_order_placed, SUM(OI.product_id * ?) AS total_cost FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.date_order_placed;
SELECT O.order_id, O.date_order_placed, SUM(OI.order_item_status_code = 'Delivered') * (SELECT AVG(product_price) FROM Products WHERE product_id = OI.product_id) AS total_amount_paid FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.date_order_placed;
SELECT COUNT(DISTINCT customer_id) FROM Orders
SELECT COUNT(DISTINCT customer_id) FROM Orders
SELECT count(DISTINCT order_item_status_code) FROM Order_Items
SELECT count(DISTINCT order_item_status_code) FROM Order_Items
SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods
Here is the SQL query that answers the question:  SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';
SELECT product_size FROM Products WHERE product_name LIKE "%Dell%"
SELECT product_size FROM Products WHERE product_name LIKE "%Dell%";
SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT count(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods);
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods);
SELECT order_status_code, date_order_placed FROM Orders;
SELECT order_status_code, date_order_placed FROM Orders;
SELECT address_line_1, town_city, county FROM Customers JOIN customer_addresses ON Customers.customer_id = customer_addresses.customer_id JOIN addresses ON customer_addresses.address_id = addresses.address_id WHERE country = 'USA';
SELECT T1.address_line_1, T1.town_city, T1.county FROM Customers AS T1 WHERE T1.country = 'USA';
SELECT T1.customer_first_name, T4.product_name FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id JOIN Orders AS T3 ON T1.customer_id = T3.customer_id JOIN Order_Items AS T4 ON T3.order_id = T4.order_id JOIN Products AS T5 ON T4.product_id = T5.product_id;
SELECT c.customer_first_name, p.product_name FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id JOIN Order_Items AS oi ON o.order_id = oi.order_id JOIN Products AS p ON oi.product_id = p.product_id
SELECT COUNT(*) FROM Shipments;
SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_item_status_code = 'Delivered'
SELECT avg(product_price) FROM Products
SELECT avg(product_price) FROM Products
SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items);
SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items);
SELECT T1.email_address, T2.town_city, T3.county FROM Customers AS T1 JOIN (   SELECT gender_code, COUNT(*) AS count   FROM Customers   GROUP BY gender_code   ORDER BY count ASC   LIMIT 1 ) AS T2 ON T1.gender_code = T2.gender_code JOIN Customers AS T3 ON T1.customer_id = T3.customer_id WHERE T1.gender_code = T2.gender_code;
SELECT T1.email_address, T2.town_city, T3.county FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN (   SELECT customer_id, COUNT(*) as order_count   FROM Orders   GROUP BY customer_id ) AS T3 ON T1.customer_id = T3.customer_id WHERE T3.order_count = (   SELECT MIN(order_count)   FROM (     SELECT customer_id, COUNT(*) as order_count     FROM Orders     GROUP BY customer_id   ) AS T4 )
SELECT date_order_placed FROM Orders WHERE customer_id IN (   SELECT customer_id   FROM Customers   JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id   GROUP BY customer_id   HAVING COUNT(payment_method_code) >= 2 )
SELECT date_order_placed FROM Orders WHERE customer_id IN (   SELECT customer_id   FROM Customers   JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id   GROUP BY customer_id   HAVING COUNT(payment_method_code) >= 2 )
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) ASC LIMIT 1
SELECT P.product_id, P.product_description FROM Products AS P JOIN Order_Items AS O ON P.product_id = O.product_id GROUP BY P.product_id HAVING COUNT(O.order_item_id) > 3;
SELECT P.product_id, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id, P.product_description HAVING COUNT(OI.order_item_id) > 3;
SELECT I.invoice_date, I.invoice_number FROM Invoices AS I JOIN Shipments AS S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number, I.invoice_date HAVING COUNT(S.shipment_id) >= 2;
SELECT I.invoice_date, I.invoice_number FROM Invoices AS I JOIN Shipments AS S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number, I.invoice_date HAVING COUNT(S.shipment_id) >= 2;
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);
Here is the SQL query:  SELECT product_color, product_description, product_size FROM Products WHERE product_price != (SELECT MAX(product_price) FROM Products);
SELECT Name FROM director WHERE Age > (SELECT avg(Age) FROM director);
SELECT Name FROM director ORDER BY Age DESC LIMIT 1
SELECT count(*) FROM channel WHERE Internet LIKE "%bbc.co.uk%" OR Internet LIKE "%bbc.co.uk";
SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel
SELECT Title FROM program ORDER BY Start_Year DESC;
SELECT Name FROM director JOIN program ON director.Director_ID = program.Director_ID GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name, T1.Age FROM director AS T1 JOIN program AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T1.Director_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1
SELECT c.name, c.Internet FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.name, c.Internet HAVING COUNT(*) > 1;
SELECT c.Name, count(*)  FROM channel AS c  JOIN program AS p ON c.Channel_ID = p.Channel_ID  GROUP BY c.Name;
SELECT count(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program)
SELECT Name FROM director WHERE Director_ID IN (SELECT Director_ID FROM program WHERE Title = "Dracula");
SELECT c.Name, c.Internet FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID GROUP BY c.Channel_ID ORDER BY COUNT(da.Director_ID) DESC LIMIT 1;
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60;
Here is the SQL query:  SELECT Name FROM channel WHERE Channel_ID IN (   SELECT Channel_ID   FROM program   WHERE Director_ID IN (     SELECT Director_ID     FROM director     WHERE Age < 40   ) ) AND Channel_ID IN (   SELECT Channel_ID   FROM program   WHERE Director_ID IN (     SELECT Director_ID     FROM director     WHERE Age > 60   ) );
SELECT c.Channel_ID, c.Name FROM channel c WHERE c.Channel_ID NOT IN (   SELECT p.Channel_ID   FROM program p   JOIN director d ON p.Director_ID = d.Director_ID   WHERE d.Name = 'Hank Baskett' );
SELECT count(*) FROM radio
SELECT Transmitter FROM radio ORDER BY ERP_kW ASC
SELECT tv_show_name, Original_Airdate FROM tv_show;
SELECT Station_name FROM city_channel WHERE Affiliation != "ABC";
SELECT Transmitter FROM radio WHERE ERP_kW > 30 OR ERP_kW < 150
SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1
SELECT avg(ERP_kW) FROM radio
Here is the SQL query:  SELECT Affiliation, COUNT(*) FROM city_channel GROUP BY Affiliation;
SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC;
SELECT r.Transmitter, c.City FROM city_channel_radio AS cc JOIN city_channel AS c ON cc.City_channel_ID = c.ID JOIN radio AS r ON cc.Radio_ID = r.Radio_ID;
SELECT R.Transmitter, C.Station_name FROM city_channel_radio AS CR JOIN city_channel AS C ON CR.City_channel_ID = C.ID JOIN radio AS R ON CR.Radio_ID = R.Radio_ID ORDER BY R.ERP_kW DESC;
SELECT T1.Transmitter, COUNT(*)  FROM radio AS T1  JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID  GROUP BY T1.Transmitter;
SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio);
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1;
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1
SELECT Name FROM driver WHERE Citizenship = "United States";
SELECT Name  FROM driver  WHERE Citizenship = "United States";
SELECT driver_id, count(*)  FROM vehicle_driver  GROUP BY driver_id  ORDER BY count(*) DESC  LIMIT 1;
SELECT driver.Driver_ID, count(*)  FROM driver  JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID  GROUP BY driver.Driver_ID  ORDER BY count(*) DESC  LIMIT 1;
SELECT max(Power), avg(Power) FROM vehicle WHERE Builder = 'Zhuzhou';
SELECT max(Power), avg(Power) FROM vehicle WHERE Builder = 'Zhuzhou';
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996;
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996';
SELECT Build_Year, Model, Builder FROM vehicle;
SELECT Build_Year, Model, Builder FROM vehicle;
SELECT COUNT(DISTINCT driver.Driver_ID)  FROM driver  JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID  JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID  WHERE vehicle.Build_Year = 2012;
SELECT COUNT(DISTINCT t1.Driver_ID) FROM vehicle_driver AS t1 JOIN vehicle AS t2 ON t1.Vehicle_ID = t2.Vehicle_ID WHERE t2.Build_Year = 2012;
SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR';
SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR';
SELECT AVG(Top_Speed) FROM vehicle
SELECT avg(Top_Speed) FROM vehicle
SELECT DISTINCT T1.Name  FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID  JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID  WHERE T3.Power > 5000
SELECT Name FROM driver WHERE Driver_ID IN (   SELECT Driver_ID   FROM vehicle_driver   JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID   WHERE Power > 5000 )
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE "%DJ%";
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE "%DJ%";
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver);
SELECT Model  FROM vehicle  WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver);
SELECT v.Vehicle_ID, v.Model FROM vehicle AS v WHERE v.Builder = 'Ziyang' OR (v.Vehicle_ID IN (   SELECT vd.Vehicle_ID   FROM vehicle_driver AS vd   GROUP BY vd.Vehicle_ID   HAVING COUNT(DISTINCT vd.Driver_ID) > 1 ));
SELECT V.Vehicle_ID, V.Model FROM vehicle AS V WHERE V.Builder = 'Ziyang' OR       (V.Vehicle_ID IN (         SELECT VD.Vehicle_ID         FROM vehicle_driver AS VD         GROUP BY VD.Vehicle_ID         HAVING COUNT(Driver_ID) = 2       ));
SELECT v.Vehicle_ID, v.Model FROM vehicle AS v JOIN vehicle_driver AS vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE vd.Vehicle_ID IN (   SELECT vd.Vehicle_ID   FROM vehicle_driver AS vd   GROUP BY vd.Vehicle_ID   HAVING COUNT(DISTINCT vd.Driver_ID) > 2 ) OR vd.Driver_ID IN (   SELECT d.Driver_ID   FROM driver AS d   WHERE d.Name = 'Jeff Gordon' )
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID IN (   SELECT vehicle_driver.Vehicle_ID   FROM vehicle_driver   GROUP BY vehicle_driver.Vehicle_ID   HAVING COUNT(DISTINCT driver_driver.Driver_ID) > 2 ) UNION SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID IN (   SELECT vehicle_driver.Vehicle_ID   FROM vehicle_driver   JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID   WHERE driver.Name = 'Jeff Gordon' )
SELECT COUNT(*)  FROM vehicle  WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT COUNT(*)  FROM vehicle  WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT Name FROM driver ORDER BY Name;
SELECT Name FROM driver ORDER BY Name ASC;
SELECT Racing_Series, COUNT(*) FROM driver GROUP BY Racing_Series;
SELECT Racing_Series, COUNT(*)  FROM driver  JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID  GROUP BY Racing_Series;
SELECT D.Name, D.Citizenship FROM driver AS D JOIN vehicle_driver AS VD ON D.Driver_ID = VD.Driver_ID JOIN vehicle AS V ON VD.Vehicle_ID = V.Vehicle_ID WHERE V.Model = 'DJ1';
SELECT D.Name, D.Citizenship FROM driver AS D JOIN vehicle_driver AS VD ON D.Driver_ID = VD.Driver_ID JOIN vehicle AS V ON VD.Vehicle_ID = V.Vehicle_ID WHERE V.Model = 'DJ1';
SELECT count(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver);
SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT count(*) FROM Exams
SELECT count(*) FROM Exams
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code;
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code != "Database";
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != "Database";
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal';
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal';
SELECT count(DISTINCT Comments) FROM Student_Answers
SELECT count(DISTINCT Comments) FROM Student_Answers
SELECT Student_Answer_Text, COUNT(*) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC;
SELECT Student_Answer_Text, COUNT(*)  FROM Student_Answers  GROUP BY Student_Answer_Text  ORDER BY COUNT(*) DESC;
SELECT S.First_Name, SA.Date_of_Answer FROM Students AS S JOIN Student_Answers AS SA ON S.Student_ID = SA.Student_ID
SELECT S.First_Name, SA.Date_of_Answer FROM Student_Answers AS SA JOIN Students AS S ON SA.Student_ID = S.Student_ID
SELECT S.Email_Adress, SA.Date_of_Answer FROM Student_Answers AS SA JOIN Students AS S ON SA.Student_ID = S.Student_ID ORDER BY SA.Date_of_Answer DESC;
SELECT S.Email_Adress, SA.Date_of_Answer FROM Student_Answers AS SA JOIN Students AS S ON SA.Student_ID = S.Student_ID ORDER BY SA.Date_of_Answer DESC;
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1;
SELECT First_Name FROM Students WHERE Student_ID IN (   SELECT Student_ID   FROM Student_Answers   GROUP BY Student_ID   HAVING COUNT(*) >= 2 )
SELECT First_Name FROM Students WHERE Student_ID IN (   SELECT Student_ID   FROM Student_Answers   GROUP BY Student_ID   HAVING COUNT(*) >= 2 )
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M';
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M';
SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU;
SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU;
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M');
Here is the SQL query:  SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M');
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers);
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = "Absent";
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent';
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3
SELECT Type_of_Question_Code FROM Questions WHERE Question_ID IN (   SELECT Question_ID   FROM Questions_in_Exams   GROUP BY Question_ID   HAVING COUNT(*) >= 3 )
SELECT * FROM Students
SELECT * FROM Students
SELECT count(*) FROM Addresses
SELECT count(*) FROM Addresses
SELECT address_id, address_details FROM Addresses;
SELECT address_id, address_details FROM Addresses;
SELECT count(*) FROM Products
SELECT count(*) FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_price FROM Products WHERE product_name = 'Monitor';
SELECT product_price FROM Products WHERE product_name = 'Monitor';
SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products
SELECT min(product_price), avg(product_price), max(product_price) FROM Products;
SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes';
SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes';
SELECT count(*) FROM Products WHERE product_type_code = "Hardware";
SELECT count(*) FROM Products WHERE product_type_code = "Hardware"
SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)
SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS);
SELECT DISTINCT Product_Name  FROM PRODUCTS  WHERE Product_Type_Code = 'Hardware' AND Product_Price > (SELECT AVG(Product_Price) FROM PRODUCTS WHERE Product_Type_Code = 'Hardware');
SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware');
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT Product_Name FROM Products ORDER BY Product_Price DESC
SELECT product_name FROM Products ORDER BY product_price DESC;
SELECT Product_Name FROM Products WHERE Product_Type_Code = 'Hardware' ORDER BY Product_Price ASC;
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price;
SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code;
SELECT product_type_code, count(*) FROM Products GROUP BY product_type_code;
SELECT product_type_code, avg(product_price) FROM products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code;
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2;
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(*) FROM Customers
SELECT count(*) FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_id, customer_name FROM Customers;
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = "Jeromy";
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = "Jeromy";
SELECT payment_method_code, count(*) FROM Customers GROUP BY payment_method_code;
SELECT payment_method_code, count(*) FROM Customers GROUP BY payment_method_code;
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
SELECT customer_name, payment_method_code FROM Customers GROUP BY customer_name, payment_method_code ORDER BY COUNT(*) LIMIT 1;
SELECT customer_name  FROM Customers  WHERE payment_method_code = (SELECT payment_method_code                               FROM Customers                               GROUP BY payment_method_code                               ORDER BY COUNT(*) ASC                               LIMIT 1);
SELECT payment_method_code, customer_number  FROM Customers  WHERE customer_name = 'Jeromy';
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy';
SELECT DISTINCT payment_method_code FROM Customers;
SELECT DISTINCT payment_method_code FROM Customers;
SELECT product_id, product_type_code FROM Products ORDER BY product_name;
SELECT product_id, product_type_code FROM Products ORDER BY product_name;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1
SELECT count(*) FROM Customer_Orders
SELECT count(*) FROM Customer_Orders
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (   SELECT customer_id   FROM Customers   WHERE customer_name = 'Jeromy' );
SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders AS CO JOIN Customers AS C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy';
SELECT customer_name, customer_id, count(*)  FROM Customers  JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id  GROUP BY customer_name, customer_id;
SELECT C.customer_id, C.customer_name, COUNT(O.order_id) AS num_orders FROM Customers C JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name;
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT order_status_code, count(*) FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code, count(*) FROM Customer_Orders GROUP BY order_status_code;
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders);
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders);
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT count(*) FROM Order_Items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "Monitor";
SELECT SUM(order_quantity)  FROM Order_Items AS t1  JOIN Products AS t2 ON t1.product_id = t2.product_id  WHERE t2.product_name = 'Monitor';
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor';
SELECT count(DISTINCT c.customer_id) FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id JOIN Products AS p ON oi.product_id = p.product_id WHERE p.product_name = "Monitor";
SELECT count(DISTINCT customer_id) FROM Customer_Orders
SELECT count(DISTINCT customer_id) FROM Customer_Orders
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_Orders
SELECT CO.order_id, CO.order_date FROM Customer_Orders CO JOIN Order_ItemsOI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING MAX(OI.order_quantity) > 6 OR COUNT(*) > 3;
SELECT T1.order_id, T1.order_date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_quantity > 6 OR T2.order_quantity > (SELECT COUNT(*) FROM Order_Items WHERE order_id = T1.order_id);
SELECT count(*) FROM building
SELECT count(*) FROM building
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Address FROM building ORDER BY Completed_Year DESC;
SELECT Address FROM building ORDER BY Completed_Year DESC;
SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980
SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980;
SELECT avg(Population) FROM region
SELECT avg(Population) FROM region
SELECT Name FROM region ORDER BY Name ASC;
SELECT Name FROM region ORDER BY Name;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM region ORDER BY Population DESC LIMIT 1);
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT Name FROM region ORDER BY Area DESC LIMIT 5;
SELECT T2.Name ,  T1.Name FROM region AS T1 JOIN building AS T2 ON T1.Region_ID  =  T2.Region_ID
SELECT T1.Name, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T2.Name FROM region AS T1 JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*) > 1
SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*) > 1
SELECT T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Region_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT R.Capital FROM region AS R JOIN (   SELECT Region_ID   FROM building   GROUP BY Region_ID   ORDER BY COUNT(*) DESC   LIMIT 1 ) AS B ON R.Region_ID = B.Region_ID;
SELECT T1.Address, T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Address, T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT Number_of_Stories FROM building WHERE Region_ID IN (   SELECT Region_ID   FROM region   WHERE Name = "Abruzzo" );
SELECT b.Number_of_Stories FROM building AS b JOIN region AS r ON b.Region_ID = r.Region_ID WHERE r.Name = "Abruzzo";
SELECT Completed_Year, COUNT(*) AS num_buildings FROM building GROUP BY Completed_Year;
SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year;
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building);
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15
SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 OR Number_of_Stories < 15;
SELECT DISTINCT Address FROM building
SELECT DISTINCT Address FROM building
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT Channel_Details FROM Channels ORDER BY Channel_Details;
SELECT Channel_Details FROM Channels ORDER BY Channel_Details;
SELECT count(*) FROM Services
SELECT count(*) FROM Services
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Service_Details  FROM Customers AS t1  JOIN Customers_and_Services AS t2 ON t1.Customer_ID = t2.Customer_ID  JOIN Services AS t3 ON t2.Service_ID = t3.Service_ID  WHERE t1.Customer_Details = "Hardy Kutch";
SELECT Customers_and_Services_Details FROM Customers AS t1 JOIN Customers_and_Services AS t2 ON t1.Customer_ID = t2.Customer_ID WHERE t1.Customer_Details = "Hardy Kutch";
SELECT Customers_and_Services_Details FROM Customers_and_Services GROUP BY Customers_and_Services_ID HAVING COUNT(*) > 3;
SELECT Service_ID, Customers_and_Services_Details FROM Customers_and_Services GROUP BY Service_ID, Customers_and_Services_Details HAVING COUNT(Customer_ID) > 3;
SELECT customer_details FROM customers JOIN (   SELECT customer_id   FROM customers_and_services   GROUP BY customer_id   ORDER BY COUNT(*) DESC   LIMIT 1 ) AS t2 ON customers.customer_id = t2.customer_id
SELECT Customers.Customer_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customers.Customer_ID ORDER BY COUNT(Customers_and_Services.Customer_ID) DESC LIMIT 1;
SELECT customer_details FROM customers WHERE customer_id = (SELECT customer_id FROM customers_and_services GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT customer_details FROM customers JOIN (   SELECT customer_id, COUNT(*) as service_count   FROM customers_and_services   GROUP BY customer_id   ORDER BY service_count DESC   LIMIT 1 ) AS t2 ON customers.customer_id = t2.customer_id
SELECT Customer_Details  FROM Customers  WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services);
SELECT Customer_Details  FROM Customers  WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services);
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY COUNT(T2.Service_ID) ASC LIMIT 1;
SELECT DISTINCT Customer_Details  FROM Customers  WHERE Customer_ID IN (   SELECT Customer_ID    FROM Customers_and_Services    GROUP BY Customer_ID    ORDER BY COUNT(*)    LIMIT 1  )
SELECT COUNT(DISTINCT Customer_Details) FROM Customers UNION ALL SELECT COUNT(DISTINCT Service_Details) FROM Services;
SELECT count(*) FROM Customers UNION ALL SELECT count(*) FROM Services
SELECT Customer_ID FROM Customers WHERE Customer_Details LIKE "%Kutch%";
SELECT customer_details FROM Customers WHERE customer_details LIKE "%Kutch%";
SELECT t1.Service_Details FROM Services AS t1 WHERE t1.Service_ID IN (   SELECT t2.Service_ID   FROM Customers_and_Services AS t2   WHERE t2.Customer_ID IN (     SELECT t3.Customer_ID     FROM Customers AS t3     WHERE t3.Customer_Details = "Hardy Kutch"   )   UNION   SELECT t4.Service_ID   FROM Customer_Interactions AS t4   WHERE t4.Status_Code = "good" )
SELECT t1.Service_Details FROM Customers AS t2 JOIN Customers_and_Services AS t3 ON t2.Customer_ID = t3.Customer_ID JOIN Services AS t1 ON t3.Service_ID = t1.Service_ID WHERE t2.Customer_Details = "Hardy Kutch" UNION SELECT t1.Service_Details FROM Customer_Interactions AS t4 JOIN Services AS t1 ON t4.Service_ID = t1.Service_ID WHERE t4.Status_Code = "good";
SELECT t1.Service_Details FROM Customers AS t2 JOIN Customers_and_Services AS t3 ON t2.Customer_ID = t3.Customer_ID JOIN Services AS t1 ON t3.Service_ID = t1.Service_ID JOIN Customer_Interactions AS t4 ON t1.Service_ID = t4.Service_ID WHERE t2.Customer_Details = "Hardy Kutch" AND t4.Status_Code = "bad";
SELECT t3.Service_Details FROM Customers AS t1 JOIN Customers_and_Services AS t2 ON t1.Customer_ID = t2.Customer_ID JOIN Services AS t3 ON t2.Service_ID = t3.Service_ID JOIN Customer_Interactions AS t4 ON t2.Customer_ID = t4.Customer_ID AND t2.Service_ID = t4.Service_ID WHERE t1.Customer_Details = "Hardy Kutch" AND t4.Status_Code = "bad";
SELECT T1.Service_Details FROM Services AS T1 JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customer_ID = 15 AND T2.Channel_ID = 'ij';
SELECT T1.Service_Details FROM Services AS T1 JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Channel_ID IN (   SELECT Channel_ID   FROM Channels   WHERE Channel_Details = "15 ij" );
SELECT C.Customer_Details FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad';
SELECT T1.Customer_Details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = 'Stuck' AND T2.Services_and_Channels_Details = 'bad';
SELECT count(*) FROM Integration_Platform WHERE Integration_Platform_Details = 'Success';
SELECT count(*) FROM Integration_Platform WHERE Integration_Platform_Details = "Success";
SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE ip.Integration_Platform_Details = 'Failure';
SELECT Customers.Customer_Details FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform.Integration_Platform_Details = 'Fail';
SELECT Service_ID, Service_Details FROM Services EXCEPT SELECT t1.Service_ID, t1.Service_Details FROM Customers_and_Services AS t1 JOIN Services AS t2 ON t1.Service_ID = t2.Service_ID;
SELECT Service_Details  FROM Services  WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services);
SELECT Analytical_Layer_Type_Code, COUNT(*)  FROM Analytical_Layer  GROUP BY Analytical_Layer_Type_Code  ORDER BY COUNT(*) DESC;
SELECT Analytical_Layer_Type_Code, COUNT(*)  FROM Analytical_Layer  GROUP BY Analytical_Layer_Type_Code;
SELECT t2.Service_Details  FROM Customers_and_Services AS t1  JOIN Services AS t2 ON t1.Service_ID = t2.Service_ID  WHERE t1.Customers_and_Services_Details = 'unsatisfied';
SELECT Customers_and_Services_Details FROM Customers_and_Services WHERE Customers_and_Services_Details = "unsatisfied";
SELECT count(*) FROM Vehicles
SELECT count(*) FROM Vehicles
SELECT name FROM Vehicles ORDER BY Model_year DESC;
SELECT name FROM Vehicles ORDER BY Model_year DESC;
SELECT DISTINCT Type_of_powertrain FROM Vehicles;
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014;
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014;
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 OR Model_year = 2013;
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014 GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Model_year) = 2;
SELECT Type_of_powertrain, count(*) FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain, count(*) FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1
SELECT min(Annual_fuel_cost) ,  avg(Annual_fuel_cost) ,  max(Annual_fuel_cost) FROM Vehicles
SELECT min(Annual_fuel_cost), max(Annual_fuel_cost), avg(Annual_fuel_cost) FROM Vehicles;
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
SELECT name, Model_year  FROM Vehicles  WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
SELECT Type_of_powertrain, avg(Annual_fuel_cost)  FROM Vehicles  GROUP BY Type_of_powertrain  HAVING COUNT(id) >= 2;
SELECT Type_of_powertrain, avg(Annual_fuel_cost)  FROM Vehicles  GROUP BY Type_of_powertrain  HAVING COUNT(id) >= 2;
SELECT name, age, membership_credit FROM Customers;
SELECT name, age, membership_credit FROM Customers;
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1;
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1;
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers);
SELECT AVG(age)  FROM Customers  WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers);
SELECT * FROM Discount
SELECT * FROM Discount
SELECT V.name, RH.total_hours FROM Vehicles AS V JOIN Renting_history AS RH ON V.id = RH.vehicles_id
SELECT V.name, SUM(RH.total_hours) AS total_rental_hours FROM Vehicles AS V JOIN Renting_history AS RH ON V.id = RH.vehicles_id GROUP BY V.name;
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2)
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2)
SELECT V.name, V.Model_year FROM Vehicles AS V JOIN Renting_history AS RH ON V.id = RH.vehicles_id GROUP BY V.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT V.name, V.Model_year FROM Vehicles AS V JOIN Renting_history AS RH ON V.id = RH.vehicles_id GROUP BY V.name, V.Model_year ORDER BY COUNT(RH.id) DESC LIMIT 1;
SELECT name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id ORDER BY total_hours DESC;
SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history) ORDER BY (SELECT total_hours FROM Renting_history WHERE Renting_history.vehicles_id = Vehicles.id) DESC;
SELECT name FROM Discount GROUP BY name ORDER BY (SELECT COUNT(*) FROM Renting_history WHERE discount_id = Discount.id) DESC LIMIT 1
SELECT name FROM Discount JOIN Renting_history ON Discount.id = Renting_history.discount_id GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1
SELECT V.name, V.Type_of_powertrain FROM Vehicles AS V JOIN Renting_history AS RH ON V.id = RH.vehicles_id WHERE RH.total_hours > 30;
SELECT V.name, V.Type_of_powertrain FROM Vehicles AS V JOIN Renting_history AS RH ON V.id = RH.vehicles_id GROUP BY V.name, V.Type_of_powertrain HAVING SUM(RH.total_hours) > 30;
SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS avg_city, AVG(Highway_fuel_economy_rate) AS avg_highway FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain, avg(City_fuel_economy_rate) AS avg_city, avg(Highway_fuel_economy_rate) AS avg_highway FROM Vehicles GROUP BY Type_of_powertrain;
SELECT AVG(amount_of_loan) FROM Student_Loans
SELECT avg(amount_of_loan) FROM Student_Loans
SELECT S.bio_data, S.student_id FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id, S.bio_data HAVING COUNT(C.class_id) >= 2 AND S.student_id NOT IN (   SELECT D.student_id   FROM Detention D   GROUP BY D.student_id   HAVING COUNT(D.detention_id) >= 2 )
SELECT T1.bio_data, T1.student_id FROM Students AS T1 WHERE T1.student_id IN (   SELECT T2.student_id   FROM Classes AS T2   GROUP BY T2.student_id   HAVING COUNT(*) >= 2 ) OR T1.student_id IN (   SELECT T3.student_id   FROM Detention AS T3   GROUP BY T3.student_id   HAVING COUNT(*) < 2 );
SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' AND T2.class_details NOT LIKE 'net%';
Here is the SQL query:  SELECT teacher_details FROM Teachers WHERE teacher_id IN (   SELECT teacher_id   FROM Classes   WHERE class_details LIKE '%data%'   AND class_details NOT LIKE 'net%' )
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans);
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans);
SELECT T1.amount_of_loan, T1.date_of_loan FROM Student_Loans AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id JOIN Achievements AS T3 ON T2.student_id = T3.student_id GROUP BY T1.student_id, T1.amount_of_loan, T1.date_of_loan HAVING COUNT(T3.achievement_id) >= 2;
SELECT SL.amount_of_loan, SL.date_of_loan FROM Student_Loans AS SL JOIN Students AS S ON SL.student_id = S.student_id JOIN Achievements AS A ON S.student_id = A.student_id GROUP BY SL.student_id, SL.amount_of_loan, SL.date_of_loan HAVING COUNT(A.achievement_id) >= 2;
SELECT T1.teacher_id, T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id, T1.teacher_details ORDER BY COUNT(T2.class_id) DESC LIMIT 1;
SELECT T1.teacher_id, T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id, T1.teacher_details ORDER BY COUNT(T2.class_id) DESC LIMIT 1;
SELECT detention_summary FROM Detention;
SELECT DISTINCT detention_summary FROM Detention;
SELECT S.student_details, RT.address_type_description FROM Students AS S JOIN Students_Addresses AS SA ON S.student_id = SA.student_id JOIN Ref_Address_Types AS RT ON SA.address_type_code = RT.address_type_code
SELECT S.student_details, RT.address_type_description FROM Students AS S JOIN Students_Addresses AS SA ON S.student_id = SA.student_id JOIN Ref_Address_Types AS RT ON SA.address_type_code = RT.address_type_code;
SELECT S.bio_data, A.address_details FROM Students AS S JOIN Students_Addresses AS SA ON S.student_id = SA.student_id JOIN Addresses AS A ON SA.address_id = A.address_id
SELECT S.bio_data, S.student_details, SA.address_id, SA.address_type_code, SA.date_from, SA.date_to FROM Students AS S JOIN Students_Addresses AS SA ON S.student_id = SA.student_id;
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id;
SELECT S.bio_data, T.date_of_transcript FROM Students AS S JOIN Transcripts AS T ON S.student_id = T.student_id;
SELECT behaviour_monitoring_details, count(*)  FROM Behaviour_Monitoring  GROUP BY behaviour_monitoring_details  ORDER BY count(*) DESC  LIMIT 1;
SELECT behaviour_monitoring_details, COUNT(*)  FROM Behaviour_Monitoring  GROUP BY behaviour_monitoring_details  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT bio_data, student_details FROM Students WHERE student_id IN (   SELECT student_id   FROM Behaviour_Monitoring   GROUP BY student_id   HAVING COUNT(*) = (     SELECT COUNT(*)      FROM Behaviour_Monitoring      GROUP BY behaviour_monitoring_details      ORDER BY COUNT(*) DESC      LIMIT 1   ) )
SELECT bio_data, student_details FROM Students WHERE student_id IN (   SELECT student_id   FROM Behaviour_Monitoring   GROUP BY student_id   HAVING COUNT(*) = (     SELECT COUNT(*)     FROM Behaviour_Monitoring     GROUP BY behaviour_monitoring_details     ORDER BY COUNT(*) DESC     LIMIT 1   ) )
SELECT S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring BM ON S.student_id = BM.student_id GROUP BY S.student_id ORDER BY COUNT(DISTINCT BM.behaviour_monitoring_details) DESC, S.student_id LIMIT 1;
SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T1.bio_data ORDER BY COUNT(T2.behaviour_monitoring_details) DESC LIMIT 1;
SELECT S.bio_data, SE.event_date FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id;
SELECT S.bio_data, SE.event_date FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id;
SELECT COUNT(*) AS num_students, T1.event_type_code, T1.event_type_description FROM Student_Events AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T1.event_type_code, T2.event_type_description ORDER BY num_students DESC LIMIT 1;
SELECT T2.event_type_description, count(*)  FROM Student_Events AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code = T2.event_type_code  GROUP BY T1.event_type_code  ORDER BY count(*) DESC  LIMIT 1;
SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code;
SELECT A.achievement_details, RT.achievement_type_description FROM Achievements A JOIN Ref_Achievement_Type RT ON A.achievement_type_code = RT.achievement_type_code;
SELECT COUNT(DISTINCT T1.teacher_id) FROM Classes AS T1 WHERE T1.student_id NOT IN (   SELECT student_id   FROM Achievements )
SELECT COUNT(DISTINCT T1.teacher_id) FROM Teachers AS T1 WHERE T1.teacher_id NOT IN (   SELECT T2.teacher_id   FROM Classes AS T2   JOIN Achievements AS T3 ON T2.student_id = T3.student_id   GROUP BY T2.teacher_id   HAVING COUNT(T3.achievement_id) > 0 )
SELECT date_of_transcript, transcript_details FROM Transcripts;
SELECT date_of_transcript, transcript_details FROM Transcripts
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;
SELECT datetime_detention_start, datetime_detention_end FROM Detention;
SELECT datetime_detention_start, datetime_detention_end FROM Detention;
SELECT bio_data FROM Students WHERE student_details LIKE "%Suite%"
SELECT student_id, bio_data, student_details  FROM Students  WHERE student_details LIKE "%Suite%";
SELECT T1.teacher_details, T2.student_details FROM Classes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id JOIN Teachers AS T3 ON T1.teacher_id = T3.teacher_id;
SELECT T1.teacher_details, T2.bio_data FROM Classes AS T3 JOIN Teachers AS T1 ON T3.teacher_id = T1.teacher_id JOIN Students AS T2 ON T3.student_id = T2.student_id
SELECT COUNT(DISTINCT T1.class_id), T2.teacher_id FROM Classes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id ORDER BY COUNT(DISTINCT T1.class_id) DESC LIMIT 1;
SELECT T1.teacher_id, COUNT(*)  FROM Classes AS T1  GROUP BY T1.teacher_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT MAX(COUNT(*)), T1.student_id FROM Classes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT student_id, COUNT(*)  FROM Classes  GROUP BY student_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT S.student_id, S.bio_data, S.student_details FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id, S.bio_data, S.student_details HAVING COUNT(C.class_id) = 2;
SELECT S.student_id, S.bio_data, S.student_details FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id, S.bio_data, S.student_details HAVING COUNT(C.class_id) = 2;
SELECT t1.detention_type_code, t1.detention_type_description FROM Ref_Detention_Type AS t1 ORDER BY (SELECT COUNT(*) FROM Detention WHERE detention_type_code = t1.detention_type_code) ASC LIMIT 1;
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type ORDER BY (SELECT COUNT(*) FROM Detention WHERE detention_type_code = Ref_Detention_Type.detention_type_code) LIMIT 1;
Here is the SQL query:  SELECT bio_data, student_details FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Loans   WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans) );
SELECT bio_data, student_details FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Loans   WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans) )
SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1;
SELECT bio_data FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Loans   ORDER BY amount_of_loan ASC   LIMIT 1 )
SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1);
SELECT date_of_transcript FROM Transcripts JOIN Students ON Transcripts.student_id = Students.student_id JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans);
SELECT date_of_transcript FROM Transcripts WHERE student_id IN (   SELECT student_id   FROM Student_Loans   ORDER BY amount_of_loan DESC   LIMIT 1 );
SELECT T2.teacher_details FROM Transcripts AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_of_transcript ASC LIMIT 1;
SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id = T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1;
SELECT S.student_id, SUM(SL.amount_of_loan) AS total_loan FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id GROUP BY S.student_id;
SELECT student_id, sum(amount_of_loan)  FROM Student_Loans  GROUP BY student_id;
SELECT T1.student_id, T1.bio_data, count(*)  FROM Students_Course_Enrolment AS T1  JOIN Students AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id, T1.bio_data;
SELECT T1.student_id, T1.bio_data, COUNT(*)  FROM Students AS T1  JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id, T1.bio_data;
SELECT COUNT(DISTINCT student_id) FROM Detention
SELECT COUNT(DISTINCT student_id) FROM Detention
SELECT T1.address_type_code, T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.address_type_code, T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT bio_data FROM Students WHERE student_id NOT IN (   SELECT student_id   FROM Student_Loans ) AND student_id IN (   SELECT student_id   FROM Student_Events );
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans);
SELECT SA.date_from AS start_time, SA.date_to AS end_time FROM Students_Addresses AS SA JOIN Students AS S ON SA.student_id = S.student_id JOIN (   SELECT student_id   FROM Transcripts   GROUP BY student_id   HAVING COUNT(*) = 2 ) AS T ON S.student_id = T.student_id
SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (   SELECT student_id   FROM Transcripts   GROUP BY student_id   HAVING COUNT(transcript_id) = 2 )
SELECT datetime_detention_start FROM Detention ORDER BY datetime_detention_start ASC LIMIT 1;
SELECT datetime_detention_start FROM Detention;
SELECT Name FROM Author;
SELECT Name FROM Author;
SELECT Name, Address FROM Client
SELECT Name, Address FROM Client
SELECT Title, ISBN, SalePrice FROM Book;
SELECT Title, ISBN, SalePrice FROM Book;
SELECT count(*) FROM Book
SELECT count(*) FROM Book
SELECT count(*) FROM Author
SELECT count(*) FROM Author
SELECT count(*) FROM Client
SELECT COUNT(DISTINCT IdClient) FROM Client;
SELECT Name, Address FROM Client ORDER BY Name;
SELECT Name, Address FROM Client ORDER BY Name;
SELECT Book.Title, Author.Name FROM Book JOIN Author ON Book.Author = Author.idAuthor;
SELECT Book.Title, Author.Name FROM Book JOIN Author ON Book.Author = Author.idAuthor;
SELECT O.IdOrder, C.Name FROM Orders AS O JOIN Client AS C ON O.IdClient = C.IdClient
SELECT O.IdOrder, C.Name FROM Orders AS O JOIN Client AS C ON O.IdClient = C.IdClient
SELECT Name, COUNT(*) FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Name
SELECT Author.Name, count(*) FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.Name;
SELECT ISBN, count(*) FROM Books_Order GROUP BY ISBN
SELECT Book.ISBN, count(*)  FROM Book  JOIN Books_Order ON Book.ISBN = Books_Order.ISBN  GROUP BY Book.ISBN;
SELECT B.ISBN, SUM(BO.amount)  FROM Book AS B  JOIN Author_Book AS AB ON B.ISBN = AB.ISBN  JOIN Books_Order AS BO ON B.ISBN = BO.ISBN  GROUP BY B.ISBN;
SELECT T1.ISBN, SUM(T2.amount)  FROM Books_Order AS T2  JOIN Book AS T1 ON T2.ISBN = T1.ISBN  GROUP BY T1.ISBN;
SELECT Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Title ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Title  FROM Book AS T1  JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN  GROUP BY T1.Title  ORDER BY COUNT(T2.IdOrder) DESC  LIMIT 1;
SELECT T1.Title, T1.PurchasePrice FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN ORDER BY COUNT(T2.IdOrder) DESC LIMIT 1;
SELECT B.Title, B.PurchasePrice FROM Book AS B JOIN Author_Book AS AB ON B.ISBN = AB.ISBN JOIN Books_Order AS BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN, B.Title, B.PurchasePrice ORDER BY SUM(BO.amount) DESC LIMIT 1;
SELECT T1.Title  FROM Book AS T1  JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN
SELECT DISTINCT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order);
SELECT Name FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Name HAVING COUNT(*) > 0
SELECT DISTINCT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient;
SELECT Name, count(*) FROM Client GROUP BY Name
SELECT Client.Name, COUNT(*)  FROM Client  JOIN Orders ON Client.IdClient = Orders.IdClient  GROUP BY Client.Name;
SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY COUNT(*) DESC LIMIT 1;
SELECT C.Name, SUM(B.amount * B.SalePrice) AS TotalAmount FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder JOIN Book B ON BO.ISBN = B.ISBN GROUP BY C.Name
SELECT T1.Name, sum(T2.SalePrice)  FROM Client AS T1  JOIN Orders AS T2 ON T1.IdClient = T2.IdClient  GROUP BY T1.Name;
SELECT Name FROM Client JOIN (   SELECT IdClient, SUM(amount) AS total_amount   FROM Books_Order   GROUP BY IdClient   ORDER BY total_amount DESC   LIMIT 1 ) AS T1 ON Client.IdClient = T1.IdClient;
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder GROUP BY T1.Name ORDER BY SUM(T3.amount * T4.SalePrice) DESC LIMIT 1;
SELECT Title  FROM Book  WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders);
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT max(SalePrice), min(SalePrice) FROM Book;
SELECT max(SalePrice), min(SalePrice) FROM Book;
SELECT AVG(PurchasePrice) AS AveragePurchasePrice, AVG(SalePrice) AS AverageSalePrice FROM Book;
SELECT AVG(PurchasePrice) AS AveragePurchasePrice, AVG(SalePrice) AS AverageSalePrice FROM Book;
SELECT MAX(SalePrice - PurchasePrice) FROM Book;
SELECT MAX(SalePrice - PurchasePrice) FROM Book;
SELECT Title  FROM Book  WHERE SalePrice > (SELECT avg(SalePrice) FROM Book);
SELECT Title  FROM Book  WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book);
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1;
SELECT AVG(SalePrice) FROM Book WHERE Author = 2009;
SELECT AVG(SalePrice) FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = "George Orwell");
SELECT SalePrice FROM Book WHERE Author NOT IN (SELECT idAuthor FROM Author WHERE Name NOT LIKE "Plato");
SELECT SalePrice FROM Book WHERE Author NOT IN (SELECT idAuthor FROM Author WHERE Name = 'Jane Austin' OR Name = 'George Orwell' OR Name = 'J.R.R Tolkien')
SELECT Title FROM Book WHERE Author = 2009 AND SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE Author = 2009);
SELECT Title  FROM Book  WHERE Author = (SELECT idAuthor                  FROM Author                  WHERE Name = 'George Orwell')  ORDER BY SalePrice  LIMIT 1;
SELECT Title  FROM Book  WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato')  AND SalePrice < (SELECT AVG(SalePrice) FROM Book);
SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book);
SELECT Author FROM Book WHERE Title = "Pride and Prejudice";
SELECT Name FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT Book.Title  FROM Book  JOIN Author_Book ON Book.ISBN = Author_Book.ISBN  JOIN Author ON Author_Book.Author = Author.idAuthor  WHERE Author.Name LIKE '%Plato%';
SELECT Title  FROM Book  WHERE Author IN (SELECT idAuthor                   FROM Author                   WHERE Name LIKE '%Plato%');
SELECT COUNT(*) FROM Books_Order WHERE ISBN = '0482174555366';
SELECT COUNT(*)  FROM Books_Order  WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice');
SELECT IdOrder FROM Books_Order WHERE ISBN IN (   SELECT ISBN   FROM Book   WHERE Title = 'Pride and Prejudice' ) AND ISBN IN (   SELECT ISBN   FROM Book   WHERE Title = 'The Little Prince' );
SELECT DISTINCT IdOrder FROM Books_Order WHERE ISBN IN (   SELECT ISBN   FROM Book   WHERE Title = 'Pride and Prejudice' ) AND ISBN IN (   SELECT ISBN   FROM Book   WHERE Title = 'The Little Prince' );
SELECT ISBN FROM Books_Order WHERE IdOrder IN (   SELECT IdOrder   FROM Books_Order   WHERE ISBN IN (     SELECT ISBN     FROM Books_Order     WHERE IdOrder IN (       SELECT IdOrder       FROM Books_Order       WHERE amount > 0       AND IdOrder LIKE '0000001P'     )   )   AND IdOrder IN (     SELECT IdOrder     FROM Books_Order     WHERE amount > 0     AND IdOrder LIKE '0000002P'   ) )
Here is the SQL query:  SELECT DISTINCT B.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name IN ('Peter Doe', 'James Smith')
SELECT T2.Title FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T2.IdClient = T3.IdClient WHERE T3.Name = "Peter Doe" EXCEPT SELECT T2.Title FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T2.IdClient = T3.IdClient WHERE T3.Name = "James Smith";
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Books_Order AS T3 ON T1.ISBN = T3.ISBN JOIN Orders AS T4 ON T3.IdOrder = T4.IdOrder JOIN Client AS T5 ON T4.IdClient = T5.IdClient WHERE T5.Name = 'Peter Doe' EXCEPT SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Books_Order AS T3 ON T1.ISBN = T3.ISBN JOIN Orders AS T4 ON T3.IdOrder = T4.IdOrder JOIN Client AS T5 ON T4.IdClient = T5.IdClient WHERE T5.Name = 'James Smith';
SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = "Pride and Prejudice";
SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT count(*) FROM book
SELECT Title FROM book ORDER BY Title ASC
SELECT Title FROM book ORDER BY Pages DESC
SELECT Type, Release FROM book;
SELECT Book_ID, max(Chapters) , min(Chapters) FROM book GROUP BY Book_ID;
SELECT Title FROM book WHERE Type != 'Poet';
SELECT avg(Rating) FROM review
SELECT Title, Rating FROM book INNER JOIN review ON book.Book_ID = review.Book_ID;
SELECT Rating FROM review, book WHERE review.Book_ID = book.Book_ID ORDER BY Chapters DESC LIMIT 1;
SELECT Rank FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Pages ASC LIMIT 1);
SELECT Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY Rank DESC LIMIT 1
SELECT AVG(Readers_in_Million) FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE book.Type = "Novel";
SELECT Type, COUNT(*) FROM book GROUP BY Type;
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1
SELECT Type FROM book GROUP BY Type HAVING COUNT(*) >= 3
SELECT Title FROM book ORDER BY (SELECT Rating FROM review WHERE review.Book_ID = book.Book_ID) ASC
SELECT Title, Audio FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY Readers_in_Million DESC;
SELECT COUNT(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review);
SELECT Type FROM book WHERE Chapters > 75 INTERSECT SELECT Type FROM book WHERE Chapters < 50
SELECT COUNT(DISTINCT Type) FROM book
SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
SELECT count(*) FROM customer
SELECT count(*) FROM customer
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Name FROM customer ORDER BY Level_of_Membership ASC;
SELECT Nationality, Card_Credit FROM customer
SELECT Nationality, Card_Credit FROM customer;
SELECT Name FROM customer WHERE Nationality = "England" OR Nationality = "Australia";
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia';
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1;
SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership > 1;
SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1
SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1;
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality;
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM customer WHERE Card_Credit < 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit > 75
SELECT Nationality FROM customer WHERE Card_Credit > 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit < 75
SELECT T1.Name, T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN branch AS T3 ON T2.Branch_ID = T3.Branch_ID
SELECT c.Name, co.Dish_Name FROM customer AS c JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID;
SELECT T1.Name, T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN branch AS T3 ON T2.Branch_ID = T3.Branch_ID ORDER BY T2.Quantity DESC;
SELECT C.Name, CO.Dish_Name FROM customer_order AS CO JOIN customer AS C ON CO.Customer_ID = C.Customer_ID ORDER BY CO.Quantity DESC;
SELECT customer.Name, sum(customer_order.Quantity)  FROM customer  JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID  GROUP BY customer.Name;
SELECT c.Name, SUM(co.Quantity)  FROM customer AS c  JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID  GROUP BY c.Name  ORDER BY SUM(co.Quantity);
SELECT c.Customer_ID, c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID, c.Name HAVING SUM(co.Quantity) > 1;
SELECT name FROM customer WHERE Customer_ID IN (   SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1 )
SELECT DISTINCT Manager FROM branch
SELECT DISTINCT Manager FROM branch
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT count(*) FROM member
SELECT Name FROM member ORDER BY Age ASC
SELECT Name, Nationality FROM member;
SELECT Name FROM member WHERE Nationality != "England"
SELECT Name FROM member WHERE Age = 19 OR Age = 20
SELECT Name FROM member ORDER BY Age DESC LIMIT 1
SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality;
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT T2.Name ,  T3.Club_Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T1.Club_ID  =  T3.Club_ID
SELECT T2.Team_Leader FROM club AS T1 JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Overall_Ranking > 100;
SELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Year_Join < 2018
SELECT T2.Team_Leader  FROM club AS T1  JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID  WHERE T1.Club_Name = "Houston";
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
SELECT Nationality FROM member WHERE Age > 22 INTERSECT SELECT Nationality FROM member WHERE Age < 19
SELECT AVG(Age) FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader);
SELECT Club_Name FROM club WHERE Club_Name LIKE "%state%"
SELECT Collection_Subset_Name FROM Collection_Subsets;
SELECT Collection_Subset_Name FROM Collection_Subsets;
SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection";
SELECT C.Collection_Name, C.Collection_Description FROM Collection_Subsets AS CS JOIN Collection_Subset_Members AS CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID JOIN Collections AS C ON CSM.Collection_ID = C.Collection_ID WHERE CS.Collection_Subset_Name = 'Top collection';
SELECT Document_Subsets.Document_Subset_Name  FROM Document_Subsets  JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID;
SELECT Document_Subset_Name FROM Document_Subsets;
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';
SELECT Document_Object_ID FROM Document_Objects;
SELECT Document_Object_ID FROM Document_Objects;
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection';
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection';
SELECT Owner FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin');
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin');
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL;
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL;
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin';
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects)
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL;
SELECT T1.Document_Object_ID, count(*)  FROM Document_Objects AS T1  JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID  GROUP BY T1.Document_Object_ID
SELECT DO.Parent_Document_Object_ID, COUNT(DI.Document_Object_ID)  FROM Document_Objects AS DO  JOIN Documents_in_Collections AS DI ON DO.Document_Object_ID = DI.Document_Object_ID  GROUP BY DO.Parent_Document_Object_ID;
SELECT Collection_Name FROM Collections;
SELECT Collection_Subset_Name FROM Collection_Subsets
SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best";
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best';
SELECT Collection_Name  FROM Collections  WHERE Collection_Name = "Nice";
SELECT T2.Collection_Name  FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID  WHERE T1.Collection_Name = "Nice";
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections);
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections);
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (   SELECT Document_Object_ID   FROM Document_Subset_Members   GROUP BY Document_Object_ID   HAVING COUNT(*) > 1 )
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1);
SELECT count(*) FROM Documents_in_Collections AS t1 JOIN Collections AS t2 ON t1.Collection_ID = t2.Collection_ID WHERE t2.Collection_Name = "Best";
SELECT COUNT(*)  FROM Collections AS T1  JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID  JOIN Document_Objects AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID  JOIN Document_Subsets AS T4 ON T3.Document_Object_ID = T4.Document_Object_ID  WHERE T4.Document_Subset_Name = 'Best for 2000' OR T4.Document_Subset_Name = 'Best for 2001' OR T4.Document_Subset_Name = 'Best for 2002';
SELECT dso.Document_Object_ID FROM Document_Objects dso JOIN Document_Subset_Members dsm ON dso.Document_Object_ID = dsm.Document_Object_ID WHERE dso.Owner = 'Ransom';
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom';
SELECT Collection_Subset_ID, count(*) FROM Collection_Subset_Members GROUP BY Collection_Subset_ID;
SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(*)  FROM Collection_Subsets AS CS  JOIN Collection_Subset_Members AS CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID  GROUP BY CS.Collection_Subset_ID, CS.Collection_Subset_Name;
SELECT Document_Object_ID, COUNT(*) FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID;
SELECT Document_Object_ID, count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1;
SELECT Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Document_Object_ID, count(*)  FROM Document_Subset_Members  GROUP BY Document_Object_ID  HAVING count(*) BETWEEN 2 AND 4;
SELECT Document_Subset_ID, COUNT(*)  FROM Document_Subset_Members  GROUP BY Document_Subset_ID  HAVING COUNT(Document_Object_ID) BETWEEN 2 AND 4;
SELECT DISTINCT Owner  FROM Document_Objects  WHERE Parent_Document_Object_ID IN    (SELECT Document_Object_ID     FROM Document_Objects     WHERE Owner = 'Braeden');
SELECT DISTINCT T1.Owner  FROM Document_Objects AS T1  JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID  WHERE T2.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden');
SELECT Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Braeden';
SELECT DISTINCT T1.Description FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Braeden';
SELECT Document_Subset_ID, name, COUNT(DISTINCT Document_Object_ID)  FROM Document_Subset_Members  JOIN documents ON Document_Object_ID = document_id  GROUP BY Document_Subset_ID, name  ORDER BY Document_Subset_ID;
SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DO.Document_Object_ID) FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DS.Document_Subset_ID;
SELECT Document_Subset_ID, name, COUNT(DISTINCT Document_Object_ID)  FROM Document_Subset_Members  JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID  GROUP BY Document_Subset_ID, name  ORDER BY COUNT(DISTINCT Document_Object_ID) DESC  LIMIT 1;
SELECT Document_Subset_ID, count(DISTINCT Document_Object_ID) AS num_docs, (SELECT name FROM Document_Objects WHERE Document_Object_ID = Document_Subset_Members.Document_Object_ID) AS name FROM Document_Subset_Members GROUP BY Document_Subset_ID ORDER BY num_docs DESC LIMIT 1;
SELECT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000';
SELECT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000';
SELECT Document_Subsets.Document_Subset_Name, Document_Objects.Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID;
SELECT DS.Document_Subset_Name, DO.Document_Object_ID FROM Document_Objects AS DO JOIN Document_Subset_Members AS DSM ON DO.Document_Object_ID = DSM.Document_Object_ID JOIN Document_Subsets AS DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID GROUP BY DO.Document_Object_ID, DS.Document_Subset_Name
SELECT Collection_Name  FROM Collections  WHERE Collection_ID IN (   SELECT Collection_ID    FROM Documents_in_Collections    WHERE Document_Object_ID IN (     SELECT Document_Object_ID      FROM Document_Objects      WHERE Owner = 'Ransom'   ) );
SELECT Collection_Name  FROM Collections  JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID  JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID  WHERE Document_Objects.Owner = 'Ransom';
SELECT count(*) ,  T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T1.Document_Object_ID
SELECT Document_Object_ID, count(*) FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT count(*) FROM Documents_in_Collections AS t1 JOIN Collections AS t2 ON t1.Collection_ID = t2.Collection_ID WHERE t2.Collection_Name = 'Best';
SELECT COUNT(*) FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best';
SELECT d.document_id FROM Documents_in_Collections dc JOIN Document_Objects d ON dc.Document_Object_ID = d.Document_Object_ID JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(*) FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best';
SELECT C.Collection_Name, C.Collection_ID, count(DI.Document_Object_ID) FROM Collections AS C JOIN Documents_in_Collections AS DI ON C.Collection_ID = DI.Collection_ID GROUP BY C.Collection_ID, C.Collection_Name ORDER BY count(DI.Document_Object_ID) DESC LIMIT 1;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(Documents_in_Collections.Document_Object_ID) FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID JOIN Documents_in_Collections ON Collection_Subset_Members.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Best' GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name ORDER BY COUNT(Documents_in_Collections.Document_Object_ID) DESC LIMIT 1;
SELECT DISTINCT D1.Document_Object_ID FROM Document_Subsets AS D2 JOIN Document_Subset_Members AS D3 ON D2.Document_Subset_ID = D3.Document_Subset_ID JOIN Documents_in_Collections AS D4 ON D3.Document_Object_ID = D4.Document_Object_ID JOIN Collections AS D5 ON D4.Collection_ID = D5.Collection_ID WHERE D2.Document_Subset_Name = "Best for 2000" AND D5.Collection_Name = "Best";
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' INTERSECT SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best';
SELECT DISTINCT D1.Document_Object_ID FROM Documents_in_Collections AS D1 JOIN Collections AS C ON D1.Collection_ID = C.Collection_ID JOIN Document_Subset_Members AS D2 ON D1.Document_Object_ID = D2.Document_Object_ID WHERE C.Collection_Name = "Best" AND D2.Document_Subset_ID NOT IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000");
SELECT DISTINCT D1.Document_Object_ID FROM Documents_in_Collections D1 JOIN Collections C ON D1.Collection_ID = C.Collection_ID JOIN Document_Subset_Members D2 ON D1.Document_Object_ID = D2.Document_Object_ID WHERE C.Collection_Name = 'Best' AND D2.Document_Subset_ID NOT IN (   SELECT Document_Subset_ID   FROM Document_Subset_Members   WHERE Document_Subset_Name = 'Best for 2000' );
SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID = T3.Document_Object_ID WHERE T2.Document_Subset_Name = "Best for 2000" OR T3.Collection_ID IN (   SELECT Collection_ID   FROM Collections   WHERE Collection_Name = "Best" );
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' UNION SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best';
SELECT C.Collection_Name FROM Collections AS C JOIN Collection_Subset_Members AS CS ON C.Collection_ID = CS.Collection_ID WHERE CS.Related_Collection_ID IN (   SELECT Collection_ID   FROM Collections   WHERE Collection_Name = 'Best' );
SELECT T2.Collection_Name  FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID  WHERE T2.Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT COUNT(*)  FROM Collection_Subset_Members  WHERE Collection_ID IN (   SELECT Collection_ID    FROM Collection_Subset_Members    WHERE Related_Collection_ID IN (     SELECT Collection_Subset_ID      FROM Collection_Subsets      WHERE Collection_Subset_Name = "Best"   ) );
SELECT count(DISTINCT Collection_ID) FROM Documents_in_Collections JOIN Document_Subsets ON Documents_in_Collections.Document_Object_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name LIKE "%Best%";
Here is the SQL query:  SELECT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T2.Collection_ID = 6;
SELECT T2.Collection_Name  FROM Collections AS T1  JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID  WHERE T1.Collection_Name = 'Best';
SELECT count(*) FROM songs WHERE name LIKE "%Love%";
SELECT name FROM songs ORDER BY name ASC
SELECT name, language FROM songs;
SELECT max(voice_sound_quality), min(voice_sound_quality) FROM performance_score
SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id WHERE participants.name = 'Freeway';
SELECT id, language, original_artist FROM songs WHERE name != 'Love';
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love';
SELECT DISTINCT stage_presence FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE language = 'English';
SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id, T1.name HAVING COUNT(T2.songs_id) >= 2;
SELECT P.id, P.name, P.popularity FROM participants P JOIN performance_score PS ON P.id = PS.participant_id GROUP BY P.id, P.name, P.popularity ORDER BY COUNT(PS.songs_id) DESC;
SELECT p.id, p.name FROM participants AS p JOIN performance_score AS ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5;
SELECT voice_sound_quality FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English';
SELECT songs.id, songs.name FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.id, songs.name ORDER BY COUNT(participant_id) DESC LIMIT 1;
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9;
SELECT count(*) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score);
SELECT language, AVG(rhythm_tempo)  FROM songs  JOIN performance_score ON songs.id = performance_score.songs_id  GROUP BY language;
SELECT DISTINCT T1.name  FROM participants AS T1  JOIN performance_score AS T2 ON T1.id = T2.participant_id  JOIN songs AS T3 ON T2.songs_id = T3.id  WHERE T3.language = 'English';
SELECT T1.name, T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language IN ('Croatian', 'English') GROUP BY T1.name, T1.popularity HAVING COUNT(DISTINCT T3.language) = 2;
SELECT name FROM songs WHERE name LIKE "%Is%"
SELECT T2.original_artist FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T1.rhythm_tempo > 5 ORDER BY T1.voice_sound_quality DESC;
SELECT count(*) FROM City
SELECT count(*) FROM City
SELECT state FROM City GROUP BY state;
SELECT DISTINCT state FROM City;
SELECT count(distinct country) FROM City
SELECT count(DISTINCT country) FROM City
SELECT city_name, city_code, state, country FROM City
SELECT city_name, city_code, state, country FROM City;
SELECT latitude, longitude FROM City WHERE city_name = "Baltimore";
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT city_name FROM City WHERE state = 'PA';
SELECT city_name FROM City WHERE state = 'PA';
SELECT count(*) FROM City AS T1 WHERE country = 'Canada';
SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Canada';
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude;
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude;
SELECT state, count(*) FROM City GROUP BY state;
SELECT count(*) , state FROM City GROUP BY state
SELECT country, count(*) FROM City GROUP BY country;
SELECT country, count(*) FROM City GROUP BY country;
SELECT state FROM City GROUP BY state HAVING COUNT(*) >= 2
SELECT state FROM City GROUP BY state HAVING COUNT(*) >= 2
SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM City GROUP BY country ORDER BY count(*) LIMIT 1;
SELECT country FROM City GROUP BY country ORDER BY COUNT(*) LIMIT 1;
SELECT Fname, LName FROM Student WHERE city_code IN (   SELECT city_code   FROM City   WHERE state = 'MD' )
SELECT Fname || ' ' || LName FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state = 'MD');
SELECT count(*) FROM Student WHERE city_code = "HKG";
SELECT count(*) FROM Student WHERE city_code = "HKG" OR city_code = "CHI";
SELECT Fname, Major FROM Student WHERE city_code = 'BAL';
SELECT Fname, Major FROM Student WHERE city_code = 'BAL';
SELECT country, COUNT(*)  FROM Student  JOIN City ON Student.city_code = City.city_code  GROUP BY country;
SELECT country, COUNT(*) FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country;
SELECT count(*) , city_code FROM Student GROUP BY city_code
SELECT city_code, count(*) FROM Student GROUP BY city_code
SELECT state FROM City GROUP BY state ORDER BY (SELECT COUNT(*) FROM Student WHERE city_code = City.city_code) DESC LIMIT 1;
SELECT state FROM City GROUP BY state ORDER BY (SELECT COUNT(*) FROM Student WHERE city_code = City.city_code) DESC LIMIT 1
SELECT country FROM City GROUP BY country ORDER BY count(*) LIMIT 1;
SELECT country FROM City GROUP BY country ORDER BY (SELECT COUNT(*) FROM Student WHERE city_code = City.city_code) ASC LIMIT 1
SELECT city_name FROM City WHERE city_code IN (   SELECT city_code   FROM Student   GROUP BY city_code   HAVING COUNT(*) >= 3 )
SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_name HAVING COUNT(T2.StuID) >= 3;
SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student) GROUP BY state HAVING COUNT(*) > 5;
SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(*) > 5;
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA');
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA');
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA');
SELECT StuID FROM Student WHERE Sex = 'F' JOIN City ON Student.city_code = City.city_code WHERE City.state = 'PA';
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA');
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA');
SELECT distance FROM Direct_distance WHERE city1_code = "BAL" AND city2_code = "CHI";
SELECT distance FROM Direct_distance WHERE city1_code = "BAL" AND city2_code = "CHI";
SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR';
SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR';
SELECT avg(distance), min(distance), max(distance) FROM Direct_distance;
SELECT avg(distance), min(distance), max(distance) FROM Direct_distance;
SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1;
SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1;
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT avg(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000;
SELECT city1_code FROM Direct_distance WHERE distance < 1000;
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT avg(distance) FROM Direct_distance WHERE city1_code = 'BAL';
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'BOS';
SELECT city_name FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE city2_code IN (SELECT city_code FROM City WHERE city_name = 'Chicago'));
SELECT city_name FROM City WHERE latitude = (SELECT MAX(latitude) FROM City WHERE longitude = (SELECT MIN(longitude) FROM City WHERE latitude < 41.8781));
SELECT city_name FROM City WHERE city_code = (SELECT city1_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1);
SELECT city_name FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')) ORDER BY distance DESC LIMIT 1
SELECT city1_code, sum(distance) FROM Direct_distance GROUP BY city1_code
SELECT City.city_code, SUM(Direct_distance.distance)  FROM City  JOIN Direct_distance ON City.city_code = Direct_distance.city1_code  GROUP BY City.city_code;
SELECT T1.city_name, avg(T2.distance)  FROM City AS T1  JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code  GROUP BY T1.city_name;
SELECT City.city_name, avg(Direct_distance.distance)  FROM City  JOIN Direct_distance ON City.city_code = Direct_distance.city1_code  GROUP BY City.city_name;
SELECT sum(T1.distance)  FROM Direct_distance AS T1  JOIN City AS T2 ON T1.city1_code = T2.city_code  JOIN City AS T3 ON T1.city2_code = T3.city_code  JOIN Student AS T4 ON T4.city_code = T2.city_code  WHERE T4.Fname = "Linda" AND T4.LName = "Smith" OR T4.Fname = "Tracy" AND T4.LName = "Kim";
SELECT d.distance FROM Student s JOIN City c1 ON s.city_code = c1.city_code JOIN City c2 ON s.city_code = c2.city_code JOIN Direct_distance d ON c1.city_code = d.city1_code AND c2.city_code = d.city2_code WHERE s.Fname = "Linda" AND s.Lname = "Smith" AND c1.city_name = c2.city_name;
SELECT Fname, LName FROM Student WHERE city_code = (SELECT city_code FROM City ORDER BY latitude DESC LIMIT 1) AND LName = 'Smith';
SELECT Fname, LName FROM Student WHERE StuID = (   SELECT t1.StuID   FROM Student AS t1   JOIN City AS t2 ON t1.city_code = t2.city_code   JOIN Direct_distance AS t3 ON t2.city_code = t3.city1_code   WHERE t1.Fname = 'Linda' AND t1.LName = 'Smith'   ORDER BY t3.distance DESC   LIMIT 1 );
SELECT C.state FROM Student S JOIN City C ON S.city_code = C.city_code WHERE S.Fname = "Linda";
SELECT T1.state  FROM Student AS T1  JOIN City AS T2 ON T1.city_code = T2.city_code  WHERE T1.Fname = 'Linda';
SELECT * FROM Sailors WHERE age > 30;
SELECT name FROM Sailors WHERE age > 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT B.name  FROM Boats AS B  JOIN Reserves AS R ON B.bid = R.bid  WHERE R.sid = 1;
SELECT DISTINCT bid FROM Reserves WHERE sid = 1;
SELECT name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE bid = 102;
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102);
SELECT DISTINCT bid FROM Reserves
SELECT DISTINCT bid FROM Reserves;
SELECT name FROM Sailors WHERE name LIKE '%e%';
SELECT name FROM Sailors WHERE name LIKE '%e%';
SELECT sid FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors);
SELECT sid FROM Sailors WHERE age > (SELECT min(age) FROM Sailors);
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors WHERE rating > 7);
SELECT DISTINCT S1.name  FROM Sailors S1, Sailors S2  WHERE S1.age > S2.age AND S2.rating > 7;
SELECT S.name, S.sid FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(R.bid) > 0;
SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid;
SELECT S.sid, S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(R.bid) > 1
SELECT DISTINCT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid GROUP BY S.name HAVING COUNT(R.bid) >= 2;
SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue');
SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue');
SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color IN ('red', 'blue');
SELECT S.name, S.sid FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.color IN ('red', 'blue');
SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = "red" AND Boats.color = "blue";
SELECT Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue';
SELECT S.name, S.sid FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.color = 'red' OR B.color = 'blue';
SELECT S.sid, S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.color IN ('red', 'blue');
SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE bid = 103;
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103);
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis');
SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis');
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis');
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis');
Here is the SQL query:  SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE S.rating > 2;
SELECT S.name, S.sid FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid WHERE S.rating >= 3;
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1;
SELECT count(*) FROM Sailors;
SELECT count(*) FROM Sailors;
SELECT avg(age) FROM Sailors WHERE rating = 7;
SELECT avg(age) FROM Sailors WHERE rating = 7;
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%';
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%';
SELECT avg(rating), max(age) FROM Sailors
SELECT avg(rating), max(age) FROM Sailors;
SELECT bid, COUNT(*) FROM Reserves GROUP BY bid;
SELECT bid, COUNT(*) FROM Reserves GROUP BY bid;
SELECT Boats.bid, COUNT(*)  FROM Boats  JOIN Reserves ON Boats.bid = Reserves.bid  WHERE Boats.bid > 50  GROUP BY Boats.bid;
SELECT Boats.name, COUNT(Reserves.sid)  FROM Boats  JOIN Reserves ON Boats.bid = Reserves.bid  WHERE Boats.bid > 50  GROUP BY Boats.name;
SELECT Boats.name, COUNT(*)  FROM Boats  JOIN Reserves ON Boats.bid = Reserves.bid  GROUP BY Boats.name  HAVING COUNT(Reserves.sid) > 1;
SELECT b.name, COUNT(r.bid) AS num_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name HAVING COUNT(r.bid) > 1;
SELECT B.name, COUNT(*)  FROM Reserves AS R  JOIN Sailors AS S ON R.sid = S.sid  JOIN Boats AS B ON R.bid = B.bid  WHERE S.sid > 1  GROUP BY B.name;
SELECT B.name, count(*)  FROM Reserves R  JOIN Sailors S ON R.sid = S.sid  JOIN Boats B ON R.bid = B.bid  WHERE S.sid > 1  GROUP BY B.name;
SELECT S.rating, AVG(S.age)  FROM Sailors S  JOIN Reserves R ON S.sid = R.sid  JOIN Boats B ON R.bid = B.bid  WHERE B.color = 'red'  GROUP BY S.rating;
SELECT S.rating, AVG(S.age)  FROM Sailors S  JOIN Reserves R ON S.sid = R.sid  JOIN Boats B ON R.bid = B.bid  WHERE B.color = 'red'  GROUP BY S.rating;
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT count(*) FROM Boats
SELECT count(*) FROM Boats
SELECT COUNT(*) FROM Boats WHERE color = 'red';
SELECT count(*) FROM Boats WHERE color = 'red';
SELECT B.name  FROM Sailors S  JOIN Reserves R ON S.sid = R.sid  JOIN Boats B ON R.bid = B.bid  WHERE S.age BETWEEN 20 AND 30;
SELECT T2.name  FROM Reserves AS T1  JOIN Boats AS T2 ON T1.bid = T2.bid  JOIN Sailors AS T3 ON T1.sid = T3.sid  WHERE T3.age BETWEEN 20 AND 30;
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')));
SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')));
SELECT rating FROM Sailors ORDER BY rating DESC LIMIT 1;
SELECT max(rating) FROM Sailors
SELECT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.name = 'Melon';
SELECT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.name = 'Melon';
SELECT name, age FROM Sailors ORDER BY rating DESC;
SELECT name, age FROM Sailors ORDER BY rating DESC;
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1;
SELECT Model FROM headphone ORDER BY Model;
SELECT DISTINCT Model FROM headphone ORDER BY Model;
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) > 2
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) <= 2
SELECT Class, count(*) FROM headphone WHERE Price > 200 GROUP BY Class;
SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class;
SELECT count(DISTINCT Earpads) FROM headphone
SELECT count(DISTINCT Earpads) FROM headphone
SELECT Earpads, COUNT(*) AS Count FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Earpads ORDER BY Count DESC LIMIT 2;
SELECT earpads, COUNT(*) AS count FROM headphone GROUP BY earpads ORDER BY count DESC LIMIT 2;
SELECT Model, Class, Construction FROM headphone ORDER BY Price LIMIT 1;
SELECT Model, Class, Construction FROM headphone ORDER BY Price LIMIT 1;
SELECT Construction, avg(Price) FROM headphone GROUP BY Construction;
SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction;
SELECT Class FROM headphone WHERE Earpads = "Comfort Pads" INTERSECT SELECT Class FROM headphone WHERE Earpads = "Bowls";
SELECT Class FROM headphone WHERE Earpads = "Bowls" INTERSECT SELECT Class FROM headphone WHERE Earpads = "Comfort Pads";
SELECT Earpads FROM headphone WHERE Earpads NOT IN (SELECT Earpads FROM headphone WHERE Construction = 'Plastic');
SELECT Earpads FROM headphone WHERE Construction != 'Plastic';
SELECT Model FROM headphone WHERE Price < (SELECT avg(Price) FROM headphone)
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone);
SELECT Name FROM store ORDER BY Date_Opened;
SELECT Name FROM store ORDER BY Date_Opened;
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana';
SELECT Name, Parking FROM store WHERE Neighborhood = "Tarzana";
SELECT count(DISTINCT Neighborhood) FROM store
SELECT COUNT(DISTINCT Neighborhood) FROM store
SELECT count(*) ,  Neighborhood FROM store GROUP BY Neighborhood
SELECT Neighborhood, count(*) FROM store GROUP BY Neighborhood;
SELECT s.Name, count(h.Headphone_ID)  FROM store AS s  JOIN stock AS st ON s.Store_ID = st.Store_ID  JOIN headphone AS h ON st.Headphone_ID = h.Headphone_ID  GROUP BY s.Name  ORDER BY count(h.Headphone_ID) DESC  LIMIT 1;
SELECT T1.Name, SUM(T2.Quantity)  FROM store AS T1  JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID  GROUP BY T1.Name;
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
SELECT Model  FROM headphone  WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock ORDER BY Quantity DESC LIMIT 1);
SELECT Model FROM headphone AS t1 JOIN stock AS t2 ON t1.Headphone_ID = t2.Headphone_ID GROUP BY t1.Model ORDER BY SUM(t2.Quantity) DESC LIMIT 1;
SELECT COUNT(*) FROM stock WHERE Store_ID IN (SELECT Store_ID FROM store WHERE Name = 'Woodman');
SELECT SUM(Quantity) FROM stock AS T1 JOIN store AS T2 ON T1.Store_ID = T2.Store_ID WHERE T2.Name = 'Woodman';
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT Neighborhood  FROM store  WHERE Store_ID NOT IN (SELECT Store_ID FROM stock);
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Paper;
SELECT COUNT(*) FROM Paper;
SELECT count(*) FROM Affiliation
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(*) FROM Paper WHERE venue = "NAACL" AND year = 2000;
SELECT COUNT(*) FROM Paper WHERE venue = "NAACL" AND year = 2000;
SELECT COUNT(*) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Paper.year = 2009 AND Affiliation.name = "Columbia University";
SELECT COUNT(*)  FROM Paper  JOIN Author_list ON Paper.paper_id = Author_list.paper_id  JOIN Author ON Author_list.author_id = Author.author_id  JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id  WHERE Paper.year = 2000 AND Affiliation.name = "A-Life Medical, Inc.";
SELECT name, address FROM Affiliation;
SELECT name, address FROM Affiliation;
SELECT DISTINCT venue, year FROM Paper ORDER BY year;
SELECT DISTINCT venue FROM Paper ORDER BY year;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = "A-Life Medical, Inc.";
SELECT P.title, P.paper_id FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Author AS A ON AL.author_id = A.author_id JOIN Affiliation AS AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.name = "A-Life Medical, Inc."
SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown';
SELECT P.title, P.paper_id FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Author AS A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown';
SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id JOIN Affiliation AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.name IN ('A-Life Medical, Inc.', '3SOFT GmbH')
SELECT P.title, P.paper_id FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Author AS A ON AL.author_id = A.author_id JOIN Affiliation AS AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.name = 'A-Life Medical, Inc.' OR AF.name = '20/20 Speech Ltd.';
SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id WHERE AL.author_id IN (   SELECT A.author_id   FROM Author A   WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') )
SELECT t1.title, t2.paper_id FROM Author AS t1 JOIN Author_list AS t2 ON t1.author_id = t2.author_id WHERE t1.name = "Kathleen" AND t2.author_id IN (   SELECT author_id   FROM Author_list   WHERE author_id = 9573 )
SELECT P.title, P.paper_id FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id WHERE A.author_id IN (SELECT A2.author_id FROM Author A2 WHERE A2.name = 'Mckeown') AND A.author_id NOT IN (SELECT A3.author_id FROM Author A3 WHERE A3.name = 'Rambow');
SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND A.author_id NOT IN (   SELECT author_id   FROM Author_list   WHERE author_id = (     SELECT author_id     FROM Author_list     WHERE paper_id = P.paper_id     AND affiliation_id = (       SELECT affiliation_id       FROM Author_list       WHERE author_id = (         SELECT author_id         FROM Author         WHERE name = 'Rambow'       )     )   ) ;
SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen');
SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen');
SELECT A.name, COUNT(AL.paper_id) AS num_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.name ORDER BY num_papers DESC;
SELECT a.name, COUNT(p.paper_id) AS num_papers FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name ORDER BY num_papers;
SELECT affiliation_id, name, COUNT(paper_id) AS num_papers FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY affiliation_id, name ORDER BY num_papers ASC;
SELECT A.name, COUNT(*) AS num_papers FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id GROUP BY A.name ORDER BY num_papers DESC;
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name HAVING COUNT(T2.paper_id) > 50;
SELECT name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING COUNT(T2.paper_id) > 50;
SELECT name FROM Author AS T1 WHERE author_id NOT IN (   SELECT author_id FROM Author_list   GROUP BY author_id   HAVING COUNT(paper_id) > 1 )
SELECT T1.name  FROM Author AS T1  JOIN Author_list AS T2 ON T1.author_id = T2.author_id  GROUP BY T1.name  HAVING COUNT(T2.paper_id) = 1;
SELECT venue, year, COUNT(*) AS count FROM Paper GROUP BY venue, year ORDER BY count DESC LIMIT 1;
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) LIMIT 1;
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = "A00-1002";
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002';
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027';
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027';
SELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1;
SELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1;
SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation) GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT P.title FROM Paper P JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id ORDER BY COUNT(C.cited_paper_id) DESC LIMIT 1;
SELECT P.title, COUNT(C.cited_paper_id) AS num_citations FROM Paper P JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id, P.title ORDER BY num_citations DESC LIMIT 10;
SELECT P.title, COUNT(C.cited_paper_id) AS citations FROM Citation C JOIN Paper P ON C.paper_id = P.paper_id GROUP BY C.paper_id ORDER BY citations DESC LIMIT 10;
SELECT COUNT(*) FROM Citation AS T1 JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.title LIKE "%Mckeown, Kathleen%";
SELECT COUNT(*)  FROM Citation  JOIN Paper AS T1 ON Citation.paper_id = T1.paper_id  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  WHERE T3.name = "Mckeown , Kathleen";
SELECT COUNT(*)  FROM Citation  WHERE cited_paper_id IN (SELECT paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = "Mckeown , Kathleen");
SELECT COUNT(*)  FROM Citation  WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE author_id IN (SELECT author_id FROM Author WHERE name = "Mckeown , Kathleen"));
SELECT A.name, COUNT(C.cited_paper_id) AS num_citations FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id JOIN Citation AS C ON AL.paper_id = C.paper_id GROUP BY A.name ORDER BY num_citations DESC LIMIT 1;
SELECT a.name, COUNT(c.cited_paper_id) AS num_citations FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Citation c ON al.paper_id = c.paper_id GROUP BY a.author_id, a.name ORDER BY num_citations DESC LIMIT 1;
SELECT P.venue, P.year FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE A.name = 'Mckeown , Kathleen';
SELECT P.venue, P.year FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Author AS A ON AL.author_id = A.author_id WHERE A.name = "Mckeown" AND A.lname = "Kathleen";
SELECT P.venue, P.year FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'A-Life Medical, Inc.';
SELECT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id JOIN Affiliation AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.name = 'Columbia University';
SELECT T2.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id IN (SELECT paper_id FROM Paper WHERE year = 2000) GROUP BY T2.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2000 GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1;
Here is the SQL query:  SELECT name FROM Affiliation WHERE affiliation_id IN (   SELECT affiliation_id   FROM Author_list   JOIN Paper ON Author_list.paper_id = Paper.paper_id   WHERE year = 2009   GROUP BY affiliation_id   ORDER BY COUNT(*) DESC   LIMIT 3 )
SELECT A.name, COUNT(*) AS num_papers FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Affiliation AS A ON AL.affiliation_id = A.affiliation_id WHERE P.year = 2000 GROUP BY A.name ORDER BY num_papers DESC LIMIT 3;
SELECT COUNT(*)  FROM Paper  WHERE year <= 2009 AND venue IN (SELECT affiliation_id FROM Affiliation WHERE name = "Columbia University");
SELECT COUNT(*)  FROM Paper  WHERE year <= 2009  AND EXISTS (SELECT 1              FROM Author_list              WHERE paper_id = Paper.paper_id              AND affiliation_id IN (SELECT affiliation_id                                      FROM Affiliation                                      WHERE name = "Columbia University"));
SELECT COUNT(*) FROM Paper WHERE year BETWEEN 2000 AND 2009 AND title IN (SELECT name FROM Affiliation WHERE name LIKE "%Stanford%");
SELECT COUNT(*) FROM Paper AS T1 JOIN Affiliation AS T2 ON T1.title LIKE "%Stanford%" AND T2.name = "Stanford University" AND T1.year BETWEEN 2000 AND 2009;
SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT title FROM Paper GROUP BY paper_id ORDER BY COUNT(DISTINCT author_id) DESC LIMIT 1
SELECT COUNT(*)  FROM Author_list  WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen');
SELECT COUNT(*)  FROM Author_list  WHERE author_id IN (SELECT author_id FROM Author WHERE name = "Mckeown, Kathleen");
SELECT COUNT(*) AS num_papers, author_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE author_id IN (   SELECT author_id   FROM Author_list   JOIN Author ON Author_list.author_id = Author.author_id   WHERE name = 'Kathleen Mckeown' ) GROUP BY author_id ORDER BY num_papers DESC LIMIT 1;
SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.author_id IN (   SELECT AL2.author_id   FROM Author_list AL2   WHERE AL2.author_id != (     SELECT A2.author_id     FROM Author A2     WHERE A2.name = 'Mckeown , Kathleen'   )   GROUP BY AL2.author_id   ORDER BY COUNT(*) DESC ) LIMIT 1;
SELECT paper_id FROM Paper WHERE title LIKE '%translation%';
SELECT paper_id FROM Paper WHERE title LIKE '%translation%';
SELECT P.paper_id, P.title FROM Paper P WHERE P.paper_id NOT IN (   SELECT C.cited_paper_id   FROM Citation C );
SELECT P.paper_id, P.title FROM Paper P WHERE P.paper_id NOT IN (SELECT C.cited_paper_id FROM Citation C);
SELECT name FROM Affiliation WHERE address LIKE '%China%' ORDER BY (SELECT COUNT(*) FROM Author_list WHERE affiliation_id = Affiliation.affiliation_id) DESC LIMIT 1;
SELECT name FROM Affiliation WHERE address LIKE '%China' GROUP BY name ORDER BY COUNT(paper_id) DESC LIMIT 1;
SELECT year, COUNT(venue) AS num_papers FROM Paper GROUP BY year, venue;
SELECT venue, year, COUNT(*) FROM Paper GROUP BY venue, year;
SELECT A.name, COUNT(P.paper_id) AS total_papers FROM Affiliation AS A JOIN Author_list AS AL ON A.affiliation_id = AL.affiliation_id JOIN Paper AS P ON AL.paper_id = P.paper_id GROUP BY A.name;
SELECT a.name, COUNT(p.paper_id) AS num_papers FROM Author_list AS al JOIN Paper AS p ON al.paper_id = p.paper_id JOIN Affiliation AS a ON al.affiliation_id = a.affiliation_id GROUP BY a.name;
SELECT title FROM Paper WHERE paper_id IN (   SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50 );
SELECT title FROM Paper WHERE paper_id IN (   SELECT cited_paper_id FROM Citation   GROUP BY cited_paper_id   HAVING COUNT(*) > 50 )
SELECT COUNT(*) FROM Author WHERE author_id NOT IN (   SELECT author_id   FROM Author_list   JOIN Paper ON Author_list.paper_id = Paper.paper_id   JOIN Citation ON Paper.paper_id = Citation.paper_id   GROUP BY author_id   HAVING COUNT(Citation.paper_id) > 50 )
SELECT COUNT(DISTINCT a.author_id) FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id LEFT JOIN Citation c ON al.paper_id = c.paper_id WHERE c.paper_id IS NULL OR c.cited_paper_id NOT IN (   SELECT paper_id   FROM Paper   WHERE year <= 2000 )
SELECT name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.venue IN ('NAACL', 'ACL') AND T3.year = 2000;
SELECT A.name FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id JOIN Paper AS P ON AL.paper_id = P.paper_id WHERE P.venue IN ('NAACL', 'ACL') AND P.year = 2009 GROUP BY A.name HAVING COUNT(DISTINCT P.venue) = 2;
SELECT name FROM Author WHERE author_id NOT IN (   SELECT author_id   FROM Author_list   WHERE paper_id IN (     SELECT paper_id     FROM Paper     WHERE venue = 'ACL'   ) )
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL'));
SELECT count(*) FROM conference
SELECT count(*) FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name;
SELECT Conference_Name, count(*) FROM conference GROUP BY Conference_Name;
SELECT Year, count(*) FROM conference GROUP BY Year
SELECT COUNT(*) FROM conference GROUP BY Year;
SELECT Year FROM conference GROUP BY Year ORDER BY count(*) LIMIT 1
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) LIMIT 1;
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2
SELECT Institution_Name, Location, Founded FROM institution
SELECT Institution_Name, Location, Founded FROM institution
SELECT count(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT count(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1;
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1;
SELECT T2.Institution_Name, count(*)  FROM staff AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID  WHERE T2.Founded > 1800  GROUP BY T2.Institution_Name
SELECT T1.Institution_ID, T1.Institution_Name, count(*) , T2.name FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Founded > 1800 GROUP BY T1.Institution_ID, T1.Institution_Name, T2.name;
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT name FROM staff WHERE Age > (SELECT avg(Age) FROM staff);
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff);
SELECT max(Age), min(Age) FROM staff WHERE Nationality = 'United States';
SELECT max(Age), min(Age) FROM staff
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID WHERE T3.Nationality = 'United Kindom';
SELECT Conference_Name  FROM conference  WHERE Conference_ID IN (   SELECT Conference_ID    FROM conference_participation    JOIN staff ON conference_participation.staff_ID = staff.staff_ID    WHERE Nationality = 'United States' OR Nationality = 'United Kindom'  -- assuming Canada is not present in the data )
SELECT name FROM staff WHERE staff_ID IN (   SELECT staff_ID   FROM conference_participation   GROUP BY staff_ID   HAVING COUNT(DISTINCT role) = 2 )
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'Speaker' AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'Sponsor'));
Here is the SQL query:  SELECT name FROM staff WHERE staff_ID IN (   SELECT staff_ID   FROM conference_participation   WHERE Conference_ID IN (     SELECT Conference_ID     FROM conference     WHERE Conference_Name IN ('ACL', 'Naccl')   ) )
SELECT s.name FROM staff AS s JOIN conference_participation AS cp ON s.staff_ID = cp.staff_ID WHERE cp.Conference_ID IN (   SELECT c.Conference_ID   FROM conference AS c   WHERE c.Conference_Name IN ('ACL', 'NACCL') ) GROUP BY s.name HAVING COUNT(DISTINCT cp.Conference_ID) = 2;
SELECT name  FROM staff  WHERE staff_ID IN (   SELECT staff_ID    FROM conference_participation    WHERE Conference_ID IN (     SELECT Conference_ID      FROM conference      WHERE Year IN (2003, 2004)   ) );
Here is the SQL query:  SELECT name  FROM staff  WHERE staff_ID IN (   SELECT staff_ID    FROM conference_participation    WHERE Conference_ID IN (     SELECT Conference_ID      FROM conference      WHERE Year IN (2003, 2004)   ) );
SELECT conference_name, Year, count(*)  FROM conference  JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID  GROUP BY conference_name, Year;
SELECT C.Conference_ID, C.Conference_Name, C.Year, COUNT(*) AS Num_Participants FROM conference C JOIN conference_participation CP ON C.Conference_ID = CP.Conference_ID GROUP BY C.Conference_ID, C.Conference_Name, C.Year;
SELECT Conference_Name FROM conference JOIN (   SELECT Conference_ID, COUNT(*) as count   FROM conference_participation   GROUP BY Conference_ID   ORDER BY count DESC   LIMIT 2 ) AS T1 ON conference.Conference_ID = T1.Conference_ID
SELECT Conference_Name FROM conference ORDER BY (SELECT COUNT(*) FROM conference_participation WHERE Conference_ID = conference.Conference_ID) DESC LIMIT 2;
SELECT s.name, s.Nationality FROM staff AS s WHERE s.staff_ID NOT IN (   SELECT cp.staff_ID   FROM conference_participation AS cp   JOIN conference AS c ON cp.Conference_ID = c.Conference_ID   WHERE c.Conference_Name = 'ACL' )
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (   SELECT staff_ID   FROM conference_participation   WHERE Conference_ID IN (     SELECT Conference_ID     FROM conference     WHERE Conference_Name = 'ACL'   ) );
SELECT institution_name, location FROM institution EXCEPT SELECT T2.Institution_Name, T1.Location FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID WHERE T1.Year = 2004;
SELECT institution_name, location FROM institution WHERE institution_id NOT IN (   SELECT institution_id   FROM staff   WHERE staff_id IN (     SELECT staff_id     FROM conference_participation     WHERE conference_id IN (       SELECT conference_id       FROM conference       WHERE year = 2004     )   ) )
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT avg(age) FROM PilotSkills) ORDER BY age;
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC;
SELECT * FROM PilotSkills WHERE age < 30;
SELECT * FROM PilotSkills WHERE age < 30;
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35;
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub';
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT COUNT(DISTINCT location) FROM Hangar
SELECT count(DISTINCT location) FROM Hangar
SELECT plane_name FROM PilotSkills WHERE pilot_name = "Jones" AND age = 32;
SELECT plane_name FROM PilotSkills WHERE pilot_name = "Jones" AND age = 32;
SELECT COUNT(*) FROM PilotSkills WHERE age > 40;
SELECT count(*) FROM PilotSkills WHERE age > 40
SELECT COUNT(*)  FROM PilotSkills AS T1  JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name  WHERE T1.age < 35 AND T2.plane_name = 'B-52 Bomber';
SELECT COUNT(*)  FROM PilotSkills AS T1  JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name  WHERE T1.age < 35 AND T2.plane_name = 'B-52 Bomber';
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT min(age) FROM PilotSkills WHERE plane_name = 'Piper Cub');
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT min(age) FROM PilotSkills WHERE plane_name = 'Piper Cub');
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT plane_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.plane_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT T2.name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name GROUP BY T2.name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Chicago';
SELECT COUNT(*)  FROM PilotSkills  WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago');
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills
SELECT count(DISTINCT plane_name) FROM PilotSkills
SELECT COUNT(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = 'Smith';
SELECT count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.pilot_name = 'Smith';
SELECT count(*) FROM PilotSkills WHERE age > 40;
SELECT COUNT(*)  FROM PilotSkills AS t1  JOIN Hangar AS t2 ON t1.plane_name = t2.plane_name  WHERE t1.age > 40;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC;
SELECT H.location FROM Hangar AS H JOIN PilotSkills AS PS ON H.plane_name = PS.plane_name ORDER BY PS.plane_name;
SELECT location FROM Hangar ORDER BY plane_name;
SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name;
SELECT plane_name FROM Hangar ORDER BY plane_name ASC
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30
SELECT count(*) FROM PilotSkills WHERE age > 40 OR age < 30
SELECT pilot_name, age  FROM PilotSkills  WHERE plane_name = 'Piper Cub' AND age > 35  UNION  SELECT pilot_name, age  FROM PilotSkills  WHERE plane_name = 'F-14 Fighter' AND age < 30;
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30);
SELECT pilot_name  FROM PilotSkills  WHERE plane_name = 'Piper Cub'  AND pilot_name NOT IN (SELECT pilot_name                          FROM PilotSkills                          WHERE plane_name = 'B-52 Bomber');
SELECT pilot_name  FROM PilotSkills  WHERE plane_name = "Piper Cub"  EXCEPT  SELECT pilot_name  FROM PilotSkills  WHERE plane_name = "B-52 Bomber";
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name = 'Piper Cub') INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name = 'B-52 Bomber');
SELECT pilot_name FROM PilotSkills WHERE plane_name = "Piper Cub" AND plane_name = "B-52 Bomber";
SELECT avg(age), min(age) FROM PilotSkills
SELECT avg(age), min(age) FROM PilotSkills
SELECT p.pilot_name  FROM PilotSkills AS p  JOIN Hangar AS h ON p.plane_name = h.plane_name  WHERE h.location IN ('Austin', 'Boston') GROUP BY p.pilot_name HAVING COUNT(DISTINCT h.location) = 2;
SELECT pilot_name  FROM PilotSkills  WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin' OR location = 'Boston');
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter';
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT avg(age), plane_name FROM PilotSkills GROUP BY plane_name;
SELECT plane_name, avg(age) FROM PilotSkills GROUP BY plane_name;
SELECT plane_name, COUNT(*) FROM Hangar GROUP BY plane_name;
SELECT count(*) , plane_name FROM PilotSkills GROUP BY plane_name
SELECT H.plane_name, PS.pilot_name FROM Hangar H JOIN PilotSkills PS ON H.plane_name = PS.plane_name ORDER BY H.plane_name;
SELECT HS.plane_name, PS.pilot_name FROM PilotSkills PS JOIN Hangar HS ON PS.plane_name = HS.plane_name ORDER BY HS.plane_name, PS.age DESC
SELECT h.location, ps.plane_name, ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name ORDER BY ps.age
SELECT H.location, PS.pilot_name FROM Hangar AS H JOIN PilotSkills AS PS ON H.plane_name = PS.plane_name GROUP BY H.plane_name, PS.pilot_name ORDER BY PS.age DESC, H.location;
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name;
SELECT pilot_name, max(age) FROM PilotSkills GROUP BY pilot_name;
SELECT H.location, COUNT(P.pilot_name), AVG(P.age) FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name GROUP BY H.location;
SELECT H.location, COUNT(P.pilot_name), AVG(P.age) FROM PilotSkills AS P JOIN Hangar AS H ON P.plane_name = H.plane_name GROUP BY H.location;
SELECT COUNT(*)  FROM PilotSkills  WHERE plane_name IN (SELECT plane_name FROM Hangar)  GROUP BY plane_name  HAVING AVG(age) < 35;
SELECT plane_name, COUNT(*)  FROM PilotSkills  JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name  GROUP BY plane_name  HAVING AVG(age) < 35;
SELECT location FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name ORDER BY PilotSkills.age LIMIT 1;
SELECT location FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name ORDER BY PilotSkills.age LIMIT 1;
SELECT PS.pilot_name, PS.age FROM PilotSkills AS PS JOIN Hangar AS H ON PS.plane_name = H.plane_name WHERE H.location = 'Austin';
SELECT t1.pilot_name, t1.age FROM PilotSkills AS t1 JOIN Hangar AS t2 ON t1.plane_name = t2.plane_name WHERE t2.location = "Austin";
Here is the SQL query:  SELECT pilot_name FROM PilotSkills WHERE age > (SELECT AVG(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name;
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name;
SELECT COUNT(*) FROM PilotSkills AS T1 WHERE age < (SELECT MIN(age) FROM PilotSkills AS T2 WHERE plane_name = 'F-14 Fighter');
SELECT COUNT(*)  FROM PilotSkills AS t1  WHERE age > ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter');
SELECT plane_name FROM Hangar WHERE plane_name LIKE "%Bomber%"
SELECT plane_name FROM Hangar WHERE plane_name LIKE "%Bomber%"
SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub');
SELECT COUNT(*)  FROM PilotSkills  WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub');
SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1
SELECT Area_km, Government_website FROM district ORDER BY Population ASC LIMIT 1;
SELECT Name, Population FROM district WHERE Area_km > (SELECT avg(Area_km) FROM district);
SELECT max(Area_km), avg(Area_km) FROM district
SELECT sum(Population) FROM district WHERE District_ID IN (   SELECT District_ID FROM district ORDER BY Area_km DESC LIMIT 3 );
SELECT District_ID, Name, Government_website FROM district ORDER BY Population;
SELECT Name FROM district WHERE Government_website LIKE '%.gov';
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000;
SELECT Name, Speach_title FROM spokesman
SELECT AVG(Points), AVG(Age) FROM spokesman WHERE Rank_position = 1.0;
SELECT Name, Points FROM spokesman WHERE Age < 40;
SELECT Name FROM spokesman WHERE Age = (SELECT max(Age) FROM spokesman);
SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman);
SELECT Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.District_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Name  FROM spokesman AS T1  JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID  WHERE T2.Start_year < 2004;
SELECT T2.Name, count(*)  FROM district AS T1  JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID  GROUP BY T1.District_ID, T1.Name  ORDER BY T1.District_ID;
SELECT d.Name FROM district AS d JOIN spokesman_district AS sd ON d.District_ID = sd.District_ID JOIN spokesman AS s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position IN (1.0, 2.0) GROUP BY d.Name HAVING COUNT(DISTINCT s.Rank_position) = 2;
SELECT district.Name  FROM district  JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID  GROUP BY district.District_ID  HAVING COUNT(spokesman_district.District_ID) > 1;
SELECT COUNT(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
SELECT SUM(Population), AVG(Population)  FROM district  WHERE District_ID IN (SELECT District_ID FROM spokesman_district);
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1;
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1;
SELECT title, location FROM Paintings ORDER BY year LIMIT 1;
SELECT title FROM Sculptures WHERE location = 'Gallery 226';
SELECT title FROM Sculptures WHERE location = 'Gallery 226';
SELECT title, location FROM Paintings;
SELECT title, location FROM Paintings;
SELECT title, location FROM Sculptures;
SELECT title, location FROM Sculptures;
SELECT medium FROM Paintings WHERE paintingID = 80;
SELECT medium FROM Paintings WHERE paintingID = 80;
SELECT fname, lname FROM Artists WHERE birthYear > 1850;
SELECT fname || ' ' || lname FROM Artists WHERE birthYear > 1850;
SELECT title, year FROM Sculptures WHERE location != 'Gallery 226';
SELECT title, year FROM Sculptures WHERE location != 'Gallery 226';
SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900;
SELECT DISTINCT A.fname, A.lname FROM Artists AS A JOIN Sculptures AS S ON A.artistID = S.sculptorID WHERE S.year < 1900;
SELECT DISTINCT A.birthYear FROM Artists AS A JOIN Sculptures AS S ON A.artistID = S.sculptorID WHERE S.year > 1920;
SELECT A.birthYear FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920 GROUP BY A.birthYear;
SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1;
SELECT fname || ' ' || lname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists);
SELECT lname, fname, birthYear, deathYear, deathYear - birthYear AS age FROM Artists ORDER BY age LIMIT 1;
SELECT birthYear + age FROM (   SELECT artistID, birthYear, deathYear - birthYear AS age   FROM Artists ) AS T1 ORDER BY age LIMIT 1;
SELECT fname, 2023 - birthYear FROM Artists WHERE deathYear IS NOT NULL ORDER BY 2023 - birthYear DESC LIMIT 1;
SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1;
SELECT COUNT(*) FROM Paintings WHERE location = 'Gallery 240';
SELECT COUNT(*) FROM Paintings WHERE location = 'Gallery 240';
SELECT COUNT(*)  FROM Paintings  WHERE painterID IN (   SELECT artistID    FROM Artists    ORDER BY deathYear - birthYear DESC    LIMIT 1 );
SELECT COUNT(paintingID)  FROM Paintings  WHERE painterID IN (   SELECT artistID    FROM Artists    ORDER BY deathYear - birthYear DESC    LIMIT 1 )
SELECT P.title, P.year FROM Paintings AS P JOIN Artists AS A ON P.painterID = A.artistID WHERE A.fname = "Mary";
SELECT P.title, P.year FROM Paintings AS P JOIN Artists AS A ON P.painterID = A.artistID WHERE A.fname = 'Vincent';
SELECT width_mm  FROM Paintings  WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850);
SELECT width_mm  FROM Paintings  WHERE painterID IN (SELECT artistID                      FROM Artists                      WHERE birthYear < 1850);
SELECT location, medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo';
SELECT T2.location, T2.medium FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = "Pablo";
SELECT A.fname, A.lname FROM Artists AS A WHERE A.artistID IN (   SELECT P.painterID FROM Paintings AS P   UNION   SELECT S.sculptorID FROM Sculptures AS S )
SELECT T1.fname || ' ' || T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID;
SELECT A.fname, A.lname FROM Artists AS A JOIN Paintings AS P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.medium != 'oil' OR P.medium = 'lithographic';
SELECT T1.lname, T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium LIKE "%oil%" AND T2.medium LIKE "%lithographic%";
SELECT birthYear FROM Artists WHERE artistID IN (   SELECT painterID   FROM Paintings   WHERE year = 1884 AND mediumOn = 'canvas' );
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884);
SELECT DISTINCT T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' AND T2.location = 'Gallery 240';
SELECT fname  FROM Artists  WHERE artistID IN (SELECT painterID                     FROM Paintings                     WHERE medium = 'oil' AND location = 'Gallery 241');
SELECT count(*) , medium FROM Paintings GROUP BY medium UNION SELECT count(*) , medium FROM Sculptures GROUP BY medium;
SELECT medium, COUNT(*) FROM Paintings GROUP BY medium UNION SELECT medium, COUNT(*) FROM Sculptures GROUP BY medium;
SELECT avg(height_mm), medium FROM Paintings GROUP BY medium;
SELECT avg(height_mm), medium FROM Paintings GROUP BY medium;
SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location;
SELECT COUNT(*) FROM Paintings WHERE year < 1900 AND location != 'Gallery 240';
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil';
SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910;
SELECT DISTINCT T1.artistID FROM Paintings AS T1 WHERE T1.medium = 'oil' AND T1.location = 'Gallery 240';
SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 240' GROUP BY painterID HAVING COUNT(*) > 0;
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT min(height_mm) FROM Paintings WHERE mediumOn = 'canvas');
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE mediumOn = 'canvas');
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT min(year) FROM Paintings WHERE location = 'Gallery 240');
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240');
SELECT paintingID FROM Paintings ORDER BY year LIMIT 1;
SELECT paintingID FROM Paintings WHERE year = (SELECT min(year) FROM Paintings);
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%';
SELECT A.fname, A.lname FROM Artists AS A JOIN Sculptures AS S ON A.artistID = S.sculptorID WHERE S.title LIKE '%female%';
SELECT DISTINCT title FROM Paintings ORDER BY title;
SELECT DISTINCT title FROM Paintings ORDER BY title;
SELECT DISTINCT title FROM Paintings ORDER BY LENGTH(title)
SELECT title FROM Paintings ORDER BY height_mm;
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;
SELECT title FROM Paintings WHERE painterID = 111 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;
SELECT P.title, S.title FROM Paintings AS P JOIN Artists AS A ON P.painterID = A.artistID JOIN Sculptures AS S ON A.artistID = S.sculptorID WHERE A.artistID = 222;
SELECT artistID FROM Artists WHERE artistID IN (   SELECT painterID   FROM Paintings   WHERE year < 1900   GROUP BY painterID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT artistID FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE year < 1900 GROUP BY artistID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.fname ORDER BY COUNT(*) DESC LIMIT 1
SELECT fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.fname ORDER BY COUNT(*) DESC LIMIT 1
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT location FROM Paintings WHERE year < "1885" OR year > "1930";
SELECT location FROM Paintings WHERE year < "1885" OR year > "1930";
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000;
SELECT location FROM Paintings WHERE mediumOn = 'panel' OR mediumOn = 'canvas';
SELECT location FROM Paintings WHERE mediumOn = 'panel' INTERSECT SELECT location FROM Paintings WHERE mediumOn = 'canvas';
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT avg(T1.height_mm), avg(T1.width_mm) FROM Paintings AS T1 WHERE T1.medium = 'oil' AND T1.location = 'Gallery 240';
SELECT avg(T1.height_mm), avg(T1.width_mm)  FROM Paintings AS T1  WHERE T1.medium = 'oil' AND T1.location = 'Gallery 240';
SELECT max(height_mm), max(paintingID) FROM Paintings WHERE year < 1900;
SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1;
SELECT year, max(height_mm), max(width_mm) FROM Paintings GROUP BY year;
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year;
SELECT lname, fname, avg(height_mm), avg(width_mm) FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY lname, fname ORDER BY lname, fname;
SELECT a.fname, a.lname, AVG(p.height_mm), AVG(p.width_mm) FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY a.fname, a.lname ORDER BY a.fname, a.lname;
SELECT T1.fname, count(*)  FROM Artists AS T1  JOIN Paintings AS T2 ON T1.artistID = T2.painterID  GROUP BY T1.artistID  HAVING count(*) >= 2;
SELECT T1.fname, COUNT(*)  FROM Artists AS T1  JOIN Paintings AS T2 ON T1.artistID = T2.painterID  GROUP BY T1.fname  HAVING COUNT(*) >= 2;
SELECT A.deathYear FROM Artists A WHERE A.artistID IN (   SELECT P.painterID   FROM Paintings P   GROUP BY P.painterID   HAVING COUNT(*) <= 3 );
SELECT A.fname, A.lname, A.deathYear FROM Artists A WHERE A.artistID IN (   SELECT P.painterID   FROM Paintings P   GROUP BY P.painterID   HAVING COUNT(*) < 4 )
SELECT T1.deathYear FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.artistID ORDER BY COUNT(*) LIMIT 1;
SELECT T1.deathYear FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.deathYear ORDER BY COUNT(*) LIMIT 1;
SELECT paintingID, height_mm FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1;
SELECT paintingID, height_mm FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1;
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = "Gallery 240");
SELECT paintingID FROM Paintings WHERE location = "Gallery 240" ORDER BY year LIMIT 1, -1;
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT max(height_mm) FROM Paintings WHERE year > 1900);
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900);
SELECT T1.lname, COUNT(*)  FROM Artists AS T1  JOIN Paintings AS T2 ON T1.artistID = T2.painterID  WHERE T2.medium = 'oil'  GROUP BY T1.lname  ORDER BY COUNT(*) DESC  LIMIT 3;
SELECT lname, fname FROM Artists WHERE artistID IN (   SELECT painterID   FROM Paintings   WHERE medium = 'oil'   GROUP BY painterID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year;
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year;
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title;
SELECT P.year, P.location, A.fname || ' ' || A.lname AS painter_name FROM Paintings AS P JOIN Artists AS A ON P.painterID = A.artistID WHERE P.height_mm > 1000 ORDER BY P.title;
SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (   SELECT P.painterID   FROM Paintings P   WHERE P.painterID IN (     SELECT A.artistID     FROM Artists A     EXCEPT     SELECT S.sculptorID     FROM Sculptures S   ) )
SELECT t1.fname, t1.lname FROM Artists AS t1 WHERE t1.artistID NOT IN (SELECT sculptorID FROM Sculptures)   AND t1.artistID IN (SELECT painterID FROM Paintings);
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas' EXCEPT SELECT location FROM Paintings WHERE mediumOn = 'canvas';
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas';
SELECT count(*) FROM race
SELECT count(*) FROM race
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC;
SELECT Winning_team, Winning_driver FROM race ORDER BY Winning_team;
SELECT Winning_driver FROM race WHERE Winning_driver IN (SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous')
SELECT race.Winning_driver FROM race WHERE race.Driver_ID IN (   SELECT driver.Driver_ID   FROM driver   WHERE driver.Driver_ID NOT IN (     SELECT race.Driver_ID     FROM race     WHERE race.Pole_Position = 'Junior Strous'   ) )
SELECT Constructor FROM driver ORDER BY Age ASC;
SELECT Constructor FROM driver ORDER BY Age ASC;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;
SELECT max(Age) ,  min(Age) FROM driver
SELECT max(Age), min(Age) FROM driver
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20;
SELECT count(DISTINCT t2.Engine)  FROM driver AS t1  JOIN race AS t2 ON t1.Driver_ID = t2.Driver_ID  WHERE t1.Age > 30 OR t1.Age < 20;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC;
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID;
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID;
SELECT T1.Driver_Name, COUNT(*)  FROM driver AS T1  JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID  GROUP BY T1.Driver_Name;
SELECT Driver_Name, COUNT(*)  FROM race  JOIN driver ON race.Driver_ID = driver.Driver_ID  GROUP BY Driver_Name;
SELECT Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Driver_Name, T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*) >= 2;
SELECT t1.Driver_Name, t1.Age FROM driver AS t1 JOIN race AS t2 ON t1.Driver_ID = t2.Driver_ID GROUP BY t1.Driver_Name, t1.Age HAVING COUNT(*) >= 2;
SELECT race.Race_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE driver.Age >= 26;
SELECT race_name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE Age >= 26;
SELECT Driver_Name FROM driver WHERE Constructor != "Bugatti";
SELECT Driver_Name  FROM driver  WHERE Constructor != 'Bugatti';
SELECT Constructor, COUNT(*) FROM driver GROUP BY Constructor;
SELECT Constructor, count(*) FROM driver GROUP BY Constructor;
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2;
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30
SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30;
SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1;
SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1;
SELECT DISTINCT d.Driver_Name FROM driver d JOIN race r1 ON d.Driver_ID = r1.Driver_ID JOIN race r2 ON d.Driver_ID = r2.Driver_ID WHERE r1.Pole_Position = 'James Hinchcliffe' AND r2.Pole_Position = 'Carl Skerlong';
SELECT DISTINCT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong');
SELECT DISTINCT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (   SELECT r.Driver_ID   FROM race r   WHERE r.Pole_Position = 'James Hinchcliffe' );
SELECT DISTINCT driver_name FROM driver WHERE driver_id NOT IN (   SELECT Driver_ID   FROM race   WHERE Pole_Position = 'James Hinchcliffe' );
SELECT count(*) FROM languages
SELECT count(*) FROM languages
SELECT name FROM languages ORDER BY name ASC
SELECT name FROM languages ORDER BY name;
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT avg(justice_score) FROM countries
SELECT avg(justice_score) FROM countries
SELECT max(health_score), min(health_score) FROM countries WHERE name != "Norway";
SELECT max(health_score), min(health_score) FROM countries WHERE name != 'Norway';
SELECT count(DISTINCT language_id) FROM official_languages
SELECT count(DISTINCT language_id) FROM official_languages
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT C.name, OL.language_id FROM countries C JOIN official_languages OL ON C.id = OL.country_id;
SELECT T1.name, T2.name FROM countries AS T1 JOIN official_languages AS T3 ON T1.id = T3.country_id JOIN languages AS T2 ON T3.language_id = T2.id;
SELECT L.name, COUNT(*) FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name
SELECT L.name, COUNT(*) FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name;
SELECT L.name FROM languages AS L JOIN official_languages AS O ON L.id = O.language_id GROUP BY L.id ORDER BY COUNT(O.country_id) DESC LIMIT 1;
SELECT name FROM languages GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1
SELECT L.name  FROM languages AS L  JOIN official_languages AS OL ON L.id = OL.language_id  GROUP BY L.name  HAVING COUNT(OL.country_id) >= 2
SELECT L.name  FROM languages AS L  JOIN official_languages AS OL ON L.id = OL.language_id  GROUP BY L.name  HAVING COUNT(OL.country_id) >= 2;
SELECT avg(countries.overall_score)  FROM countries  JOIN official_languages ON countries.id = official_languages.country_id  WHERE official_languages.language_id IN (SELECT id FROM languages WHERE name = "English");
SELECT avg(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id = (SELECT id FROM languages WHERE name = 'English'));
SELECT name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 3
SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(country_id) DESC LIMIT 3)
SELECT l.name, AVG(c.overall_score) AS avg_score FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY avg_score DESC;
SELECT L.name  FROM languages L  JOIN official_languages OL ON L.id = OL.language_id  JOIN countries C ON OL.country_id = C.id  GROUP BY L.name  ORDER BY AVG(C.overall_score) DESC;
SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT name FROM countries GROUP BY name ORDER BY (SELECT COUNT(*) FROM official_languages WHERE country_id = countries.id) DESC LIMIT 1;
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages);
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages);
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages);
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages);
SELECT L.name  FROM languages AS L  JOIN official_languages AS OL ON L.id = OL.language_id  JOIN countries AS C ON OL.country_id = C.id  WHERE C.overall_score > 95  INTERSECT  SELECT L.name  FROM languages AS L  JOIN official_languages AS OL ON L.id = OL.language_id  JOIN countries AS C ON OL.country_id = C.id  WHERE C.overall_score < 90;
SELECT L.name  FROM languages L  JOIN official_languages OL ON L.id = OL.language_id  WHERE OL.country_id IN    (SELECT C.id     FROM countries C     WHERE C.overall_score > 95       OR C.overall_score < 90);
SELECT DISTINCT country, town_city FROM Addresses;
SELECT country, town_city FROM Addresses;
SELECT county_state_province FROM Addresses;
SELECT county_state_province FROM Addresses JOIN Properties ON Addresses.address_id = Properties.property_address_id;
SELECT feature_description FROM Features WHERE feature_name = "rooftop";
SELECT feature_description FROM Features WHERE feature_name = "rooftop";
SELECT T1.feature_name, T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T1.feature_name, T1.feature_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT F.feature_name, F.feature_description FROM Features F JOIN Property_Features PF ON F.feature_id = PF.feature_id GROUP BY F.feature_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT min(room_count) FROM Properties
SELECT room_number FROM Rooms ORDER BY room_number LIMIT 1;
SELECT count(*)  FROM Properties  WHERE parking_lots = 1 OR garage_yn = 1;
SELECT count(*)  FROM Properties AS t1  JOIN Property_Features AS t2 ON t1.property_id = t2.property_id  JOIN Features AS t3 ON t2.feature_id = t3.feature_id  WHERE t3.feature_name IN ('parking_lots', 'garage_yn') AND (t2.feature_value = '1' OR t2.feature_value = 'true');
SELECT age_category_description FROM Users AS t1 JOIN Ref_Age_Categories AS t2 ON t1.age_category_code = t2.age_category_code WHERE t1.middle_name LIKE "%Mother%"
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description LIKE "%Mother%"
SELECT first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1;
SELECT first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1;
SELECT AVG(room_count)  FROM Properties  WHERE property_name = 'garden';
SELECT avg(room_count)  FROM Properties AS T1  JOIN Property_Features AS T2 ON T1.property_id = T2.property_id  JOIN Features AS T3 ON T2.feature_id = T3.feature_id  WHERE T3.feature_name = "garden";
SELECT DISTINCT town_city FROM Addresses JOIN Properties ON Addresses.address_id = Properties.property_address_id JOIN Property_Features ON Properties.property_id = Property_Features.property_id WHERE feature_id = 3;
SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (   SELECT property_address_id   FROM Properties   JOIN Property_Features ON Properties.property_id = Property_Features.property_id   WHERE feature_id = 3 AND feature_value = 'temporibus' );
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1;
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1;
SELECT AVG(room_count) FROM Properties;
SELECT avg(room_count) FROM Properties;
SELECT count(DISTINCT room_size) FROM Rooms
SELECT COUNT(DISTINCT room_size) FROM Rooms
SELECT user_id, search_string FROM User_Searches GROUP BY user_id, search_string HAVING COUNT(search_seq) >= 2;
SELECT user_id, search_seq FROM User_Searches GROUP BY user_id, search_seq HAVING COUNT(search_seq) >= 2;
SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1
SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1;
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC;
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC;
SELECT property_address_id FROM Properties WHERE property_id NOT IN (   SELECT property_id   FROM User_Property_History   GROUP BY property_id   HAVING COUNT(*) <= 2 )
SELECT DISTINCT zip_postcode FROM Addresses JOIN Properties ON Addresses.address_id = Properties.property_address_id WHERE Properties.property_address_id NOT IN (   SELECT property_address_id   FROM Properties   GROUP BY property_address_id   HAVING COUNT(*) <= 2 )
SELECT U.age_category_code, U.user_id FROM Users AS U JOIN User_Searches AS US ON U.user_id = US.user_id GROUP BY U.user_id, U.age_category_code HAVING COUNT(US.search_seq) = 1;
SELECT U.user_id, U.age_category_code, U.user_category_code FROM Users AS U JOIN User_Searches AS US ON U.user_id = US.user_id GROUP BY U.user_id, U.age_category_code, U.user_category_code HAVING COUNT(US.search_seq) = 1;
SELECT age_category_code FROM Users WHERE user_id IN (   SELECT user_id   FROM User_Searches   ORDER BY search_datetime   LIMIT 1 );
SELECT age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id = T2.user_id ORDER BY T2.search_datetime ASC LIMIT 1;
SELECT login_name FROM Users WHERE user_category_code = 'Senior Citizen' ORDER BY first_name;
SELECT login_name FROM Users WHERE user_category_code = 'Senior Citizen' ORDER BY first_name;
SELECT COUNT(*) FROM User_Searches;
SELECT COUNT(*)  FROM User_Searches  WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = 1);
SELECT date_registered FROM Users WHERE login_name = 'ratione';
SELECT date_registered FROM Users WHERE login_name = "ratione";
Here is the SQL query:  SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1;
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1;
SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses JOIN Users ON Addresses.user_address_id = Users.user_id WHERE user_category_code = 'Senior Citizen';
SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE user_category_code = 'Senior Citizen';
SELECT count(*)  FROM Properties  WHERE property_id IN (SELECT property_id FROM Property_Features GROUP BY property_id HAVING count(*) >= 2);
SELECT COUNT(*) FROM Properties WHERE property_id IN (   SELECT property_id   FROM Property_Features   GROUP BY property_id   HAVING COUNT(*) >= 2 )
SELECT P.property_id, count(*)  FROM Property_Photos PP  JOIN Properties P ON PP.property_id = P.property_id  GROUP BY P.property_id
SELECT p.property_id, COUNT(ph.photo_seq) AS num_photos FROM Properties AS p JOIN Property_Photos AS ph ON p.property_id = ph.property_id GROUP BY p.property_id;
SELECT T1.user_id, count(*)  FROM Users AS T1  JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id  JOIN Property_Photos AS T3 ON T2.property_id = T3.property_id  GROUP BY T1.user_id;
SELECT T1.user_id, count(*)  FROM Users AS T1  JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id  JOIN Property_Photos AS T3 ON T2.property_id = T3.property_id  GROUP BY T1.user_id;
SELECT SUM(T2.price_max)  FROM Properties AS T1  JOIN Users AS T2 ON T1.owner_user_id = T2.user_id  WHERE T2.age_category_code IN ('18-25', '25-60')    AND T2.user_category_code IN ('Senior Citizen', 'Senior Citizen');
SELECT MAX(price_max)  FROM Properties  JOIN Users ON Properties.owner_user_id = Users.user_id  WHERE Users.age_category_code IN ('18-25', '25-60')    AND Users.user_category_code IN ('Senior Citizen');
SELECT datestamp, property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp;
SELECT datestamp, property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp;
SELECT T1.property_type_code ,  T2.property_type_description  FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code  GROUP BY T1.property_type_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT t2.property_type_description FROM Properties AS t1 JOIN Ref_Property_Types AS t2 ON t1.property_type_code = t2.property_type_code GROUP BY t2.property_type_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = "Over 60";
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60';
SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size;
SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size;
SELECT country FROM Users WHERE first_name = "Robbie";
SELECT user_address_id FROM Users WHERE first_name = "Robbie";
SELECT U.first_name, U.middle_name, U.last_name FROM Users AS U JOIN Properties AS P ON U.user_id = P.owner_user_id WHERE P.property_address_id = U.user_address_id;
SELECT U.first_name, U.middle_name, U.last_name FROM Users AS U JOIN Properties AS P ON U.user_id = P.owner_user_id JOIN Addresses AS A ON P.property_address_id = A.address_id WHERE A.line_1_number_building IS NOT NULL;
SELECT search_string  FROM User_Searches  WHERE user_id NOT IN (SELECT user_id FROM User_Property_History);
SELECT search_string  FROM User_Searches  WHERE user_id NOT IN (SELECT user_id FROM User_Property_History);
SELECT U.user_id, U.last_name FROM Users U JOIN (   SELECT user_id   FROM User_Property_History   GROUP BY user_id   HAVING COUNT(*) >= 2 ) AS P ON U.user_id = P.user_id WHERE U.user_id IN (   SELECT user_id   FROM User_Property_History   GROUP BY user_id   HAVING COUNT(*) <= 2 )
SELECT U.user_id, U.last_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id, U.last_name HAVING COUNT(US.search_seq) <= 2 AND COUNT(P.property_id) >= 2;
SELECT COUNT(*) FROM bike WHERE weight > 780;
SELECT product_name, weight FROM bike ORDER BY price ASC;
SELECT heat, name, nation FROM cyclist
SELECT max(weight), min(weight) FROM bike
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC';
SELECT name, result FROM cyclist WHERE nation != 'Russia';
SELECT DISTINCT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015;
SELECT T1.id, T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id GROUP BY T1.id, T1.product_name HAVING COUNT(T2.cyclist_id) >= 4;
SELECT T1.id, T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.nation = 'Russia' OR cyclist.nation = 'Great Britain';
SELECT count(DISTINCT heat) FROM cyclist
SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015);
SELECT DISTINCT T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.result > '4:21.558';
SELECT B.product_name, B.price FROM bike AS B JOIN cyclists_own_bikes AS COB ON B.id = COB.bike_id JOIN cyclist AS C ON COB.cyclist_id = C.id WHERE C.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY B.product_name, B.price HAVING COUNT(DISTINCT C.name) = 2;
SELECT name, nation, result FROM cyclist WHERE id NOT IN (   SELECT cyclist_id   FROM cyclists_own_bikes   WHERE bike_id IN (     SELECT id     FROM bike     WHERE product_name LIKE '%racing bike%'   ) );
SELECT product_name FROM bike WHERE material LIKE "%fiber%"
SELECT cyclist_id, count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id;
SELECT Flavor, Price FROM goods WHERE Food = 'Cake' ORDER BY Price DESC LIMIT 1;
SELECT Id, Flavor FROM goods WHERE Food = 'Cake' AND Price = (SELECT MAX(Price) FROM goods WHERE Food = 'Cake');
SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Price LIMIT 1;
SELECT Id, Flavor FROM goods WHERE Food = 'Cake' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'Cake');
SELECT Id FROM goods WHERE Flavor = 'Apple';
SELECT Id FROM goods WHERE Flavor = 'Apple';
SELECT Id FROM goods WHERE Price < 3.00
SELECT Id FROM goods WHERE Price < 3.00
SELECT DISTINCT receipts.CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'Lemon' AND goods.Food = 'Cake';
SELECT DISTINCT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Lemon' AND g.Food = 'Cake';
SELECT t2.Item, COUNT(*)  FROM items AS t1 JOIN receipts AS t2 ON t1.Receipt = t2.ReceiptNumber  GROUP BY t2.Item;
SELECT goods.Food, COUNT(receipts.CustomerId)  FROM receipts  JOIN items ON receipts.ReceiptNumber = items.Receipt  JOIN goods ON items.Item = goods.Id  GROUP BY goods.Food;
SELECT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' AND receipts.ReceiptNumber IN (   SELECT Receipt   FROM items   GROUP BY Receipt   HAVING COUNT(*) >= 15 )
SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) >= 15);
Here is the SQL query:  SELECT T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item LIKE '90-CH-%' GROUP BY T1.LastName HAVING COUNT(*) > 10
SELECT customers.LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.LastName HAVING COUNT(receipts.ReceiptNumber) > 10;
SELECT COUNT(*) FROM goods WHERE Food = 'Cake';
SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = "Cake";
SELECT Flavor FROM goods WHERE Food = 'Croissant';
SELECT Flavor FROM goods WHERE Food = "Cake";
SELECT DISTINCT Item FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15;
SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT Receipt FROM items WHERE Ordinal = 1 AND Item IN (SELECT Id FROM goods WHERE Id LIKE '20-BC-%'))
SELECT Food, AVG(Price), MAX(Price), MIN(Price) FROM goods GROUP BY Food;
SELECT Food, AVG(Price), MIN(Price), MAX(Price) FROM goods GROUP BY Food;
SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cake' AND EXISTS (   SELECT 1   FROM items i2   JOIN goods g2 ON i2.Item = g2.Id   WHERE i2.Receipt = i.Receipt AND g2.Food = 'Cookie' );
SELECT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' AND EXISTS (   SELECT 1   FROM items AS items2   JOIN goods AS goods2 ON items2.Item = goods2.Id   WHERE items2.Receipt = items.Receipt AND goods2.Food = 'Cookie' );
SELECT receipts.ReceiptNumber FROM receipts JOIN customers ON receipts.CustomerId = customers.Id JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE customers.LastName = 'LOGAN' AND goods.Food = 'Croissant';
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id JOIN items AS T3 ON T1.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item = T4.Id WHERE T2.LastName = "Logan" AND T4.Food = "Croissant";
SELECT r.ReceiptNumber, r.Date FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1;
SELECT r.ReceiptNumber, r.Date FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1;
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) LIMIT 1;
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) LIMIT 1;
SELECT Food, COUNT(*) FROM goods GROUP BY Food;
SELECT count(*) , Food FROM goods GROUP BY Food
SELECT Food, AVG(Price) FROM goods GROUP BY Food;
SELECT Food, AVG(Price) FROM goods GROUP BY Food;
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5;
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5;
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Price > 10.0;
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Price > 10.0
SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods);
SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods);
SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart');
SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart');
SELECT DISTINCT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13;
SELECT DISTINCT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13;
Here is the SQL query:  SELECT receipts.Date FROM receipts JOIN customers ON receipts.CustomerId = customers.Id JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15
SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15;
SELECT Id FROM goods WHERE Id LIKE '%APP%';
SELECT Id FROM goods WHERE Id LIKE '%APP%';
SELECT Id, Price FROM goods WHERE Id LIKE "%70%";
SELECT Id, Price FROM goods WHERE Id LIKE '%70%';
SELECT LastName FROM customers ORDER BY LastName;
SELECT LastName FROM customers ORDER BY LastName;
SELECT Id FROM goods ORDER BY Id;
SELECT DISTINCT Id FROM goods ORDER BY Id ASC
SELECT Receipt FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'Lemon' OR CustomerId = 12;
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Flavor = 'Lemon' OR T1.CustomerId = 12;
SELECT ReceiptNumber, MAX(Date) FROM receipts GROUP BY CustomerId;
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1;
SELECT * FROM receipts WHERE Date IN (   SELECT MIN(Date)   FROM receipts ) OR EXISTS (   SELECT 1   FROM goods   WHERE Price > 10   AND goods.Id IN (     SELECT CustomerId     FROM receipts   ) );
SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.Date = (SELECT MIN(Date) FROM receipts) UNION SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 10;
SELECT Id FROM goods WHERE Food IN ('Cake', 'Cookie') AND Price BETWEEN 3 AND 7;
SELECT Id FROM goods WHERE Food IN ('Cake', 'Cookies') AND Price BETWEEN 3 AND 7;
SELECT T1.FirstName, T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId ORDER BY T2.Date ASC LIMIT 1;
SELECT customers.FirstName, customers.LastName  FROM customers  JOIN receipts ON customers.Id = receipts.CustomerId  ORDER BY receipts.Date ASC  LIMIT 1;
SELECT AVG(Price) FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry');
SELECT AVG(Price) FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry');
SELECT MIN(Price) FROM goods WHERE Flavor = 'Cheese';
SELECT Id, Flavor, Food, Price FROM goods WHERE Food = 'Cake' AND Flavor = 'Casino' ORDER BY Price LIMIT 1;
SELECT Flavor, MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor;
SELECT Flavor, max(Price), min(Price), avg(Price) FROM goods GROUP BY Flavor ORDER BY Flavor;
SELECT min(Price), max(Price), Food FROM goods GROUP BY Food ORDER BY Food;
SELECT Food, min(Price), max(Price) FROM goods GROUP BY Food;
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3;
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3
SELECT c.FirstName, c.LastName, COUNT(*) AS num_times FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY r.CustomerId, c.FirstName, c.LastName ORDER BY num_times DESC LIMIT 1;
SELECT t1.Id, COUNT(*) AS num_purchases FROM customers AS t1 JOIN receipts AS t2 ON t1.Id = t2.CustomerId GROUP BY t1.Id ORDER BY num_purchases DESC LIMIT 1;
SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date;
SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date;
SELECT c.FirstName, c.LastName FROM customers AS c JOIN receipts AS r ON c.Id = r.CustomerId JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Flavor = 'Apple' AND g.Food = 'Tart';
SELECT c.FirstName, c.LastName FROM customers AS c JOIN receipts AS r ON c.Id = r.CustomerId JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Flavor = 'Apple' AND g.Food = 'Tarts';
SELECT Id FROM goods WHERE Flavor = 'Chocolate' AND Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Casino');
SELECT Id FROM goods WHERE Flavor = 'Casino' AND Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Chocolate');
SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart');
SELECT Id  FROM goods  WHERE Food = 'Cake'  AND Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart');
SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) * 2 FROM goods);
SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) FROM goods) * 2;
SELECT Id, Flavor, Food FROM goods ORDER BY Price;
SELECT Id, Flavor, Food FROM goods ORDER BY Price;
SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor;
SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor;
SELECT Item FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'Chocolate' EXCEPT SELECT Item FROM items GROUP BY Item HAVING COUNT(*) > 10;
SELECT Item FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'Chocolate' GROUP BY Item HAVING COUNT(*) <= 10;
SELECT Flavor FROM goods WHERE Food = 'Cake' EXCEPT SELECT Flavor FROM goods WHERE Food = 'Tart';
SELECT Flavor FROM goods WHERE Food = "Cake" AND Id NOT IN (   SELECT Item   FROM items   WHERE Item LIKE "%TU%" );
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) DESC LIMIT 3;
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) DESC LIMIT 3;
SELECT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id HAVING SUM(items.Item) > 150;
SELECT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id HAVING SUM(receipts.Date) > 150;
SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price * i.Ordinal) > 5;
Here is the SQL query:  SELECT customers.Id FROM customers JOIN (   SELECT CustomerId, AVG(total_amount) AS avg_amount   FROM receipts   GROUP BY CustomerId ) AS avg_receipts ON customers.Id = avg_receipts.CustomerId WHERE avg_receipts.avg_amount > 5;
SELECT Date FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = "ARZT") AND Date IN (SELECT Date FROM receipts WHERE SUM(ReceiptNumber) > 100);
SELECT Date FROM receipts WHERE ReceiptNumber IN (   SELECT Receipt FROM items   GROUP BY Receipt   HAVING SUM(Price) > 100 )
SELECT count(*) FROM driver
SELECT count(*) FROM driver
SELECT Make, count(*) FROM driver WHERE Points > 150 GROUP BY Make
SELECT Make, COUNT(*)  FROM driver  WHERE Points > 150  GROUP BY Make;
SELECT Make, AVG(Age) FROM driver GROUP BY Make;
SELECT avg(Age), Make FROM driver GROUP BY Make;
SELECT avg(Laps) FROM driver WHERE Age < 20;
SELECT avg(Laps) FROM driver WHERE Age < 20;
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner;
SELECT t.Manager, t.Sponsor, c.Car_Owner FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID JOIN team c ON td.Team_ID = c.Team_ID ORDER BY c.Car_Owner;
SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1
SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1
SELECT Make FROM team WHERE Car_Owner = "Buddy Arrington";
SELECT Make FROM team WHERE Car_Owner = "Buddy Arrington";
SELECT max(Points), min(Points) FROM driver
SELECT max(Points), min(Points) FROM driver;
SELECT count(*) FROM driver WHERE Points < 150
SELECT count(*) FROM driver WHERE Points < 150
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT T2.Driver, T1.Country FROM driver AS T1 JOIN country AS T2 ON T1.Country = T2.Country_Id;
SELECT T2.Driver, T1.Country FROM driver AS T1 JOIN country AS T2 ON T1.Country = T2.Country_Id
SELECT max(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin');
SELECT max(Points) FROM driver WHERE Country = (SELECT Country_Id FROM country WHERE Capital = "Dublin");
SELECT avg(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English');
SELECT avg(t2.Age)  FROM driver AS t1  JOIN country AS t2 ON t1.Country = t2.Country_Id  WHERE t2.Official_native_language = 'English';
SELECT Country FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID JOIN team ON team_driver.Team_ID = team.Team_ID JOIN country ON driver.Country = country.Country_Id WHERE driver.Points > 150;
SELECT country.Country FROM country JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points > 150 GROUP BY country.Country
SELECT Capital FROM country WHERE Country_Id = (   SELECT Country   FROM driver   GROUP BY Country   ORDER BY SUM(Points) DESC   LIMIT 1 );
SELECT Capital FROM country, driver WHERE driver.Country = country.Country_Id ORDER BY Points DESC LIMIT 1;
SELECT Make, COUNT(*) FROM driver GROUP BY Make;
SELECT Make, COUNT(*) FROM driver GROUP BY Make;
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1
SELECT Make FROM driver AS T1 JOIN team_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN team AS T3 ON T2.Team_ID = T3.Team_ID GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1
SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3
SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3;
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT Country FROM driver WHERE Make = "Dodge" INTERSECT SELECT Country FROM driver WHERE Make = "Chevrolet";
SELECT Country FROM driver WHERE Make = 'Dodge' INTERSECT SELECT Country FROM driver WHERE Make = 'Chevrolet';
SELECT sum(Points) , avg(Points) FROM driver;
SELECT SUM(Points), AVG(Points) FROM driver;
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver);
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver);
SELECT T1.Manager, T2.Sponsor FROM team AS T1 JOIN team_driver AS T3 ON T1.Team_ID = T3.Team_ID JOIN team AS T2 ON T1.Sponsor = T2.Sponsor GROUP BY T1.Manager, T2.Sponsor ORDER BY COUNT(DISTINCT T3.Driver_ID) DESC LIMIT 1;
SELECT t.Manager, t.Sponsor FROM team AS t JOIN team_driver AS td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID ORDER BY COUNT(td.Driver_ID) DESC LIMIT 1;
SELECT T1.Manager, T2.Car_Owner FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID, T1.Manager, T2.Car_Owner HAVING COUNT(DISTINCT T2.Driver_ID) >= 2;
SELECT T1.Manager, T1.Car_Owner FROM team AS T1 JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(T2.Driver_ID) >= 2;
SELECT count(*) FROM institution
SELECT count(*) FROM institution
SELECT Name FROM institution ORDER BY Name ASC
SELECT Name FROM institution ORDER BY Name ASC;
SELECT Name FROM institution ORDER BY Founded ASC;
SELECT Name FROM institution ORDER BY Founded;
SELECT City, Province FROM institution;
SELECT City, Province FROM institution;
SELECT max(Enrollment), min(Enrollment) FROM institution
SELECT max(Enrollment) ,  min(Enrollment) FROM institution
SELECT Affiliation FROM institution WHERE City != 'Vancouver';
SELECT Affiliation FROM institution WHERE City != 'Vancouver';
SELECT Stadium FROM institution ORDER BY Capacity DESC;
SELECT Stadium FROM institution ORDER BY Capacity DESC;
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1;
SELECT Name, Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID;
SELECT T1.Name, T2.Nickname FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT Nickname  FROM Championship  WHERE Institution_ID = (SELECT Institution_ID                          FROM institution                          ORDER BY Enrollment LIMIT 1);
SELECT Nickname  FROM Championship  JOIN institution ON Championship.Institution_ID = institution.Institution_ID  ORDER BY Enrollment ASC  LIMIT 1;
SELECT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC;
SELECT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC;
SELECT Name FROM institution WHERE Institution_ID IN (   SELECT Institution_ID FROM Championship )
SELECT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY Name HAVING COUNT(*) >= 1;
SELECT SUM(Number_of_Championships)  FROM Championship  JOIN institution ON Championship.Institution_ID = institution.Institution_ID  WHERE institution.Affiliation = 'Public';
SELECT SUM(Number_of_Championships)  FROM Championship  JOIN institution ON Championship.Institution_ID = institution.Institution_ID  WHERE Affiliation = 'Public';
SELECT DISTINCT Affiliation, count(*) FROM institution GROUP BY Affiliation;
SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation;
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1;
SELECT Founded, COUNT(*) AS Num_Institutions FROM institution GROUP BY Founded HAVING COUNT(*) > 1;
SELECT Championship.Nickname FROM institution  JOIN Championship ON institution.Institution_ID = Championship.Institution_ID  ORDER BY institution.Capacity DESC;
SELECT Nickname FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Capacity DESC
SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary';
SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary');
SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950
Here is the SQL query to answer the question:  SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950;
SELECT COUNT(DISTINCT Province) FROM institution
SELECT count(DISTINCT Province) FROM institution
SELECT * FROM Warehouses
SELECT * FROM Warehouses;
SELECT DISTINCT Contents  FROM Boxes  WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York');
SELECT DISTINCT Contents  FROM Boxes  WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = "New York");
SELECT Contents FROM Boxes WHERE Value > 150.0
SELECT Contents FROM Boxes WHERE Value > 150
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse;
SELECT avg(Value), Warehouse FROM Boxes GROUP BY Warehouse;
SELECT avg(Value), sum(Value) FROM Boxes;
SELECT avg(Value), sum(Value) FROM Boxes
SELECT avg(Capacity), sum(Capacity) FROM Warehouses
SELECT avg(Capacity), sum(Capacity) FROM Warehouses
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents;
SELECT Contents, AVG(Value) AS avg_value, MAX(Value) AS max_value FROM Boxes GROUP BY Contents;
SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC LIMIT 1
SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code ORDER BY Value DESC LIMIT 1;
SELECT AVG(Value) FROM Boxes;
SELECT AVG(Value) FROM Boxes;
SELECT DISTINCT Contents FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT count(DISTINCT Contents) FROM Boxes
SELECT count(DISTINCT Contents) FROM Boxes
SELECT DISTINCT Location FROM Warehouses
SELECT DISTINCT Location FROM Warehouses
SELECT B.Code  FROM Boxes AS B  JOIN Warehouses AS W ON B.Warehouse = W.Code  WHERE W.Location = 'Chicago' OR W.Location = 'New York';
SELECT B.Code FROM Boxes AS B JOIN Warehouses AS W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York');
SELECT SUM(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location = 'Chicago' OR T1.Location = 'New York';
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'));
SELECT Contents  FROM Boxes  WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')  OR Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York');
SELECT Contents FROM Boxes WHERE Warehouse IN (   SELECT Code   FROM Warehouses   WHERE Location = 'Chicago' ) AND Warehouse IN (   SELECT Code   FROM Warehouses   WHERE Location = 'New York' );
SELECT Contents FROM Boxes WHERE Code NOT IN (   SELECT Code   FROM Warehouses   WHERE Location = 'New York' )
SELECT Contents  FROM Boxes  WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')
SELECT T1.Location  FROM Warehouses AS T1  JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T2.Contents = 'Rocks' AND T2.Contents != 'Scissors';
SELECT W.Location FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' AND B.Contents NOT LIKE '%Scissors%';
SELECT Location FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse AND Contents IN ('Rocks', 'Scissors');
SELECT DISTINCT T1.Location  FROM Warehouses AS T1  JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T2.Contents IN ('Rocks', 'Scissors');
SELECT Location  FROM Warehouses  WHERE Code IN (SELECT Warehouse                  FROM Boxes                  WHERE Contents IN ('Rocks', 'Scissors'));
SELECT Location FROM Warehouses WHERE Code IN (   SELECT Warehouse   FROM Boxes   WHERE Contents IN ('Rocks', 'Scissors') );
SELECT Code, Contents FROM Boxes ORDER BY Value;
SELECT Code, Contents FROM Boxes ORDER BY Value;
SELECT Code, Contents FROM Boxes ORDER BY Value LIMIT 1;
SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes);
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes);
SELECT Contents  FROM Boxes  WHERE Value > (SELECT AVG(Value) FROM Boxes);
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents;
SELECT Contents FROM Boxes ORDER BY Contents ASC
SELECT Code FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = 'Rocks');
SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks');
SELECT Code, Contents FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = 'Scissors');
SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors');
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)
SELECT SUM(Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1;
SELECT Warehouse.Code, AVG(Value)  FROM Boxes  JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code  GROUP BY Warehouse.Code  HAVING AVG(Value) > 150;
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150;
SELECT Contents, COUNT(*), SUM(Value) FROM Boxes GROUP BY Contents;
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents;
SELECT Location, SUM(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses GROUP BY Location;
SELECT Location, SUM(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses GROUP BY Location;
SELECT SUM(Capacity) FROM Warehouses;
SELECT SUM(Capacity) FROM Warehouses;
SELECT W.Location, MAX(B.Value) FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Location;
SELECT W.Location, max(B.Value) FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Location
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse;
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse;
SELECT count(distinct Location)  FROM Warehouses  JOIN Boxes ON Warehouses.Code = Boxes.Warehouse  WHERE Contents = 'Rocks';
SELECT count(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks';
SELECT B.Code, W.Location FROM Boxes AS B JOIN Warehouses AS W ON B.Warehouse = W.Code;
SELECT B.Code, W.Location FROM Boxes AS B JOIN Warehouses AS W ON B.Warehouse = W.Code;
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago');
SELECT B.Code  FROM Boxes AS B  JOIN Warehouses AS W ON B.Warehouse = W.Code  WHERE W.Location = 'Chicago';
SELECT count(*) ,  Warehouse FROM Boxes GROUP BY Warehouse
SELECT count(*) , Warehouse FROM Boxes GROUP BY Warehouse;
SELECT Warehouse, count(DISTINCT Contents) FROM Boxes GROUP BY Warehouse;
SELECT W.Location, COUNT(DISTINCT B.Contents)  FROM Warehouses AS W  JOIN Boxes AS B ON W.Code = B.Warehouse  GROUP BY W.Location;
SELECT Code FROM Warehouses WHERE Capacity < 3;
SELECT W.Code FROM Warehouses AS W JOIN (   SELECT Warehouse, COUNT(*) AS BoxCount   FROM Boxes   GROUP BY Warehouse   HAVING COUNT(*) > Capacity ) AS B ON W.Code = B.Warehouse
SELECT sum(T2.Value)  FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code  WHERE T2.Location != 'Chicago';
SELECT sum(T2.Value)  FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code  WHERE T2.Location != 'Chicago';
SELECT University_Name, City, State FROM university ORDER BY University_Name;
SELECT University_Name, City, State FROM university ORDER BY University_Name;
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio');
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio');
SELECT max(Enrollment), avg(Enrollment), min(Enrollment) FROM university;
SELECT max(Enrollment), avg(Enrollment), min(Enrollment) FROM university
SELECT Team_Name FROM university WHERE Enrollment > (SELECT avg(Enrollment) FROM university)
SELECT university_name, team_name FROM university JOIN (   SELECT AVG(Enrollment) AS avg_enrollment   FROM university ) AS T1 ON university.Enrollment > T1.avg_enrollment
SELECT DISTINCT Home_Conference FROM university
SELECT DISTINCT Home_Conference FROM university
SELECT Home_Conference, count(*) FROM university GROUP BY Home_Conference;
SELECT Home_Conference, count(*) FROM university GROUP BY Home_Conference;
SELECT State FROM university GROUP BY State ORDER BY count(*) DESC LIMIT 1;
SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1
SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000;
SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000;
Here is the SQL query:  SELECT Home_Conference, sum(Enrollment) FROM university GROUP BY Home_Conference ORDER BY sum(Enrollment) ASC LIMIT 1;
SELECT T5.Home_Conference, MIN(T6.Enrollment) AS Min_Enrollment FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major_ranking AS T3 ON T1.University_ID = T3.University_ID JOIN major AS T4 ON T3.Major_ID = T4.Major_ID JOIN university AS T5 ON T1.University_ID = T5.University_ID GROUP BY T5.Home_Conference ORDER BY Min_Enrollment;
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code;
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code;
SELECT M.Major_Name, MR.Rank FROM major AS M JOIN major_ranking AS MR ON M.Major_ID = MR.Major_ID JOIN university AS U ON MR.University_ID = U.University_ID WHERE U.University_Name = "Augustana College";
SELECT M.Major_Name, MR.Rank FROM major M JOIN major_ranking MR ON M.Major_ID = MR.Major_ID JOIN university U ON MR.University_ID = U.University_ID WHERE U.University_Name = "Augustana College";
SELECT university_name, city, state  FROM university  JOIN major_ranking ON university.University_ID = major_ranking.University_ID  JOIN major ON major_ranking.Major_ID = major.Major_ID  WHERE major.Major_Name = "Accounting" AND major_ranking.Rank = 1;
SELECT university_name, city, state  FROM university  JOIN major_ranking ON university.University_ID = major_ranking.University_ID  JOIN major ON major_ranking.Major_ID = major.Major_ID  WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank = 1;
SELECT university_name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID GROUP BY university.University_ID ORDER BY COUNT(major_ranking.Major_ID) DESC LIMIT 1;
SELECT university_name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID GROUP BY university_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT University_Name  FROM university  EXCEPT  SELECT University_Name  FROM major_ranking  WHERE Rank = 1;
SELECT University_Name  FROM university  WHERE University_ID NOT IN (   SELECT University_ID    FROM major_ranking    WHERE Rank = 1 );
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = "Accounting" AND EXISTS (   SELECT 1   FROM major_ranking AS T4   JOIN major AS T5 ON T4.Major_ID = T5.Major_ID   WHERE T4.University_ID = T1.University_ID   AND T5.Major_Name = "Urban Education" );
SELECT U.University_Name FROM university AS U JOIN major_ranking AS MR ON U.University_ID = MR.University_ID JOIN major AS M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' INTERSECT SELECT U.University_Name FROM university AS U JOIN major_ranking AS MR ON U.University_ID = MR.University_ID JOIN major AS M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Urban Education';
SELECT university_name, Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE state = 'Wisconsin';
SELECT U.University_Name, OR.Rank FROM university AS U JOIN overall_ranking AS OR ON U.University_ID = OR.University_ID WHERE U.State = 'Wisconsin';
SELECT University_Name FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID ORDER BY Research_point DESC LIMIT 1;
SELECT University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID GROUP BY University_Name ORDER BY Research_point DESC LIMIT 1
SELECT University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point ASC;
SELECT University_Name FROM university ORDER BY (SELECT Reputation_point FROM overall_ranking WHERE University_ID = university.University_ID) ASC
SELECT university_name  FROM university  JOIN major_ranking ON university.University_ID = major_ranking.University_ID  JOIN major ON major_ranking.Major_ID = major.Major_ID  WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank >= 3;
SELECT university_name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank >= 3;
SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5);
SELECT SUM(Enrollment)  FROM university  JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID  WHERE overall_ranking.Rank <= 5;
SELECT u.University_Name, o.Citation_point FROM university AS u JOIN overall_ranking AS o ON u.University_ID = o.University_ID WHERE o.Total IN (   SELECT MAX(t.Total)   FROM overall_ranking AS t   WHERE t.Total > (     SELECT MAX(t2.Total) - 1     FROM overall_ranking AS t2   ) );
SELECT U.University_Name, O.Citation_point FROM university AS U JOIN overall_ranking AS O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point DESC LIMIT 3;
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2;
SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 1;
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters);
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters);
SELECT Title FROM Movies WHERE Rating = 'G';
SELECT Title FROM Movies WHERE Rating = 'G';
SELECT M.Title FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie WHERE MT.Name = "Odeon";
SELECT M.Title FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon';
SELECT M.Title, MT.Name FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie
SELECT M.Title, MT.Name FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie;
SELECT count(*) FROM Movies WHERE Rating = 'G';
SELECT COUNT(*) FROM Movies WHERE Rating = 'G';
SELECT COUNT(*) FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT COUNT(*) FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters;
SELECT count(DISTINCT Movie) FROM MovieTheaters
SELECT COUNT(DISTINCT Code) FROM MovieTheaters
SELECT count(DISTINCT Code) FROM MovieTheaters
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%';
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%';
SELECT Name  FROM MovieTheaters  WHERE Code IN (SELECT Code                 FROM Movies                 WHERE Rating IN ('G', 'PG'));
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG');
SELECT M.Title  FROM Movies AS M  JOIN MovieTheaters AS MT ON M.Code = MT.Movie  WHERE MT.Name IN ('Odeon', 'Imperial')
SELECT M.Title  FROM Movies M  JOIN MovieTheaters MT ON M.Code = MT.Movie  WHERE MT.Name IN ('Odeon', 'Imperial');
SELECT M.Title FROM Movies M JOIN MovieTheaters MT1 ON M.Code = MT1.Movie JOIN MovieTheaters MT2 ON M.Code = MT2.Movie WHERE MT1.Name = 'Odeon' AND MT2.Name = 'Imperial';
SELECT M.Title FROM Movies M JOIN MovieTheaters MT1 ON M.Code = MT1.Movie JOIN MovieTheaters MT2 ON M.Code = MT2.Movie WHERE MT1.Name = 'Odeon' AND MT2.Name = 'Imperial';
SELECT title FROM Movies AS T1 WHERE T1.Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = "Odeon");
SELECT Title  FROM Movies  WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon');
SELECT Title FROM Movies ORDER BY Title;
SELECT Title FROM Movies ORDER BY Title;
SELECT Title FROM Movies ORDER BY Rating;
SELECT Title FROM Movies ORDER BY Rating;
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1
SELECT Name FROM MovieTheaters AS t1 JOIN Movies AS t2 ON t1.Code = t2.Code GROUP BY t1.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Rating, count(*) FROM Movies GROUP BY Rating;
SELECT Rating, count(*) FROM Movies GROUP BY Rating;
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM Movies);
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Code NOT IN (SELECT Code FROM Movies)
SELECT Name FROM MovieTheaters WHERE Code NOT IN (SELECT Code FROM MovieTheaters WHERE Movie IS NOT NULL);
SELECT Name  FROM MovieTheaters  WHERE Code IN (SELECT Code                 FROM Movies                 WHERE Rating = 'G')
SELECT Name  FROM MovieTheaters  WHERE Code IN (SELECT Code FROM Movies WHERE Rating = 'G');
SELECT Title FROM Movies;
SELECT Title FROM Movies;
SELECT DISTINCT Rating FROM Movies;
SELECT DISTINCT Rating FROM Movies
SELECT * FROM Movies WHERE Rating IS NULL;
SELECT * FROM Movies WHERE Rating != 'PG';
SELECT Title  FROM Movies  WHERE Code NOT IN (SELECT Movie FROM MovieTheaters);
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters);
SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package);
SELECT T2.Name FROM Package AS T1 JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1
SELECT SUM(Weight)  FROM Package  WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT sum(Weight) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT Position FROM Employee WHERE Name = "Amy Wong";
SELECT Position FROM Employee WHERE Name = "Turanga Leela";
SELECT Salary, Position FROM Employee WHERE Name = "Turanga Leela";
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela';
SELECT avg(Salary) FROM Employee WHERE Position = 'Delivery boy';
SELECT avg(Salary) FROM Employee WHERE Position = 'Intern';
SELECT Level  FROM Has_Clearance  WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE Position = 'Physician');
SELECT Level  FROM Has_Clearance  WHERE Employee IN (SELECT EmployeeID                      FROM Employee                      WHERE Position = 'Physician')
SELECT PackageNumber FROM Package WHERE Sender = 8;
SELECT COUNT(*) FROM Package WHERE Sender = 2;
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT PackageNumber, Contents, Weight, Sender, Recipient FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT DISTINCT PackageNumber FROM Package WHERE Sender = 2 OR Recipient = 2;
SELECT count(*)  FROM Package  WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom')  AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT count(*)  FROM Package AS T1  JOIN Client AS T2 ON T1.Sender = T2.AccountNumber  JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber  WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong';
SELECT Contents FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb');
SELECT Contents FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb');
SELECT P.PackageNumber, P.Weight FROM Package P JOIN Client C ON P.Recipient = C.AccountNumber WHERE C.Name LIKE '%John%' AND P.Weight = (SELECT MAX(Weight) FROM Package);
SELECT PackageNumber, Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Name LIKE '%John%' OR Name LIKE 'John%' ORDER BY Weight DESC LIMIT 1;
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3;
SELECT PackageNumber, Weight FROM Package ORDER BY Weight LIMIT 3;
SELECT C.Name, COUNT(*)  FROM Client AS C  JOIN Package AS P ON C.AccountNumber = P.Sender  GROUP BY C.AccountNumber, C.Name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.Name, COUNT(*)  FROM Client AS T1  JOIN Package AS T2 ON T1.AccountNumber = T2.Sender  GROUP BY T1.AccountNumber  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT C.Name, count(*)  FROM Client AS C  JOIN Package AS P ON C.AccountNumber = P.Recipient  GROUP BY C.AccountNumber, C.Name  ORDER BY count(*) ASC  LIMIT 1;
SELECT Recipient FROM Package GROUP BY Recipient ORDER BY COUNT(*) LIMIT 1;
SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(*) > 1)
SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT Coordinates FROM Planet WHERE Name = 'Mars';
SELECT Coordinates FROM Planet WHERE Name = "Mars";
SELECT Name, Coordinates FROM Planet ORDER BY Name;
SELECT Name, Coordinates FROM Planet ORDER BY Name;
SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Name = "Phillip J. Fry");
SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Name = "Phillip J. Fry");
SELECT Date FROM Shipment;
SELECT Date FROM Shipment;
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars');
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars");
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars") AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = "Turanga Leela");
SELECT ShipmentID  FROM Shipment  WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = "Mars")  AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = "Turanga Leela");
SELECT ShipmentID  FROM Shipment  WHERE Planet = 3 OR Manager = 2;
SELECT ShipmentID  FROM Shipment  WHERE PlanetID = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')  AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela');
SELECT P.Name, COUNT(S.ShipmentID)  FROM Shipment S  JOIN Planet P ON S.Planet = P.PlanetID  GROUP BY P.Name;
SELECT count(*) , PlanetID FROM Shipment GROUP BY PlanetID
SELECT t2.Name FROM Shipment AS t1 JOIN Planet AS t2 ON t1.Planet = t2.PlanetID GROUP BY t2.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM Planet WHERE PlanetID = (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(*) DESC LIMIT 1);
SELECT E.Name, COUNT(S.ShipmentID)  FROM Employee E  JOIN Shipment S ON E.EmployeeID = S.Manager  GROUP BY E.Name;
SELECT Manager, COUNT(*) FROM Shipment GROUP BY Manager;
SELECT SUM(Weight) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars';
SELECT SUM(Weight)  FROM Package  WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'));
SELECT P.Name, SUM(P.Weight)  FROM Package AS P  JOIN Shipment AS S ON P.Shipment = S.ShipmentID  JOIN Planet AS Pl ON S.Planet = Pl.PlanetID  GROUP BY Pl.Name;
SELECT P.Name, SUM(P.Weight)  FROM Package P  JOIN Shipment S ON P.Shipment = S.ShipmentID  JOIN Planet P2 ON S.Planet = P2.PlanetID  GROUP BY P2.Name;
SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment GROUP BY Planet HAVING SUM(CASE WHEN Date IS NOT NULL THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Date IS NOT NULL THEN 1 ELSE 0 END) > 30);
SELECT Name FROM Planet WHERE PlanetID IN (   SELECT Planet   FROM Shipment   GROUP BY Planet   HAVING SUM(weight) > 30 )
SELECT Package.PackageNumber FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan';
Here is the SQL query:  SELECT COUNT(*)  FROM Package AS T1  JOIN Client AS T2 ON T1.Sender = T2.AccountNumber  JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID  WHERE T2.Name = 'Zapp Brannigan' AND T3.Planet = 3;
SELECT Package.PackageNumber FROM Package WHERE Package.Planet = 3 OR Package.Sender = 1;
SELECT count(*)  FROM Package AS T1  JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID  JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber OR T1.Sender = T3.AccountNumber  WHERE T2.Planet = 3 OR T3.Name = "Zapp Brannigan";
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
Here is the SQL query:  SELECT E.Name FROM Employee AS E WHERE E.EmployeeID NOT IN (   SELECT H.Employee   FROM Has_Clearance AS H   JOIN Planet AS P ON H.Planet = P.PlanetID   WHERE P.Name = 'Mars' )
SELECT Name  FROM Employee  WHERE EmployeeID NOT IN (SELECT Employee                           FROM Has_Clearance                           WHERE Planet = (SELECT PlanetID                                           FROM Planet                                           WHERE Name = 'Mars'));
SELECT E.Name  FROM Employee AS E  JOIN Has_Clearance AS HC ON E.EmployeeID = HC.Employee  WHERE HC.Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omega III');
SELECT Name  FROM Employee  WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III'));
SELECT T1.Name  FROM Planet AS T1  JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Employee) = 1;
SELECT P.Name  FROM Planet P  JOIN Has_Clearance HC ON P.PlanetID = HC.Planet  GROUP BY P.Name  HAVING COUNT(DISTINCT HC.Employee) = 1;
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000;
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000;
SELECT Name  FROM Employee  WHERE Salary > (SELECT AVG(Salary) FROM Employee)  UNION  SELECT Name  FROM Employee  WHERE Salary > 5000;
SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee) OR salary > 5000.0
SELECT COUNT(*)  FROM Employee  WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE PlanetID = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'));
SELECT COUNT(*)  FROM Employee  WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'));
SELECT count(*) FROM game
SELECT count(*) FROM game
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC;
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC;
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%';
SELECT avg(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo';
SELECT Platform_name, Market_district FROM platform
SELECT Platform_name, Market_district FROM platform;
SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1
SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1
SELECT min(Rank_of_the_year), max(Rank_of_the_year) FROM player
SELECT max(Rank_of_the_year), min(Rank_of_the_year) FROM player
SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3;
SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3
SELECT Player_name FROM player ORDER BY Player_name ASC
SELECT Player_name FROM player ORDER BY Player_name;
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC;
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC;
SELECT P.Player_name, P.Rank_of_the_year FROM player AS P JOIN game_player AS GP ON P.Player_ID = GP.Player_ID JOIN game AS G ON GP.Game_ID = G.Game_ID WHERE G.Title = 'Super Mario World';
SELECT P.Player_name, P.Rank_of_the_year FROM player P JOIN game_player GP ON P.Player_ID = GP.Player_ID JOIN game G ON GP.Game_ID = G.Game_ID WHERE G.Title = 'Super Mario World';
SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = "Auburn";
SELECT DISTINCT t1.Developers  FROM game AS t1  JOIN game_player AS t2 ON t1.Game_ID = t2.Game_ID  JOIN player AS t3 ON t2.Player_ID = t3.Player_ID  WHERE t3.College = 'Auburn';
SELECT avg(T1.Units_sold_Millions)  FROM game AS T1  JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID  JOIN player AS T3 ON T2.Player_ID = T3.Player_ID  WHERE T3.Position = 'Guard';
SELECT avg(Units_sold_Millions)  FROM game  WHERE Game_ID IN (   SELECT Game_ID    FROM game_player    JOIN player ON game_player.Player_ID = player.Player_ID    WHERE Position = 'Guard' )
SELECT T2.Platform_name, T1.Title  FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT T1.Title, T2.Platform_name  FROM game AS T1  JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT t1.Title FROM game AS t1 JOIN platform AS t2 ON t1.Platform_ID = t2.Platform_ID WHERE t2.Market_district IN ('Asia', 'USA');
SELECT T2.Title  FROM game AS T1  JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID  WHERE T2.Market_district IN ('Asia', 'USA');
SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise;
SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise;
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2;
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player);
SELECT Player_name FROM player EXCEPT SELECT P.Player_name FROM player AS P JOIN game_player AS GP ON P.Player_ID = GP.Player_ID
SELECT Title FROM game WHERE Game_ID IN (   SELECT Game_ID   FROM game_player   WHERE Player_ID IN (     SELECT Player_ID     FROM player     WHERE College = "Oklahoma"   ) INTERSECT   SELECT Game_ID   FROM game_player   WHERE Player_ID IN (     SELECT Player_ID     FROM player     WHERE College = "Auburn"   ) )
SELECT game.Title  FROM game  JOIN game_player ON game.Game_ID = game_player.Game_ID  JOIN player ON game_player.Player_ID = player.Player_ID  WHERE player.College IN ('Oklahoma', 'Auburn');
SELECT DISTINCT Franchise FROM game
SELECT DISTINCT Franchise FROM game
SELECT title FROM game WHERE Game_ID NOT IN (   SELECT Game_ID FROM game_player   JOIN player ON game_player.Player_ID = player.Player_ID   WHERE player.Position = 'Guard' );
SELECT title FROM game WHERE Game_ID NOT IN (   SELECT Game_ID FROM game_player   JOIN player ON game_player.Player_ID = player.Player_ID   WHERE player.Position = 'Guard' );
SELECT Name FROM press ORDER BY Year_Profits_billion DESC;
SELECT Name FROM press ORDER BY Year_Profits_billion DESC;
SELECT Name  FROM press  WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1;
SELECT Name  FROM press  WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1;
SELECT avg(Year_Profits_billion), max(Year_Profits_billion) FROM press;
SELECT Name, avg(Year_Profits_billion), max(Year_Profits_billion) FROM press GROUP BY Name;
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1;
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press);
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 UNION ALL SELECT Name FROM press ORDER BY Month_Profits_billion LIMIT 1;
SELECT Name  FROM press  WHERE Month_Profits_billion IN (   SELECT MIN(Month_Profits_billion)    FROM press    UNION    SELECT MAX(Month_Profits_billion)    FROM press );
SELECT count(*) FROM author WHERE Age < 30
SELECT count(*) FROM author WHERE Age < 30;
SELECT Gender, AVG(Age) FROM author GROUP BY Gender;
SELECT Gender, avg(Age) FROM author GROUP BY Gender;
SELECT count(*) ,  Gender FROM author WHERE Age  >  30 GROUP BY Gender
SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender;
SELECT Title FROM book ORDER BY Release_date DESC;
SELECT Title FROM book ORDER BY Release_date DESC;
SELECT Book_Series, count(*) FROM book GROUP BY Book_Series
SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series;
SELECT T2.Title, T3.Release_date FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 5;
SELECT T2.Title, T2.Release_date FROM book AS T1 JOIN author AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T1.Sale_Amount DESC LIMIT 5;
SELECT Book_Series FROM book GROUP BY Book_Series HAVING MIN(Sale_Amount) < 500 AND MAX(Sale_Amount) > 1000;
SELECT Book_Series  FROM book  WHERE Sale_Amount > 1000  INTERSECT  SELECT Book_Series  FROM book  WHERE Sale_Amount < 500;
Here is the SQL query to answer the question:  SELECT DISTINCT t1.Name FROM author AS t1 JOIN book AS t2 ON t1.Author_ID = t2.Author_ID WHERE t2.Book_Series IN ('MM', 'LT');
Here is the SQL query:  SELECT t1.Name FROM author AS t1 JOIN book AS t2 ON t1.Author_ID = t2.Author_ID WHERE t2.Book_Series IN ('MM', 'LT') GROUP BY t1.Name HAVING COUNT(DISTINCT t2.Book_Series) = 2;
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book);
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT author.Name  FROM author  JOIN book ON author.Author_ID = book.Author_ID  GROUP BY author.Author_ID  HAVING COUNT(*) > 1;
SELECT name FROM author WHERE Author_ID IN (   SELECT Author_ID   FROM book   GROUP BY Author_ID   HAVING COUNT(*) > 1 )
SELECT b.Title, a.Name, p.Name FROM book AS b JOIN author AS a ON b.Author_ID = a.Author_ID JOIN press AS p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3;
SELECT b.Title, a.Name AS Author, p.Name AS Press FROM book AS b JOIN author AS a ON b.Author_ID = a.Author_ID JOIN press AS p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3;
SELECT p.Name, SUM(b.Sale_Amount) AS Total_Sale_Amount FROM book AS b JOIN press AS p ON b.Press_ID = p.Press_ID GROUP BY p.Name;
SELECT P.Name, SUM(B.Sale_Amount) AS Total_Sale_Amount FROM book AS B JOIN press AS P ON B.Press_ID = P.Press_ID GROUP BY P.Name;
SELECT p.Name, count(*)  FROM book AS b  JOIN press AS p ON b.Press_ID = p.Press_ID  WHERE b.Sale_Amount > 1000  GROUP BY p.Name;
SELECT press.Name, COUNT(*)  FROM book  JOIN press ON book.Press_ID = press.Press_ID  WHERE book.Sale_Amount > 1000  GROUP BY press.Name;
SELECT Name FROM author JOIN book ON author.Author_ID = book.Author_ID ORDER BY Sale_Amount DESC LIMIT 1;
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1;
SELECT a.Name, a.Gender FROM author AS a JOIN book AS b ON a.Author_ID = b.Author_ID GROUP BY a.Name, a.Gender ORDER BY COUNT(b.Book_ID) DESC LIMIT 1;
SELECT author.Name, author.Gender FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID ORDER BY COUNT(book.Book_ID) DESC LIMIT 1;
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID = (SELECT Press_ID FROM press WHERE Name = 'Accor'))
SELECT Name  FROM author  WHERE Author_ID NOT IN (   SELECT Author_ID    FROM book    WHERE Press_ID = 1 );
SELECT p.Name, SUM(y.Year_Profits_billion) AS Yearly_Profit FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name HAVING COUNT(b.Book_ID) > 2;
SELECT p.Name, p.Year_Profits_billion FROM press AS p JOIN book AS b ON p.Press_ID = b.Press_ID GROUP BY p.Name, p.Year_Profits_billion HAVING COUNT(b.Book_ID) > 2;
SELECT count(*) FROM Authors
SELECT author_name FROM Authors
SELECT author_name, other_details FROM Authors
SELECT other_details FROM Authors WHERE author_name = "Addison Denesik";
SELECT count(*) FROM Documents
SELECT author_name FROM Documents WHERE document_id = 4;
SELECT author_name FROM Documents WHERE document_name = "Travel to Brazil";
SELECT COUNT(*) FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T2.author_name = "Era Kerluke";
SELECT document_name, document_description FROM Documents;
SELECT document_id, document_name FROM Documents WHERE author_name = "Bianka Cummings";
SELECT author_name, other_details FROM Documents WHERE document_name = "Travel to China";
SELECT author_name, count(*) FROM Documents GROUP BY author_name;
SELECT author_name FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT author_name FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY author_name HAVING COUNT(*) >= 2;
SELECT count(*) FROM Business_Processes
SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9;
SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9);
SELECT COUNT(*) FROM Process_Outcomes
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes;
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = "working";
SELECT count(*) FROM Process_Status
SELECT process_status_code, process_status_description FROM Process_Status;
SELECT process_status_description FROM Process_Status WHERE process_status_code = "ct";
SELECT count(*) FROM Staff
SELECT staff_id, staff_details FROM Staff;
SELECT staff_details FROM Staff WHERE staff_id = 100;
SELECT COUNT(*) FROM Ref_Staff_Roles
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles;
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = "HR";
SELECT count(DISTINCT document_id) FROM Documents_Processes
SELECT process_id FROM Documents_Processes;
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes);
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes);
SELECT T1.process_outcome_description, T2.process_status_description FROM Documents_Processes AS T1 JOIN Process_Outcomes AS T3 ON T1.process_outcome_code = T3.process_outcome_code JOIN Process_Status AS T2 ON T1.process_status_code = T2.process_status_code WHERE T1.document_id = 0;
SELECT T2.process_name FROM Documents AS T1 JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = "Travel to Brazil";
SELECT process_id, count(*) FROM Documents_Processes GROUP BY process_id
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9;
SELECT staff_id, count(*) FROM Staff_in_Processes GROUP BY staff_id
SELECT staff_role_code, count(*)  FROM Staff_in_Processes  JOIN Ref_Staff_Roles ON Staff_in_Processes.staff_role_code = Ref_Staff_Roles.staff_role_code  GROUP BY staff_role_code
SELECT count(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3;
SELECT count(*) FROM Agencies
SELECT count(*) FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT agency_id, agency_details FROM Agencies;
SELECT count(*) FROM Clients
SELECT count(*) FROM Clients
SELECT client_id, client_details FROM Clients;
SELECT client_id, client_details FROM Clients;
SELECT agency_id, count(*) FROM Clients GROUP BY agency_id
SELECT agency_id, count(*) FROM Clients GROUP BY agency_id
SELECT agency_id, agency_details FROM Agencies GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT agency_id, agency_details FROM Agencies GROUP BY agency_id ORDER BY (SELECT COUNT(*) FROM Clients WHERE Clients.agency_id = Agencies.agency_id) DESC LIMIT 1
SELECT agency_id, agency_details FROM Agencies GROUP BY agency_id, agency_details HAVING COUNT(client_id) >= 2;
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) >= 2;
SELECT T1.agency_details  FROM Clients AS T1  JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id  WHERE T1.client_details = "Mac";
SELECT T1.agency_details  FROM Agencies AS T1  JOIN Clients AS T2 ON T1.agency_id = T2.agency_id  WHERE T2.client_details = "Mac";
SELECT T1.client_details, T2.staff_details FROM Clients AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id;
SELECT C.client_details, A.agency_details  FROM Clients C  JOIN Agencies A ON C.agency_id = A.agency_id;
SELECT sic_code, count(*) FROM Clients GROUP BY sic_code
SELECT sic_code, count(*) FROM Clients GROUP BY sic_code
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad';
SELECT client_details FROM Clients WHERE sic_code = 'Bad';
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id;
SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id;
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)
SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients;
SELECT count(*) FROM Invoices
SELECT count(*) FROM Invoices
SELECT invoice_id, invoice_status, invoice_details FROM Invoices;
SELECT invoice_id, invoice_status, invoice_details FROM Invoices;
SELECT client_id, count(*) FROM Invoices GROUP BY client_id
SELECT client_id, count(*) FROM Invoices GROUP BY client_id
SELECT client_id, client_details FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT client_id FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY client_id HAVING COUNT(*) >= 2
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2
SELECT invoice_status, count(*) FROM Invoices GROUP BY invoice_status;
SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status;
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.invoice_status, T1.invoice_details, T2.client_id, T2.client_details, T3.agency_id, T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id = T2.client_id JOIN Agencies AS T3 ON T2.agency_id = T3.agency_id
SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices AS I JOIN Clients AS C ON I.client_id = C.client_id JOIN Agencies AS A ON C.agency_id = A.agency_id
SELECT meeting_type, purpose_of_meeting, other_details FROM Meetings;
SELECT meeting_type, other_details FROM Meetings;
SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT P.payment_id, P.payment_details FROM Payments AS P JOIN Invoices AS I ON P.invoice_id = I.invoice_id WHERE I.invoice_status = 'Working';
SELECT payment_id, payment_details  FROM Payments  WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working');
SELECT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 WHERE T1.invoice_id NOT IN (SELECT T2.invoice_id FROM Payments AS T2)
SELECT I.invoice_id, I.invoice_status FROM Invoices AS I WHERE I.invoice_id NOT IN (SELECT P.invoice_id FROM Payments AS P);
SELECT count(*) FROM Payments
SELECT count(*) FROM Payments
SELECT Payments.payment_id, Invoices.invoice_id, Invoices.invoice_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
SELECT payment_id, invoice_id, payment_details FROM Payments;
SELECT DISTINCT I.invoice_id, I.invoice_status FROM Invoices AS I JOIN Payments AS P ON I.invoice_id = P.invoice_id;
SELECT DISTINCT I.invoice_id, I.invoice_status FROM Payments P JOIN Invoices I ON P.invoice_id = I.invoice_id
SELECT invoice_id, count(*) FROM Payments GROUP BY invoice_id
SELECT invoice_id, count(*) FROM Payments GROUP BY invoice_id;
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I JOIN Payments P ON I.invoice_id = P.invoice_id GROUP BY I.invoice_id ORDER BY COUNT(P.payment_id) DESC LIMIT 1;
SELECT count(*) FROM Staff
SELECT count(*) FROM Staff
SELECT agency_id, count(*) FROM Staff GROUP BY agency_id
SELECT agency_id, COUNT(*) FROM Staff GROUP BY agency_id;
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT agency_id, agency_details FROM Agencies GROUP BY agency_id ORDER BY (SELECT COUNT(*) FROM Staff WHERE Staff.agency_id = Agencies.agency_id) DESC LIMIT 1
SELECT meeting_outcome, count(*) FROM Meetings GROUP BY meeting_outcome;
SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome;
SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id;
SELECT client_id, count(*) FROM Meetings GROUP BY client_id
SELECT client_id, count(*) FROM Meetings GROUP BY client_id;
SELECT meeting_type, count(*) FROM Meetings GROUP BY meeting_type;
SELECT M.meeting_id, M.meeting_outcome, M.meeting_type, C.client_details FROM Meetings AS M JOIN Clients AS C ON M.client_id = C.client_id
SELECT M.meeting_id, M.meeting_outcome, M.meeting_type, C.client_details FROM Meetings AS M JOIN Clients AS C ON M.client_id = C.client_id
SELECT meeting_id, count(*) FROM Staff_in_Meetings GROUP BY meeting_id
SELECT meeting_id, count(*) FROM Staff_in_Meetings GROUP BY meeting_id;
SELECT staff_id, COUNT(*)  FROM Staff_in_Meetings  GROUP BY staff_id  ORDER BY COUNT(*) ASC  LIMIT 1;
SELECT staff_id FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY staff_id ORDER BY COUNT(meeting_id) ASC LIMIT 1;
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings);
SELECT count(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings) OR client_id IN (SELECT client_id FROM Invoices);
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings) OR client_id IN (SELECT client_id FROM Invoices);
SELECT T1.staff_id, T1.staff_details FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id WHERE T1.staff_details LIKE '%s' AND T2.meeting_id IS NOT NULL
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (   SELECT staff_id   FROM Staff_in_Meetings ) AND staff_details LIKE '%s%';
SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C JOIN Meetings M ON C.client_id = M.client_id JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id, C.sic_code, C.agency_id HAVING COUNT(M.meeting_id) = 1 AND I.invoice_id IS NOT NULL;
SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C JOIN Meetings M ON C.client_id = M.client_id JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id, C.sic_code, C.agency_id HAVING COUNT(M.meeting_id) = 1;
SELECT      M.start_date_time AS start_time,      M.end_date_time AS end_time,      C.client_details AS client_detail,      S.staff_details AS staff_detail FROM      Meetings M JOIN      Clients C ON M.client_id = C.client_id JOIN      Staff S ON M.meeting_id IN (SELECT meeting_id FROM Staff_in_Meetings WHERE staff_id = S.staff_id) ORDER BY      M.start_date_time;
SELECT      M.start_date_time AS start_time,     M.end_date_time AS end_time,     C.client_details AS client_details,     GROUP_CONCAT(S.staff_details, ', ') AS staff_details FROM      Meetings M JOIN      Clients C ON M.client_id = C.client_id JOIN      Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id JOIN      Staff S ON SM.staff_id = S.staff_id GROUP BY      M.meeting_id;