Specification,query
"{'meaningful_joins': 'yes', 'table_exp_type': 'SELF JOIN', 'where_type': 'none', 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'DESC', 'limit_type': 'without_offset', 'value_exp_types': ['count_distinct_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}",SELECT COUNT(DISTINCT player.Team) FROM player AS x JOIN player ON player.Player_ID = x.Player_ID ORDER BY 1 ASC LIMIT 10
"{'meaningful_joins': 'yes', 'table_exp_type': 'JOIN', 'where_type': {'basic_comparison': '>='}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'ASC', 'limit_type': 'none', 'value_exp_types': ['agg_exp', 'count_distinct_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT AVG(Year_Entered_Competition), COUNT(DISTINCT Denomination) FROM school_performance JOIN school ON school_performance.School_Id = school.School_ID WHERE  School_ID >= School_ID ORDER BY 1 ASC"
"{'meaningful_joins': 'yes', 'table_exp_type': 'JOIN_JOIN', 'where_type': {'basic_comparison': '>='}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['alias_exp', 'single_exp_text'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT Class_AA AS Class_AA_a, School_Year FROM school_performance JOIN player JOIN school ON school.School_ID = player.School_ID AND school_performance.School_Id = school.School_ID WHERE  Player_ID >= School_Id"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table_with_name_changing', 'where_type': {'basic_comparison': '>='}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'without_offset', 'value_exp_types': ['agg_exp', 'single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT MAX(j.Year_Entered_Competition), j.Enrollment FROM school AS j WHERE  j.Founded >= j.Enrollment LIMIT 8"
"{'meaningful_joins': 'yes', 'table_exp_type': 'SELF JOIN', 'where_type': {'basic_comparison': '<='}, 'number_of_value_exp_in_group_by': 1, 'having_type': {'single': 'SUM'}, 'orderby_type': 'none', 'limit_type': 'without_offset', 'value_exp_types': ['alias_exp', 'single_exp_text'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT e.Nickname AS Nickname_g, school_details.Class, e.Division FROM school_details JOIN school_details AS e ON school_details.School_ID = e.School_ID WHERE  school_details.School_ID <= school_details.School_ID GROUP BY e.Division HAVING SUM(school_details.School_ID) >= 95 LIMIT 2"
"{'meaningful_joins': 'yes', 'table_exp_type': 'SELF JOIN', 'where_type': {'basic_comparison': '<='}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'ASC', 'limit_type': 'none', 'value_exp_types': ['agg_exp', 'alias_exp', 'arithmatic_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT AVG(d.School_Id), d.School_Year AS School_Year_l, school_performance.School_Id FROM school_performance JOIN school_performance AS d ON school_performance.School_Id = d.School_Id WHERE  school_performance.School_Id <= d.School_Id ORDER BY School_Year_l ASC"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table_with_name_changing', 'where_type': {'logical_operator': ['AND', 'between', 'basic_comparison']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['alias_exp', 'single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT t.Enrollment AS Enrollment_r, t.Year_Entered_Competition FROM school AS t WHERE (t.Enrollment BETWEEN 1 AND 10) AND ( t.School_ID < t.Founded)"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table', 'where_type': {'logical_operator': ['AND', 'between', 'basic_comparison']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['arithmatic_exp', 'single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT Founded, School_ID FROM school WHERE (School_ID BETWEEN 1 AND 10) AND ( Founded <= Founded)"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table', 'where_type': {'basic_comparison': '>'}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'without_offset', 'value_exp_types': ['arithmatic_exp', 'count_distinct_exp', 'count_distinct_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT Player_ID, COUNT(DISTINCT Position), COUNT(DISTINCT Team) FROM player WHERE  School_ID > Player_ID LIMIT 6"
"{'meaningful_joins': 'yes', 'table_exp_type': 'SELF JOIN', 'where_type': {'logical_operator': ['OR', 'between', 'basic_comparison']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['agg_exp', 'alias_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT MAX(school_performance.School_Id), school_performance.School_Id AS School_Id_l FROM school_performance JOIN school_performance AS t ON school_performance.School_Id = t.School_Id WHERE (t.School_Id BETWEEN 1 AND 10) OR ( t.School_Id = t.School_Id)"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table', 'where_type': {'logical_operator': ['OR', 'between', 'not_in_with_subquery']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'without_offset', 'value_exp_types': ['agg_exp', 'single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT AVG(School_ID), School_ID FROM school_details WHERE (School_ID BETWEEN 1 AND 10) OR (Nickname NOT IN (SELECT Nickname FROM school_details AS l WHERE  l.School_ID = l.School_ID)) LIMIT 8"
"{'meaningful_joins': 'yes', 'table_exp_type': 'JOIN_JOIN', 'where_type': {'logical_operator': ['OR', 'between', 'not_exists_subquery']}, 'number_of_value_exp_in_group_by': 1, 'having_type': {'single': 'MAX'}, 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['count_distinct_exp', 'single_exp_text'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","Error in EXISTS/NOT EXISTS subquery: can only concatenate str (not ""list"") to str"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table', 'where_type': {'basic_comparison': '>'}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['single_exp_text', 'single_exp_text'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT Player, Player FROM player WHERE  Player_ID > School_ID"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table', 'where_type': 'comparison_with_subquery', 'number_of_value_exp_in_group_by': 1, 'having_type': {'single': 'MIN'}, 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['count_distinct_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT COUNT(DISTINCT Location), Founded FROM school WHERE School <= (SELECT AVG(School) FROM school AS i WHERE i.Founded BETWEEN 1 AND 10) GROUP BY Founded HAVING MIN(School_ID) <= 71"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table', 'where_type': {'logical_operator': ['AND', 'between', 'comparison_with_subquery']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'without_offset', 'value_exp_types': ['arithmatic_exp', 'count_distinct_exp', 'single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT Year_Entered_Competition, COUNT(DISTINCT School_Colors), Enrollment FROM school WHERE (Enrollment BETWEEN 1 AND 10) AND (Day_or_Boarding > (SELECT MAX(Day_or_Boarding) FROM school AS g WHERE g.Year_Entered_Competition BETWEEN 1 AND 10)) LIMIT 10"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table', 'where_type': {'logical_operator': ['OR', 'basic_comparison', 'not_exists_subquery']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'DESC', 'limit_type': 'none', 'value_exp_types': ['arithmatic_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}",too many values to unpack (expected 2)
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table_with_name_changing', 'where_type': {'logical_operator': ['AND', 'between', 'basic_comparison']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'DESC', 'limit_type': 'none', 'value_exp_types': ['single_exp_number', 'single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT v.Year_Entered_Competition, v.Year_Entered_Competition FROM school AS v WHERE (v.Enrollment BETWEEN 1 AND 10) AND ( v.Founded = v.Year_Entered_Competition) ORDER BY v.Year_Entered_Competition DESC"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table_with_name_changing', 'where_type': {'basic_comparison': '<'}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['agg_exp', 'count_distinct_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT MIN(r.Age), COUNT(DISTINCT r.Team) FROM player AS r WHERE  r.Age < r.School_ID"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table', 'where_type': {'logical_operator': ['AND', 'basic_comparison', 'not_in_with_subquery']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'ASC', 'limit_type': 'without_offset', 'value_exp_types': ['arithmatic_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}",SELECT Player_ID FROM player WHERE ( School_ID < Player_ID) AND (Age NOT IN (SELECT Age FROM player AS h WHERE  h.Age <= h.School_ID)) ORDER BY 1 ASC LIMIT 2
"{'meaningful_joins': 'yes', 'table_exp_type': 'JOIN', 'where_type': {'logical_operator': ['AND', 'between', 'not_in_with_subquery']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'ASC', 'limit_type': 'none', 'value_exp_types': ['single_exp_text'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}",SELECT Location FROM school_performance JOIN school ON school_performance.School_Id = school.School_ID WHERE (Year_Entered_Competition BETWEEN 1 AND 10) AND (Location NOT IN (SELECT Location FROM school AS w WHERE  w.Year_Entered_Competition >= w.Founded)) ORDER BY Location ASC
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table_with_name_changing', 'where_type': {'basic_comparison': '='}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'ASC', 'limit_type': 'none', 'value_exp_types': ['single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}",SELECT r.School_ID FROM player AS r WHERE  r.Player_ID = r.Player_ID ORDER BY r.School_ID ASC
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table', 'where_type': 'none', 'number_of_value_exp_in_group_by': 1, 'having_type': {'single': 'AVG'}, 'orderby_type': 'DESC', 'limit_type': 'without_offset', 'value_exp_types': ['agg_exp', 'arithmatic_exp', 'single_exp_text'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT SUM(School_ID), School_ID, Division FROM school_details GROUP BY Division HAVING AVG(School_ID) >= 28 ORDER BY Division DESC LIMIT 2"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table_with_name_changing', 'where_type': {'basic_comparison': '!='}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'without_offset', 'value_exp_types': ['single_exp_text'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}",SELECT k.School_Colors FROM school AS k WHERE  k.Founded != k.School_ID LIMIT 1
"{'meaningful_joins': 'yes', 'table_exp_type': 'SELF JOIN', 'where_type': {'basic_comparison': '<>'}, 'number_of_value_exp_in_group_by': 1, 'having_type': {'single': 'MIN'}, 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['alias_exp', 'arithmatic_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT player.Team AS Team_o, l.Age, l.Player FROM player JOIN player AS l ON player.Player_ID = l.Player_ID WHERE  l.Age <> l.Player_ID GROUP BY l.Player HAVING MIN(l.Age) <= 30"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table_with_name_changing', 'where_type': {'logical_operator': ['AND', 'between', 'in_with_subquery']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'without_offset', 'value_exp_types': ['alias_exp', 'single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT q.Class_AA AS Class_AA_c, q.School_Id FROM school_performance AS q WHERE (q.School_Id BETWEEN 1 AND 10) AND (Class_A IN (SELECT Class_A FROM school_performance AS u WHERE  u.School_Id >= u.School_Id)) LIMIT 6"
"{'meaningful_joins': 'yes', 'table_exp_type': 'JOIN_JOIN', 'where_type': 'not_exists_subquery', 'number_of_value_exp_in_group_by': 1, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","Error in EXISTS/NOT EXISTS subquery: can only concatenate str (not ""list"") to str"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table_with_name_changing', 'where_type': {'basic_comparison': '>'}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'ASC', 'limit_type': 'without_offset', 'value_exp_types': ['single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}",SELECT d.Age FROM player AS d WHERE  d.Player_ID > d.Player_ID ORDER BY d.Age ASC LIMIT 1
"{'meaningful_joins': 'yes', 'table_exp_type': 'JOIN_JOIN', 'where_type': {'logical_operator': ['OR', 'between', 'not_exists_subquery']}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['single_exp_number', 'single_exp_number'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","Error in EXISTS/NOT EXISTS subquery: can only concatenate str (not ""list"") to str"
"{'meaningful_joins': 'yes', 'table_exp_type': 'JOIN_JOIN', 'where_type': {'basic_comparison': '<='}, 'number_of_value_exp_in_group_by': 0, 'having_type': 'none', 'orderby_type': 'none', 'limit_type': 'none', 'value_exp_types': ['single_exp_number', 'single_exp_text'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT Year_Entered_Competition, Denomination FROM school_performance JOIN player JOIN school ON school.School_ID = player.School_ID AND school_performance.School_Id = school.School_ID WHERE  Age <= School_Id"
"{'meaningful_joins': 'yes', 'table_exp_type': 'single_table_with_name_changing', 'where_type': {'basic_comparison': '<='}, 'number_of_value_exp_in_group_by': 1, 'having_type': {'single': 'SUM'}, 'orderby_type': 'none', 'limit_type': 'without_offset', 'value_exp_types': ['agg_exp', 'alias_exp'], 'distinct_type': 'none', 'min_max_depth_in_subquery': [1, 1]}","SELECT MAX(j.School_ID), j.Age AS Age_m, j.School_ID FROM player AS j WHERE  j.Age <= j.School_ID GROUP BY j.School_ID HAVING SUM(j.Age) <= 17 LIMIT 1"
