import json
import os

import pandas as pd
from dotenv import load_dotenv
from langchain.chains import LLMChain
from langchain.prompts import (
    ChatPromptTemplate,
)

# use the load_metric function
from langchain_openai import ChatOpenAI

load_dotenv()
if __name__ == "__main__":

    os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

    CHAT = ChatOpenAI(model="gpt-3.5-turbo", temperature=0, max_tokens=1000)

    all_res = {}
    error = []

    join_rel_dict = {
        "farm": "  Sure, here are the triples that describe the relationships between the pairs of tables in the schema:\n\n* (('city', 'farm'), 'is_located_in')\n* (('city', 'farm_competition'), 'hosts')\n* (('city', 'competition_record'), 'has_record_of')\n* (('farm', 'farm_competition'), 'participates_in')\n* (('farm', 'competition_record'), 'has_record_of')\n* (('farm_competition', 'competition_record'), 'is_a_record_of')\n* (('farm', 'city'), 'is_located_in')\n* (('farm_competition', 'city'), 'is_hosted_in')\n* (('competition_record', 'city'), 'is_recorded_in')\n* (('farm_competition', 'farm'), 'is_a_part_of')\n* (('competition_record', 'farm'), 'is_recorded_for')\n* (('competition_record', 'farm_competition'), 'is_a_record_of')\n\nNote that the verb phrases used here are just suggestions, and you may want to adjust them based on the specific context and requirements of your project.",
        "perpetrator": '  Sure! Here are the triples that describe the relationship between the pairs of tables in the join definition:\n\n* (perpetrator, people, "perpetrator is a person")\n* (people, perpetrator, "person is a perpetrator")\n\nThe verb that describes the relationship between these pairs is "is a". The first triple states that a perpetrator is a person, and the second triple states that a person can be a perpetrator.\n\nHere\'s the list of triples:\n\n[(\'perpetrator\', \'people\', "is a"), (\'people\', \'perpetrator\', "is a")]',
        "college_2": "  Sure, here are the triples for the given pairs:\n\n* (classroom, department, belongs_to)\n* (classroom, course, hosts)\n* (classroom, instructor, assigned_to)\n* (classroom, section, assigned_to)\n* (classroom, teaches, is_taught_by)\n* (classroom, student, enrolled_in)\n* (classroom, takes, is_taken_by)\n* (classroom, advisor, assigned_to)\n* (classroom, time_slot, scheduled_in)\n* (classroom, prereq, fulfills)\n* (department, course, offers)\n* (department, instructor, employs)\n* (department, section, contains)\n* (department, teaches, is_taught_by)\n* (department, student, enrolled_in)\n* (department, takes, is_taken_by)\n* (department, advisor, assigned_to)\n* (department, time_slot, scheduled_in)\n* (department, prereq, fulfills)\n* (course, instructor, taught_by)\n* (course, section, contains)\n* (course, teaches, is_taught_by)\n* (course, student, enrolled_in)\n* (course, takes, is_taken_by)\n* (course, advisor, assigned_to)\n* (course, time_slot, scheduled_in)\n* (course, prereq, fulfills)\n* (instructor, section, teaches)\n* (instructor, teaches, is_taught_by)\n* (instructor, student, enrolled_in)\n* (instructor, takes, is_taken_by)\n* (instructor, advisor, assigned_to)\n* (instructor, time_slot, scheduled_in)\n* (instructor, prereq, fulfills)\n* (section, teaches, is_taught_by)\n* (section, student, enrolled_in)\n* (section, takes, is_taken_by)\n* (section, advisor, assigned_to)\n* (section, time_slot, scheduled_in)\n* (section, prereq, fulfills)\n* (teaches, student, teaches)\n* (teaches, takes, is_taken_by)\n* (teaches, advisor, assigned_to)\n* (teaches, time_slot, scheduled_in)\n* (teaches, prereq, fulfills)\n* (student, takes, is_taken_by)\n* (student, advisor, assigned_to)\n* (student, time_slot, scheduled_in)\n* (student, prereq, fulfills)\n* (takes, advisor, assigned_to)\n* (takes, time_slot, scheduled_in)\n* (takes, prereq, fulfills)\n* (advisor, time_slot, scheduled_in)\n* (advisor, prereq, fulfills)\n* (time_slot, prereq, fulfills)\n\nNote that some of the triples may have multiple possible verbs, depending on the context and the specific relationship between the entities.",
        "flight_company": "  Sure! Here are the pairs and their corresponding verbs:\n\n* ('airport', 'operate_company') : operates\n* ('airport', 'flight') : serves\n* ('operate_company', 'flight') : operates\n* ('operate_company', 'airport') : operates\n* ('flight', 'airport') : arrives\n* ('flight', 'operate_company') : is operated by\n\nHere's a list of triples:\n\n[('airport', 'operate_company', 'operates'),\n ('airport', 'flight', 'serves'),\n ('operate_company', 'flight', 'operates'),\n ('operate_company', 'airport', 'operates'),\n ('flight', 'airport', 'arrives'),\n ('flight', 'operate_company', 'is operated by')]",
        "icfp_1": "  Sure, here are the triples that describe the relationships between the pairs of tables in the schema:\n\n* (('Inst', 'Authors'), ('Inst', 'Papers'), 'Institution publishes papers')\n* (('Inst', 'Authors'), ('Authors', 'Papers'), 'Authors write papers')\n* (('Inst', 'Authorship'), ('Authors', 'Papers'), 'Institution publishes papers with authorship')\n* (('Authors', 'Papers'), ('Authors', 'Authorship'), 'Authors have authorship in papers')\n* (('Authors', 'Papers'), ('Papers', 'Authorship'), 'Papers have authorship')\n* (('Papers', 'Authorship'), ('Inst', 'Authorship'), 'Papers are published by institution with authorship')\n* (('Papers', 'Authorship'), ('Authors', 'Authorship'), 'Papers have authorship with authors')\n* (('Authors', 'Inst'), ('Inst', 'Authors'), 'Institution has authors')\n* (('Papers', 'Inst'), ('Inst', 'Papers'), 'Institution publishes papers')\n* (('Authorship', 'Inst'), ('Inst', 'Authorship'), 'Institution has authorship')\n* (('Authorship', 'Authors'), ('Authors', 'Authorship'), 'Authors have authorship')\n* (('Authorship', 'Papers'), ('Papers', 'Authorship'), 'Papers have authorship')\n\nNote that some of these triples may not be immediately apparent from the schema, but they can be inferred based on the relationships between the tables.",
        "body_builder": '  Sure! Here are the triples that describe the relationship between the pairs of tables in the schema:\n\n* (body_builder, people, "body_builder creates people")\n* (people, body_builder, "people are created by body_builder")\n\nThe verb "creates" describes the relationship between "body_builder" and "people" in terms of meaning. It indicates that the "body_builder" table is the source of the data that is used to create the "people" table.\n\nI hope this helps! Let me know if you have any questions.',
        "storm_record": "  Sure, here are the pairs and their corresponding verbs:\n\n* ('storm', 'region') : affects\n* ('storm', 'affected_region') : affects\n* ('region', 'affected_region') : includes\n* ('region', 'storm') : occurs_in\n* ('affected_region', 'storm') : is_affected_by\n* ('affected_region', 'region') : is_part_of\n\nHere's a list of triples:\n\n[('storm', 'region', 'affects'),\n ('storm', 'affected_region', 'affects'),\n ('region', 'affected_region', 'includes'),\n ('region', 'storm', 'occurs_in'),\n ('affected_region', 'storm', 'is_affected_by'),\n ('affected_region', 'region', 'is_part_of')]",
        "pilot_record": "  Sure! Here are the pairs and their corresponding verbs:\n\n* ('aircraft', 'pilot') : operates\n* ('aircraft', 'pilot_record') : has\n* ('pilot', 'pilot_record') : has\n* ('pilot', 'aircraft') : is assigned to\n* ('pilot_record', 'aircraft') : is associated with\n* ('pilot_record', 'pilot') : belongs to\n\nHere's the list of triples:\n\n[('aircraft', 'pilot', 'operates'),\n ('aircraft', 'pilot_record', 'has'),\n ('pilot', 'pilot_record', 'has'),\n ('pilot', 'aircraft', 'is assigned to'),\n ('pilot_record', 'aircraft', 'is associated with'),\n ('pilot_record', 'pilot', 'belongs to')]",
        "race_track": '  Sure! Here are the triples that describe the relationship between the pairs of tables in the join definition:\n\n* (race, track, "race is held on track")\n* (track, race, "track hosts race")\n\nThe verb "is held on" describes the relationship between "race" and "track" in the first triple, indicating that a race is conducted on a particular track. Similarly, the verb "hosts" describes the relationship between "track" and "race" in the second triple, indicating that a track is the location where a race is held.',
        "academic": "  Here are some examples of triples that describe the relationships between the pairs of entities in the schema:\n\n* ('author', 'conference', 'authors conference')\n* ('author', 'domain', 'authors domain')\n* ('author', 'domain_author', 'authors domain_author')\n* ('author', 'domain_conference', 'authors domain_conference')\n* ('author', 'journal', 'authors journal')\n* ('author', 'domain_journal', 'authors domain_journal')\n* ('author', 'keyword', 'authors keyword')\n* ('author', 'domain_keyword', 'authors domain_keyword')\n* ('author', 'publication', 'authors publication')\n* ('author', 'domain_publication', 'authors domain_publication')\n* ('author', 'organization', 'authors organization')\n* ('author', 'publication_keyword', 'authors publication_keyword')\n* ('author', 'writes', 'authors writes')\n* ('conference', 'author', 'conference authors')\n* ('conference', 'domain', 'conference domain')\n* ('conference', 'domain_author', 'conference domain_author')\n* ('conference', 'domain_conference', 'conference domain_conference')\n* ('conference', 'journal', 'conference journal')\n* ('conference', 'domain_journal', 'conference domain_journal')\n* ('conference', 'keyword', 'conference keyword')\n* ('conference', 'domain_keyword', 'conference domain_keyword')\n* ('conference', 'publication', 'conference publication')\n* ('conference', 'domain_publication', 'conference domain_publication')\n* ('conference', 'organization', 'conference organization')\n* ('conference', 'publication_keyword', 'conference publication_keyword')\n* ('conference', 'writes', 'conference writes')\n* ('domain', 'author', 'domain authors')\n* ('domain', 'conference', 'domain conference')\n* ('domain', 'domain_author', 'domain domain_author')\n* ('domain', 'domain_conference', 'domain domain_conference')\n* ('domain', 'journal', 'domain journal')\n* ('domain', 'domain_journal', 'domain domain_journal')\n* ('domain', 'keyword', 'domain keyword')\n* ('domain', 'domain_keyword', 'domain domain_keyword')\n* ('domain', 'publication', 'domain publication')\n* ('domain', 'domain_publication', 'domain domain_publication')\n* ('domain', 'organization', 'domain organization')\n* ('domain', 'publication_keyword', 'domain publication_keyword')\n* ('domain', 'writes', 'domain writes')\n* ('domain_author', 'domain', 'domain_author domain')\n* ('domain_author', 'conference', 'domain_author conference')\n* ('domain_author', 'domain_conference', 'domain_author domain_conference')\n* ('domain_author', 'journal', 'domain_author journal')\n* ('domain_author', 'domain_journal', 'domain_author domain_journal')\n* ('domain_author', 'keyword', 'domain_author keyword')\n* ('domain_author', 'domain_keyword', 'domain_author domain_keyword')\n* ('domain_author', 'publication', 'domain_author publication')\n* ('domain_author', 'domain_publication', 'domain_author domain_publication')\n* ('domain_author', 'organization', 'domain_author organization')\n* ('domain_author', 'publication_keyword', 'domain_author publication_keyword')\n* ('domain_author', 'writes', 'domain_author writes')\n* ('domain_conference', 'domain', 'domain_conference domain')\n* ('domain_conference', 'conference', 'domain_conference conference')\n* ('domain_conference', 'domain_author', 'domain_conference domain_author')\n* ('domain_conference', 'domain_journal', 'domain_conference domain_journal')\n* ('domain_conference', 'keyword', 'domain_conference keyword')\n* ('domain_conference', 'domain_keyword', 'domain_conference domain_keyword')\n* ('domain_conference', 'publication', 'domain_conference publication')\n* ('domain_conference', 'domain_publication', 'domain_conference domain_public",
        "department_store": "  Here are some examples of triples that describe the relationships between the pairs of tables:\n\n* (Addresses, Staff), ('lives',)\n(Addresses, Suppliers), ('is located at',)\n(Addresses, Department_Store_Chain), ('is a part of',)\n(Addresses, Customers), ('is a customer of',)\n(Addresses, Products), ('is a supplier of',)\n(Addresses, Supplier_Addresses), ('shares',)\n(Addresses, Customer_Addresses), ('shares',)\n(Addresses, Customer_Orders), ('has placed an order with',)\n(Addresses, Department_Stores), ('is located in',)\n(Addresses, Departments), ('is a part of',)\n(Addresses, Order_Items), ('is a component of',)\n(Addresses, Product_Suppliers), ('supplies',)\n(Addresses, Staff_Department_Assignments), ('is assigned to',)\n\n* (Staff, Suppliers), ('works with',)\n(Staff, Department_Store_Chain), ('is employed by',)\n(Staff, Customers), ('serves',)\n(Staff, Products), ('is knowledgeable about',)\n(Staff, Supplier_Addresses), ('has a relationship with',)\n(Staff, Customer_Addresses), ('has a relationship with',)\n(Staff, Customer_Orders), ('has taken an order from',)\n(Staff, Department_Stores), ('works at',)\n(Staff, Departments), ('is a member of',)\n(Staff, Order_Items), ('has processed',)\n(Staff, Product_Suppliers), ('works with',)\n(Staff, Staff_Department_Assignments), ('is colleagues with',)\n\n* (Suppliers, Department_Store_Chain), ('has a contract with',)\n(Suppliers, Customers), ('has a business relationship with',)\n(Suppliers, Products), ('manufactures',)\n(Suppliers, Supplier_Addresses), ('shares',)\n(Suppliers, Customer_Addresses), ('has a relationship with',)\n(Suppliers, Customer_Orders), ('has received an order from',)\n(Suppliers, Department_Stores), ('has a business relationship with',)\n(Suppliers, Departments), ('is a part of',)\n(Suppliers, Order_Items), ('has provided',)\n(Suppliers, Product_Suppliers), ('collaborates with',)\n(Suppliers, Staff_Department_Assignments), ('has a business relationship with',)\n\n* (Department_Store_Chain, Customers), ('has a business relationship with',)\n(Department_Store_Chain, Products), ('sells',)\n(Department_Store_Chain, Supplier_Addresses), ('has a relationship with',)\n(Department_Store_Chain, Customer_Addresses), ('has a relationship with',)\n(Department_Store_Chain, Customer_Orders), ('has received an order from',)\n(Department_Store_Chain, Department_Stores), ('is a part of',)\n(Department_Store_Chain, Departments), ('is a part of',)\n(Department_Store_Chain, Order_Items), ('has sold',)\n(Department_Store_Chain, Product_Suppliers), ('collaborates with',)\n(Department_Store_Chain, Staff_Department_Assignments), ('has a business relationship with',)\n\n* (Customers, Products), ('has purchased',)\n(Customers, Supplier_Addresses), ('has a relationship with',)\n(Customers, Customer_Addresses), ('shares',)\n(Customers, Customer_Orders), ('has placed an order with',)\n(Customers, Department_Stores), ('has a business relationship with',)\n(Customers, Departments), ('is a part of',)\n(Customers, Order_Items), ('has ordered',)\n(Customers, Product_Suppliers), ('has a business relationship with',)\n(Customers, Staff_Department_Assignments), ('has a business relationship with',)\n\n* (Products, Supplier_Addresses), ('is supplied by',)\n(Products, Customer_Addresses), ('is purchased by',)\n(Products, Customer_Orders",
        "music_4": "  Sure! Here are the pairs and their corresponding verbs:\n\n* ('artist', 'volume'), ('volume', 'artist') - \"associates\" or \"links\" (an artist is associated with a volume, and a volume is associated with an artist)\n* ('artist', 'music_festival'), ('music_festival', 'artist') - \"performs\" or \"participates\" (an artist performs at a music festival, and a music festival features an artist)\n* ('volume', 'music_festival'), ('music_festival', 'volume') - \"includes\" or \"features\" (a volume includes a music festival, and a music festival features a volume)\n\nSo, the output would be:\n\n[\n  (('artist', 'volume'), 'associates'),\n  (('artist', 'music_festival'), 'performs'),\n  (('volume', 'music_festival'), 'includes'),\n  (('volume', 'artist'), 'associates'),\n  (('music_festival', 'artist'), 'features'),\n  (('music_festival', 'volume'), 'includes')\n]\n\nNote that the verb choices are not unique and could be replaced with synonyms depending on the context and desired level of formality.",
        "insurance_fnol": "  Sure, here are the pairs and their corresponding verbs:\n\n1. ('Customers', 'Services') - provides\n2. ('Customers', 'Available_Policies') - has\n3. ('Customers', 'Customers_Policies') - has\n4. ('Customers', 'First_Notification_of_Loss') - submits\n5. ('Customers', 'Claims') - makes\n6. ('Customers', 'Settlements') - receives\n7. ('Services', 'Available_Policies') - offers\n8. ('Services', 'Customers_Policies') - provides\n9. ('Services', 'First_Notification_of_Loss') - receives\n10. ('Services', 'Claims') - processes\n11. ('Services', 'Settlements') - makes\n12. ('Available_Policies', 'Customers_Policies') - corresponds\n13. ('Available_Policies', 'First_Notification_of_Loss') - triggers\n14. ('Available_Policies', 'Claims') - relates\n15. ('Available_Policies', 'Settlements') - influences\n16. ('Customers_Policies', 'First_Notification_of_Loss') - triggers\n17. ('Customers_Policies', 'Claims') - relates\n18. ('Customers_Policies', 'Settlements') - influences\n19. ('First_Notification_of_Loss', 'Claims') - initiates\n20. ('First_Notification_of_Loss', 'Settlements') - leads\n21. ('Claims', 'Settlements') - results\n22. ('Services', 'Customers') - serves\n23. ('Available_Policies', 'Services') - supports\n24. ('Customers_Policies', 'Services') - applies\n25. ('First_Notification_of_Loss', 'Services') - involves\n26. ('Claims', 'Services') - relies\n27. ('Settlements', 'Services') - affects\n28. ('Available_Policies', 'Customers_Policies') - aligns\n29. ('First_Notification_of_Loss', 'Available_Policies') - utilizes\n30. ('Claims', 'Available_Policies') - references\n31. ('Settlements', 'Available_Policies') - adjusts\n32. ('First_Notification_of_Loss', 'Customers_Policies') - interacts\n33. ('Claims', 'Customers_Policies') - correlates\n34. ('Settlements', 'Customers_Policies') - influences\n\nNote that some of these verbs are not perfect, but they should give you an idea of the relationships between the entities in the schema.",
        "cinema": "  Sure, here are the pairs and their corresponding verbs:\n\n* ('film', 'cinema'), ('film', 'schedule'), ('cinema', 'schedule'): \"is shown at\"\n* ('cinema', 'film'): \"shows\"\n* ('schedule', 'film'): \"is scheduled for\"\n* ('schedule', 'cinema'): \"is played at\"\n\nSo, the output would be:\n\n[('film', 'cinema', 'is shown at'),\n ('film', 'schedule', 'is shown at'),\n ('cinema', 'film', 'shows'),\n ('schedule', 'film', 'is scheduled for'),\n ('schedule', 'cinema', 'is played at')]",
        "decoration_competition": "  Sure! Here are the pairs and their corresponding verbs:\n\n* ('college', 'member'), ('belongs to')\n* ('college', 'round'), ('hosts')\n* ('member', 'round'), ('participates in')\n* ('member', 'college'), ('attends')\n* ('round', 'college'), ('is held at')\n* ('round', 'member'), ('involves')\n\nSo, the output would be:\n\n[('college', 'member', 'belongs to'),\n ('college', 'round', 'hosts'),\n ('member', 'round', 'participates in'),\n ('member', 'college', 'attends'),\n ('round', 'college', 'is held at'),\n ('round', 'member', 'involves')]",
        "phone_market": "  Sure, here are the pairs and their corresponding verbs:\n\n* ('phone', 'market') = \"is a part of\"\n* ('phone', 'phone_market') = \"is a type of\"\n* ('market', 'phone_market') = \"is a category of\"\n* ('market', 'phone') = \"is a market for\"\n* ('phone_market', 'phone') = \"is a subcategory of\"\n* ('phone_market', 'market') = \"is a subcategory of\"\n\nHere's the list of triples:\n\n[('phone', 'market', 'is a part of'),\n ('phone', 'phone_market', 'is a type of'),\n ('market', 'phone_market', 'is a category of'),\n ('market', 'phone', 'is a market for'),\n ('phone_market', 'phone', 'is a subcategory of'),\n ('phone_market', 'market', 'is a subcategory of')]",
        "store_product": "  Sure, here are the triples that describe the relationships between the pairs in the given schema:\n\n* (('product', 'store'), ('store', 'district'), 'product is sold at store in district')\n* (('product', 'store'), ('store', 'store_product'), 'product is sold at store')\n* (('product', 'store'), ('store', 'store_district'), 'product is sold at store in district')\n* (('product', 'district'), ('district', 'store_product'), 'product is sold in district at store')\n* (('product', 'district'), ('district', 'store_district'), 'product is sold in district')\n* (('store', 'district'), ('district', 'store_product'), 'store is located in district where product is sold')\n* (('store', 'district'), ('district', 'store_district'), 'store is located in district')\n* (('store', 'store_product'), ('store_product', 'store_district'), 'store sells product in district')\n* (('store', 'store_product'), ('store', 'product'), 'store sells product')\n* (('store', 'store_district'), ('store_district', 'store_product'), 'store in district sells product')\n* (('store', 'store_district'), ('store', 'district'), 'store is located in district')\n* (('district', 'store_product'), ('store_product', 'store'), 'district has store where product is sold')\n* (('district', 'store_product'), ('district', 'product'), 'district has product sold at store')\n* (('district', 'store_district'), ('store_district', 'store'), 'district has store in district where product is sold')\n* (('district', 'store_district'), ('district', 'store'), 'district has store in district')\n\nNote that some of these triples may be redundant or imply the same relationship, but they all capture different aspects of the relationships between the entities in the schema.",
        "assets_maintenance": {
            "error": {
                "message": "Input validation error: `inputs` tokens + `max_new_tokens` must be <= 4097. Given: 3242 `inputs` tokens and 1024 `max_new_tokens`",
                "type": "invalid_request_error",
                "param": "max_tokens",
                "code": None,
            }
        },
        "student_assessment": "  Here are the pairs and their corresponding verbs:\n\n1. ('Addresses', 'People'), ('Addresses', 'Students'), ('Addresses', 'Courses'), ('Addresses', 'People_Addresses'), ('Addresses', 'Student_Course_Registrations'), ('Addresses', 'Student_Course_Attendance'), ('Addresses', 'Candidates'), ('Addresses', 'Candidate_Assessments') - relates\n2. ('People', 'Students'), ('People', 'Courses'), ('People', 'People_Addresses'), ('People', 'Student_Course_Registrations'), ('People', 'Student_Course_Attendance'), ('People', 'Candidates'), ('People', 'Candidate_Assessments') - belongs\n3. ('Students', 'Courses'), ('Students', 'People_Addresses'), ('Students', 'Student_Course_Registrations'), ('Students', 'Student_Course_Attendance'), ('Students', 'Candidates'), ('Students', 'Candidate_Assessments') - enrolled\n4. ('Courses', 'People_Addresses'), ('Courses', 'Student_Course_Registrations'), ('Courses', 'Student_Course_Attendance'), ('Courses', 'Candidates'), ('Courses', 'Candidate_Assessments') - offers\n5. ('People_Addresses', 'Student_Course_Registrations'), ('People_Addresses', 'Student_Course_Attendance'), ('People_Addresses', 'Candidates'), ('People_Addresses', 'Candidate_Assessments') - registers\n6. ('Student_Course_Registrations', 'Student_Course_Attendance'), ('Student_Course_Registrations', 'Candidates'), ('Student_Course_Registrations', 'Candidate_Assessments') - leads\n7. ('Student_Course_Attendance', 'Candidates'), ('Student_Course_Attendance', 'Candidate_Assessments') - evaluates\n8. ('Candidates', 'Candidate_Assessments') - assesses\n9. ('People', 'Addresses'), ('Students', 'Addresses'), ('Courses', 'Addresses'), ('People_Addresses', 'Addresses'), ('Student_Course_Registrations', 'Addresses'), ('Student_Course_Attendance', 'Addresses'), ('Candidates', 'Addresses'), ('Candidate_Assessments', 'Addresses') - has\n10. ('People', 'Students'), ('Courses', 'Students'), ('People_Addresses', 'Students'), ('Student_Course_Registrations', 'Students'), ('Student_Course_Attendance', 'Students'), ('Candidates', 'Students'), ('Candidate_Assessments', 'Students') - is\n11. ('Courses', 'People'), ('People_Addresses', 'People'), ('Student_Course_Registrations', 'People'), ('Student_Course_Attendance', 'People'), ('Candidates', 'People'), ('Candidate_Assessments', 'People') - belongs\n12. ('Student_Course_Registrations', 'Courses'), ('Student_Course_Attendance', 'Courses'), ('Candidates', 'Courses'), ('Candidate_Assessments', 'Courses') - is\n13. ('People_Addresses', 'Courses'), ('Student_Course_Registrations', 'People_Addresses'), ('Student_Course_Attendance', 'People_Addresses'), ('Candidates', 'People_Addresses'), ('Candidate_Assessments', 'People_Addresses') - relates\n14. ('Student_Course_Attendance', 'Student_Course_Registrations'), ('Candidates', 'Student_Course_Registrations'), ('Candidate_Assessments', 'Student_Course_Registrations'), ('Candidates', 'Student_Course_Attendance'), ('Candidate_Assessments', 'Student_Course_Attendance') - follows\n\nNote: The verb choices are not exhaustive and other verbs could also be suitable depending on the context and specific relationships.",
        "dog_kennels": '  Sure, here are the requested triples:\n\n* (Breeds, Charges, "determines")\n* (Breeds, Sizes, "determines")\n* (Breeds, Treatment_Types, "determines")\n* (Breeds, Owners, "has")\n* (Breeds, Dogs, "has")\n* (Breeds, Professionals, "has")\n* (Breeds, Treatments, "has")\n* (Charges, Sizes, "is_dependent_on")\n* (Charges, Treatment_Types, "is_dependent_on")\n* (Charges, Owners, "is_dependent_on")\n* (Charges, Dogs, "is_dependent_on")\n* (Charges, Professionals, "is_dependent_on")\n* (Charges, Treatments, "is_dependent_on")\n* (Sizes, Treatment_Types, "is_dependent_on")\n* (Sizes, Owners, "is_dependent_on")\n* (Sizes, Dogs, "is_dependent_on")\n* (Sizes, Professionals, "is_dependent_on")\n* (Sizes, Treatments, "is_dependent_on")\n* (Treatment_Types, Owners, "has")\n* (Treatment_Types, Dogs, "has")\n* (Treatment_Types, Professionals, "has")\n* (Treatment_Types, Treatments, "has")\n* (Owners, Dogs, "has")\n* (Owners, Professionals, "has")\n* (Owners, Treatments, "has")\n* (Dogs, Professionals, "has")\n* (Dogs, Treatments, "has")\n* (Professionals, Treatments, "has")\n* (Charges, Breeds, "determines")\n* (Sizes, Breeds, "determines")\n* (Treatment_Types, Breeds, "determines")\n* (Owners, Breeds, "has")\n* (Dogs, Breeds, "has")\n* (Professionals, Breeds, "has")\n* (Treatments, Breeds, "has")\n* (Sizes, Charges, "is_dependent_on")\n* (Treatment_Types, Charges, "is_dependent_on")\n* (Owners, Charges, "is_dependent_on")\n* (Dogs, Charges, "is_dependent_on")\n* (Professionals, Charges, "is_dependent_on")\n* (Treatments, Charges, "is_dependent_on")\n* (Treatment_Types, Sizes, "is_dependent_on")\n* (Owners, Sizes, "is_dependent_on")\n* (Dogs, Sizes, "is_dependent_on")\n* (Professionals, Sizes, "is_dependent_on")\n* (Treatments, Sizes, "is_dependent_on")\n* (Owners, Treatment_Types, "is_dependent_on")\n* (Dogs, Treatment_Types, "is_dependent_on")\n* (Professionals, Treatment_Types, "is_dependent_on")\n* (Treatments, Treatment_Types, "is_dependent_on")\n* (Dogs, Owners, "belongs_to")\n* (Professionals, Owners, "belongs_to")\n* (Treatments, Owners, "belongs_to")\n* (Professionals, Dogs, "belongs_to")\n* (Treatments, Dogs, "belongs_to")\n* (Treatments, Professionals, "belongs_to")\n\nNote that the verb "determines" indicates a one-to-many relationship, while "has" indicates a many-to-one relationship, and "is_dependent_on" indicates a dependency relationship. "belongs_to" indicates a belonging relationship.',
        "music_1": '  Sure, here are the requested triples:\n\n* (genre, artist, associates)\n* (genre, files, contains)\n* (genre, song, associates)\n* (artist, files, creates)\n* (artist, song, performs)\n* (files, song, contains)\n* (artist, genre, associates)\n* (files, genre, contains)\n* (song, genre, belongs_to)\n* (files, artist, associates)\n* (song, artist, performs)\n* (song, files, contains)\n\nHere\'s a brief explanation of each triple:\n\n* (genre, artist, associates): The artist is associated with the genre.\n* (genre, files, contains): The files contain the genre.\n* (genre, song, associates): The song is associated with the genre.\n* (artist, files, creates): The artist creates the files.\n* (artist, song, performs): The artist performs the song.\n* (files, song, contains): The files contain the song.\n* (artist, genre, associates): The artist is associated with the genre.\n* (files, genre, contains): The files contain the genre.\n* (song, genre, belongs_to): The song belongs to the genre.\n* (files, artist, associates): The files are associated with the artist.\n* (song, artist, performs): The artist performs the song.\n* (song, files, contains): The files contain the song.\n\nNote that the verb "associates" is used to describe the relationship between a genre and an artist or a song, as it implies a connection or affiliation between the two entities. Similarly, "contains" is used to describe the relationship between a file and a song or a genre, as it implies that the file contains or holds the song or genre. "Performs" is used to describe the relationship between an artist and a song, as it implies that the artist performs or executes the song. "Belongs_to" is used to describe the relationship between a song and a genre, as it implies that the song belongs to or is a part of the genre.',
    }

    chain = LLMChain(
        llm=CHAT,
        prompt=ChatPromptTemplate.from_messages(
            [
                "Convert the output into a list of triples. The 2 items in the triple are drived from the tuple variable. The output format is like [(pair[0],pair[1],rel),...]. The output should not contain numbers. here is the text:{text} and the tuple is {tuple}"
            ]
        ),
    )
    with open("data/processed/join_relationship/table_tuples.json") as json_data:
        tuples = json.load(json_data)

    for db in join_rel_dict:
        print(db)
        if isinstance(join_rel_dict[db], dict):
            error.append(db)
            continue

        res = chain.invoke({"text": join_rel_dict[db], "tuple": tuples[db]})
        print(res["text"])

        all_res[db] = res["text"]
    with open("data/processed/join_relationship/join_rel_dict.json", "w") as f:
        json.dump(all_res, f, indent=4)
    print(error)
