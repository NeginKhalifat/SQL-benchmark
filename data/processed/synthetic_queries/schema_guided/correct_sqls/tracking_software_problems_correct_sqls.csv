sql,hardness
"SELECT Problems.product_id, other_problem_details FROM Problems JOIN Product ON Product.product_id = Problems.product_id WHERE EXISTS (SELECT * FROM Product AS l WHERE  l.product_id != 8 AND Problems.problem_id = l.product_id LIMIT 7) GROUP BY other_problem_details",extra
"SELECT COUNT(DISTINCT k.product_details), k.product_id, k.product_name FROM Product AS k WHERE  k.product_id != 60 GROUP BY k.product_name",medium
"SELECT AVG(problem_id), other_log_details FROM Problem_Log WHERE problem_log_id BETWEEN 1 AND 10 AND  assigned_to_staff_id >= 99 ORDER BY other_log_details ASC",extra
"SELECT COUNT(DISTINCT log_entry_fix), problem_id FROM Staff JOIN Problem_Log ON Problem_Log.assigned_to_staff_id = Staff.staff_id WHERE assigned_to_staff_id BETWEEN 1 AND 10 OR EXISTS (SELECT * FROM Staff WHERE  staff_id != 79 AND Problem_Log.problem_log_id = staff_id) GROUP BY problem_id",extra
SELECT y.product_name FROM Product AS y JOIN Product ON Product.product_id = y.product_id WHERE Product.product_id BETWEEN 1 AND 10,medium
"SELECT problem_category_description, log_entry_description FROM Product JOIN Problems JOIN Problem_Log JOIN Problem_Category_Codes ON Problems.problem_id = Problem_Log.problem_id AND Problem_Category_Codes.problem_category_code = Problem_Log.problem_category_code AND Product.product_id = Problems.product_id WHERE Problems.problem_id BETWEEN 1 AND 10 AND log_entry_fix != (SELECT AVG(log_entry_fix) FROM Problem_Log WHERE problem_id BETWEEN 1 AND 10) GROUP BY log_entry_description LIMIT 3",extra
"SELECT COUNT(DISTINCT product_id), Problems.problem_id FROM Problems JOIN Problem_Log JOIN Problem_Category_Codes ON Problems.problem_id = Problem_Log.problem_id AND Problem_Category_Codes.problem_category_code = Problem_Log.problem_category_code WHERE  product_id != 4 ORDER BY Problems.problem_id ASC",extra
"SELECT MIN(reported_by_staff_id), staff_first_name FROM Problems JOIN Staff ON Problems.reported_by_staff_id = Staff.staff_id AND Problems.closure_authorised_by_staff_id = Staff.staff_id WHERE  staff_id > 6 ORDER BY staff_first_name ASC",hard
"SELECT other_problem_details, product_details FROM Problems JOIN Product ON Product.product_id = Problems.product_id WHERE closure_authorised_by_staff_id BETWEEN 1 AND 10 AND date_problem_reported >= (SELECT MIN(date_problem_reported) FROM Problems AS m WHERE  m.closure_authorised_by_staff_id <= 34)",extra
"SELECT other_staff_details, staff_last_name FROM Staff WHERE  staff_id <= 2 GROUP BY staff_last_name HAVING SUM(staff_id) >= 16",medium
SELECT MIN(product_id) FROM Product WHERE  product_id != 52,easy
"SELECT SUM(product_id), COUNT(DISTINCT product_name) FROM Product WHERE  product_id < 91",medium
"SELECT s.staff_first_name, s.staff_last_name, s.other_staff_details FROM Staff AS s WHERE s.staff_id BETWEEN 1 AND 10 ORDER BY s.staff_last_name DESC",medium
"SELECT problem_log_id, staff_last_name, log_entry_fix, Problem_Log.problem_category_code FROM Problem_Category_Codes JOIN Staff JOIN Problem_Log ON Problem_Log.assigned_to_staff_id = Staff.staff_id AND Problem_Category_Codes.problem_category_code = Problem_Log.problem_category_code WHERE  assigned_to_staff_id = 30 GROUP BY Problem_Log.problem_category_code HAVING MAX(assigned_to_staff_id) >= 61 ORDER BY problem_log_id DESC",extra
"SELECT staff_first_name, log_entry_fix, log_entry_description FROM Problems JOIN Staff JOIN Problem_Log JOIN Problem_Status_Codes ON Problem_Log.problem_status_code = Problem_Status_Codes.problem_status_code AND Problem_Log.assigned_to_staff_id = Staff.staff_id AND Problems.problem_id = Problem_Log.problem_id AND Problems.reported_by_staff_id = Staff.staff_id AND Problems.closure_authorised_by_staff_id = Staff.staff_id WHERE closure_authorised_by_staff_id BETWEEN 1 AND 10 AND  staff_id = 81 GROUP BY log_entry_description HAVING AVG(closure_authorised_by_staff_id) >= 3",extra
"SELECT COUNT(DISTINCT closure_authorised_by_staff_id), COUNT(DISTINCT problem_category_description), log_entry_fix FROM Problems JOIN Problem_Log JOIN Problem_Category_Codes ON Problems.problem_id = Problem_Log.problem_id AND Problem_Category_Codes.problem_category_code = Problem_Log.problem_category_code WHERE  assigned_to_staff_id < 13 LIMIT 10",extra
SELECT Problem_Log.problem_status_code FROM Problems JOIN Problem_Log JOIN Problem_Category_Codes JOIN Problem_Status_Codes ON Problem_Log.problem_status_code = Problem_Status_Codes.problem_status_code AND Problems.problem_id = Problem_Log.problem_id AND Problem_Category_Codes.problem_category_code = Problem_Log.problem_category_code WHERE  assigned_to_staff_id >= 48,extra
SELECT problem_id FROM Problems WHERE  closure_authorised_by_staff_id < 25 LIMIT 3,medium
"SELECT problem_category_code, log_entry_date FROM Problem_Log WHERE  assigned_to_staff_id < 72 GROUP BY log_entry_date ORDER BY problem_category_code ASC",hard
SELECT other_staff_details FROM Staff ORDER BY other_staff_details ASC LIMIT 9,medium
"SELECT c.product_id, c.product_id, c.product_name FROM Product AS c",medium
"SELECT SUM(closure_authorised_by_staff_id), MIN(problem_id), problem_description FROM Problems WHERE  closure_authorised_by_staff_id >= 88 GROUP BY problem_description LIMIT 2",hard
"SELECT MAX(assigned_to_staff_id), Problem_Log.problem_status_code, other_log_details FROM Problem_Log JOIN Problem_Status_Codes ON Problem_Log.problem_status_code = Problem_Status_Codes.problem_status_code WHERE  problem_id >= 99 LIMIT 3",hard
"SELECT COUNT(g.product_id), g.product_details FROM Product AS g JOIN Product ON Product.product_id = g.product_id WHERE Product.product_id BETWEEN 1 AND 10 AND EXISTS (SELECT * FROM Problems WHERE reported_by_staff_id BETWEEN 1 AND 10 AND Product.product_id = product_id) GROUP BY g.product_details ORDER BY g.product_details ASC",extra
"SELECT problem_category_code, log_entry_fix, product_details FROM Problems JOIN Staff JOIN Problem_Log JOIN Product ON Problem_Log.assigned_to_staff_id = Staff.staff_id AND Problems.problem_id = Problem_Log.problem_id AND Problems.reported_by_staff_id = Staff.staff_id AND Problems.closure_authorised_by_staff_id = Staff.staff_id AND Product.product_id = Problems.product_id WHERE Problem_Log.problem_id BETWEEN 1 AND 10 OR reported_by_staff_id NOT IN (SELECT reported_by_staff_id FROM Problems WHERE  closure_authorised_by_staff_id <= 68 LIMIT 5)",extra
