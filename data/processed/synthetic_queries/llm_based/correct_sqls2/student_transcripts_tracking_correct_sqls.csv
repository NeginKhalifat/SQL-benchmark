sql,hardness
SELECT T1.first_name FROM Students AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.student_id = 1 AND T1.date_first_registered BETWEEN '2020-01-01' AND '2021-01-01' AND NOT EXISTS (SELECT 1 FROM Students AS T3 WHERE T3.student_id = T1.student_id AND T3.date_left IS NOT NULL) ORDER BY T1.first_name ASC LIMIT 10,extra
"SELECT COUNT(DISTINCT T1.degree_program_id), T2.department_name FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name HAVING SUM(T1.degree_program_id) >= 1 ORDER BY T2.department_name ASC",hard
"SELECT T1.degree_summary_name, COUNT(T2.student_enrolment_id) FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.semester_id BETWEEN 1 AND 10 GROUP BY T1.degree_summary_name ORDER BY COUNT(T2.student_enrolment_id) ASC LIMIT 10",extra
SELECT T1.first_name FROM Students AS T1 WHERE T1.current_address_id BETWEEN 100 AND 200 AND T1.date_first_registered > '2000-01-01' AND T1.student_id NOT IN (SELECT T2.student_id FROM Student_Enrolment AS T2) ORDER BY T1.student_id DESC,extra
SELECT COUNT(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T1.degree_program_id BETWEEN 1 AND 100,medium
SELECT student_id FROM Students WHERE date_first_registered >= '2020-01-01',easy
SELECT AVG(T1.degree_summary_name) FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.semester_id = 1 AND T1.degree_summary_name BETWEEN 'A' AND 'C' GROUP BY T1.degree_summary_name HAVING AVG(T1.degree_summary_name) > 50,hard
"SELECT T1.degree_program_id, MAX(T2.semester_id) FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name <= 'Bachelor' ORDER BY MAX(T2.semester_id) DESC LIMIT 10",extra
SELECT COUNT(department_id) FROM Degree_Programs WHERE department_id <= 10,easy
SELECT COUNT(DISTINCT T1.first_name) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id JOIN Courses AS T4 ON T3.course_id = T4.course_id WHERE NOT EXISTS (SELECT 1 FROM Degree_Programs AS T5 JOIN Departments AS T6 ON T5.department_id = T6.department_id WHERE T6.department_name = 'Mathematics') GROUP BY T1.first_name ORDER BY COUNT(DISTINCT T1.first_name) DESC,extra
"SELECT T1.first_name, T2.degree_summary_name FROM Students AS T1 JOIN Student_Enrolment AS T3 ON T1.student_id = T3.student_id JOIN Degree_Programs AS T2 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T4 ON T3.student_enrolment_id = T4.student_enrolment_id JOIN Courses AS T5 ON T4.course_id = T5.course_id WHERE T5.course_id > 10 ORDER BY T1.first_name ASC",extra
"SELECT AVG(T1.degree_program_id), T2.department_name FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name HAVING AVG(T1.degree_program_id) BETWEEN 10 AND 20",medium
"SELECT T1.student_id, COUNT(DISTINCT T2.course_id) FROM Students AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_id = T2.student_enrolment_id JOIN Student_Enrolment AS T3 ON T3.student_enrolment_id = T2.student_enrolment_id WHERE T1.student_id != T3.student_id LIMIT 10",extra
SELECT email_address FROM Students WHERE date_first_registered > '2020-01-01' ORDER BY date_first_registered DESC LIMIT 10,hard
SELECT department_name FROM Departments WHERE department_id BETWEEN 10 AND 20 GROUP BY department_name HAVING AVG(department_id) > 100 ORDER BY department_id DESC LIMIT 5,extra
"SELECT COUNT(DISTINCT T1.degree_program_id), COUNT(DISTINCT T2.degree_summary_name), T3.first_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Students AS T3 ON T1.student_id = T3.student_id WHERE T1.student_enrolment_id = (SELECT MAX(student_enrolment_id) FROM Student_Enrolment) LIMIT 10",extra
"SELECT T1.first_name, T2.degree_summary_name FROM Students AS T1 JOIN Student_Enrolment AS T3 ON T1.student_id = T3.student_id JOIN Degree_Programs AS T2 ON T3.degree_program_id = T2.degree_program_id JOIN Student_Enrolment_Courses AS T5 ON T3.student_enrolment_id = T5.student_enrolment_id WHERE T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment WHERE semester_id = 1) AND T5.student_course_id BETWEEN 100 AND 200 ORDER BY T1.first_name ASC LIMIT 10",extra
SELECT department_name FROM Departments WHERE department_id > 5 GROUP BY department_name HAVING COUNT(department_id) > 1 ORDER BY department_name DESC,hard
"SELECT S.last_name, S.first_name, C.course_name FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Student_Enrolment_Courses AS SEC ON SE.student_enrolment_id = SEC.student_enrolment_id JOIN Courses AS C ON SEC.course_id = C.course_id WHERE C.course_description < 'Introduction to Computer Science' ORDER BY S.last_name DESC LIMIT 10",extra
SELECT T1.first_name FROM Students AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = 'John' AND T2.first_name = 'Alice' AND T1.student_id BETWEEN 1 AND 10 AND EXISTS (SELECT 1 FROM Students AS T3 WHERE T3.student_id = T1.student_id),extra
"SELECT department_id, MAX(degree_program_id) FROM Degree_Programs WHERE department_id <= 10",medium
"SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered BETWEEN '2000-01-01' AND '2020-01-01' ORDER BY first_name ASC",medium
SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = 1,easy
"SELECT MIN(T1.degree_summary_name) , T2.course_name FROM Degree_Programs AS T1 JOIN Courses AS T2 ON T1.department_id = T2.course_id WHERE T1.degree_program_id > 10 LIMIT 5",hard
SELECT student_id FROM Students WHERE date_first_registered < '1990-01-01',easy
SELECT AVG(T3.semester_id) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Semesters AS T3 ON T2.semester_id = T3.semester_id WHERE T1.first_name != 'John' GROUP BY T2.semester_id ORDER BY AVG(T3.semester_id) DESC,extra
