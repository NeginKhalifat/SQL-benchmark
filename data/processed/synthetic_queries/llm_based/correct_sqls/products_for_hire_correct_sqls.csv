sql,hardness
SELECT COUNT(customer_id) FROM Customers WHERE date_last_hire > '2020-01-01',easy
"SELECT COUNT(DISTINCT T1.customer_id), COUNT(T1.customer_id) FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id LIMIT 10",extra
"SELECT T1.first_name, COUNT(T2.booking_id) FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name HAVING COUNT(T2.booking_id) > 1 WHERE T1.good_or_bad_customer < 'bad'",medium
SELECT T1.good_or_bad_customer FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id WHERE T2.booking_start_date IN (SELECT T3.booking_start_date FROM Bookings AS T3 WHERE T3.count_hired = '1'),extra
SELECT COUNT(DISTINCT T1.coupon_id) FROM Discount_Coupons AS T1 WHERE T1.coupon_amount < 100,easy
SELECT T1.product_name FROM Products_for_Hire AS T1 WHERE T1.daily_hire_cost BETWEEN 10 AND 20 AND NOT EXISTS (SELECT 1 FROM Bookings AS T2 JOIN Products_Booked AS T3 ON T2.booking_id = T3.booking_id WHERE T2.booking_status_code = 'cancelled' AND T3.product_id = T1.product_id) GROUP BY T1.product_name HAVING AVG(T1.daily_hire_cost) > 15 ORDER BY T1.product_name DESC,extra
"SELECT T1.first_name, T2.payment_date FROM Customers AS T1 JOIN Payments AS T2 ON T1.customer_id = T2.customer_id WHERE T1.good_or_bad_customer = 'good' AND T2.amount_paid_in_full_yn = 'yes' AND T2.amount_due BETWEEN 100 AND 500 ORDER BY T1.first_name ASC LIMIT 10",extra
SELECT SUM(T1.amount_payable) FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id JOIN Customers AS T3 ON T2.customer_id = T3.customer_id JOIN Discount_Coupons AS T4 ON T3.coupon_id = T4.coupon_id,hard
"SELECT T1.first_name, T1.last_name FROM Customers AS T1 WHERE T1.customer_id = 123 OR T1.date_last_hire BETWEEN '2020-01-01' AND '2020-12-31' OR T1.good_or_bad_customer NOT IN (SELECT T2.good_or_bad_customer FROM Customers AS T2 WHERE T2.customer_id < 100) ORDER BY T1.customer_id ASC",extra
SELECT T1.coupon_amount AS coupon_amount FROM Discount_Coupons AS T1 WHERE T1.coupon_amount < 10 ORDER BY T1.coupon_amount ASC LIMIT 10,hard
SELECT T1.good_or_bad_customer FROM Customers AS T1 WHERE NOT EXISTS (SELECT 1 FROM Payments AS T2 WHERE T2.customer_id = T1.customer_id AND T2.amount_paid < 100) ORDER BY T1.first_name ASC,extra
"SELECT SUM(T1.amount_payable), AVG(T2.amount_paid) FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id WHERE T1.customer_id = 100 OR EXISTS (SELECT 1 FROM Customers AS T3 WHERE T3.good_or_bad_customer = 'good')",extra
SELECT T1.first_name FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id WHERE T2.amount_of_discount < (SELECT MAX(amount_of_discount) FROM Bookings) LIMIT 10,extra
SELECT SUM(T1.coupon_amount) FROM Discount_Coupons AS T1 WHERE T1.coupon_id IN (SELECT T2.coupon_id FROM Customers AS T2 GROUP BY T2.coupon_id HAVING COUNT(T2.coupon_id) = 1) ORDER BY T1.coupon_amount ASC,extra
SELECT T1.coupon_id FROM Discount_Coupons AS T1 WHERE T1.coupon_amount > 100 AND T1.date_issued > '2020-01-01',medium
"SELECT T1.first_name, T2.product_name FROM Customers AS T1 JOIN Bookings AS T3 ON T1.customer_id = T3.customer_id JOIN Products_Booked AS T4 ON T3.booking_id = T4.booking_id JOIN Products_for_Hire AS T2 ON T4.product_id = T2.product_id WHERE T3.booking_start_date <= '2022-01-01' ORDER BY T2.product_name ASC",extra
"SELECT COUNT(DISTINCT T1.customer_id), SUM(T1.amount_payable) FROM Bookings AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.good_or_bad_customer = 'good' AND T1.amount_payable BETWEEN 100 AND 500",hard
"SELECT T1.customer_id, SUM(T2.amount_paid) FROM Customers AS T1 JOIN Payments AS T2 ON T1.customer_id = T2.customer_id JOIN Bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.coupon_id = 1 OR T3.booking_status_code = 'A' OR T3.booking_start_date BETWEEN '2020-01-01' AND '2020-12-31'",extra
"SELECT COUNT(DISTINCT T1.coupon_id), COUNT(DISTINCT T2.customer_id), SUM(T1.coupon_amount) FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T1.date_issued < T2.date_last_hire OR T1.coupon_amount > 0 OR EXISTS (SELECT 1 FROM Payments AS T3 WHERE T3.customer_id = T2.customer_id) ORDER BY T1.coupon_amount ASC",extra
